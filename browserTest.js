(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactVersion
 */

'use strict';

module.exports = '16.0.0-alpha';
},{}],2:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentWithPureRenderMixin
 */

'use strict';

var shallowCompare = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\shallowCompare.js');

/**
 * If your React component's render function is "pure", e.g. it will render the
 * same result given the same props and state, provide this mixin for a
 * considerable performance boost.
 *
 * Most React components have pure render functions.
 *
 * Example:
 *
 *   var ReactComponentWithPureRenderMixin =
 *     require('ReactComponentWithPureRenderMixin');
 *   React.createClass({
 *     mixins: [ReactComponentWithPureRenderMixin],
 *
 *     render: function() {
 *       return <div className={this.props.className}>foo</div>;
 *     }
 *   });
 *
 * Note: This only checks shallow equality for props and state. If these contain
 * complex data structures this mixin may have false-negatives for deeper
 * differences. Only mixin to components which have simple props and state, or
 * use `forceUpdate()` when you know deep data structures have changed.
 *
 * See https://facebook.github.io/react/docs/pure-render-mixin.html
 */
var ReactComponentWithPureRenderMixin = { 
  shouldComponentUpdate: function (nextProps, nextState) {
    return shallowCompare(this, nextProps, nextState);} };



module.exports = ReactComponentWithPureRenderMixin;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\shallowCompare.js":14}],3:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactFragment
 */

'use strict';

var ReactChildren = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\ReactChildren.js');
var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');

var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * We used to allow keyed objects to serve as a collection of ReactElements,
 * or nested sets. This allowed us a way to explicitly key a set or fragment of
 * components. This is now being replaced with an opaque data structure.
 * The upgrade path is to call React.addons.createFragment({ key: value }) to
 * create a keyed fragment. The resulting data structure is an array.
 */

var numericPropertyRegex = /^\d+$/;

var warnedAboutNumeric = false;

var ReactFragment = { 
  /**
   * Wrap a keyed object in an opaque proxy that warns you if you access any
   * of its properties.
   * See https://facebook.github.io/react/docs/create-fragment.html
   */
  create: function (object) {
    if (typeof object !== 'object' || !object || Array.isArray(object)) {
      warning(
      false, 
      'React.addons.createFragment only accepts a single object. Got: %s', 
      object);

      return object;}

    if (ReactElement.isValidElement(object)) {
      warning(
      false, 
      'React.addons.createFragment does not accept a ReactElement ' + 
      'without a wrapper object.');

      return object;}


    invariant(
    object.nodeType !== 1, 
    'React.addons.createFragment(...): Encountered an invalid child; DOM ' + 
    'elements are not valid children of React components.');


    var result = [];

    for (var key in object) {
      if (__DEV__) {
        if (!warnedAboutNumeric && numericPropertyRegex.test(key)) {
          warning(
          false, 
          'React.addons.createFragment(...): Child objects should have ' + 
          'non-numeric keys so ordering is preserved.');

          warnedAboutNumeric = true;}}


      ReactChildren.mapIntoWithKeyPrefixInternal(
      object[key], 
      result, 
      key, 
      emptyFunction.thatReturnsArgument);}



    return result;} };



module.exports = ReactFragment;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\ReactChildren.js":26,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"fbjs/lib/emptyFunction":406,"fbjs/lib/invariant":414,"fbjs/lib/warning":424}],4:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactWithAddons
 */

'use strict';

var LinkedStateMixin = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\LinkedStateMixin.js');
var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactComponentWithPureRenderMixin = 
require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactComponentWithPureRenderMixin.js');
var ReactCSSTransitionGroup = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactCSSTransitionGroup.js');
var ReactFragment = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js');
var ReactTransitionGroup = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactTransitionGroup.js');

var shallowCompare = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\shallowCompare.js');
var update = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\update.js');

React.addons = { 
  CSSTransitionGroup: ReactCSSTransitionGroup, 
  LinkedStateMixin: LinkedStateMixin, 
  PureRenderMixin: ReactComponentWithPureRenderMixin, 
  TransitionGroup: ReactTransitionGroup, 

  createFragment: ReactFragment.create, 
  shallowCompare: shallowCompare, 
  update: update };


if (__DEV__) {
  React.addons.Perf = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactPerf.js');
  React.addons.TestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');}


module.exports = React;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactComponentWithPureRenderMixin.js":2,"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js":3,"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\LinkedStateMixin.js":9,"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\shallowCompare.js":14,"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactCSSTransitionGroup.js":15,"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactTransitionGroup.js":19,"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\update.js":23,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactPerf.js":208,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],5:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\addons\\__tests__\\ReactComponentWithPureRenderMixin-test.js';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var React;
var ReactComponentWithPureRenderMixin;
var ReactTestUtils;

describe('ReactComponentWithPureRenderMixin', function () {

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactComponentWithPureRenderMixin = 
    require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactComponentWithPureRenderMixin.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  it('provides a default shouldComponentUpdate implementation', function () {
    var renderCalls = 0;var 
    PlasticWrap = function (_React$Component) {_inherits(PlasticWrap, _React$Component);
      function PlasticWrap(props, context) {_classCallCheck(this, PlasticWrap);var _this = _possibleConstructorReturn(this, 
        _React$Component.call(this, props, context));
        _this.state = { 
          color: 'green' };return _this;}PlasticWrap.prototype.



      render = function render() {
        return (
          React.createElement(Apple, { 
            color: this.state.color, 
            ref: 'apple', __source: { fileName: _jsxFileName, lineNumber: 39 } }));};return PlasticWrap;}(React.Component);





    var Apple = React.createClass({ displayName: 'Apple', 
      mixins: [ReactComponentWithPureRenderMixin], 

      getInitialState: function () {
        return { 
          cut: false, 
          slices: 1 };}, 



      cut: function () {
        this.setState({ 
          cut: true, 
          slices: 10 });}, 



      eatSlice: function () {
        this.setState({ 
          slices: this.state.slices - 1 });}, 



      render: function () {
        renderCalls++;
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 72 } });} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(PlasticWrap, { __source: { fileName: _jsxFileName, lineNumber: 76 } }));
    expect(renderCalls).toBe(1);

    // Do not re-render based on props
    instance.setState({ color: 'green' });
    expect(renderCalls).toBe(1);

    // Re-render based on props
    instance.setState({ color: 'red' });
    expect(renderCalls).toBe(2);

    // Re-render base on state
    instance.refs.apple.cut();
    expect(renderCalls).toBe(3);

    // No re-render based on state
    instance.refs.apple.cut();
    expect(renderCalls).toBe(3);

    // Re-render based on state again
    instance.refs.apple.eatSlice();
    expect(renderCalls).toBe(4);});


  it('does not do a deep comparison', function () {
    function getInitialState() {
      return { 
        foo: [1, 2, 3], 
        bar: { a: 4, b: 5, c: 6 } };}



    var renderCalls = 0;
    var initialSettings = getInitialState();

    var Component = React.createClass({ displayName: 'Component', 
      mixins: [ReactComponentWithPureRenderMixin], 

      getInitialState: function () {
        return initialSettings;}, 


      render: function () {
        renderCalls++;
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 120 } });} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 124 } }));
    expect(renderCalls).toBe(1);

    // Do not re-render if state is equal
    var settings = { 
      foo: initialSettings.foo, 
      bar: initialSettings.bar };

    instance.setState(settings);
    expect(renderCalls).toBe(1);

    // Re-render because one field changed
    initialSettings.foo = [1, 2, 3];
    instance.setState(initialSettings);
    expect(renderCalls).toBe(2);

    // Re-render because the object changed
    instance.setState(getInitialState());
    expect(renderCalls).toBe(3);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactComponentWithPureRenderMixin.js":2,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],6:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\addons\\__tests__\\ReactFragment-test.js';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var React;
var ReactDOM;
var ReactFragment;

describe('ReactFragment', function () {

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactFragment = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js');});


  it('should throw if a plain object is used as a child', function () {
    var children = { 
      x: React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 28 } }), 
      y: React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 29 } }), 
      z: React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 30 } }) };

    var element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 32 } }, [children]);
    var container = document.createElement('div');
    expect(function () {return ReactDOM.render(element, container);}).toThrowError(
    'Objects are not valid as a React child (found: object with keys ' + 
    '{x, y, z}). If you meant to render a collection of children, use an ' + 
    'array instead or wrap the object using createFragment(object) from ' + 
    'the React add-ons.');});



  it('should throw if a plain object even if it is in an owner', function () {var 
    Foo = function (_React$Component) {_inherits(Foo, _React$Component);function Foo() {_classCallCheck(this, Foo);return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));}Foo.prototype.
      render = function render() {
        var children = { 
          a: React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 46 } }), 
          b: React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 47 } }), 
          c: React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 48 } }) };

        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 50 } }, [children]);};return Foo;}(React.Component);


    var container = document.createElement('div');
    expect(function () {return ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 54 } }), container);}).toThrowError(
    'Objects are not valid as a React child (found: object with keys ' + 
    '{a, b, c}). If you meant to render a collection of children, use an ' + 
    'array instead or wrap the object using createFragment(object) from ' + 
    'the React add-ons. Check the render method of `Foo`.');});



  it('should throw if a plain object looks like an old element', function () {
    var oldEl = { _isReactElement: true, type: 'span', props: {} };
    var container = document.createElement('div');
    expect(function () {return ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 65 } }, oldEl), container);}).toThrowError(
    'Objects are not valid as a React child (found: object with keys ' + 
    '{_isReactElement, type, props}). It looks like you\'re using an ' + 
    'element created by a different version of React. Make sure to use ' + 
    'only one copy of React.');});



  it('warns for numeric keys on objects as children', function () {
    spyOn(console, 'error');

    ReactFragment.create({ 1: React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 76 } }), 2: React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 76 } }) });

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Child objects should have non-numeric keys so ordering is preserved.');});



  it('should warn if passing null to createFragment', function () {
    spyOn(console, 'error');
    ReactFragment.create(null);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'React.addons.createFragment only accepts a single object.');});



  it('should warn if passing an array to createFragment', function () {
    spyOn(console, 'error');
    ReactFragment.create([]);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'React.addons.createFragment only accepts a single object.');});



  it('should warn if passing a ReactElement to createFragment', function () {
    spyOn(console, 'error');
    ReactFragment.create(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 104 } }));
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'React.addons.createFragment does not accept a ReactElement without a ' + 
    'wrapper object.');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js":3,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62}],7:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\addons\\__tests__\\renderSubtreeIntoContainer-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
var renderSubtreeIntoContainer = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\renderSubtreeIntoContainer.js');

describe('renderSubtreeIntoContainer', function () {

  it('should pass context when rendering subtree elsewhere', function () {

    var portal = document.createElement('div');

    var Component = React.createClass({ displayName: 'Component', 
      contextTypes: { 
        foo: React.PropTypes.string.isRequired }, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 30 } }, this.context.foo);} });



    var Parent = React.createClass({ displayName: 'Parent', 
      childContextTypes: { 
        foo: React.PropTypes.string.isRequired }, 


      getChildContext: function () {
        return { 
          foo: 'bar' };}, 



      render: function () {
        return null;}, 


      componentDidMount: function () {
        expect(function () {
          renderSubtreeIntoContainer(this, React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 51 } }), portal);}.
        bind(this)).not.toThrow();} });



    ReactTestUtils.renderIntoDocument(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 56 } }));
    expect(portal.firstChild.innerHTML).toBe('bar');});


  it('should throw if parentComponent is invalid', function () {
    var portal = document.createElement('div');

    var Component = React.createClass({ displayName: 'Component', 
      contextTypes: { 
        foo: React.PropTypes.string.isRequired }, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 69 } }, this.context.foo);} });



    var Parent = React.createClass({ displayName: 'Parent', 
      childContextTypes: { 
        foo: React.PropTypes.string.isRequired }, 


      getChildContext: function () {
        return { 
          foo: 'bar' };}, 



      render: function () {
        return null;}, 


      componentDidMount: function () {
        expect(function () {
          renderSubtreeIntoContainer(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 90 } }), React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 90 } }), portal);}).
        toThrowError('parentComponentmust be a valid React Component');} });});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\renderSubtreeIntoContainer.js":13,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],8:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var update = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\update.js');

describe('update', function () {

  describe('$push', function () {
    it('pushes', function () {
      expect(update([1], { $push: [7] })).toEqual([1, 7]);});

    it('does not mutate the original object', function () {
      var obj = [1];
      update(obj, { $push: [7] });
      expect(obj).toEqual([1]);});

    it('only pushes an array', function () {
      expect(update.bind(null, [], { $push: 7 })).toThrowError(
      'update(): expected spec of $push to be an array; got 7. Did you ' + 
      'forget to wrap your parameter in an array?');});


    it('only pushes unto an array', function () {
      expect(update.bind(null, 1, { $push: 7 })).toThrowError(
      'update(): expected target of $push to be an array; got 1.');});});




  describe('$unshift', function () {
    it('unshifts', function () {
      expect(update([1], { $unshift: [7] })).toEqual([7, 1]);});

    it('does not mutate the original object', function () {
      var obj = [1];
      update(obj, { $unshift: [7] });
      expect(obj).toEqual([1]);});

    it('only unshifts an array', function () {
      expect(update.bind(null, [], { $unshift: 7 })).toThrowError(
      'update(): expected spec of $unshift to be an array; got 7. Did you ' + 
      'forget to wrap your parameter in an array?');});


    it('only unshifts unto an array', function () {
      expect(update.bind(null, 1, { $unshift: 7 })).toThrowError(
      'update(): expected target of $unshift to be an array; got 1.');});});




  describe('$splice', function () {
    it('splices', function () {
      expect(update([1, 4, 3], { $splice: [[1, 1, 2]] })).toEqual([1, 2, 3]);});

    it('does not mutate the original object', function () {
      var obj = [1, 4, 3];
      update(obj, { $splice: [[1, 1, 2]] });
      expect(obj).toEqual([1, 4, 3]);});

    it('only splices an array of arrays', function () {
      expect(update.bind(null, [], { $splice: 1 })).toThrowError(
      'update(): expected spec of $splice to be an array of arrays; got 1. ' + 
      'Did you forget to wrap your parameters in an array?');

      expect(update.bind(null, [], { $splice: [1] })).toThrowError(
      'update(): expected spec of $splice to be an array of arrays; got 1. ' + 
      'Did you forget to wrap your parameters in an array?');});


    it('only splices unto an array', function () {
      expect(update.bind(null, 1, { $splice: 7 })).toThrowError(
      'Expected $splice target to be an array; got 1');});});




  describe('$merge', function () {
    it('merges', function () {
      expect(update({ a: 'b' }, { $merge: { c: 'd' } })).toEqual({ a: 'b', c: 'd' });});

    it('does not mutate the original object', function () {
      var obj = { a: 'b' };
      update(obj, { $merge: { c: 'd' } });
      expect(obj).toEqual({ a: 'b' });});

    it('only merges with an object', function () {
      expect(update.bind(null, {}, { $merge: 7 })).toThrowError(
      'update(): $merge expects a spec of type \'object\'; got 7');});


    it('only merges with an object', function () {
      expect(update.bind(null, 7, { $merge: { a: 'b' } })).toThrowError(
      'update(): $merge expects a target of type \'object\'; got 7');});});




  describe('$set', function () {
    it('sets', function () {
      expect(update({ a: 'b' }, { $set: { c: 'd' } })).toEqual({ c: 'd' });});

    it('does not mutate the original object', function () {
      var obj = { a: 'b' };
      update(obj, { $set: { c: 'd' } });
      expect(obj).toEqual({ a: 'b' });});});



  describe('$apply', function () {
    var applier = function (node) {
      return { v: node.v * 2 };};

    it('applies', function () {
      expect(update({ v: 2 }, { $apply: applier })).toEqual({ v: 4 });});

    it('does not mutate the original object', function () {
      var obj = { v: 2 };
      update(obj, { $apply: applier });
      expect(obj).toEqual({ v: 2 });});

    it('only applies a function', function () {
      expect(update.bind(null, 2, { $apply: 123 })).toThrowError(
      'update(): expected spec of $apply to be a function; got 123.');});});




  it('should support deep updates', function () {
    expect(update({ 
      a: 'b', 
      c: { 
        d: 'e', 
        f: [1], 
        g: [2], 
        h: [3], 
        i: { j: 'k' }, 
        l: 4 } }, 

    { 
      c: { 
        d: { $set: 'm' }, 
        f: { $push: [5] }, 
        g: { $unshift: [6] }, 
        h: { $splice: [[0, 1, 7]] }, 
        i: { $merge: { n: 'o' } }, 
        l: { $apply: function (x) {return x * 2;} } } })).

    toEqual({ 
      a: 'b', 
      c: { 
        d: 'm', 
        f: [1, 5], 
        g: [6, 2], 
        h: [7], 
        i: { j: 'k', n: 'o' }, 
        l: 8 } });});




  it('should require a command', function () {
    expect(update.bind(null, { a: 'b' }, { a: 'c' })).toThrowError(
    'update(): You provided a key path to update() that did not contain ' + 
    'one of $push, $unshift, $splice, $set, $merge, $apply. Did you ' + 
    'forget to include {$set: ...}?');});



  it('should perform safe hasOwnProperty check', function () {
    expect(update({}, { 'hasOwnProperty': { $set: 'a' } })).toEqual({ 
      'hasOwnProperty': 'a' });});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\update.js":23}],9:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedStateMixin
 */

'use strict';

var ReactLink = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\ReactLink.js');
var ReactStateSetters = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactStateSetters.js');

/**
 * A simple mixin around ReactLink.forState().
 * See https://facebook.github.io/react/docs/two-way-binding-helpers.html
 */
var LinkedStateMixin = { 
  /**
   * Create a ReactLink that's linked to part of this component's state. The
   * ReactLink will have the current value of this.state[key] and will call
   * setState() when a change is requested.
   *
   * @param {string} key state key to update. Note: you may want to use keyOf()
   * if you're using Google Closure Compiler advanced mode.
   * @return {ReactLink} ReactLink instance linking to the state.
   */
  linkState: function (key) {
    return new ReactLink(
    this.state[key], 
    ReactStateSetters.createStateKeySetter(this, key));} };




module.exports = LinkedStateMixin;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\ReactLink.js":10,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactStateSetters.js":253}],10:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLink
 */

'use strict';

/**
 * ReactLink encapsulates a common pattern in which a component wants to modify
 * a prop received from its parent. ReactLink allows the parent to pass down a
 * value coupled with a callback that, when invoked, expresses an intent to
 * modify that value. For example:
 *
 * React.createClass({
 *   getInitialState: function() {
 *     return {value: ''};
 *   },
 *   render: function() {
 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
 *     return <input valueLink={valueLink} />;
 *   },
 *   _handleValueChange: function(newValue) {
 *     this.setState({value: newValue});
 *   }
 * });
 *
 * We have provided some sugary mixins to make the creation and
 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
 */

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');

/**
 * Deprecated: An an easy way to express two-way binding with React. 
 * See https://facebook.github.io/react/docs/two-way-binding-helpers.html
 *
 * @param {*} value current value of the link
 * @param {function} requestChange callback to request a change
 */
function ReactLink(value, requestChange) {
  this.value = value;
  this.requestChange = requestChange;}


/**
 * Creates a PropType that enforces the ReactLink API and optionally checks the
 * type of the value being passed inside the link. Example:
 *
 * MyComponent.propTypes = {
 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
 * }
 */
function createLinkTypeChecker(linkType) {
  var shapes = { 
    value: linkType === undefined ? 
    React.PropTypes.any.isRequired : 
    linkType.isRequired, 
    requestChange: React.PropTypes.func.isRequired };

  return React.PropTypes.shape(shapes);}


ReactLink.PropTypes = { 
  link: createLinkTypeChecker };


module.exports = ReactLink;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25}],11:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\addons\\link\\__tests__\\LinkedStateMixin-test.js';


describe('LinkedStateMixin', function () {
  var LinkedStateMixin;
  var React;
  var ReactTestUtils;

  beforeEach(function () {
    LinkedStateMixin = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\LinkedStateMixin.js');
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  it('should create a ReactLink for state', function () {
    var Component = React.createClass({ displayName: 'Component', 
      mixins: [LinkedStateMixin], 

      getInitialState: function () {
        return { value: 'initial value' };}, 


      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 35 } }, 'value is ', this.state.value);} });


    var component = ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 38 } }));
    var link = component.linkState('value');
    expect(component.state.value).toBe('initial value');
    expect(link.value).toBe('initial value');
    link.requestChange('new value');
    expect(component.state.value).toBe('new value');
    expect(component.linkState('value').value).toBe('new value');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\LinkedStateMixin.js":9,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],12:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var emptyFunction = require('fbjs/lib/emptyFunction');
var LinkPropTypes = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\ReactLink.js').PropTypes;
var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactPropTypeLocations = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocations.js');

var invalidMessage = 'Invalid prop `testProp` supplied to `testComponent`.';
var requiredMessage = 
'Required prop `testProp` was not specified in `testComponent`.';

function typeCheckFail(declaration, value, message) {
  var props = { testProp: value };
  var error = declaration(
  props, 
  'testProp', 
  'testComponent', 
  ReactPropTypeLocations.prop);

  expect(error instanceof Error).toBe(true);
  expect(error.message).toBe(message);}


function typeCheckPass(declaration, value) {
  var props = { testProp: value };
  var error = declaration(
  props, 
  'testProp', 
  'testComponent', 
  ReactPropTypeLocations.prop);

  expect(error).toBe(null);}


describe('ReactLink', function () {
  it('should fail if the argument does not implement the Link API', function () {
    typeCheckFail(
    LinkPropTypes.link(React.PropTypes.any), 
    {}, 
    'Required prop `testProp.value` was not specified in `testComponent`.');

    typeCheckFail(
    LinkPropTypes.link(React.PropTypes.any), 
    { value: 123 }, 
    'Required prop `testProp.requestChange` was not specified in `testComponent`.');

    typeCheckFail(
    LinkPropTypes.link(React.PropTypes.any), 
    { requestChange: emptyFunction }, 
    'Required prop `testProp.value` was not specified in `testComponent`.');

    typeCheckFail(
    LinkPropTypes.link(React.PropTypes.any), 
    { value: null, requestChange: null }, 
    'Required prop `testProp.value` was not specified in `testComponent`.');});



  it('should allow valid links even if no type was specified', function () {
    typeCheckPass(
    LinkPropTypes.link(), 
    { value: 42, requestChange: emptyFunction });

    typeCheckPass(
    LinkPropTypes.link(), 
    { value: {}, requestChange: emptyFunction });});



  it('should allow no link to be passed at all', function () {
    typeCheckPass(
    LinkPropTypes.link(React.PropTypes.string), 
    undefined);});



  it('should allow valid links with correct value format', function () {
    typeCheckPass(
    LinkPropTypes.link(React.PropTypes.any), 
    { value: 42, requestChange: emptyFunction });

    typeCheckPass(
    LinkPropTypes.link(React.PropTypes.number), 
    { value: 42, requestChange: emptyFunction });

    typeCheckPass(
    LinkPropTypes.link(React.PropTypes.node), 
    { value: 42, requestChange: emptyFunction });});



  it('should fail if the link`s value type does not match', function () {
    typeCheckFail(
    LinkPropTypes.link(React.PropTypes.string), 
    { value: 123, requestChange: emptyFunction }, 
    'Invalid prop `testProp.value` of type `number` supplied to `testComponent`,' + 
    ' expected `string`.');});



  it('should be implicitly optional and not warn without values', function () {
    typeCheckPass(LinkPropTypes.link(), null);
    typeCheckPass(LinkPropTypes.link(), undefined);
    typeCheckPass(LinkPropTypes.link(React.PropTypes.string), null);
    typeCheckPass(LinkPropTypes.link(React.PropTypes.string), undefined);});


  it('should warn for missing required values', function () {
    typeCheckFail(LinkPropTypes.link().isRequired, null, requiredMessage);
    typeCheckFail(LinkPropTypes.link().isRequired, undefined, requiredMessage);
    typeCheckFail(
    LinkPropTypes.link(React.PropTypes.string).isRequired, 
    null, 
    requiredMessage);

    typeCheckFail(
    LinkPropTypes.link(React.PropTypes.string).isRequired, 
    undefined, 
    requiredMessage);});



  it('should be compatible with React.PropTypes.oneOfType', function () {
    typeCheckPass(
    React.PropTypes.oneOfType([LinkPropTypes.link(React.PropTypes.number)]), 
    { value: 123, requestChange: emptyFunction });

    typeCheckFail(
    React.PropTypes.oneOfType([LinkPropTypes.link(React.PropTypes.number)]), 
    123, 
    invalidMessage);

    typeCheckPass(
    LinkPropTypes.link(React.PropTypes.oneOfType([React.PropTypes.number])), 
    { value: 123, requestChange: emptyFunction });

    typeCheckFail(
    LinkPropTypes.link(React.PropTypes.oneOfType([React.PropTypes.number])), 
    { value: 'imastring', requestChange: emptyFunction }, 
    'Invalid prop `testProp.value` supplied to `testComponent`.');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\ReactLink.js":10,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocations.js":46,"fbjs/lib/emptyFunction":406}],13:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule renderSubtreeIntoContainer
*/

'use strict';

var ReactMount = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactMount.js');

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactMount.js":72}],14:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule shallowCompare
*/

'use strict';

var shallowEqual = require('fbjs/lib/shallowEqual');

/**
 * Does a shallow comparison for props and state.
 * See ReactComponentWithPureRenderMixin
 * See also https://facebook.github.io/react/docs/shallow-compare.html
 */
function shallowCompare(instance, nextProps, nextState) {
  return (
    !shallowEqual(instance.props, nextProps) || 
    !shallowEqual(instance.state, nextState));}



module.exports = shallowCompare;
},{"fbjs/lib/shallowEqual":423}],15:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCSSTransitionGroup
 */

'use strict';var _assign = require('object-assign');

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');

var ReactTransitionGroup = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactTransitionGroup.js');
var ReactCSSTransitionGroupChild = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactCSSTransitionGroupChild.js');

function createTransitionTimeoutPropValidator(transitionType) {
  var timeoutPropName = 'transition' + transitionType + 'Timeout';
  var enabledPropName = 'transition' + transitionType;

  return function (props) {
    // If the transition is enabled
    if (props[enabledPropName]) {
      // If no timeout duration is provided
      if (props[timeoutPropName] == null) {
        return new Error(
        timeoutPropName + ' wasn\'t supplied to ReactCSSTransitionGroup: ' + 
        'this can cause unreliable animations and won\'t be supported in ' + 
        'a future version of React. See ' + 
        'https://fb.me/react-animation-transition-group-timeout for more ' + 
        'information.');


        // If the duration isn't a number
      } else if (typeof props[timeoutPropName] !== 'number') {
          return new Error(timeoutPropName + ' must be a number (in milliseconds)');}}};}





/**
 * An easy way to perform CSS transitions and animations when a React component
 * enters or leaves the DOM.
 * See https://facebook.github.io/react/docs/animation.html#high-level-api-reactcsstransitiongroup
 */
var ReactCSSTransitionGroup = React.createClass({ 
  displayName: 'ReactCSSTransitionGroup', 

  propTypes: { 
    transitionName: ReactCSSTransitionGroupChild.propTypes.name, 

    transitionAppear: React.PropTypes.bool, 
    transitionEnter: React.PropTypes.bool, 
    transitionLeave: React.PropTypes.bool, 
    transitionAppearTimeout: createTransitionTimeoutPropValidator('Appear'), 
    transitionEnterTimeout: createTransitionTimeoutPropValidator('Enter'), 
    transitionLeaveTimeout: createTransitionTimeoutPropValidator('Leave') }, 


  getDefaultProps: function () {
    return { 
      transitionAppear: false, 
      transitionEnter: true, 
      transitionLeave: true };}, 



  _wrapChild: function (child) {
    // We need to provide this childFactory so that
    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
    // leave while it is leaving.
    return React.createElement(
    ReactCSSTransitionGroupChild, 
    { 
      name: this.props.transitionName, 
      appear: this.props.transitionAppear, 
      enter: this.props.transitionEnter, 
      leave: this.props.transitionLeave, 
      appearTimeout: this.props.transitionAppearTimeout, 
      enterTimeout: this.props.transitionEnterTimeout, 
      leaveTimeout: this.props.transitionLeaveTimeout }, 

    child);}, 



  render: function () {
    return React.createElement(
    ReactTransitionGroup, 
    _assign({}, this.props, { childFactory: this._wrapChild }));} });




module.exports = ReactCSSTransitionGroup;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactCSSTransitionGroupChild.js":16,"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactTransitionGroup.js":19,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"object-assign":425}],16:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCSSTransitionGroupChild
 */

'use strict';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');

var CSSCore = require('fbjs/lib/CSSCore');
var ReactTransitionEvents = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactTransitionEvents.js');

var onlyChild = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\onlyChild.js');

var TICK = 17;

var ReactCSSTransitionGroupChild = React.createClass({ 
  displayName: 'ReactCSSTransitionGroupChild', 

  propTypes: { 
    name: React.PropTypes.oneOfType([
    React.PropTypes.string, 
    React.PropTypes.shape({ 
      enter: React.PropTypes.string, 
      leave: React.PropTypes.string, 
      active: React.PropTypes.string }), 

    React.PropTypes.shape({ 
      enter: React.PropTypes.string, 
      enterActive: React.PropTypes.string, 
      leave: React.PropTypes.string, 
      leaveActive: React.PropTypes.string, 
      appear: React.PropTypes.string, 
      appearActive: React.PropTypes.string })]).

    isRequired, 

    // Once we require timeouts to be specified, we can remove the
    // boolean flags (appear etc.) and just accept a number
    // or a bool for the timeout flags (appearTimeout etc.)
    appear: React.PropTypes.bool, 
    enter: React.PropTypes.bool, 
    leave: React.PropTypes.bool, 
    appearTimeout: React.PropTypes.number, 
    enterTimeout: React.PropTypes.number, 
    leaveTimeout: React.PropTypes.number }, 


  transition: function (animationType, finishCallback, userSpecifiedDelay) {
    var node = ReactDOM.findDOMNode(this);

    if (!node) {
      if (finishCallback) {
        finishCallback();}

      return;}


    var className = this.props.name[animationType] || this.props.name + '-' + animationType;
    var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
    var timeout = null;

    var endListener = function (e) {
      if (e && e.target !== node) {
        return;}


      clearTimeout(timeout);

      CSSCore.removeClass(node, className);
      CSSCore.removeClass(node, activeClassName);

      ReactTransitionEvents.removeEndEventListener(node, endListener);

      // Usually this optional callback is used for informing an owner of
      // a leave animation and telling it to remove the child.
      if (finishCallback) {
        finishCallback();}};



    CSSCore.addClass(node, className);

    // Need to do this to actually trigger a transition.
    this.queueClass(activeClassName);

    // If the user specified a timeout delay.
    if (userSpecifiedDelay) {
      // Clean-up the animation after the specified delay
      timeout = setTimeout(endListener, userSpecifiedDelay);
      this.transitionTimeouts.push(timeout);} else 
    {
      // DEPRECATED: this listener will be removed in a future version of react
      ReactTransitionEvents.addEndEventListener(node, endListener);}}, 



  queueClass: function (className) {
    this.classNameQueue.push(className);

    if (!this.timeout) {
      this.timeout = setTimeout(this.flushClassNameQueue, TICK);}}, 



  flushClassNameQueue: function () {
    if (this.isMounted()) {
      this.classNameQueue.forEach(
      CSSCore.addClass.bind(CSSCore, ReactDOM.findDOMNode(this)));}


    this.classNameQueue.length = 0;
    this.timeout = null;}, 


  componentWillMount: function () {
    this.classNameQueue = [];
    this.transitionTimeouts = [];}, 


  componentWillUnmount: function () {
    if (this.timeout) {
      clearTimeout(this.timeout);}

    this.transitionTimeouts.forEach(function (timeout) {
      clearTimeout(timeout);});}, 



  componentWillAppear: function (done) {
    if (this.props.appear) {
      this.transition('appear', done, this.props.appearTimeout);} else 
    {
      done();}}, 



  componentWillEnter: function (done) {
    if (this.props.enter) {
      this.transition('enter', done, this.props.enterTimeout);} else 
    {
      done();}}, 



  componentWillLeave: function (done) {
    if (this.props.leave) {
      this.transition('leave', done, this.props.leaveTimeout);} else 
    {
      done();}}, 



  render: function () {
    return onlyChild(this.props.children);} });



module.exports = ReactCSSTransitionGroupChild;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactTransitionEvents.js":18,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\onlyChild.js":30,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"fbjs/lib/CSSCore":397}],17:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTransitionChildMapping
 */

'use strict';

var flattenChildren = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\flattenChildren.js');

var ReactTransitionChildMapping = { 
  /**
   * Given `this.props.children`, return an object mapping key to child. Just
   * simple syntactic sugar around flattenChildren().
   *
   * @param {*} children `this.props.children`
   * @param {number=} selfDebugID Optional debugID of the current internal instance.
   * @return {object} Mapping of key to child
   */
  getChildMapping: function (children, selfDebugID) {
    if (!children) {
      return children;}


    if (__DEV__) {
      return flattenChildren(children, selfDebugID);}


    return flattenChildren(children);}, 


  /**
   * When you're adding or removing children some may be added or removed in the
   * same render pass. We want to show *both* since we want to simultaneously
   * animate elements in and out. This function takes a previous set of keys
   * and a new set of keys and merges them with its best guess of the correct
   * ordering. In the future we may expose some of the utilities in
   * ReactMultiChild to make this easy, but for now React itself does not
   * directly have this concept of the union of prevChildren and nextChildren
   * so we implement it here.
   *
   * @param {object} prev prev children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @param {object} next next children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @return {object} a key set that contains all keys in `prev` and all keys
   * in `next` in a reasonable order.
   */
  mergeChildMappings: function (prev, next) {
    prev = prev || {};
    next = next || {};

    function getValueForKey(key) {
      if (next.hasOwnProperty(key)) {
        return next[key];} else 
      {
        return prev[key];}}



    // For each key of `next`, the list of keys to insert before that key in
    // the combined list
    var nextKeysPending = {};

    var pendingKeys = [];
    for (var prevKey in prev) {
      if (next.hasOwnProperty(prevKey)) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];}} else 

      {
        pendingKeys.push(prevKey);}}



    var i;
    var childMapping = {};
    for (var nextKey in next) {
      if (nextKeysPending.hasOwnProperty(nextKey)) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
          pendingNextKey);}}



      childMapping[nextKey] = getValueForKey(nextKey);}


    // Finally, add the keys which didn't appear before any key in `next`
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);}


    return childMapping;} };



module.exports = ReactTransitionChildMapping;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\flattenChildren.js":293}],18:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTransitionEvents
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getVendorPrefixedEventName = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getVendorPrefixedEventName.js');

var endEvents = [];

function detectEvents() {
  var animEnd = getVendorPrefixedEventName('animationend');
  var transEnd = getVendorPrefixedEventName('transitionend');

  if (animEnd) {
    endEvents.push(animEnd);}


  if (transEnd) {
    endEvents.push(transEnd);}}



if (ExecutionEnvironment.canUseDOM) {
  detectEvents();}


// We use the raw {add|remove}EventListener() call because EventListener
// does not know how to remove event listeners and we really should
// clean up. Also, these events are not triggered in older browsers
// so we should be A-OK here.

function addEventListener(node, eventName, eventListener) {
  node.addEventListener(eventName, eventListener, false);}


function removeEventListener(node, eventName, eventListener) {
  node.removeEventListener(eventName, eventListener, false);}


var ReactTransitionEvents = { 
  addEndEventListener: function (node, eventListener) {
    if (endEvents.length === 0) {
      // If CSS transitions are not supported, trigger an "end animation"
      // event immediately.
      window.setTimeout(eventListener, 0);
      return;}

    endEvents.forEach(function (endEvent) {
      addEventListener(node, endEvent, eventListener);});}, 



  removeEndEventListener: function (node, eventListener) {
    if (endEvents.length === 0) {
      return;}

    endEvents.forEach(function (endEvent) {
      removeEventListener(node, endEvent, eventListener);});} };




module.exports = ReactTransitionEvents;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getVendorPrefixedEventName.js":132,"fbjs/lib/ExecutionEnvironment":399}],19:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTransitionGroup
 */

'use strict';var _assign = require('object-assign');

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactInstanceMap = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js');
var ReactTransitionChildMapping = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactTransitionChildMapping.js');

var emptyFunction = require('fbjs/lib/emptyFunction');

/**
 * A basis for animations. When children are declaratively added or removed,
 * special lifecycle hooks are called.
 * See https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup
 */
var ReactTransitionGroup = React.createClass({ 
  displayName: 'ReactTransitionGroup', 

  propTypes: { 
    component: React.PropTypes.any, 
    childFactory: React.PropTypes.func }, 


  getDefaultProps: function () {
    return { 
      component: 'span', 
      childFactory: emptyFunction.thatReturnsArgument };}, 



  getInitialState: function () {
    return { 
      // TODO: can we get useful debug information to show at this point?
      children: ReactTransitionChildMapping.getChildMapping(this.props.children) };}, 



  componentWillMount: function () {
    this.currentlyTransitioningKeys = {};
    this.keysToEnter = [];
    this.keysToLeave = [];}, 


  componentDidMount: function () {
    var initialChildMapping = this.state.children;
    for (var key in initialChildMapping) {
      if (initialChildMapping[key]) {
        this.performAppear(key);}}}, 




  componentWillReceiveProps: function (nextProps) {
    var nextChildMapping;
    if (__DEV__) {
      nextChildMapping = ReactTransitionChildMapping.getChildMapping(
      nextProps.children, 
      ReactInstanceMap.get(this)._debugID);} else 

    {
      nextChildMapping = ReactTransitionChildMapping.getChildMapping(
      nextProps.children);}


    var prevChildMapping = this.state.children;

    this.setState({ 
      children: ReactTransitionChildMapping.mergeChildMappings(
      prevChildMapping, 
      nextChildMapping) });



    var key;

    for (key in nextChildMapping) {
      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
      if (nextChildMapping[key] && !hasPrev && 
      !this.currentlyTransitioningKeys[key]) {
        this.keysToEnter.push(key);}}



    for (key in prevChildMapping) {
      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
      if (prevChildMapping[key] && !hasNext && 
      !this.currentlyTransitioningKeys[key]) {
        this.keysToLeave.push(key);}}



    // If we want to someday check for reordering, we could do it here.
  }, 

  componentDidUpdate: function () {
    var keysToEnter = this.keysToEnter;
    this.keysToEnter = [];
    keysToEnter.forEach(this.performEnter);

    var keysToLeave = this.keysToLeave;
    this.keysToLeave = [];
    keysToLeave.forEach(this.performLeave);}, 


  performAppear: function (key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];

    if (component.componentWillAppear) {
      component.componentWillAppear(
      this._handleDoneAppearing.bind(this, key));} else 

    {
      this._handleDoneAppearing(key);}}, 



  _handleDoneAppearing: function (key) {
    var component = this.refs[key];
    if (component.componentDidAppear) {
      component.componentDidAppear();}


    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping;
    if (__DEV__) {
      currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children, 
      ReactInstanceMap.get(this)._debugID);} else 

    {
      currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children);}



    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
      // This was removed before it had fully appeared. Remove it.
      this.performLeave(key);}}, 



  performEnter: function (key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];

    if (component.componentWillEnter) {
      component.componentWillEnter(
      this._handleDoneEntering.bind(this, key));} else 

    {
      this._handleDoneEntering(key);}}, 



  _handleDoneEntering: function (key) {
    var component = this.refs[key];
    if (component.componentDidEnter) {
      component.componentDidEnter();}


    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping;
    if (__DEV__) {
      currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children, 
      ReactInstanceMap.get(this)._debugID);} else 

    {
      currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children);}



    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
      // This was removed before it had fully entered. Remove it.
      this.performLeave(key);}}, 



  performLeave: function (key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];
    if (component.componentWillLeave) {
      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));} else 
    {
      // Note that this is somewhat dangerous b/c it calls setState()
      // again, effectively mutating the component before all the work
      // is done.
      this._handleDoneLeaving(key);}}, 



  _handleDoneLeaving: function (key) {
    var component = this.refs[key];

    if (component.componentDidLeave) {
      component.componentDidLeave();}


    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping;
    if (__DEV__) {
      currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children, 
      ReactInstanceMap.get(this)._debugID);} else 

    {
      currentChildMapping = ReactTransitionChildMapping.getChildMapping(
      this.props.children);}



    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
      // This entered again before it fully left. Add it again.
      this.performEnter(key);} else 
    {
      this.setState(function (state) {
        var newChildren = _assign({}, state.children);
        delete newChildren[key];
        return { children: newChildren };});}}, 




  render: function () {
    // TODO: we could get rid of the need for the wrapper node
    // by cloning a single child
    var childrenToRender = [];
    for (var key in this.state.children) {
      var child = this.state.children[key];
      if (child) {
        // You may need to apply reactive updates to a child as it is leaving.
        // The normal React way to do it won't work since the child will have
        // already been removed. In case you need this behavior you can provide
        // a childFactory function to wrap every child, even the ones that are
        // leaving.
        childrenToRender.push(React.cloneElement(
        this.props.childFactory(child), 
        { ref: key, key: key }));}}




    // Do not forward ReactTransitionGroup props to primitive DOM nodes
    var props = _assign({}, this.props);
    delete props.transitionLeave;
    delete props.transitionName;
    delete props.transitionAppear;
    delete props.transitionEnter;
    delete props.childFactory;
    delete props.transitionLeaveTimeout;
    delete props.transitionEnterTimeout;
    delete props.component;

    return React.createElement(
    this.props.component, 
    props, 
    childrenToRender);} });




module.exports = ReactTransitionGroup;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactTransitionChildMapping.js":17,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js":246,"fbjs/lib/emptyFunction":406,"object-assign":425}],20:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\addons\\transitions\\__tests__\\ReactCSSTransitionGroup-test.js';

var CSSCore = require('fbjs/lib/CSSCore');

var React;
var ReactDOM;
var ReactCSSTransitionGroup;

// Most of the real functionality is covered in other unit tests, this just
// makes sure we're wired up correctly.
describe('ReactCSSTransitionGroup', function () {
  var container;

  beforeEach(function () {
    jest.resetModuleRegistry();
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactCSSTransitionGroup = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactCSSTransitionGroup.js');

    container = document.createElement('div');
    spyOn(console, 'error');});


  it('should warn if timeouts aren\'t specified', function () {
    ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { 
      transitionName: 'yolo', 
      transitionEnter: false, 
      transitionLeave: true, __source: { fileName: _jsxFileName, lineNumber: 37 } }, 

    React.createElement('span', { key: 'one', id: 'one', __source: { fileName: _jsxFileName, lineNumber: 42 } })), 

    container);


    // Warning about the missing transitionLeaveTimeout prop
    expect(console.error.calls.count()).toBe(1);});


  it('should not warn if timeouts is zero', function () {
    ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { 
      transitionName: 'yolo', 
      transitionEnter: false, 
      transitionLeave: true, 
      transitionLeaveTimeout: 0, __source: { fileName: _jsxFileName, lineNumber: 53 } }, 

    React.createElement('span', { key: 'one', id: 'one', __source: { fileName: _jsxFileName, lineNumber: 59 } })), 

    container);


    expect(console.error.calls.count()).toBe(0);});


  it('should clean-up silently after the timeout elapses', function () {
    var a = ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { 
      transitionName: 'yolo', 
      transitionEnter: false, 
      transitionLeaveTimeout: 200, __source: { fileName: _jsxFileName, lineNumber: 69 } }, 

    React.createElement('span', { key: 'one', id: 'one', __source: { fileName: _jsxFileName, lineNumber: 74 } })), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);

    setTimeout.mock.calls.length = 0;

    ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { 
      transitionName: 'yolo', 
      transitionEnter: false, 
      transitionLeaveTimeout: 200, __source: { fileName: _jsxFileName, lineNumber: 83 } }, 

    React.createElement('span', { key: 'two', id: 'two', __source: { fileName: _jsxFileName, lineNumber: 88 } })), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(2);
    expect(ReactDOM.findDOMNode(a).childNodes[0].id).toBe('two');
    expect(ReactDOM.findDOMNode(a).childNodes[1].id).toBe('one');

    // For some reason jst is adding extra setTimeout()s and grunt test isn't,
    // so we need to do this disgusting hack.
    for (var i = 0; i < setTimeout.mock.calls.length; i++) {
      if (setTimeout.mock.calls[i][1] === 200) {
        setTimeout.mock.calls[i][0]();
        break;}}



    // No warnings
    expect(console.error.calls.count()).toBe(0);

    // The leaving child has been removed
    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
    expect(ReactDOM.findDOMNode(a).childNodes[0].id).toBe('two');});


  it('should keep both sets of DOM nodes around', function () {
    var a = ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { transitionName: 'yolo', __source: { fileName: _jsxFileName, lineNumber: 115 } }, 
    React.createElement('span', { key: 'one', id: 'one', __source: { fileName: _jsxFileName, lineNumber: 116 } })), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
    ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { transitionName: 'yolo', __source: { fileName: _jsxFileName, lineNumber: 122 } }, 
    React.createElement('span', { key: 'two', id: 'two', __source: { fileName: _jsxFileName, lineNumber: 123 } })), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(2);
    expect(ReactDOM.findDOMNode(a).childNodes[0].id).toBe('two');
    expect(ReactDOM.findDOMNode(a).childNodes[1].id).toBe('one');});


  it('should switch transitionLeave from false to true', function () {
    var a = ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { 
      transitionName: 'yolo', 
      transitionEnter: false, 
      transitionLeave: false, __source: { fileName: _jsxFileName, lineNumber: 134 } }, 
    React.createElement('span', { key: 'one', id: 'one', __source: { fileName: _jsxFileName, lineNumber: 138 } })), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
    ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { 
      transitionName: 'yolo', 
      transitionEnter: false, 
      transitionLeave: false, __source: { fileName: _jsxFileName, lineNumber: 144 } }, 
    React.createElement('span', { key: 'two', id: 'two', __source: { fileName: _jsxFileName, lineNumber: 148 } })), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
    ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { 
      transitionName: 'yolo', 
      transitionEnter: false, 
      transitionLeave: true, __source: { fileName: _jsxFileName, lineNumber: 154 } }, 
    React.createElement('span', { key: 'three', id: 'three', __source: { fileName: _jsxFileName, lineNumber: 158 } })), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(2);
    expect(ReactDOM.findDOMNode(a).childNodes[0].id).toBe('three');
    expect(ReactDOM.findDOMNode(a).childNodes[1].id).toBe('two');});


  it('should work with no children', function () {
    ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { transitionName: 'yolo', __source: { fileName: _jsxFileName, lineNumber: 169 } }), 
    container);});



  it('should work with a null child', function () {
    ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { transitionName: 'yolo', __source: { fileName: _jsxFileName, lineNumber: 176 } }, 
    [null]), 

    container);});



  it('should transition from one to null', function () {
    var a = ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { transitionName: 'yolo', __source: { fileName: _jsxFileName, lineNumber: 185 } }, 
    React.createElement('span', { key: 'one', id: 'one', __source: { fileName: _jsxFileName, lineNumber: 186 } })), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
    ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { transitionName: 'yolo', __source: { fileName: _jsxFileName, lineNumber: 192 } }, 
    null), 

    container);

    // (Here, we expect the original child to stick around but test that no
    // exception is thrown)
    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
    expect(ReactDOM.findDOMNode(a).childNodes[0].id).toBe('one');});


  it('should transition from false to one', function () {
    var a = ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { transitionName: 'yolo', __source: { fileName: _jsxFileName, lineNumber: 205 } }, 
    false), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(0);
    ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { transitionName: 'yolo', __source: { fileName: _jsxFileName, lineNumber: 212 } }, 
    React.createElement('span', { key: 'one', id: 'one', __source: { fileName: _jsxFileName, lineNumber: 213 } })), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
    expect(ReactDOM.findDOMNode(a).childNodes[0].id).toBe('one');});


  it('should use transition-type specific names when they\'re provided', function () {
    var customTransitionNames = { 
      enter: 'custom-entering', 
      leave: 'custom-leaving' };


    var a = ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { 
      transitionName: customTransitionNames, 
      transitionEnterTimeout: 1, 
      transitionLeaveTimeout: 1, __source: { fileName: _jsxFileName, lineNumber: 228 } }, 

    React.createElement('span', { key: 'one', id: 'one', __source: { fileName: _jsxFileName, lineNumber: 233 } })), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);

    // Add an element
    ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { 
      transitionName: customTransitionNames, 
      transitionEnterTimeout: 1, 
      transitionLeaveTimeout: 1, __source: { fileName: _jsxFileName, lineNumber: 241 } }, 

    React.createElement('span', { key: 'one', id: 'one', __source: { fileName: _jsxFileName, lineNumber: 246 } }), 
    React.createElement('span', { key: 'two', id: 'two', __source: { fileName: _jsxFileName, lineNumber: 247 } })), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(2);

    var enteringNode = ReactDOM.findDOMNode(a).childNodes[1];
    expect(CSSCore.hasClass(enteringNode, 'custom-entering')).toBe(true);

    // Remove an element
    ReactDOM.render(
    React.createElement(ReactCSSTransitionGroup, { 
      transitionName: customTransitionNames, 
      transitionEnterTimeout: 1, 
      transitionLeaveTimeout: 1, __source: { fileName: _jsxFileName, lineNumber: 258 } }, 

    React.createElement('span', { key: 'two', id: 'two', __source: { fileName: _jsxFileName, lineNumber: 263 } })), 

    container);

    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(2);

    var leavingNode = ReactDOM.findDOMNode(a).childNodes[0];
    expect(CSSCore.hasClass(leavingNode, 'custom-leaving')).toBe(true);});


  it('should clear transition timeouts when unmounted', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return (
          React.createElement(ReactCSSTransitionGroup, { 
            transitionName: 'yolo', 
            transitionEnterTimeout: 500, __source: { fileName: _jsxFileName, lineNumber: 277 } }, 
          this.props.children));} });





    ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 286 } }), container);
    ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 287 } }, React.createElement('span', { key: 'yolo', id: 'yolo', __source: { fileName: _jsxFileName, lineNumber: 287 } })), container);

    ReactDOM.unmountComponentAtNode(container);

    // Testing that no exception is thrown here, as the timeout has been cleared.
    jest.runAllTimers();});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactCSSTransitionGroup.js":15,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"fbjs/lib/CSSCore":397}],21:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\addons\\transitions\\__tests__\\ReactTransitionChildMapping-test.js';

var React;
var ReactTransitionChildMapping;

describe('ReactTransitionChildMapping', function () {
  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactTransitionChildMapping = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactTransitionChildMapping.js');});


  it('should support getChildMapping', function () {
    var oneone = React.createElement('div', { key: 'oneone', __source: { fileName: _jsxFileName, lineNumber: 24 } });
    var onetwo = React.createElement('div', { key: 'onetwo', __source: { fileName: _jsxFileName, lineNumber: 25 } });
    var one = React.createElement('div', { key: 'one', __source: { fileName: _jsxFileName, lineNumber: 26 } }, oneone, onetwo);
    var two = React.createElement('div', { key: 'two', __source: { fileName: _jsxFileName, lineNumber: 27 } });
    var component = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 28 } }, one, two);
    expect(
    ReactTransitionChildMapping.getChildMapping(component.props.children)).
    toEqual({ 
      '.$one': one, 
      '.$two': two });});



  it('should support mergeChildMappings for adding keys', function () {
    var prev = { 
      one: true, 
      two: true };

    var next = { 
      one: true, 
      two: true, 
      three: true };

    expect(ReactTransitionChildMapping.mergeChildMappings(prev, next)).toEqual({ 
      one: true, 
      two: true, 
      three: true });});



  it('should support mergeChildMappings for removing keys', function () {
    var prev = { 
      one: true, 
      two: true, 
      three: true };

    var next = { 
      one: true, 
      two: true };

    expect(ReactTransitionChildMapping.mergeChildMappings(prev, next)).toEqual({ 
      one: true, 
      two: true, 
      three: true });});



  it('should support mergeChildMappings for adding and removing', function () {
    var prev = { 
      one: true, 
      two: true, 
      three: true };

    var next = { 
      one: true, 
      two: true, 
      four: true };

    expect(ReactTransitionChildMapping.mergeChildMappings(prev, next)).toEqual({ 
      one: true, 
      two: true, 
      three: true, 
      four: true });});



  it('should reconcile overlapping insertions and deletions', function () {
    var prev = { 
      one: true, 
      two: true, 
      four: true, 
      five: true };

    var next = { 
      one: true, 
      two: true, 
      three: true, 
      five: true };

    expect(ReactTransitionChildMapping.mergeChildMappings(prev, next)).toEqual({ 
      one: true, 
      two: true, 
      three: true, 
      four: true, 
      five: true });});



  it('should support mergeChildMappings with undefined input', function () {
    var prev = { 
      one: true, 
      two: true };


    var next = undefined;

    expect(ReactTransitionChildMapping.mergeChildMappings(prev, next)).toEqual({ 
      one: true, 
      two: true });


    prev = undefined;

    next = { 
      three: true, 
      four: true };


    expect(ReactTransitionChildMapping.mergeChildMappings(prev, next)).toEqual({ 
      three: true, 
      four: true });});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactTransitionChildMapping.js":17,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25}],22:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\addons\\transitions\\__tests__\\ReactTransitionGroup-test.js';

var React;
var ReactDOM;
var ReactTransitionGroup;

// Most of the real functionality is covered in other unit tests, this just
// makes sure we're wired up correctly.
describe('ReactTransitionGroup', function () {
  var container;

  function normalizeCodeLocInfo(str) {
    return str.replace(/\(at .+?:\d+\)/g, '(at **)');}


  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTransitionGroup = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactTransitionGroup.js');

    container = document.createElement('div');});



  it('should handle willEnter correctly', function () {
    var log = [];

    var Child = React.createClass({ displayName: 'Child', 
      componentDidMount: function () {
        log.push('didMount');}, 

      componentWillAppear: function (cb) {
        log.push('willAppear');
        cb();}, 

      componentDidAppear: function () {
        log.push('didAppear');}, 

      componentWillEnter: function (cb) {
        log.push('willEnter');
        cb();}, 

      componentDidEnter: function () {
        log.push('didEnter');}, 

      componentWillLeave: function (cb) {
        log.push('willLeave');
        cb();}, 

      componentDidLeave: function () {
        log.push('didLeave');}, 

      componentWillUnmount: function () {
        log.push('willUnmount');}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 68 } });} });



    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { count: 1 };}, 

      render: function () {
        var children = [];
        for (var i = 0; i < this.state.count; i++) {
          children.push(React.createElement(Child, { key: i, __source: { fileName: _jsxFileName, lineNumber: 79 } }));}

        return React.createElement(ReactTransitionGroup, { __source: { fileName: _jsxFileName, lineNumber: 81 } }, children);} });



    var instance = ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 85 } }), container);
    expect(log).toEqual(['didMount', 'willAppear', 'didAppear']);

    log = [];
    instance.setState({ count: 2 }, function () {
      expect(log).toEqual(['didMount', 'willEnter', 'didEnter']);

      log = [];
      instance.setState({ count: 1 }, function () {
        expect(log).toEqual(['willLeave', 'didLeave', 'willUnmount']);});});});




  it('should handle enter/leave/enter/leave correctly', function () {
    var log = [];
    var willEnterCb;

    var Child = React.createClass({ displayName: 'Child', 
      componentDidMount: function () {
        log.push('didMount');}, 

      componentWillEnter: function (cb) {
        log.push('willEnter');
        willEnterCb = cb;}, 

      componentDidEnter: function () {
        log.push('didEnter');}, 

      componentWillLeave: function (cb) {
        log.push('willLeave');
        cb();}, 

      componentDidLeave: function () {
        log.push('didLeave');}, 

      componentWillUnmount: function () {
        log.push('willUnmount');}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 125 } });} });



    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { count: 1 };}, 

      render: function () {
        var children = [];
        for (var i = 0; i < this.state.count; i++) {
          children.push(React.createElement(Child, { key: i, __source: { fileName: _jsxFileName, lineNumber: 136 } }));}

        return React.createElement(ReactTransitionGroup, { __source: { fileName: _jsxFileName, lineNumber: 138 } }, children);} });



    var instance = ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 142 } }), container);
    expect(log).toEqual(['didMount']);
    instance.setState({ count: 2 });
    expect(log).toEqual(['didMount', 'didMount', 'willEnter']);
    for (var k = 0; k < 5; k++) {
      instance.setState({ count: 2 });
      expect(log).toEqual(['didMount', 'didMount', 'willEnter']);
      instance.setState({ count: 1 });}

    // other animations are blocked until willEnterCb is called
    willEnterCb();
    expect(log).toEqual([
    'didMount', 'didMount', 'willEnter', 
    'didEnter', 'willLeave', 'didLeave', 'willUnmount']);});



  it('should handle enter/leave/enter correctly', function () {
    var log = [];
    var willEnterCb;

    var Child = React.createClass({ displayName: 'Child', 
      componentDidMount: function () {
        log.push('didMount');}, 

      componentWillEnter: function (cb) {
        log.push('willEnter');
        willEnterCb = cb;}, 

      componentDidEnter: function () {
        log.push('didEnter');}, 

      componentWillLeave: function (cb) {
        log.push('willLeave');
        cb();}, 

      componentDidLeave: function () {
        log.push('didLeave');}, 

      componentWillUnmount: function () {
        log.push('willUnmount');}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 185 } });} });



    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { count: 1 };}, 

      render: function () {
        var children = [];
        for (var i = 0; i < this.state.count; i++) {
          children.push(React.createElement(Child, { key: i, __source: { fileName: _jsxFileName, lineNumber: 196 } }));}

        return React.createElement(ReactTransitionGroup, { __source: { fileName: _jsxFileName, lineNumber: 198 } }, children);} });



    var instance = ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 202 } }), container);
    expect(log).toEqual(['didMount']);
    instance.setState({ count: 2 });
    expect(log).toEqual(['didMount', 'didMount', 'willEnter']);
    for (var k = 0; k < 5; k++) {
      instance.setState({ count: 1 });
      expect(log).toEqual(['didMount', 'didMount', 'willEnter']);
      instance.setState({ count: 2 });}

    willEnterCb();
    expect(log).toEqual([
    'didMount', 'didMount', 'willEnter', 'didEnter']);});



  it('should handle entering/leaving several elements at once', function () {
    var log = [];

    var Child = React.createClass({ displayName: 'Child', 
      componentDidMount: function () {
        log.push('didMount' + this.props.id);}, 

      componentWillEnter: function (cb) {
        log.push('willEnter' + this.props.id);
        cb();}, 

      componentDidEnter: function () {
        log.push('didEnter' + this.props.id);}, 

      componentWillLeave: function (cb) {
        log.push('willLeave' + this.props.id);
        cb();}, 

      componentDidLeave: function () {
        log.push('didLeave' + this.props.id);}, 

      componentWillUnmount: function () {
        log.push('willUnmount' + this.props.id);}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 242 } });} });



    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { count: 1 };}, 

      render: function () {
        var children = [];
        for (var i = 0; i < this.state.count; i++) {
          children.push(React.createElement(Child, { key: i, id: i, __source: { fileName: _jsxFileName, lineNumber: 253 } }));}

        return React.createElement(ReactTransitionGroup, { __source: { fileName: _jsxFileName, lineNumber: 255 } }, children);} });



    var instance = ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 259 } }), container);
    expect(log).toEqual(['didMount0']);
    log = [];

    instance.setState({ count: 3 });
    expect(log).toEqual([
    'didMount1', 'didMount2', 'willEnter1', 'didEnter1', 
    'willEnter2', 'didEnter2']);

    log = [];

    instance.setState({ count: 0 });
    expect(log).toEqual([
    'willLeave0', 'didLeave0', 'willLeave1', 'didLeave1', 
    'willLeave2', 'didLeave2', 'willUnmount0', 'willUnmount1', 'willUnmount2']);});



  it('should warn for duplicated keys with component stack info', function () {
    spyOn(console, 'error');

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        var children = [React.createElement('div', { key: '1', __source: { fileName: _jsxFileName, lineNumber: 282 } }), React.createElement('div', { key: '1', __source: { fileName: _jsxFileName, lineNumber: 282 } })];
        return React.createElement(ReactTransitionGroup, { __source: { fileName: _jsxFileName, lineNumber: 283 } }, children);} });



    ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 287 } }), container);

    expect(console.error.calls.count()).toBe(2);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: flattenChildren(...): ' + 
    'Encountered two children with the same key, `1`. ' + 
    'Child keys must be unique; when two children share a key, ' + 
    'only the first child will be used.');

    expect(normalizeCodeLocInfo(console.error.calls.argsFor(1)[0])).toBe(
    'Warning: flattenChildren(...): ' + 
    'Encountered two children with the same key, `1`. ' + 
    'Child keys must be unique; when two children share a key, ' + 
    'only the first child will be used.\n' + 
    '    in ReactTransitionGroup (at **)\n' + 
    '    in Component (at **)');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\transitions\\ReactTransitionGroup.js":19,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62}],23:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule update
 */

/* global hasOwnProperty:true */

'use strict';var _assign = require('object-assign');

var keyOf = require('fbjs/lib/keyOf');
var invariant = require('fbjs/lib/invariant');
var hasOwnProperty = {}.hasOwnProperty;

function shallowCopy(x) {
  if (Array.isArray(x)) {
    return x.concat();} else 
  if (x && typeof x === 'object') {
    return _assign(new x.constructor(), x);} else 
  {
    return x;}}



var COMMAND_PUSH = keyOf({ $push: null });
var COMMAND_UNSHIFT = keyOf({ $unshift: null });
var COMMAND_SPLICE = keyOf({ $splice: null });
var COMMAND_SET = keyOf({ $set: null });
var COMMAND_MERGE = keyOf({ $merge: null });
var COMMAND_APPLY = keyOf({ $apply: null });

var ALL_COMMANDS_LIST = [
COMMAND_PUSH, 
COMMAND_UNSHIFT, 
COMMAND_SPLICE, 
COMMAND_SET, 
COMMAND_MERGE, 
COMMAND_APPLY];


var ALL_COMMANDS_SET = {};

ALL_COMMANDS_LIST.forEach(function (command) {
  ALL_COMMANDS_SET[command] = true;});


function invariantArrayCase(value, spec, command) {
  invariant(
  Array.isArray(value), 
  'update(): expected target of %s to be an array; got %s.', 
  command, 
  value);

  var specValue = spec[command];
  invariant(
  Array.isArray(specValue), 
  'update(): expected spec of %s to be an array; got %s. ' + 
  'Did you forget to wrap your parameter in an array?', 
  command, 
  specValue);}



/**
 * Returns a updated shallow copy of an object without mutating the original.
 * See https://facebook.github.io/react/docs/update.html for details.
 */
function update(value, spec) {
  invariant(
  typeof spec === 'object', 
  'update(): You provided a key path to update() that did not contain one ' + 
  'of %s. Did you forget to include {%s: ...}?', 
  ALL_COMMANDS_LIST.join(', '), 
  COMMAND_SET);


  if (hasOwnProperty.call(spec, COMMAND_SET)) {
    invariant(
    Object.keys(spec).length === 1, 
    'Cannot have more than one key in an object with %s', 
    COMMAND_SET);


    return spec[COMMAND_SET];}


  var nextValue = shallowCopy(value);

  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
    var mergeObj = spec[COMMAND_MERGE];
    invariant(
    mergeObj && typeof mergeObj === 'object', 
    'update(): %s expects a spec of type \'object\'; got %s', 
    COMMAND_MERGE, 
    mergeObj);

    invariant(
    nextValue && typeof nextValue === 'object', 
    'update(): %s expects a target of type \'object\'; got %s', 
    COMMAND_MERGE, 
    nextValue);

    _assign(nextValue, spec[COMMAND_MERGE]);}


  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
    invariantArrayCase(value, spec, COMMAND_PUSH);
    spec[COMMAND_PUSH].forEach(function (item) {
      nextValue.push(item);});}



  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
    spec[COMMAND_UNSHIFT].forEach(function (item) {
      nextValue.unshift(item);});}



  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
    invariant(
    Array.isArray(value), 
    'Expected %s target to be an array; got %s', 
    COMMAND_SPLICE, 
    value);

    invariant(
    Array.isArray(spec[COMMAND_SPLICE]), 
    'update(): expected spec of %s to be an array of arrays; got %s. ' + 
    'Did you forget to wrap your parameters in an array?', 
    COMMAND_SPLICE, 
    spec[COMMAND_SPLICE]);

    spec[COMMAND_SPLICE].forEach(function (args) {
      invariant(
      Array.isArray(args), 
      'update(): expected spec of %s to be an array of arrays; got %s. ' + 
      'Did you forget to wrap your parameters in an array?', 
      COMMAND_SPLICE, 
      spec[COMMAND_SPLICE]);

      nextValue.splice.apply(nextValue, args);});}



  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
    invariant(
    typeof spec[COMMAND_APPLY] === 'function', 
    'update(): expected spec of %s to be a function; got %s.', 
    COMMAND_APPLY, 
    spec[COMMAND_APPLY]);

    nextValue = spec[COMMAND_APPLY](nextValue);}


  for (var k in spec) {
    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
      nextValue[k] = update(value[k], spec[k]);}}



  return nextValue;}


module.exports = update;
},{"fbjs/lib/invariant":414,"fbjs/lib/keyOf":418,"object-assign":425}],24:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\core\\__tests__\\ReactErrorBoundaries-test.js';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var React;
var ReactDOM;
var ReactDOMServer;

describe('ReactErrorBoundaries', function () {

  beforeEach(function () {
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');});


  it('does not register event handlers for unmounted children', function () {var 
    Angry = function (_React$Component) {_inherits(Angry, _React$Component);function Angry() {_classCallCheck(this, Angry);return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));}Angry.prototype.
      render = function render() {
        throw new Error('Please, do not render me.');};return Angry;}(React.Component);var 



    Boundary = function (_React$Component2) {_inherits(Boundary, _React$Component2);
      function Boundary(props) {_classCallCheck(this, Boundary);var _this2 = _possibleConstructorReturn(this, 
        _React$Component2.call(this, props));
        _this2.state = { error: false };return _this2;}Boundary.prototype.

      render = function render() {
        if (!this.state.error) {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 40 } }, React.createElement('button', { onClick: this.onClick, __source: { fileName: _jsxFileName, lineNumber: 40 } }, 'ClickMe'), React.createElement(Angry, { __source: { fileName: _jsxFileName, lineNumber: 40 } }));} else 
        {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 42 } }, 'Happy Birthday!');}};Boundary.prototype.


      onClick = function onClick() {
        /* do nothing */};Boundary.prototype.

      unstable_handleError = function unstable_handleError() {
        this.setState({ error: true });};return Boundary;}(React.Component);



    var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
    var container = document.createElement('div');
    EventPluginHub.putListener = jest.fn();
    ReactDOM.render(React.createElement(Boundary, { __source: { fileName: _jsxFileName, lineNumber: 56 } }), container);
    expect(EventPluginHub.putListener).not.toBeCalled();});


  it('renders an error state (ssr)', function () {var 
    Angry = function (_React$Component3) {_inherits(Angry, _React$Component3);function Angry() {_classCallCheck(this, Angry);return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));}Angry.prototype.
      render = function render() {
        throw new Error('Please, do not render me.');};return Angry;}(React.Component);var 



    Boundary = function (_React$Component4) {_inherits(Boundary, _React$Component4);
      function Boundary(props) {_classCallCheck(this, Boundary);var _this4 = _possibleConstructorReturn(this, 
        _React$Component4.call(this, props));
        _this4.state = { error: false };return _this4;}Boundary.prototype.

      render = function render() {
        if (!this.state.error) {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 74 } }, React.createElement('button', { onClick: this.onClick, __source: { fileName: _jsxFileName, lineNumber: 74 } }, 'ClickMe'), React.createElement(Angry, { __source: { fileName: _jsxFileName, lineNumber: 74 } }));} else 
        {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 76 } }, 'Happy Birthday!');}};Boundary.prototype.


      onClick = function onClick() {
        /* do nothing */};Boundary.prototype.

      unstable_handleError = function unstable_handleError() {
        this.setState({ error: true });};return Boundary;}(React.Component);



    var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
    var container = document.createElement('div');
    EventPluginHub.putListener = jest.fn();
    container.innerHTML = ReactDOMServer.renderToString(React.createElement(Boundary, { __source: { fileName: _jsxFileName, lineNumber: 90 } }));
    expect(container.firstChild.innerHTML).toBe('Happy Birthday!');
    expect(EventPluginHub.putListener).not.toBeCalled();});


  it('will catch exceptions in componentWillUnmount', function () {var 
    ErrorBoundary = function (_React$Component5) {_inherits(ErrorBoundary, _React$Component5);
      function ErrorBoundary() {_classCallCheck(this, ErrorBoundary);var _this5 = _possibleConstructorReturn(this, 
        _React$Component5.call(this));
        _this5.state = { error: false };return _this5;}ErrorBoundary.prototype.


      render = function render() {
        if (!this.state.error) {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 104 } }, this.props.children);}

        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 106 } }, 'Error has been caught');};ErrorBoundary.prototype.


      unstable_handleError = function unstable_handleError() {
        this.setState({ error: true });};return ErrorBoundary;}(React.Component);var 



    BrokenRender = function (_React$Component6) {_inherits(BrokenRender, _React$Component6);function BrokenRender() {_classCallCheck(this, BrokenRender);return _possibleConstructorReturn(this, _React$Component6.apply(this, arguments));}BrokenRender.prototype.
      render = function render() {
        throw new Error('Always broken.');};return BrokenRender;}(React.Component);var 



    BrokenUnmount = function (_React$Component7) {_inherits(BrokenUnmount, _React$Component7);function BrokenUnmount() {_classCallCheck(this, BrokenUnmount);return _possibleConstructorReturn(this, _React$Component7.apply(this, arguments));}BrokenUnmount.prototype.
      render = function render() {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 122 } });};BrokenUnmount.prototype.

      componentWillUnmount = function componentWillUnmount() {
        throw new Error('Always broken.');};return BrokenUnmount;}(React.Component);



    var container = document.createElement('div');
    ReactDOM.render(
    React.createElement(ErrorBoundary, { __source: { fileName: _jsxFileName, lineNumber: 131 } }, 
    React.createElement(BrokenUnmount, { __source: { fileName: _jsxFileName, lineNumber: 132 } }), 
    React.createElement(BrokenRender, { __source: { fileName: _jsxFileName, lineNumber: 133 } }), 
    React.createElement(BrokenUnmount, { __source: { fileName: _jsxFileName, lineNumber: 134 } })), 

    container);

    ReactDOM.unmountComponentAtNode(container);});


  it('expect uneventful render to succeed', function () {var 
    Boundary = function (_React$Component8) {_inherits(Boundary, _React$Component8);
      function Boundary(props) {_classCallCheck(this, Boundary);var _this8 = _possibleConstructorReturn(this, 
        _React$Component8.call(this, props));
        _this8.state = { error: false };return _this8;}Boundary.prototype.

      render = function render() {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 148 } }, React.createElement('button', { onClick: this.onClick, __source: { fileName: _jsxFileName, lineNumber: 148 } }, 'ClickMe'));};Boundary.prototype.

      onClick = function onClick() {
        /* do nothing */};Boundary.prototype.

      unstable_handleError = function unstable_handleError() {
        this.setState({ error: true });};return Boundary;}(React.Component);



    var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
    var container = document.createElement('div');
    EventPluginHub.putListener = jest.fn();
    ReactDOM.render(React.createElement(Boundary, { __source: { fileName: _jsxFileName, lineNumber: 161 } }), container);
    expect(EventPluginHub.putListener).toBeCalled();});


  it('correctly handles composite siblings', function () {var 
    ErrorBoundary = function (_React$Component9) {_inherits(ErrorBoundary, _React$Component9);
      function ErrorBoundary() {_classCallCheck(this, ErrorBoundary);var _this9 = _possibleConstructorReturn(this, 
        _React$Component9.call(this));
        _this9.state = { error: false };return _this9;}ErrorBoundary.prototype.


      render = function render() {
        if (!this.state.error) {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 174 } }, this.props.children);}

        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 176 } }, 'Error has been caught');};ErrorBoundary.prototype.


      unstable_handleError = function unstable_handleError() {
        this.setState({ error: true });};return ErrorBoundary;}(React.Component);



    function Broken() {
      throw new Error('Always broken.');}


    function Composite() {
      return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 189 } });}


    var container = document.createElement('div');
    ReactDOM.render(
    React.createElement(ErrorBoundary, { __source: { fileName: _jsxFileName, lineNumber: 194 } }, React.createElement(Broken, { __source: { fileName: _jsxFileName, lineNumber: 194 } }), React.createElement(Composite, { __source: { fileName: _jsxFileName, lineNumber: 194 } })), 
    container);

    ReactDOM.unmountComponentAtNode(container);});


  it('catches errors from children', function () {
    var log = [];var 

    Box = function (_React$Component10) {_inherits(Box, _React$Component10);
      function Box(props) {_classCallCheck(this, Box);var _this10 = _possibleConstructorReturn(this, 
        _React$Component10.call(this, props));
        _this10.state = { errorMessage: null };return _this10;}Box.prototype.

      render = function render() {
        if (this.state.errorMessage != null) {
          log.push('Box renderError');
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 211 } }, 'Error: ', this.state.errorMessage);}

        log.push('Box render');
        var ref = function (x) {
          log.push('Inquisitive ref ' + x);};

        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 218 } }, 
          React.createElement(Inquisitive, { ref: ref, __source: { fileName: _jsxFileName, lineNumber: 219 } }), 
          React.createElement(Angry, { __source: { fileName: _jsxFileName, lineNumber: 220 } })));};Box.prototype.



      unstable_handleError = function unstable_handleError(e) {
        this.setState({ errorMessage: e.message });};Box.prototype.

      componentDidMount = function componentDidMount() {
        log.push('Box componentDidMount');};Box.prototype.

      componentWillUnmount = function componentWillUnmount() {
        log.push('Box componentWillUnmount');};return Box;}(React.Component);var 



    Inquisitive = function (_React$Component11) {_inherits(Inquisitive, _React$Component11);function Inquisitive() {_classCallCheck(this, Inquisitive);return _possibleConstructorReturn(this, _React$Component11.apply(this, arguments));}Inquisitive.prototype.
      render = function render() {
        log.push('Inquisitive render');
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 238 } }, 'What is love?');};Inquisitive.prototype.

      componentDidMount = function componentDidMount() {
        log.push('Inquisitive componentDidMount');};Inquisitive.prototype.

      componentWillUnmount = function componentWillUnmount() {
        log.push('Inquisitive componentWillUnmount');};return Inquisitive;}(React.Component);var 



    Angry = function (_React$Component12) {_inherits(Angry, _React$Component12);function Angry() {_classCallCheck(this, Angry);return _possibleConstructorReturn(this, _React$Component12.apply(this, arguments));}Angry.prototype.
      render = function render() {
        log.push('Angry render');
        throw new Error('Please, do not render me.');};Angry.prototype.

      componentDidMount = function componentDidMount() {
        log.push('Angry componentDidMount');};Angry.prototype.

      componentWillUnmount = function componentWillUnmount() {
        log.push('Angry componentWillUnmount');};return Angry;}(React.Component);



    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Box, { __source: { fileName: _jsxFileName, lineNumber: 262 } }), container);
    expect(container.textContent).toBe('Error: Please, do not render me.');
    ReactDOM.unmountComponentAtNode(container);
    expect(log).toEqual([
    'Box render', 
    'Inquisitive render', 
    'Angry render', 
    'Inquisitive ref null', 
    'Inquisitive componentWillUnmount', 
    'Box renderError', 
    'Box componentDidMount', 
    'Box componentWillUnmount']);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227}],25:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

'use strict';var _assign = require('object-assign');

var ReactChildren = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\ReactChildren.js');
var ReactComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\modern\\class\\ReactComponent.js');
var ReactClass = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\class\\ReactClass.js');
var ReactDOMFactories = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactDOMFactories.js');
var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');
var ReactPropTypes = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypes.js');
var ReactVersion = require('f:\\GitHubRepos\\react\\browsertests\\src\\ReactVersion.js');

var onlyChild = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\onlyChild.js');
var warning = require('fbjs/lib/warning');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (__DEV__) {
  var ReactElementValidator = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElementValidator.js');
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;}


var __spread = _assign;

if (__DEV__) {
  var warned = false;
  __spread = function () {
    warning(
    warned, 
    'React.__spread is deprecated and should not be used. Use ' + 
    'Object.assign directly or another helper function with similar ' + 
    'semantics. You may be seeing this warning due to your compiler. ' + 
    'See https://fb.me/react-spread-deprecation for more details.');

    warned = true;
    return _assign.apply(null, arguments);};}



var React = { 

  // Modern

  Children: { 
    map: ReactChildren.map, 
    forEach: ReactChildren.forEach, 
    count: ReactChildren.count, 
    toArray: ReactChildren.toArray, 
    only: onlyChild }, 


  Component: ReactComponent, 

  createElement: createElement, 
  cloneElement: cloneElement, 
  isValidElement: ReactElement.isValidElement, 

  // Classic

  PropTypes: ReactPropTypes, 
  createClass: ReactClass.createClass, 
  createFactory: createFactory, 
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;}, 


  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories, 

  version: ReactVersion, 

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread };


module.exports = React;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\ReactVersion.js":1,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\ReactChildren.js":26,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\onlyChild.js":30,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\class\\ReactClass.js":33,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactDOMFactories.js":39,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElementValidator.js":41,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypes.js":47,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\modern\\class\\ReactComponent.js":50,"fbjs/lib/warning":424,"object-assign":425}],26:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js');
var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\traverseAllChildren.js');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;


var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');}



/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;}

ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;};

PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {var 
  func = bookKeeping.func;var context = bookKeeping.context;
  func.call(context, child, bookKeeping.count++);}


/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;}

  var traverseContext = 
  ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);}



/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;}

MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;};

PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {var 
  result = bookKeeping.result;var keyPrefix = bookKeeping.keyPrefix;var func = bookKeeping.func;var context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(
    mappedChild, 
    result, 
    childKey, 
    emptyFunction.thatReturnsArgument);} else 

  if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(
      mappedChild, 
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (

      mappedChild.key && (!child || child.key !== mappedChild.key) ? 
      escapeUserProvidedKey(mappedChild.key) + '/' : 
      '') + 

      childKey);}


    result.push(mappedChild);}}



function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';}

  var traverseContext = MapBookKeeping.getPooled(
  array, 
  escapedPrefix, 
  func, 
  context);

  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);}


/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;}

  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;}




function forEachSingleChildDummy(traverseContext, child, name) {
  return null;}


/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);}



/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(
  children, 
  result, 
  null, 
  emptyFunction.thatReturnsArgument);

  return result;}



var ReactChildren = { 
  forEach: forEachChildren, 
  map: mapChildren, 
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal, 
  count: countChildren, 
  toArray: toArray };


module.exports = ReactChildren;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js":277,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\traverseAllChildren.js":298,"fbjs/lib/emptyFunction":406}],27:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\children\\__tests__\\ReactChildren-test.js';

describe('ReactChildren', function () {
  var ReactChildren;
  var React;
  var ReactFragment;

  beforeEach(function () {
    ReactChildren = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\ReactChildren.js');
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactFragment = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js');});


  it('should support identity for simple', function () {
    var callback = jasmine.createSpy().and.callFake(function (kid, index) {
      return kid;});


    var simpleKid = React.createElement('span', { key: 'simple', __source: { fileName: _jsxFileName, lineNumber: 30 } });

    // First pass children into a component to fully simulate what happens when
    // using structures that arrive from transforms.

    var instance = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 35 } }, simpleKid);
    ReactChildren.forEach(instance.props.children, callback);
    expect(callback).toHaveBeenCalledWith(simpleKid, 0);
    callback.calls.reset();
    var mappedChildren = ReactChildren.map(instance.props.children, callback);
    expect(callback).toHaveBeenCalledWith(simpleKid, 0);
    expect(mappedChildren[0]).toEqual(React.createElement('span', { key: '.$simple', __source: { fileName: _jsxFileName, lineNumber: 41 } }));});


  it('should treat single arrayless child as being in array', function () {
    var callback = jasmine.createSpy().and.callFake(function (kid, index) {
      return kid;});


    var simpleKid = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 49 } });
    var instance = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 50 } }, simpleKid);
    ReactChildren.forEach(instance.props.children, callback);
    expect(callback).toHaveBeenCalledWith(simpleKid, 0);
    callback.calls.reset();
    var mappedChildren = ReactChildren.map(instance.props.children, callback);
    expect(callback).toHaveBeenCalledWith(simpleKid, 0);
    expect(mappedChildren[0]).toEqual(React.createElement('span', { key: '.0', __source: { fileName: _jsxFileName, lineNumber: 56 } }));});


  it('should treat single child in array as expected', function () {
    var callback = jasmine.createSpy().and.callFake(function (kid, index) {
      return kid;});


    var simpleKid = React.createElement('span', { key: 'simple', __source: { fileName: _jsxFileName, lineNumber: 64 } });
    var instance = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 65 } }, [simpleKid]);
    ReactChildren.forEach(instance.props.children, callback);
    expect(callback).toHaveBeenCalledWith(simpleKid, 0);
    callback.calls.reset();
    var mappedChildren = ReactChildren.map(instance.props.children, callback);
    expect(callback).toHaveBeenCalledWith(simpleKid, 0);
    expect(mappedChildren[0]).toEqual(React.createElement('span', { key: '.$simple', __source: { fileName: _jsxFileName, lineNumber: 71 } }));});



  it('should pass key to returned component', function () {
    var mapFn = function (kid, index) {
      return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 77 } }, kid);};


    var simpleKid = React.createElement('span', { key: 'simple', __source: { fileName: _jsxFileName, lineNumber: 80 } });

    var instance = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 82 } }, simpleKid);
    var mappedChildren = ReactChildren.map(instance.props.children, mapFn);

    expect(ReactChildren.count(mappedChildren)).toBe(1);
    expect(mappedChildren[0]).not.toBe(simpleKid);
    expect(mappedChildren[0].props.children).toBe(simpleKid);
    expect(mappedChildren[0].key).toBe('.$simple');});


  it('should invoke callback with the right context', function () {
    var lastContext;
    var callback = function (kid, index) {
      lastContext = this;
      return this;};


    // TODO: Use an object to test, after non-object fragments has fully landed.
    var scopeTester = 'scope tester';

    var simpleKid = React.createElement('span', { key: 'simple', __source: { fileName: _jsxFileName, lineNumber: 101 } });
    var instance = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 102 } }, simpleKid);
    ReactChildren.forEach(instance.props.children, callback, scopeTester);
    expect(lastContext).toBe(scopeTester);

    var mappedChildren = 
    ReactChildren.map(instance.props.children, callback, scopeTester);

    expect(ReactChildren.count(mappedChildren)).toBe(1);
    expect(mappedChildren[0]).toBe(scopeTester);});


  it('should be called for each child', function () {
    var zero = React.createElement('div', { key: 'keyZero', __source: { fileName: _jsxFileName, lineNumber: 114 } });
    var one = null;
    var two = React.createElement('div', { key: 'keyTwo', __source: { fileName: _jsxFileName, lineNumber: 116 } });
    var three = null;
    var four = React.createElement('div', { key: 'keyFour', __source: { fileName: _jsxFileName, lineNumber: 118 } });

    var mapped = [
    React.createElement('div', { key: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 121 } }), // Key should be joined to obj key
    null, // Key should be added even if we don't supply it!
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 123 } }), // Key should be added even if not supplied!
    React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 124 } }), // Map from null to something.
    React.createElement('div', { key: 'keyFour', __source: { fileName: _jsxFileName, lineNumber: 125 } })];

    var callback = jasmine.createSpy().and.callFake(function (kid, index) {
      return mapped[index];});


    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 132 } }, 
    zero, 
    one, 
    two, 
    three, 
    four);



    ReactChildren.forEach(instance.props.children, callback);
    expect(callback).toHaveBeenCalledWith(zero, 0);
    expect(callback).toHaveBeenCalledWith(one, 1);
    expect(callback).toHaveBeenCalledWith(two, 2);
    expect(callback).toHaveBeenCalledWith(three, 3);
    expect(callback).toHaveBeenCalledWith(four, 4);
    callback.calls.reset();

    var mappedChildren = 
    ReactChildren.map(instance.props.children, callback);
    expect(callback.calls.count()).toBe(5);
    expect(ReactChildren.count(mappedChildren)).toBe(4);
    // Keys default to indices.
    expect([
    mappedChildren[0].key, 
    mappedChildren[1].key, 
    mappedChildren[2].key, 
    mappedChildren[3].key]).
    toEqual(
    ['giraffe/.$keyZero', '.$keyTwo', '.3', '.$keyFour']);


    expect(callback).toHaveBeenCalledWith(zero, 0);
    expect(callback).toHaveBeenCalledWith(one, 1);
    expect(callback).toHaveBeenCalledWith(two, 2);
    expect(callback).toHaveBeenCalledWith(three, 3);
    expect(callback).toHaveBeenCalledWith(four, 4);

    expect(mappedChildren[0]).toEqual(React.createElement('div', { key: 'giraffe/.$keyZero', __source: { fileName: _jsxFileName, lineNumber: 169 } }));
    expect(mappedChildren[1]).toEqual(React.createElement('div', { key: '.$keyTwo', __source: { fileName: _jsxFileName, lineNumber: 170 } }));
    expect(mappedChildren[2]).toEqual(React.createElement('span', { key: '.3', __source: { fileName: _jsxFileName, lineNumber: 171 } }));
    expect(mappedChildren[3]).toEqual(React.createElement('div', { key: '.$keyFour', __source: { fileName: _jsxFileName, lineNumber: 172 } }));});


  it('should be called for each child in nested structure', function () {
    var zero = React.createElement('div', { key: 'keyZero', __source: { fileName: _jsxFileName, lineNumber: 176 } });
    var one = null;
    var two = React.createElement('div', { key: 'keyTwo', __source: { fileName: _jsxFileName, lineNumber: 178 } });
    var three = null;
    var four = React.createElement('div', { key: 'keyFour', __source: { fileName: _jsxFileName, lineNumber: 180 } });
    var five = React.createElement('div', { key: 'keyFiveInner', __source: { fileName: _jsxFileName, lineNumber: 181 } });
    // five is placed into a JS object with a key that is joined to the
    // component key attribute.
    // Precedence is as follows:
    // 1. If grouped in an Object, the object key combined with `key` prop
    // 2. If grouped in an Array, the `key` prop, falling back to array index

    var zeroMapped = React.createElement('div', { key: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 188 } }); // Key should be overridden
    var twoMapped = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 189 } }); // Key should be added even if not supplied!
    var fourMapped = React.createElement('div', { key: 'keyFour', __source: { fileName: _jsxFileName, lineNumber: 190 } });
    var fiveMapped = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 191 } });

    var callback = jasmine.createSpy().and.callFake(function (kid, index) {
      return index === 0 ? zeroMapped : 
      index === 1 ? twoMapped : 
      index === 2 ? fourMapped : fiveMapped;});


    var frag = ReactFragment.create({ 
      firstHalfKey: [zero, one, two], 
      secondHalfKey: [three, four], 
      keyFive: five });

    var instance = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 204 } }, [frag]);

    expect([
    frag[0].key, 
    frag[1].key, 
    frag[2].key, 
    frag[3].key]).
    toEqual([
    'firstHalfKey/.$keyZero', 
    'firstHalfKey/.$keyTwo', 
    'secondHalfKey/.$keyFour', 
    'keyFive/.$keyFiveInner']);


    ReactChildren.forEach(instance.props.children, callback);
    expect(callback.calls.count()).toBe(4);
    expect(callback).toHaveBeenCalledWith(frag[0], 0);
    expect(callback).toHaveBeenCalledWith(frag[1], 1);
    expect(callback).toHaveBeenCalledWith(frag[2], 2);
    expect(callback).toHaveBeenCalledWith(frag[3], 3);
    callback.calls.reset();

    var mappedChildren = ReactChildren.map(instance.props.children, callback);
    expect(callback.calls.count()).toBe(4);
    expect(callback).toHaveBeenCalledWith(frag[0], 0);
    expect(callback).toHaveBeenCalledWith(frag[1], 1);
    expect(callback).toHaveBeenCalledWith(frag[2], 2);
    expect(callback).toHaveBeenCalledWith(frag[3], 3);

    expect(ReactChildren.count(mappedChildren)).toBe(4);
    // Keys default to indices.
    expect([
    mappedChildren[0].key, 
    mappedChildren[1].key, 
    mappedChildren[2].key, 
    mappedChildren[3].key]).
    toEqual([
    'giraffe/.0:$firstHalfKey/.$keyZero', 
    '.0:$firstHalfKey/.$keyTwo', 
    'keyFour/.0:$secondHalfKey/.$keyFour', 
    '.0:$keyFive/.$keyFiveInner']);


    expect(mappedChildren[0]).toEqual(React.createElement('div', { key: 'giraffe/.0:$firstHalfKey/.$keyZero', __source: { fileName: _jsxFileName, lineNumber: 247 } }));
    expect(mappedChildren[1]).toEqual(React.createElement('div', { key: '.0:$firstHalfKey/.$keyTwo', __source: { fileName: _jsxFileName, lineNumber: 248 } }));
    expect(mappedChildren[2]).toEqual(React.createElement('div', { key: 'keyFour/.0:$secondHalfKey/.$keyFour', __source: { fileName: _jsxFileName, lineNumber: 249 } }));
    expect(mappedChildren[3]).toEqual(React.createElement('div', { key: '.0:$keyFive/.$keyFiveInner', __source: { fileName: _jsxFileName, lineNumber: 250 } }));});


  it('should retain key across two mappings', function () {
    var zeroForceKey = React.createElement('div', { key: 'keyZero', __source: { fileName: _jsxFileName, lineNumber: 254 } });
    var oneForceKey = React.createElement('div', { key: 'keyOne', __source: { fileName: _jsxFileName, lineNumber: 255 } });

    // Key should be joined to object key
    var zeroForceKeyMapped = React.createElement('div', { key: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 258 } });
    // Key should be added even if we don't supply it!
    var oneForceKeyMapped = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 260 } });

    var mapFn = function (kid, index) {
      return index === 0 ? zeroForceKeyMapped : oneForceKeyMapped;};


    var forcedKeys = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 267 } }, 
    zeroForceKey, 
    oneForceKey);



    var expectedForcedKeys = ['giraffe/.$keyZero', '.$keyOne'];
    var mappedChildrenForcedKeys = 
    ReactChildren.map(forcedKeys.props.children, mapFn);
    var mappedForcedKeys = mappedChildrenForcedKeys.map(function (c) {return c.key;});
    expect(mappedForcedKeys).toEqual(expectedForcedKeys);

    var expectedRemappedForcedKeys = [
    'giraffe/.$giraffe/.$keyZero', 
    '.$.$keyOne'];

    var remappedChildrenForcedKeys = 
    ReactChildren.map(mappedChildrenForcedKeys, mapFn);
    expect(
    remappedChildrenForcedKeys.map(function (c) {return c.key;})).
    toEqual(expectedRemappedForcedKeys);});



  it('should not throw if key provided is a dupe with array key', function () {
    var zero = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 292 } });
    var one = React.createElement('div', { key: '0', __source: { fileName: _jsxFileName, lineNumber: 293 } });

    var mapFn = function () {
      return null;};


    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 300 } }, 
    zero, 
    one);



    expect(function () {
      ReactChildren.map(instance.props.children, mapFn);}).
    not.toThrow();});


  it('should use the same key for a cloned element', function () {
    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 313 } }, 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 314 } }));



    var mapped = ReactChildren.map(
    instance.props.children, 
    function (element) {return element;});


    var mappedWithClone = ReactChildren.map(
    instance.props.children, 
    function (element) {return React.cloneElement(element);});


    expect(mapped[0].key).toBe(mappedWithClone[0].key);});


  it('should use the same key for a cloned element with key', function () {
    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 333 } }, 
    React.createElement('div', { key: 'unique', __source: { fileName: _jsxFileName, lineNumber: 334 } }));



    var mapped = ReactChildren.map(
    instance.props.children, 
    function (element) {return element;});


    var mappedWithClone = ReactChildren.map(
    instance.props.children, 
    function (element) {return React.cloneElement(element, { key: 'unique' });});


    expect(mapped[0].key).toBe(mappedWithClone[0].key);});


  it('should return 0 for null children', function () {
    var numberOfChildren = ReactChildren.count(null);
    expect(numberOfChildren).toBe(0);});


  it('should return 0 for undefined children', function () {
    var numberOfChildren = ReactChildren.count(undefined);
    expect(numberOfChildren).toBe(0);});


  it('should return 1 for single child', function () {
    var simpleKid = React.createElement('span', { key: 'simple', __source: { fileName: _jsxFileName, lineNumber: 362 } });
    var instance = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 363 } }, simpleKid);
    var numberOfChildren = ReactChildren.count(instance.props.children);
    expect(numberOfChildren).toBe(1);});


  it('should count the number of children in flat structure', function () {
    var zero = React.createElement('div', { key: 'keyZero', __source: { fileName: _jsxFileName, lineNumber: 369 } });
    var one = null;
    var two = React.createElement('div', { key: 'keyTwo', __source: { fileName: _jsxFileName, lineNumber: 371 } });
    var three = null;
    var four = React.createElement('div', { key: 'keyFour', __source: { fileName: _jsxFileName, lineNumber: 373 } });

    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 376 } }, 
    zero, 
    one, 
    two, 
    three, 
    four);


    var numberOfChildren = ReactChildren.count(instance.props.children);
    expect(numberOfChildren).toBe(5);});


  it('should count the number of children in nested structure', function () {
    var zero = React.createElement('div', { key: 'keyZero', __source: { fileName: _jsxFileName, lineNumber: 389 } });
    var one = null;
    var two = React.createElement('div', { key: 'keyTwo', __source: { fileName: _jsxFileName, lineNumber: 391 } });
    var three = null;
    var four = React.createElement('div', { key: 'keyFour', __source: { fileName: _jsxFileName, lineNumber: 393 } });
    var five = React.createElement('div', { key: 'keyFiveInner', __source: { fileName: _jsxFileName, lineNumber: 394 } });
    // five is placed into a JS object with a key that is joined to the
    // component key attribute.
    // Precedence is as follows:
    // 1. If grouped in an Object, the object key combined with `key` prop
    // 2. If grouped in an Array, the `key` prop, falling back to array index

    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 402 } }, 
    [
    ReactFragment.create({ 
      firstHalfKey: [zero, one, two], 
      secondHalfKey: [three, four], 
      keyFive: five }), 

    null]);



    var numberOfChildren = ReactChildren.count(instance.props.children);
    expect(numberOfChildren).toBe(5);});


  it('should flatten children to an array', function () {
    expect(ReactChildren.toArray(undefined)).toEqual([]);
    expect(ReactChildren.toArray(null)).toEqual([]);

    expect(ReactChildren.toArray(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 421 } })).length).toBe(1);
    expect(ReactChildren.toArray([React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 422 } })]).length).toBe(1);
    expect(
    ReactChildren.toArray(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 424 } }))[0].key).
    toBe(
    ReactChildren.toArray([React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 426 } })])[0].key);


    var flattened = ReactChildren.toArray([
    [React.createElement('div', { key: 'apple', __source: { fileName: _jsxFileName, lineNumber: 430 } }), React.createElement('div', { key: 'banana', __source: { fileName: _jsxFileName, lineNumber: 430 } }), React.createElement('div', { key: 'camel', __source: { fileName: _jsxFileName, lineNumber: 430 } })], 
    [React.createElement('div', { key: 'banana', __source: { fileName: _jsxFileName, lineNumber: 431 } }), React.createElement('div', { key: 'camel', __source: { fileName: _jsxFileName, lineNumber: 431 } }), React.createElement('div', { key: 'deli', __source: { fileName: _jsxFileName, lineNumber: 431 } })]]);

    expect(flattened.length).toBe(6);
    expect(flattened[1].key).toContain('banana');
    expect(flattened[3].key).toContain('banana');
    expect(flattened[1].key).not.toBe(flattened[3].key);

    var reversed = ReactChildren.toArray([
    [React.createElement('div', { key: 'camel', __source: { fileName: _jsxFileName, lineNumber: 439 } }), React.createElement('div', { key: 'banana', __source: { fileName: _jsxFileName, lineNumber: 439 } }), React.createElement('div', { key: 'apple', __source: { fileName: _jsxFileName, lineNumber: 439 } })], 
    [React.createElement('div', { key: 'deli', __source: { fileName: _jsxFileName, lineNumber: 440 } }), React.createElement('div', { key: 'camel', __source: { fileName: _jsxFileName, lineNumber: 440 } }), React.createElement('div', { key: 'banana', __source: { fileName: _jsxFileName, lineNumber: 440 } })]]);

    expect(flattened[0].key).toBe(reversed[2].key);
    expect(flattened[1].key).toBe(reversed[1].key);
    expect(flattened[2].key).toBe(reversed[0].key);
    expect(flattened[3].key).toBe(reversed[5].key);
    expect(flattened[4].key).toBe(reversed[4].key);
    expect(flattened[5].key).toBe(reversed[3].key);

    // null/undefined/bool are all omitted
    expect(ReactChildren.toArray([1, 'two', null, undefined, true])).toEqual(
    [1, 'two']);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js":3,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\ReactChildren.js":26}],28:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\children\\__tests__\\onlyChild-test.js';

describe('onlyChild', function () {

  var React;
  var ReactFragment;
  var onlyChild;
  var WrapComponent;

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactFragment = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js');
    onlyChild = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\onlyChild.js');
    WrapComponent = React.createClass({ displayName: 'WrapComponent', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 28 } }, 
          onlyChild(this.props.children, this.props.mapFn, this)));} });});






  it('should fail when passed two children', function () {
    expect(function () {
      var instance = 
      React.createElement(WrapComponent, { __source: { fileName: _jsxFileName, lineNumber: 39 } }, 
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 40 } }), 
      React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 41 } }));

      onlyChild(instance.props.children);}).
    toThrow();});


  it('should fail when passed nully values', function () {
    expect(function () {
      var instance = 
      React.createElement(WrapComponent, { __source: { fileName: _jsxFileName, lineNumber: 50 } }, 
      null);

      onlyChild(instance.props.children);}).
    toThrow();

    expect(function () {
      var instance = 
      React.createElement(WrapComponent, { __source: { fileName: _jsxFileName, lineNumber: 58 } }, 
      undefined);

      onlyChild(instance.props.children);}).
    toThrow();});


  it('should fail when key/value objects', function () {
    expect(function () {
      var instance = 
      React.createElement(WrapComponent, { __source: { fileName: _jsxFileName, lineNumber: 68 } }, 
      ReactFragment.create({ oneThing: React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 69 } }) }));

      onlyChild(instance.props.children);}).
    toThrow();});



  it('should not fail when passed interpolated single child', function () {
    expect(function () {
      var instance = 
      React.createElement(WrapComponent, { __source: { fileName: _jsxFileName, lineNumber: 79 } }, 
      React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 80 } }));

      onlyChild(instance.props.children);}).
    not.toThrow();});



  it('should return the only child', function () {
    expect(function () {
      var instance = 
      React.createElement(WrapComponent, { __source: { fileName: _jsxFileName, lineNumber: 90 } }, 
      React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 91 } }));

      onlyChild(instance.props.children);}).
    not.toThrow();});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js":3,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\onlyChild.js":30}],29:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\children\\__tests__\\sliceChildren-test.js';

describe('sliceChildren', function () {

  var React;

  var sliceChildren;

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');

    sliceChildren = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\sliceChildren.js');});


  it('should render the whole set if start zero is supplied', function () {
    var fullSet = [
    React.createElement('div', { key: 'A', __source: { fileName: _jsxFileName, lineNumber: 28 } }), 
    React.createElement('div', { key: 'B', __source: { fileName: _jsxFileName, lineNumber: 29 } }), 
    React.createElement('div', { key: 'C', __source: { fileName: _jsxFileName, lineNumber: 30 } })];

    var children = sliceChildren(fullSet, 0);
    expect(children).toEqual([
    React.createElement('div', { key: '.$A', __source: { fileName: _jsxFileName, lineNumber: 34 } }), 
    React.createElement('div', { key: '.$B', __source: { fileName: _jsxFileName, lineNumber: 35 } }), 
    React.createElement('div', { key: '.$C', __source: { fileName: _jsxFileName, lineNumber: 36 } })]);});



  it('should render the remaining set if no end index is supplied', function () {
    var fullSet = [
    React.createElement('div', { key: 'A', __source: { fileName: _jsxFileName, lineNumber: 42 } }), 
    React.createElement('div', { key: 'B', __source: { fileName: _jsxFileName, lineNumber: 43 } }), 
    React.createElement('div', { key: 'C', __source: { fileName: _jsxFileName, lineNumber: 44 } })];

    var children = sliceChildren(fullSet, 1);
    expect(children).toEqual([
    React.createElement('div', { key: '.$B', __source: { fileName: _jsxFileName, lineNumber: 48 } }), 
    React.createElement('div', { key: '.$C', __source: { fileName: _jsxFileName, lineNumber: 49 } })]);});



  it('should exclude everything at or after the end index', function () {
    var fullSet = [
    React.createElement('div', { key: 'A', __source: { fileName: _jsxFileName, lineNumber: 55 } }), 
    React.createElement('div', { key: 'B', __source: { fileName: _jsxFileName, lineNumber: 56 } }), 
    React.createElement('div', { key: 'C', __source: { fileName: _jsxFileName, lineNumber: 57 } }), 
    React.createElement('div', { key: 'D', __source: { fileName: _jsxFileName, lineNumber: 58 } })];

    var children = sliceChildren(fullSet, 1, 2);
    expect(children).toEqual([
    React.createElement('div', { key: '.$B', __source: { fileName: _jsxFileName, lineNumber: 62 } })]);});



  it('should allow static children to be sliced', function () {
    var a = React.createElement('a', { __source: { fileName: _jsxFileName, lineNumber: 67 } });
    var b = React.createElement('b', { __source: { fileName: _jsxFileName, lineNumber: 68 } });
    var c = React.createElement('i', { __source: { fileName: _jsxFileName, lineNumber: 69 } });

    var el = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 71 } }, a, b, c);
    var children = sliceChildren(el.props.children, 1, 2);
    expect(children).toEqual([
    React.createElement('b', { key: '.1', __source: { fileName: _jsxFileName, lineNumber: 74 } })]);});



  it('should slice nested children', function () {
    var fullSet = [
    React.createElement('div', { key: 'A', __source: { fileName: _jsxFileName, lineNumber: 80 } }), 
    [
    React.createElement('div', { key: 'B', __source: { fileName: _jsxFileName, lineNumber: 82 } }), 
    React.createElement('div', { key: 'C', __source: { fileName: _jsxFileName, lineNumber: 83 } })], 

    React.createElement('div', { key: 'D', __source: { fileName: _jsxFileName, lineNumber: 85 } })];

    var children = sliceChildren(fullSet, 1, 2);
    expect(children).toEqual([
    React.createElement('div', { key: '.1:$B', __source: { fileName: _jsxFileName, lineNumber: 89 } })]);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\sliceChildren.js":31}],30:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  invariant(
  ReactElement.isValidElement(children), 
  'onlyChild must be passed a children with exactly one child.');

  return children;}


module.exports = onlyChild;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"fbjs/lib/invariant":414}],31:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule sliceChildren
 */

'use strict';

var ReactChildren = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\ReactChildren.js');

/**
 * Slice children that are typically specified as `props.children`. This version
 * of slice children ignores empty child components.
 *
 * @param {*} children The children set to filter.
 * @param {number} start The first zero-based index to include in the subset.
 * @param {?number} end The non-inclusive last index of the subset.
 * @return {object} mirrored array with mapped children
 */
function sliceChildren(children, start, end) {
  if (children == null) {
    return children;}


  var array = ReactChildren.toArray(children);
  return array.slice(start, end);}


module.exports = sliceChildren;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\ReactChildren.js":26}],32:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

// This test doesn't really have a good home yet. I'm leaving it here since this
// behavior belongs to the old propTypes system yet is currently implemented
// in the core ReactCompositeComponent. It should technically live in core's
// test suite but I'll leave it here to indicate that this is an issue that
// needs to be fixed.

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\classic\\__tests__\\ReactContextValidator-test.js';

var React;
var ReactDOM;
var ReactTestUtils;

var reactComponentExpect;

describe('ReactContextValidator', function () {
  function normalizeCodeLocInfo(str) {
    return str.replace(/\(at .+?:\d+\)/g, '(at **)');}


  beforeEach(function () {
    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    reactComponentExpect = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js');});


  // TODO: This behavior creates a runtime dependency on propTypes. We should
  // ensure that this is not required for ES6 classes with Flow.

  it('should filter out context not in contextTypes', function () {
    var Component = React.createClass({ displayName: 'Component', 
      contextTypes: { 
        foo: React.PropTypes.string }, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 50 } });} });



    var ComponentInFooBarContext = React.createClass({ displayName: 'ComponentInFooBarContext', 
      childContextTypes: { 
        foo: React.PropTypes.string, 
        bar: React.PropTypes.number }, 


      getChildContext: function () {
        return { 
          foo: 'abc', 
          bar: 123 };}, 



      render: function () {
        return React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 68 } });} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(ComponentInFooBarContext, { __source: { fileName: _jsxFileName, lineNumber: 72 } }));
    reactComponentExpect(instance).expectRenderedChild().scalarContextEqual({ foo: 'abc' });});


  it('should filter context properly in callbacks', function () {
    var actualComponentWillReceiveProps;
    var actualShouldComponentUpdate;
    var actualComponentWillUpdate;
    var actualComponentDidUpdate;

    var Parent = React.createClass({ displayName: 'Parent', 
      childContextTypes: { 
        foo: React.PropTypes.string.isRequired, 
        bar: React.PropTypes.string.isRequired }, 


      getChildContext: function () {
        return { 
          foo: this.props.foo, 
          bar: 'bar' };}, 



      render: function () {
        return React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 96 } });} });



    var Component = React.createClass({ displayName: 'Component', 
      contextTypes: { 
        foo: React.PropTypes.string }, 


      componentWillReceiveProps: function (nextProps, nextContext) {
        actualComponentWillReceiveProps = nextContext;
        return true;}, 


      shouldComponentUpdate: function (nextProps, nextState, nextContext) {
        actualShouldComponentUpdate = nextContext;
        return true;}, 


      componentWillUpdate: function (nextProps, nextState, nextContext) {
        actualComponentWillUpdate = nextContext;}, 


      componentDidUpdate: function (prevProps, prevState, prevContext) {
        actualComponentDidUpdate = prevContext;}, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 124 } });} });



    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Parent, { foo: 'abc', __source: { fileName: _jsxFileName, lineNumber: 129 } }), container);
    ReactDOM.render(React.createElement(Parent, { foo: 'def', __source: { fileName: _jsxFileName, lineNumber: 130 } }), container);
    expect(actualComponentWillReceiveProps).toEqual({ foo: 'def' });
    expect(actualShouldComponentUpdate).toEqual({ foo: 'def' });
    expect(actualComponentWillUpdate).toEqual({ foo: 'def' });
    expect(actualComponentDidUpdate).toEqual({ foo: 'abc' });});


  it('should check context types', function () {
    spyOn(console, 'error');

    var Component = React.createClass({ displayName: 'Component', 
      contextTypes: { 
        foo: React.PropTypes.string.isRequired }, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 146 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 150 } }));

    expect(console.error.calls.count()).toBe(1);
    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
    'Warning: Failed context type: ' + 
    'Required context `foo` was not specified in `Component`.\n' + 
    '    in Component (at **)');


    var ComponentInFooStringContext = React.createClass({ displayName: 'ComponentInFooStringContext', 
      childContextTypes: { 
        foo: React.PropTypes.string }, 


      getChildContext: function () {
        return { 
          foo: this.props.fooValue };}, 



      render: function () {
        return React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 171 } });} });



    ReactTestUtils.renderIntoDocument(
    React.createElement(ComponentInFooStringContext, { fooValue: 'bar', __source: { fileName: _jsxFileName, lineNumber: 176 } }));


    // Previous call should not error
    expect(console.error.calls.count()).toBe(1);

    var ComponentInFooNumberContext = React.createClass({ displayName: 'ComponentInFooNumberContext', 
      childContextTypes: { 
        foo: React.PropTypes.number }, 


      getChildContext: function () {
        return { 
          foo: this.props.fooValue };}, 



      render: function () {
        return React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 194 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(ComponentInFooNumberContext, { fooValue: 123, __source: { fileName: _jsxFileName, lineNumber: 198 } }));

    expect(console.error.calls.count()).toBe(2);
    expect(normalizeCodeLocInfo(console.error.calls.argsFor(1)[0])).toBe(
    'Warning: Failed context type: ' + 
    'Invalid context `foo` of type `number` supplied ' + 
    'to `Component`, expected `string`.\n' + 
    '    in Component (at **)\n' + 
    '    in ComponentInFooNumberContext (at **)');});



  it('should check child context types', function () {
    spyOn(console, 'error');

    var Component = React.createClass({ displayName: 'Component', 
      childContextTypes: { 
        foo: React.PropTypes.string.isRequired, 
        bar: React.PropTypes.number }, 


      getChildContext: function () {
        return this.props.testContext;}, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 224 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(Component, { testContext: { bar: 123 }, __source: { fileName: _jsxFileName, lineNumber: 228 } }));
    expect(console.error.calls.count()).toBe(1);
    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
    'Warning: Failed childContext type: ' + 
    'Required child context `foo` was not specified in `Component`.\n' + 
    '    in Component (at **)');


    ReactTestUtils.renderIntoDocument(React.createElement(Component, { testContext: { foo: 123 }, __source: { fileName: _jsxFileName, lineNumber: 236 } }));

    expect(console.error.calls.count()).toBe(2);
    expect(normalizeCodeLocInfo(console.error.calls.argsFor(1)[0])).toBe(
    'Warning: Failed childContext type: ' + 
    'Invalid child context `foo` of type `number` ' + 
    'supplied to `Component`, expected `string`.\n' + 
    '    in Component (at **)');


    ReactTestUtils.renderIntoDocument(
    React.createElement(Component, { testContext: { foo: 'foo', bar: 123 }, __source: { fileName: _jsxFileName, lineNumber: 247 } }));


    ReactTestUtils.renderIntoDocument(
    React.createElement(Component, { testContext: { foo: 'foo' }, __source: { fileName: _jsxFileName, lineNumber: 251 } }));


    // Previous calls should not log errors
    expect(console.error.calls.count()).toBe(2);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js":306}],33:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';var _assign = require('object-assign');

var ReactComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\modern\\class\\ReactComponent.js');
var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');
var ReactPropTypeLocations = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocations.js');
var ReactPropTypeLocationNames = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocationNames.js');
var ReactNoopUpdateQueue = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\modern\\class\\ReactNoopUpdateQueue.js');

var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var keyMirror = require('fbjs/lib/keyMirror');
var keyOf = require('fbjs/lib/keyOf');
var warning = require('fbjs/lib/warning');

var MIXINS_KEY = keyOf({ mixins: null });

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({ 
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null, 
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null, 
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null, 
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null });



var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or host components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = { 

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY, 

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY, 

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY, 

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY, 

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY, 

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED, 

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED, 

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED, 

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE, 



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY, 

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY, 

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY, 

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE, 

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY, 

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY, 

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY, 



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE };



/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = { 
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;}, 

  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);}}}, 



  childContextTypes: function (Constructor, childContextTypes) {
    if (__DEV__) {
      validateTypeDef(
      Constructor, 
      childContextTypes, 
      ReactPropTypeLocations.childContext);}


    Constructor.childContextTypes = _assign(
    {}, 
    Constructor.childContextTypes, 
    childContextTypes);}, 


  contextTypes: function (Constructor, contextTypes) {
    if (__DEV__) {
      validateTypeDef(
      Constructor, 
      contextTypes, 
      ReactPropTypeLocations.context);}


    Constructor.contextTypes = _assign(
    {}, 
    Constructor.contextTypes, 
    contextTypes);}, 


  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
      Constructor.getDefaultProps, 
      getDefaultProps);} else 

    {
      Constructor.getDefaultProps = getDefaultProps;}}, 


  propTypes: function (Constructor, propTypes) {
    if (__DEV__) {
      validateTypeDef(
      Constructor, 
      propTypes, 
      ReactPropTypeLocations.prop);}


    Constructor.propTypes = _assign(
    {}, 
    Constructor.propTypes, 
    propTypes);}, 


  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);}, 

  autobind: function () {} }; // noop


function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but only in __DEV__
      warning(
      typeof typeDef[propName] === 'function', 
      '%s: %s type `%s` is invalid; it must be a function, usually from ' + 
      'React.PropTypes.', 
      Constructor.displayName || 'ReactClass', 
      ReactPropTypeLocationNames[location], 
      propName);}}}





function validateMethodOverride(isAlreadyDefined, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? 
  ReactClassInterface[name] : 
  null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    invariant(
    specPolicy === SpecPolicy.OVERRIDE_BASE, 
    'ReactClassInterface: You are attempting to override ' + 
    '`%s` from your class specification. Ensure that your method names ' + 
    'do not overlap with React methods.', 
    name);}



  // Disallow defining methods more than once unless explicitly allowed.
  if (isAlreadyDefined) {
    invariant(
    specPolicy === SpecPolicy.DEFINE_MANY || 
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED, 
    'ReactClassInterface: You are attempting to define ' + 
    '`%s` on your component more than once. This conflict may be due ' + 
    'to a mixin.', 
    name);}}




/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classes.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;}


  invariant(
  typeof spec !== 'function', 
  'ReactClass: You\'re attempting to ' + 
  'use a component class or function as a mixin. Instead, just use a ' + 
  'regular object.');

  invariant(
  !ReactElement.isValidElement(spec), 
  'ReactClass: You\'re attempting to ' + 
  'use a component as a mixin. Instead, just use a regular object.');


  var proto = Constructor.prototype;
  var autoBindPairs = proto.__reactAutoBindPairs;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);}


  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;}


    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;}


    var property = spec[name];
    var isAlreadyDefined = proto.hasOwnProperty(name);
    validateMethodOverride(isAlreadyDefined, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);} else 
    {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = 
      ReactClassInterface.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = 
      isFunction && 
      !isReactClassMethod && 
      !isAlreadyDefined && 
      spec.autobind !== false;

      if (shouldAutoBind) {
        autoBindPairs.push(name, property);
        proto[name] = property;} else 
      {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          invariant(
          isReactClassMethod && (
          specPolicy === SpecPolicy.DEFINE_MANY_MERGED || 
          specPolicy === SpecPolicy.DEFINE_MANY), 

          'ReactClass: Unexpected spec policy %s for key %s ' + 
          'when mixing in component specs.', 
          specPolicy, 
          name);


          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);} else 
          if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);}} else 

        {
          proto[name] = property;
          if (__DEV__) {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;}}}}}}}








function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;}

  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;}


    var isReserved = name in RESERVED_SPEC_KEYS;
    invariant(
    !isReserved, 
    'ReactClass: You are attempting to define a reserved ' + 
    'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 
    'as an instance property instead; it will still be accessible on the ' + 
    'constructor.', 
    name);


    var isInherited = name in Constructor;
    invariant(
    !isInherited, 
    'ReactClass: You are attempting to define ' + 
    '`%s` on your component more than once. This conflict may be ' + 
    'due to a mixin.', 
    name);

    Constructor[name] = property;}}



/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  invariant(
  one && two && typeof one === 'object' && typeof two === 'object', 
  'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');


  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      invariant(
      one[key] === undefined, 
      'mergeIntoWithNoDuplicateKeys(): ' + 
      'Tried to merge two objects with the same key: `%s`. This conflict ' + 
      'may be due to a mixin; in particular, this may be caused by two ' + 
      'getInitialState() or getDefaultProps() methods returning objects ' + 
      'with clashing keys.', 
      key);

      one[key] = two[key];}}


  return one;}


/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;} else 
    if (b == null) {
      return a;}

    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;};}



/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);};}



/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (__DEV__) {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    boundMethod.bind = function (newThis) {for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {args[_key - 1] = arguments[_key];}
      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        warning(
        false, 
        'bind(): React component methods may only be bound to the ' + 
        'component instance. See %s', 
        componentName);} else 

      if (!args.length) {
        warning(
        false, 
        'bind(): You are binding a component method to the component. ' + 
        'React does this for you automatically in a high-performance ' + 
        'way, so you can safely remove this call. See %s', 
        componentName);

        return boundMethod;}

      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;};}


  return boundMethod;}


/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  var pairs = component.__reactAutoBindPairs;
  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];
    var method = pairs[i + 1];
    component[autoBindKey] = bindAutoBindMethod(
    component, 
    method);}}




/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = { 

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'replaceState');}}, 



  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);} };



var ReactClassComponent = function () {};
_assign(
ReactClassComponent.prototype, 
ReactComponent.prototype, 
ReactClassMixin);


/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = { 

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    var Constructor = function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (__DEV__) {
        warning(
        this instanceof Constructor, 
        'Something is calling a React component directly. Use a factory or ' + 
        'JSX instead. See: https://fb.me/react-legacyfactory');}



      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);}


      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (__DEV__) {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && 
        this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;}}


      invariant(
      typeof initialState === 'object' && !Array.isArray(initialState), 
      '%s.getInitialState(): must return an object or null', 
      Constructor.displayName || 'ReactCompositeComponent');


      this.state = initialState;};

    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(
    mixSpecIntoComponent.bind(null, Constructor));


    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();}


    if (__DEV__) {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};}

      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};}}



    invariant(
    Constructor.prototype.render, 
    'createClass(...): Class specification must implement a `render` method.');


    if (__DEV__) {
      warning(
      !Constructor.prototype.componentShouldUpdate, 
      '%s has a method called ' + 
      'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 
      'The name is phrased as a question because the function is ' + 
      'expected to return a value.', 
      spec.displayName || 'A component');

      warning(
      !Constructor.prototype.componentWillRecieveProps, 
      '%s has a method called ' + 
      'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', 
      spec.displayName || 'A component');}



    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;}}



    return Constructor;}, 


  injection: { 
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);} } };





module.exports = ReactClass;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocationNames.js":45,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocations.js":46,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\modern\\class\\ReactComponent.js":50,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\modern\\class\\ReactNoopUpdateQueue.js":51,"fbjs/lib/emptyObject":407,"fbjs/lib/invariant":414,"fbjs/lib/keyMirror":417,"fbjs/lib/keyOf":418,"fbjs/lib/warning":424,"object-assign":425}],34:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */
/*global global:true*/
'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\classic\\class\\__tests__\\ReactBind-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
var reactComponentExpect = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js');

// TODO: Test render and all stock methods.
describe('autobinding', function () {

  it('Holds reference to instance', function () {

    var mouseDidEnter = jest.fn();
    var mouseDidLeave = jest.fn();
    var mouseDidClick = jest.fn();

    var TestBindComponent = React.createClass({ displayName: 'TestBindComponent', 
      getInitialState: function () {
        return { something: 'hi' };}, 

      onMouseEnter: mouseDidEnter, 
      onMouseLeave: mouseDidLeave, 
      onClick: mouseDidClick, 

      // auto binding only occurs on top level functions in class defs.
      badIdeas: { 
        badBind: function () {
          void this.state.something;} }, 



      render: function () {
        return (
          React.createElement('div', { 
            onMouseOver: this.onMouseEnter, 
            onMouseOut: this.onMouseLeave, 
            onClick: this.onClick, __source: { fileName: _jsxFileName, lineNumber: 44 } }));} });





    var instance1 = React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 53 } });
    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);
    var rendered1 = reactComponentExpect(mountedInstance1).
    expectRenderedChild().
    instance();

    var instance2 = React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 59 } });
    var mountedInstance2 = ReactTestUtils.renderIntoDocument(instance2);
    var rendered2 = reactComponentExpect(mountedInstance2).
    expectRenderedChild().
    instance();

    expect(function () {
      var badIdea = instance1.badIdeas.badBind;
      badIdea();}).
    toThrow();

    expect(mountedInstance1.onClick).not.toBe(mountedInstance2.onClick);

    ReactTestUtils.Simulate.click(rendered1);
    expect(mouseDidClick.mock.instances.length).toBe(1);
    expect(mouseDidClick.mock.instances[0]).toBe(mountedInstance1);

    ReactTestUtils.Simulate.click(rendered2);
    expect(mouseDidClick.mock.instances.length).toBe(2);
    expect(mouseDidClick.mock.instances[1]).toBe(mountedInstance2);

    ReactTestUtils.Simulate.mouseOver(rendered1);
    expect(mouseDidEnter.mock.instances.length).toBe(1);
    expect(mouseDidEnter.mock.instances[0]).toBe(mountedInstance1);

    ReactTestUtils.Simulate.mouseOver(rendered2);
    expect(mouseDidEnter.mock.instances.length).toBe(2);
    expect(mouseDidEnter.mock.instances[1]).toBe(mountedInstance2);

    ReactTestUtils.Simulate.mouseOut(rendered1);
    expect(mouseDidLeave.mock.instances.length).toBe(1);
    expect(mouseDidLeave.mock.instances[0]).toBe(mountedInstance1);

    ReactTestUtils.Simulate.mouseOut(rendered2);
    expect(mouseDidLeave.mock.instances.length).toBe(2);
    expect(mouseDidLeave.mock.instances[1]).toBe(mountedInstance2);});


  it('works with mixins', function () {
    var mouseDidClick = jest.fn();

    var TestMixin = { 
      onClick: mouseDidClick };


    var TestBindComponent = React.createClass({ displayName: 'TestBindComponent', 
      mixins: [TestMixin], 

      render: function () {
        return React.createElement('div', { onClick: this.onClick, __source: { fileName: _jsxFileName, lineNumber: 108 } });} });



    var instance1 = React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 112 } });
    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);
    var rendered1 = reactComponentExpect(mountedInstance1).
    expectRenderedChild().
    instance();

    ReactTestUtils.Simulate.click(rendered1);
    expect(mouseDidClick.mock.instances.length).toBe(1);
    expect(mouseDidClick.mock.instances[0]).toBe(mountedInstance1);});


  it('warns if you try to bind to this', function () {
    spyOn(console, 'error');

    var TestBindComponent = React.createClass({ displayName: 'TestBindComponent', 
      handleClick: function () {}, 
      render: function () {
        return React.createElement('div', { onClick: this.handleClick.bind(this), __source: { fileName: _jsxFileName, lineNumber: 129 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 133 } }));

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: bind(): You are binding a component method to the component. ' + 
    'React does this for you automatically in a high-performance ' + 
    'way, so you can safely remove this call. See TestBindComponent');});



  it('does not warn if you pass an auto-bound method to setState', function () {
    spyOn(console, 'error');

    var TestBindComponent = React.createClass({ displayName: 'TestBindComponent', 
      getInitialState: function () {
        return { foo: 1 };}, 

      componentDidMount: function () {
        this.setState({ foo: 2 }, this.handleUpdate);}, 

      handleUpdate: function () {}, 


      render: function () {
        return React.createElement('div', { onClick: this.handleClick, __source: { fileName: _jsxFileName, lineNumber: 157 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 161 } }));

    expect(console.error.calls.count()).toBe(0);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js":306}],35:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */
/*global global:true*/
'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\classic\\class\\__tests__\\ReactBindOptout-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
var reactComponentExpect = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js');

// TODO: Test render and all stock methods.
describe('autobind optout', function () {

  it('should work with manual binding', function () {

    var mouseDidEnter = jest.fn();
    var mouseDidLeave = jest.fn();
    var mouseDidClick = jest.fn();

    var TestBindComponent = React.createClass({ displayName: 'TestBindComponent', 
      autobind: false, 
      getInitialState: function () {
        return { something: 'hi' };}, 

      onMouseEnter: mouseDidEnter, 
      onMouseLeave: mouseDidLeave, 
      onClick: mouseDidClick, 

      render: function () {
        return (
          React.createElement('div', { 
            onMouseOver: this.onMouseEnter.bind(this), 
            onMouseOut: this.onMouseLeave.bind(this), 
            onClick: this.onClick.bind(this), __source: { fileName: _jsxFileName, lineNumber: 38 } }));} });





    var instance1 = React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 47 } });
    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);
    var rendered1 = reactComponentExpect(mountedInstance1).
    expectRenderedChild().
    instance();

    var instance2 = React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 53 } });
    var mountedInstance2 = ReactTestUtils.renderIntoDocument(instance2);
    var rendered2 = reactComponentExpect(mountedInstance2).
    expectRenderedChild().
    instance();

    ReactTestUtils.Simulate.click(rendered1);
    expect(mouseDidClick.mock.instances.length).toBe(1);
    expect(mouseDidClick.mock.instances[0]).toBe(mountedInstance1);

    ReactTestUtils.Simulate.click(rendered2);
    expect(mouseDidClick.mock.instances.length).toBe(2);
    expect(mouseDidClick.mock.instances[1]).toBe(mountedInstance2);

    ReactTestUtils.Simulate.mouseOver(rendered1);
    expect(mouseDidEnter.mock.instances.length).toBe(1);
    expect(mouseDidEnter.mock.instances[0]).toBe(mountedInstance1);

    ReactTestUtils.Simulate.mouseOver(rendered2);
    expect(mouseDidEnter.mock.instances.length).toBe(2);
    expect(mouseDidEnter.mock.instances[1]).toBe(mountedInstance2);

    ReactTestUtils.Simulate.mouseOut(rendered1);
    expect(mouseDidLeave.mock.instances.length).toBe(1);
    expect(mouseDidLeave.mock.instances[0]).toBe(mountedInstance1);

    ReactTestUtils.Simulate.mouseOut(rendered2);
    expect(mouseDidLeave.mock.instances.length).toBe(2);
    expect(mouseDidLeave.mock.instances[1]).toBe(mountedInstance2);});


  it('should not hold reference to instance', function () {
    var mouseDidClick = function () {
      void this.state.something;};


    var TestBindComponent = React.createClass({ displayName: 'TestBindComponent', 
      autobind: false, 
      getInitialState: function () {
        return { something: 'hi' };}, 

      onClick: mouseDidClick, 

      // auto binding only occurs on top level functions in class defs.
      badIdeas: { 
        badBind: function () {
          void this.state.something;} }, 



      render: function () {
        return (
          React.createElement('div', { 
            onClick: this.onClick, __source: { fileName: _jsxFileName, lineNumber: 105 } }));} });





    var instance1 = React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 112 } });
    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);
    var rendered1 = reactComponentExpect(mountedInstance1).
    expectRenderedChild().
    instance();

    var instance2 = React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 118 } });
    var mountedInstance2 = ReactTestUtils.renderIntoDocument(instance2);
    var rendered2 = reactComponentExpect(mountedInstance2).
    expectRenderedChild().
    instance();

    expect(function () {
      var badIdea = instance1.badIdeas.badBind;
      badIdea();}).
    toThrow();

    expect(mountedInstance1.onClick).toBe(mountedInstance2.onClick);

    expect(function () {
      ReactTestUtils.Simulate.click(rendered1);}).
    toThrow();

    expect(function () {
      ReactTestUtils.Simulate.click(rendered2);}).
    toThrow();});


  it('works with mixins that have not opted out of autobinding', function () {
    var mouseDidClick = jest.fn();

    var TestMixin = { 
      onClick: mouseDidClick };


    var TestBindComponent = React.createClass({ displayName: 'TestBindComponent', 
      mixins: [TestMixin], 

      render: function () {
        return React.createElement('div', { onClick: this.onClick, __source: { fileName: _jsxFileName, lineNumber: 151 } });} });



    var instance1 = React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 155 } });
    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);
    var rendered1 = reactComponentExpect(mountedInstance1).
    expectRenderedChild().
    instance();

    ReactTestUtils.Simulate.click(rendered1);
    expect(mouseDidClick.mock.instances.length).toBe(1);
    expect(mouseDidClick.mock.instances[0]).toBe(mountedInstance1);});


  it('works with mixins that have opted out of autobinding', function () {
    var mouseDidClick = jest.fn();

    var TestMixin = { 
      autobind: false, 
      onClick: mouseDidClick };


    var TestBindComponent = React.createClass({ displayName: 'TestBindComponent', 
      mixins: [TestMixin], 

      render: function () {
        return React.createElement('div', { onClick: this.onClick.bind(this), __source: { fileName: _jsxFileName, lineNumber: 178 } });} });



    var instance1 = React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 182 } });
    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);
    var rendered1 = reactComponentExpect(mountedInstance1).
    expectRenderedChild().
    instance();

    ReactTestUtils.Simulate.click(rendered1);
    expect(mouseDidClick.mock.instances.length).toBe(1);
    expect(mouseDidClick.mock.instances[0]).toBe(mountedInstance1);});


  it('does not warn if you try to bind to this', function () {
    spyOn(console, 'error');

    var TestBindComponent = React.createClass({ displayName: 'TestBindComponent', 
      autobind: false, 
      handleClick: function () {}, 
      render: function () {
        return React.createElement('div', { onClick: this.handleClick.bind(this), __source: { fileName: _jsxFileName, lineNumber: 200 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 204 } }));

    expect(console.error.calls.count()).toBe(0);});


  it('does not warn if you pass an manually bound method to setState', function () {
    spyOn(console, 'error');

    var TestBindComponent = React.createClass({ displayName: 'TestBindComponent', 
      autobind: false, 
      getInitialState: function () {
        return { foo: 1 };}, 

      componentDidMount: function () {
        this.setState({ foo: 2 }, this.handleUpdate.bind(this));}, 

      handleUpdate: function () {}, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 224 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(TestBindComponent, { __source: { fileName: _jsxFileName, lineNumber: 228 } }));

    expect(console.error.calls.count()).toBe(0);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js":306}],36:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\classic\\class\\__tests__\\ReactClass-test.js';

var React;
var ReactDOM;
var ReactTestUtils;

describe('ReactClass-spec', function () {

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  it('should throw when `render` is not specified', function () {
    expect(function () {
      React.createClass({});}).
    toThrowError(
    'createClass(...): Class specification must implement a `render` method.');});



  it('should copy `displayName` onto the Constructor', function () {
    var TestComponent = React.createClass({ displayName: 'TestComponent', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 37 } });} });



    expect(TestComponent.displayName).
    toBe('TestComponent');});


  it('should copy prop types onto the Constructor', function () {
    var propValidator = jest.fn();
    var TestComponent = React.createClass({ displayName: 'TestComponent', 
      propTypes: { 
        value: propValidator }, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 52 } });} });



    expect(TestComponent.propTypes).toBeDefined();
    expect(TestComponent.propTypes.value).
    toBe(propValidator);});


  it('should warn on invalid prop types', function () {
    spyOn(console, 'error');
    React.createClass({ 
      displayName: 'Component', 
      propTypes: { 
        prop: null }, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 69 } }, this.props.prop);} });


    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Component: prop type `prop` is invalid; ' + 
    'it must be a function, usually from React.PropTypes.');});



  it('should warn on invalid context types', function () {
    spyOn(console, 'error');
    React.createClass({ 
      displayName: 'Component', 
      contextTypes: { 
        prop: null }, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 87 } }, this.props.prop);} });


    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Component: context type `prop` is invalid; ' + 
    'it must be a function, usually from React.PropTypes.');});



  it('should throw on invalid child context types', function () {
    spyOn(console, 'error');
    React.createClass({ 
      displayName: 'Component', 
      childContextTypes: { 
        prop: null }, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 105 } }, this.props.prop);} });


    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Component: child context type `prop` is invalid; ' + 
    'it must be a function, usually from React.PropTypes.');});



  it('should warn when mispelling shouldComponentUpdate', function () {
    spyOn(console, 'error');

    React.createClass({ 
      componentShouldUpdate: function () {
        return false;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 123 } });} });


    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: A component has a method called componentShouldUpdate(). Did you ' + 
    'mean shouldComponentUpdate()? The name is phrased as a question ' + 
    'because the function is expected to return a value.');


    React.createClass({ 
      displayName: 'NamedComponent', 
      componentShouldUpdate: function () {
        return false;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 139 } });} });


    expect(console.error.calls.count()).toBe(2);
    expect(console.error.calls.argsFor(1)[0]).toBe(
    'Warning: NamedComponent has a method called componentShouldUpdate(). Did you ' + 
    'mean shouldComponentUpdate()? The name is phrased as a question ' + 
    'because the function is expected to return a value.');});



  it('should warn when mispelling componentWillReceiveProps', function () {
    spyOn(console, 'error');
    React.createClass({ 
      componentWillRecieveProps: function () {
        return false;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 157 } });} });


    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: A component has a method called componentWillRecieveProps(). Did you ' + 
    'mean componentWillReceiveProps()?');});



  it('should throw if a reserved property is in statics', function () {
    expect(function () {
      React.createClass({ 
        statics: { 
          getDefaultProps: function () {
            return { 
              foo: 0 };} }, 




        render: function () {
          return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 179 } });} });}).


    toThrowError(
    'ReactClass: You are attempting to define a reserved property, ' + 
    '`getDefaultProps`, that shouldn\'t be on the "statics" key. Define ' + 
    'it as an instance property instead; it will still be accessible on ' + 
    'the constructor.');});



  // TODO: Consider actually moving these to statics or drop this unit test.

  xit('should warn when using deprecated non-static spec keys', function () {
    spyOn(console, 'error');
    React.createClass({ 
      mixins: [{}], 
      propTypes: { 
        foo: React.PropTypes.string }, 

      contextTypes: { 
        foo: React.PropTypes.string }, 

      childContextTypes: { 
        foo: React.PropTypes.string }, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 206 } });} });


    expect(console.error.calls.count()).toBe(4);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'createClass(...): `mixins` is now a static property and should ' + 
    'be defined inside "statics".');

    expect(console.error.calls.argsFor(1)[0]).toBe(
    'createClass(...): `propTypes` is now a static property and should ' + 
    'be defined inside "statics".');

    expect(console.error.calls.argsFor(2)[0]).toBe(
    'createClass(...): `contextTypes` is now a static property and ' + 
    'should be defined inside "statics".');

    expect(console.error.calls.argsFor(3)[0]).toBe(
    'createClass(...): `childContextTypes` is now a static property and ' + 
    'should be defined inside "statics".');});



  it('should support statics', function () {
    var Component = React.createClass({ displayName: 'Component', 
      statics: { 
        abc: 'def', 
        def: 0, 
        ghi: null, 
        jkl: 'mno', 
        pqr: function () {
          return this;} }, 



      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 241 } });} });


    var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 244 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.constructor.abc).toBe('def');
    expect(Component.abc).toBe('def');
    expect(instance.constructor.def).toBe(0);
    expect(Component.def).toBe(0);
    expect(instance.constructor.ghi).toBe(null);
    expect(Component.ghi).toBe(null);
    expect(instance.constructor.jkl).toBe('mno');
    expect(Component.jkl).toBe('mno');
    expect(instance.constructor.pqr()).toBe(Component);
    expect(Component.pqr()).toBe(Component);});


  it('should work with object getInitialState() return values', function () {
    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { 
          occupation: 'clown' };}, 


      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 266 } });} });


    var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 269 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.state.occupation).toEqual('clown');});


  it('renders based on context getInitialState', function () {
    var Foo = React.createClass({ displayName: 'Foo', 
      contextTypes: { 
        className: React.PropTypes.string }, 

      getInitialState: function () {
        return { className: this.context.className };}, 

      render: function () {
        return React.createElement('span', { className: this.state.className, __source: { fileName: _jsxFileName, lineNumber: 283 } });} });



    var Outer = React.createClass({ displayName: 'Outer', 
      childContextTypes: { 
        className: React.PropTypes.string }, 

      getChildContext: function () {
        return { className: 'foo' };}, 

      render: function () {
        return React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 295 } });} });



    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 300 } }), container);
    expect(container.firstChild.className).toBe('foo');});


  it('should throw with non-object getInitialState() return values', function () {
    [['an array'], 'a string', 1234].forEach(function (state) {
      var Component = React.createClass({ displayName: 'Component', 
        getInitialState: function () {
          return state;}, 

        render: function () {
          return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 311 } });} });


      var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 314 } });
      expect(function () {
        instance = ReactTestUtils.renderIntoDocument(instance);}).
      toThrowError(
      'Component.getInitialState(): must return an object or null');});});




  it('should work with a null getInitialState() return value', function () {
    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return null;}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 329 } });} });


    expect(
    function () {return ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 333 } }));}).
    not.toThrow();});


  it('should throw when using legacy factories', function () {
    spyOn(console, 'error');
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 341 } });} });



    expect(function () {return Component();}).toThrow();
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Something is calling a React component directly. Use a ' + 
    'factory or JSX instead. See: https://fb.me/react-legacyfactory');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],37:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\classic\\class\\__tests__\\ReactClassMixin-test.js';

var React;
var ReactTestUtils;

var TestComponent;
var TestComponentWithPropTypes;
var TestComponentWithReverseSpec;
var mixinPropValidator;
var componentPropValidator;

describe('ReactClass-mixin', function () {

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    mixinPropValidator = jest.fn();
    componentPropValidator = jest.fn();

    var MixinA = { 
      propTypes: { 
        propA: function () {} }, 

      componentDidMount: function () {
        this.props.listener('MixinA didMount');} };



    var MixinB = { 
      mixins: [MixinA], 
      propTypes: { 
        propB: function () {} }, 

      componentDidMount: function () {
        this.props.listener('MixinB didMount');} };



    var MixinBWithReverseSpec = { 
      componentDidMount: function () {
        this.props.listener('MixinBWithReverseSpec didMount');}, 

      mixins: [MixinA] };


    var MixinC = { 
      statics: { 
        staticC: function () {} }, 

      componentDidMount: function () {
        this.props.listener('MixinC didMount');} };



    var MixinD = { 
      propTypes: { 
        value: mixinPropValidator } };



    TestComponent = React.createClass({ displayName: 'TestComponent', 
      mixins: [MixinB, MixinC, MixinD], 
      statics: { 
        staticComponent: function () {} }, 

      propTypes: { 
        propComponent: function () {} }, 

      componentDidMount: function () {
        this.props.listener('Component didMount');}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 84 } });} });



    TestComponentWithReverseSpec = React.createClass({ displayName: 'TestComponentWithReverseSpec', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 90 } });}, 

      componentDidMount: function () {
        this.props.listener('Component didMount');}, 

      mixins: [MixinBWithReverseSpec, MixinC, MixinD] });


    TestComponentWithPropTypes = React.createClass({ displayName: 'TestComponentWithPropTypes', 
      mixins: [MixinD], 
      propTypes: { 
        value: componentPropValidator }, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 104 } });} });});




  it('should support merging propTypes and statics', function () {
    var listener = jest.fn();
    var instance = React.createElement(TestComponent, { listener: listener, __source: { fileName: _jsxFileName, lineNumber: 111 } });
    instance = ReactTestUtils.renderIntoDocument(instance);

    var instancePropTypes = instance.constructor.propTypes;

    expect('propA' in instancePropTypes).toBe(true);
    expect('propB' in instancePropTypes).toBe(true);
    expect('propComponent' in instancePropTypes).toBe(true);

    expect('staticC' in TestComponent).toBe(true);
    expect('staticComponent' in TestComponent).toBe(true);});


  it('should support chaining delegate functions', function () {
    var listener = jest.fn();
    var instance = React.createElement(TestComponent, { listener: listener, __source: { fileName: _jsxFileName, lineNumber: 126 } });
    instance = ReactTestUtils.renderIntoDocument(instance);

    expect(listener.mock.calls).toEqual([
    ['MixinA didMount'], 
    ['MixinB didMount'], 
    ['MixinC didMount'], 
    ['Component didMount']]);});



  it('should chain functions regardless of spec property order', function () {
    var listener = jest.fn();
    var instance = React.createElement(TestComponentWithReverseSpec, { listener: listener, __source: { fileName: _jsxFileName, lineNumber: 139 } });
    instance = ReactTestUtils.renderIntoDocument(instance);

    expect(listener.mock.calls).toEqual([
    ['MixinA didMount'], 
    ['MixinBWithReverseSpec didMount'], 
    ['MixinC didMount'], 
    ['Component didMount']]);});



  it('should validate prop types via mixins', function () {
    expect(TestComponent.propTypes).toBeDefined();
    expect(TestComponent.propTypes.value).
    toBe(mixinPropValidator);});


  it('should override mixin prop types with class prop types', function () {
    // Sanity check...
    expect(componentPropValidator).not.toBe(mixinPropValidator);
    // Actually check...
    expect(TestComponentWithPropTypes.propTypes).
    toBeDefined();
    expect(TestComponentWithPropTypes.propTypes.value).
    not.toBe(mixinPropValidator);
    expect(TestComponentWithPropTypes.propTypes.value).
    toBe(componentPropValidator);});



  it('should support mixins with getInitialState()', function () {
    var Mixin = { 
      getInitialState: function () {
        return { mixin: true };} };


    var Component = React.createClass({ displayName: 'Component', 
      mixins: [Mixin], 
      getInitialState: function () {
        return { component: true };}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 181 } });} });


    var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 184 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.state.component).toBe(true);
    expect(instance.state.mixin).toBe(true);});


  it('should throw with conflicting getInitialState() methods', function () {
    var Mixin = { 
      getInitialState: function () {
        return { x: true };} };


    var Component = React.createClass({ displayName: 'Component', 
      mixins: [Mixin], 
      getInitialState: function () {
        return { x: true };}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 202 } });} });


    var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 205 } });
    expect(function () {
      instance = ReactTestUtils.renderIntoDocument(instance);}).
    toThrowError(
    'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the ' + 
    'same key: `x`. This conflict may be due to a mixin; in particular, ' + 
    'this may be caused by two getInitialState() or getDefaultProps() ' + 
    'methods returning objects with clashing keys.');});



  it('should not mutate objects returned by getInitialState()', function () {
    var Mixin = { 
      getInitialState: function () {
        return Object.freeze({ mixin: true });} };


    var Component = React.createClass({ displayName: 'Component', 
      mixins: [Mixin], 
      getInitialState: function () {
        return Object.freeze({ component: true });}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 228 } });} });


    expect(function () {
      ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 232 } }));}).
    not.toThrow();});


  it('should support statics in mixins', function () {
    var Mixin = { 
      statics: { 
        foo: 'bar' } };


    var Component = React.createClass({ displayName: 'Component', 
      mixins: [Mixin], 

      statics: { 
        abc: 'def' }, 


      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 250 } });} });


    var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 253 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.constructor.foo).toBe('bar');
    expect(Component.foo).toBe('bar');
    expect(instance.constructor.abc).toBe('def');
    expect(Component.abc).toBe('def');});


  it("should throw if mixins override each others' statics", function () {
    expect(function () {
      var Mixin = { 
        statics: { 
          abc: 'foo' } };


      React.createClass({ 
        mixins: [Mixin], 

        statics: { 
          abc: 'bar' }, 


        render: function () {
          return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 276 } });} });}).


    toThrowError(
    'ReactClass: You are attempting to define `abc` on your component more ' + 
    'than once. This conflict may be due to a mixin.');});



  it('should throw if mixins override functions in statics', function () {
    expect(function () {
      var Mixin = { 
        statics: { 
          abc: function () {
            console.log('foo');} } };



      React.createClass({ 
        mixins: [Mixin], 

        statics: { 
          abc: function () {
            console.log('bar');} }, 



        render: function () {
          return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 304 } });} });}).


    toThrowError(
    'ReactClass: You are attempting to define `abc` on your component ' + 
    'more than once. This conflict may be due to a mixin.');});



  it('should throw if the mixin is a React component', function () {
    expect(function () {
      React.createClass({ 
        mixins: [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 316 } })], 

        render: function () {
          return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 319 } });} });}).


    toThrowError(
    'ReactClass: You\'re attempting to use a component as a mixin. ' + 
    'Instead, just use a regular object.');});



  it('should throw if the mixin is a React component class', function () {
    expect(function () {
      var Component = React.createClass({ displayName: 'Component', 
        render: function () {
          return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 332 } });} });



      React.createClass({ 
        mixins: [Component], 

        render: function () {
          return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 340 } });} });}).


    toThrowError(
    'ReactClass: You\'re attempting to use a component class or function ' + 
    'as a mixin. Instead, just use a regular object.');});



  it('should have bound the mixin methods to the component', function () {
    var mixin = { 
      mixinFunc: function () {
        return this;} };



    var Component = React.createClass({ displayName: 'Component', 
      mixins: [mixin], 
      componentDidMount: function () {
        expect(this.mixinFunc()).toBe(this);}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 362 } });} });


    var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 365 } });
    instance = ReactTestUtils.renderIntoDocument(instance);});


  it('should include the mixin keys in even if their values are falsy', function () {
    var mixin = { 
      keyWithNullValue: null, 
      randomCounter: 0 };


    var Component = React.createClass({ displayName: 'Component', 
      mixins: [mixin], 
      componentDidMount: function () {
        expect(this.randomCounter).toBe(0);
        expect(this.keyWithNullValue).toBeNull();}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 382 } });} });


    var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 385 } });
    instance = ReactTestUtils.renderIntoDocument(instance);});


  it('should work with a null getInitialState return value and a mixin', function () {
    var Component;
    var instance;

    var Mixin = { 
      getInitialState: function () {
        return { foo: 'bar' };} };


    Component = React.createClass({ displayName: 'Component', 
      mixins: [Mixin], 
      getInitialState: function () {
        return null;}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 404 } });} });


    expect(
    function () {return ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 408 } }));}).
    not.toThrow();

    instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 411 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.state).toEqual({ foo: 'bar' });

    // Also the other way round should work
    var Mixin2 = { 
      getInitialState: function () {
        return null;} };


    Component = React.createClass({ displayName: 'Component', 
      mixins: [Mixin2], 
      getInitialState: function () {
        return { foo: 'bar' };}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 427 } });} });


    expect(
    function () {return ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 431 } }));}).
    not.toThrow();

    instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 434 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.state).toEqual({ foo: 'bar' });

    // Multiple mixins should be fine too
    Component = React.createClass({ displayName: 'Component', 
      mixins: [Mixin, Mixin2], 
      getInitialState: function () {
        return { x: true };}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 445 } });} });


    expect(
    function () {return ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 449 } }));}).
    not.toThrow();

    instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 452 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.state).toEqual({ foo: 'bar', x: true });});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],38:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = { 

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null };



module.exports = ReactCurrentOwner;
},{}],39:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFactories
 */

'use strict';

var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');

var mapObject = require('fbjs/lib/mapObject');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if (__DEV__) {
    var ReactElementValidator = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElementValidator.js');
    return ReactElementValidator.createFactory(tag);}

  return ReactElement.createFactory(tag);}


/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = mapObject({ 
  a: 'a', 
  abbr: 'abbr', 
  address: 'address', 
  area: 'area', 
  article: 'article', 
  aside: 'aside', 
  audio: 'audio', 
  b: 'b', 
  base: 'base', 
  bdi: 'bdi', 
  bdo: 'bdo', 
  big: 'big', 
  blockquote: 'blockquote', 
  body: 'body', 
  br: 'br', 
  button: 'button', 
  canvas: 'canvas', 
  caption: 'caption', 
  cite: 'cite', 
  code: 'code', 
  col: 'col', 
  colgroup: 'colgroup', 
  data: 'data', 
  datalist: 'datalist', 
  dd: 'dd', 
  del: 'del', 
  details: 'details', 
  dfn: 'dfn', 
  dialog: 'dialog', 
  div: 'div', 
  dl: 'dl', 
  dt: 'dt', 
  em: 'em', 
  embed: 'embed', 
  fieldset: 'fieldset', 
  figcaption: 'figcaption', 
  figure: 'figure', 
  footer: 'footer', 
  form: 'form', 
  h1: 'h1', 
  h2: 'h2', 
  h3: 'h3', 
  h4: 'h4', 
  h5: 'h5', 
  h6: 'h6', 
  head: 'head', 
  header: 'header', 
  hgroup: 'hgroup', 
  hr: 'hr', 
  html: 'html', 
  i: 'i', 
  iframe: 'iframe', 
  img: 'img', 
  input: 'input', 
  ins: 'ins', 
  kbd: 'kbd', 
  keygen: 'keygen', 
  label: 'label', 
  legend: 'legend', 
  li: 'li', 
  link: 'link', 
  main: 'main', 
  map: 'map', 
  mark: 'mark', 
  menu: 'menu', 
  menuitem: 'menuitem', 
  meta: 'meta', 
  meter: 'meter', 
  nav: 'nav', 
  noscript: 'noscript', 
  object: 'object', 
  ol: 'ol', 
  optgroup: 'optgroup', 
  option: 'option', 
  output: 'output', 
  p: 'p', 
  param: 'param', 
  picture: 'picture', 
  pre: 'pre', 
  progress: 'progress', 
  q: 'q', 
  rp: 'rp', 
  rt: 'rt', 
  ruby: 'ruby', 
  s: 's', 
  samp: 'samp', 
  script: 'script', 
  section: 'section', 
  select: 'select', 
  small: 'small', 
  source: 'source', 
  span: 'span', 
  strong: 'strong', 
  style: 'style', 
  sub: 'sub', 
  summary: 'summary', 
  sup: 'sup', 
  table: 'table', 
  tbody: 'tbody', 
  td: 'td', 
  textarea: 'textarea', 
  tfoot: 'tfoot', 
  th: 'th', 
  thead: 'thead', 
  time: 'time', 
  title: 'title', 
  tr: 'tr', 
  track: 'track', 
  u: 'u', 
  ul: 'ul', 
  'var': 'var', 
  video: 'video', 
  wbr: 'wbr', 

  // SVG
  circle: 'circle', 
  clipPath: 'clipPath', 
  defs: 'defs', 
  ellipse: 'ellipse', 
  g: 'g', 
  image: 'image', 
  line: 'line', 
  linearGradient: 'linearGradient', 
  mask: 'mask', 
  path: 'path', 
  pattern: 'pattern', 
  polygon: 'polygon', 
  polyline: 'polyline', 
  radialGradient: 'radialGradient', 
  rect: 'rect', 
  stop: 'stop', 
  svg: 'svg', 
  text: 'text', 
  tspan: 'tspan' }, 

createDOMFactory);

module.exports = ReactDOMFactories;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElementValidator.js":41,"fbjs/lib/mapObject":419}],40:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';var _assign = require('object-assign');

var ReactCurrentOwner = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js');

var warning = require('fbjs/lib/warning');
var canDefineProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\canDefineProperty.js');
var hasOwnProperty = Object.prototype.hasOwnProperty;

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 
typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 
0xeac7;

var RESERVED_PROPS = { 
  key: true, 
  ref: true, 
  __self: true, 
  __source: true };


var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (__DEV__) {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;}}}



  return config.ref !== undefined;}


function hasValidKey(config) {
  if (__DEV__) {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;}}}



  return config.key !== undefined;}


/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = { 
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE, 

    // Built-in properties that belong on the element
    type: type, 
    key: key, 
    ref: ref, 
    props: props, 

    // Record the component responsible for creating this element.
    _owner: owner };


  if (__DEV__) {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', { 
        configurable: false, 
        enumerable: false, 
        writable: true, 
        value: false });

      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', { 
        configurable: false, 
        enumerable: false, 
        writable: false, 
        value: self });

      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', { 
        configurable: false, 
        enumerable: false, 
        writable: false, 
        value: source });} else 

    {
      element._store.validated = false;
      element._self = self;
      element._source = source;}

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);}}



  return element;};


/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (__DEV__) {
      warning(
      /* eslint-disable no-proto */
      config.__proto__ == null || config.__proto__ === Object.prototype, 
      /* eslint-enable no-proto */
      'React.createElement(...): Expected props argument to be a plain object. ' + 
      'Properties defined in its prototype chain will be ignored.');}



    if (hasValidRef(config)) {
      ref = config.ref;}

    if (hasValidKey(config)) {
      key = '' + config.key;}


    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && 
      !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];}}}




  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;} else 
  if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];}

    props.children = childArray;}


  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];}}}



  if (__DEV__) {




    // Create dummy `key` and `ref` property to `props` to warn users against its use
    var warnAboutAccessingKey = function () {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;
        warning(
        false, 
        '%s: `key` is not a prop. Trying to access it will result ' + 
        'in `undefined` being returned. If you need to access the same ' + 
        'value within the child component, you should pass it as a different ' + 
        'prop. (https://fb.me/react-special-props)', 
        displayName);}


      return undefined;};var 



    warnAboutAccessingRef = function () {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;
        warning(
        false, 
        '%s: `ref` is not a prop. Trying to access it will result ' + 
        'in `undefined` being returned. If you need to access the same ' + 
        'value within the child component, you should pass it as a different ' + 
        'prop. (https://fb.me/react-special-props)', 
        displayName);}


      return undefined;};var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;warnAboutAccessingKey.isReactWarning = true;

    warnAboutAccessingRef.isReactWarning = true;

    if (typeof props.$$typeof === 'undefined' || 
    props.$$typeof !== REACT_ELEMENT_TYPE) {
      if (!props.hasOwnProperty('key')) {
        Object.defineProperty(props, 'key', { 
          get: warnAboutAccessingKey, 
          configurable: true });}


      if (!props.hasOwnProperty('ref')) {
        Object.defineProperty(props, 'ref', { 
          get: warnAboutAccessingRef, 
          configurable: true });}}}




  return ReactElement(
  type, 
  key, 
  ref, 
  self, 
  source, 
  ReactCurrentOwner.current, 
  props);};



/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;};


ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(
  oldElement.type, 
  newKey, 
  oldElement.ref, 
  oldElement._self, 
  oldElement._source, 
  oldElement._owner, 
  oldElement.props);


  return newElement;};


/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (__DEV__) {
      warning(
      /* eslint-disable no-proto */
      config.__proto__ == null || config.__proto__ === Object.prototype, 
      /* eslint-enable no-proto */
      'React.cloneElement(...): Expected props argument to be a plain object. ' + 
      'Properties defined in its prototype chain will be ignored.');}



    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;}

    if (hasValidKey(config)) {
      key = '' + config.key;}


    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;}

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && 
      !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];} else 
        {
          props[propName] = config[propName];}}}}





  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;} else 
  if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];}

    props.children = childArray;}


  return ReactElement(
  element.type, 
  key, 
  ref, 
  self, 
  source, 
  owner, 
  props);};



/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return (
    typeof object === 'object' && 
    object !== null && 
    object.$$typeof === REACT_ELEMENT_TYPE);};



ReactElement.REACT_ELEMENT_TYPE = REACT_ELEMENT_TYPE;

module.exports = ReactElement;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js":38,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\canDefineProperty.js":291,"fbjs/lib/warning":424,"object-assign":425}],41:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactCurrentOwner = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js');
var ReactComponentTreeDevtool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js');
var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');
var ReactPropTypeLocations = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocations.js');

var checkReactTypeSpec = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\checkReactTypeSpec.js');

var canDefineProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\canDefineProperty.js');
var getIteratorFn = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\getIteratorFn.js');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';}}


  return '';}


/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? 
    parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';}}


  return info;}


/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;}

  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (
  ownerHasKeyUseWarning.uniqueKey = {});


  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;}

  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && 
  element._owner && 
  element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + 
    element._owner.getName() + '.';}


  warning(
  false, 
  'Each child in an array or iterator should have a unique "key" prop.' + 
  '%s%s See https://fb.me/react-warning-keys for more information.%s', 
  currentComponentErrorInfo, 
  childOwner, 
  ReactComponentTreeDevtool.getCurrentStackAddendum(element));}



/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;}

  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);}}} else 


  if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;}} else 

  if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);}}}}}}







/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;}

  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(
    componentClass.propTypes, 
    element.props, 
    ReactPropTypeLocations.prop, 
    name, 
    element, 
    null);}


  if (typeof componentClass.getDefaultProps === 'function') {
    warning(
    componentClass.getDefaultProps.isReactClassApproved, 
    'getDefaultProps is only used on classic React.createClass ' + 
    'definitions. Use a static property named `defaultProps` instead.');}}




var ReactElementValidator = { 

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function' || 
    type !== null && typeof type === 'object';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    warning(
    validType, 
    'React.createElement: type should not be null, undefined, boolean, or ' + 
    'number. It should be a string (for DOM elements) or a ReactClass ' + 
    '(for composite components).%s', 
    getDeclarationErrorAddendum());


    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;}


    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);}}



    validatePropTypes(element);

    return element;}, 


  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
    null, 
    type);

    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (__DEV__) {
      if (canDefineProperty) {
        Object.defineProperty(
        validatedFactory, 
        'type', 
        { 
          enumerable: false, 
          get: function () {
            warning(
            false, 
            'Factory.type is deprecated. Access the class directly ' + 
            'before passing it to createFactory.');

            Object.defineProperty(this, 'type', { 
              value: type });

            return type;} });}}







    return validatedFactory;}, 


  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);}

    validatePropTypes(newElement);
    return newElement;} };




module.exports = ReactElementValidator;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js":38,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocations.js":46,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\checkReactTypeSpec.js":49,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js":211,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\canDefineProperty.js":291,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\getIteratorFn.js":296,"fbjs/lib/warning":424}],42:[function(require,module,exports){
(function (global){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\classic\\element\\__tests__\\ReactElement-test.js';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var React;
var ReactDOM;
var ReactTestUtils;

describe('ReactElement', function () {
  var ComponentClass;
  var originalSymbol;

  beforeEach(function () {
    jest.resetModuleRegistry();

    // Delete the native Symbol if we have one to ensure we test the
    // unpolyfilled environment.
    originalSymbol = global.Symbol;
    global.Symbol = undefined;

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    // NOTE: We're explicitly not using JSX here. This is intended to test
    // classic JS without JSX.
    ComponentClass = React.createClass({ displayName: 'ComponentClass', 
      render: function () {
        return React.createElement('div');} });});




  afterEach(function () {
    global.Symbol = originalSymbol;});


  it('uses the fallback value when in an environment without Symbol', function () {
    expect(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 47 } }).$$typeof).toBe(0xeac7);});


  it('returns a complete element according to spec', function () {
    var element = React.createFactory(ComponentClass)();
    expect(element.type).toBe(ComponentClass);
    expect(element.key).toBe(null);
    expect(element.ref).toBe(null);
    expect(Object.isFrozen(element)).toBe(true);
    expect(Object.isFrozen(element.props)).toBe(true);
    expect(element.props).toEqual({});});


  it('should warn when `key` is being accessed on createClass element', function () {
    spyOn(console, 'error');
    var container = document.createElement('div');
    var Child = React.createClass({ displayName: 'Child', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 65 } }, ' ', this.props.key, ' ');} });


    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 71 } }, 
          React.createElement(Child, { key: '0', __source: { fileName: _jsxFileName, lineNumber: 72 } }), 
          React.createElement(Child, { key: '1', __source: { fileName: _jsxFileName, lineNumber: 73 } }), 
          React.createElement(Child, { key: '2', __source: { fileName: _jsxFileName, lineNumber: 74 } })));} });




    expect(console.error.calls.count()).toBe(0);
    ReactDOM.render(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 80 } }), container);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Child: `key` is not a prop. Trying to access it will result ' + 
    'in `undefined` being returned. If you need to access the same ' + 
    'value within the child component, you should pass it as a different ' + 
    'prop. (https://fb.me/react-special-props)');});



  it('should warn when `key` is being accessed on ES class element', function () {
    spyOn(console, 'error');
    var container = document.createElement('div');var 
    Child = function (_React$Component) {_inherits(Child, _React$Component);function Child() {_classCallCheck(this, Child);return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));}Child.prototype.
      render = function render() {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 95 } }, ' ', this.props.key, ' ');};return Child;}(React.Component);


    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 101 } }, 
          React.createElement(Child, { key: '0', __source: { fileName: _jsxFileName, lineNumber: 102 } }), 
          React.createElement(Child, { key: '1', __source: { fileName: _jsxFileName, lineNumber: 103 } }), 
          React.createElement(Child, { key: '2', __source: { fileName: _jsxFileName, lineNumber: 104 } })));} });




    expect(console.error.calls.count()).toBe(0);
    ReactDOM.render(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 110 } }), container);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Child: `key` is not a prop. Trying to access it will result ' + 
    'in `undefined` being returned. If you need to access the same ' + 
    'value within the child component, you should pass it as a different ' + 
    'prop. (https://fb.me/react-special-props)');});



  it('should warn when `key` is being accessed on a host element', function () {
    spyOn(console, 'error');
    var element = React.createElement('div', { key: '3', __source: { fileName: _jsxFileName, lineNumber: 122 } });
    expect(console.error.calls.count()).toBe(0);
    void element.props.key;
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'div: `key` is not a prop. Trying to access it will result ' + 
    'in `undefined` being returned. If you need to access the same ' + 
    'value within the child component, you should pass it as a different ' + 
    'prop. (https://fb.me/react-special-props)');});



  it('should warn when `ref` is being accessed', function () {
    spyOn(console, 'error');
    var container = document.createElement('div');
    var Child = React.createClass({ displayName: 'Child', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 139 } }, ' ', this.props.ref, ' ');} });


    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 145 } }, 
          React.createElement(Child, { ref: 'childElement', __source: { fileName: _jsxFileName, lineNumber: 146 } })));} });




    expect(console.error.calls.count()).toBe(0);
    ReactDOM.render(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 152 } }), container);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Child: `ref` is not a prop. Trying to access it will result ' + 
    'in `undefined` being returned. If you need to access the same ' + 
    'value within the child component, you should pass it as a different ' + 
    'prop. (https://fb.me/react-special-props)');});



  it('allows a string to be passed as the type', function () {
    var element = React.createFactory('div')();
    expect(element.type).toBe('div');
    expect(element.key).toBe(null);
    expect(element.ref).toBe(null);
    expect(Object.isFrozen(element)).toBe(true);
    expect(Object.isFrozen(element.props)).toBe(true);
    expect(element.props).toEqual({});});


  it('returns an immutable element', function () {
    var element = React.createFactory(ComponentClass)();
    expect(function () {return element.type = 'div';}).toThrow();});


  it('does not reuse the original config object', function () {
    var config = { foo: 1 };
    var element = React.createFactory(ComponentClass)(config);
    expect(element.props.foo).toBe(1);
    config.foo = 2;
    expect(element.props.foo).toBe(1);});


  it('does not fail if config has no prototype', function () {
    var config = Object.create(null, { foo: { value: 1, enumerable: true } });
    var element = React.createFactory(ComponentClass)(config);
    expect(element.props.foo).toBe(1);});


  it('warns if the config object inherits from any type other than Object', function () {
    spyOn(console, 'error');
    React.createElement('div', { foo: 1 });
    expect(console.error).not.toHaveBeenCalled();
    React.createElement('div', Object.create({ foo: 1 }));
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'React.createElement(...): Expected props argument to be a plain object. ' + 
    'Properties defined in its prototype chain will be ignored.');});



  it('extracts key and ref from the config', function () {
    var element = React.createFactory(ComponentClass)({ 
      key: '12', 
      ref: '34', 
      foo: '56' });

    expect(element.type).toBe(ComponentClass);
    expect(element.key).toBe('12');
    expect(element.ref).toBe('34');
    expect(Object.isFrozen(element)).toBe(true);
    expect(Object.isFrozen(element.props)).toBe(true);
    expect(element.props).toEqual({ foo: '56' });});


  it('extracts null key and ref', function () {
    var element = React.createFactory(ComponentClass)({ 
      key: null, 
      ref: null, 
      foo: '12' });

    expect(element.type).toBe(ComponentClass);
    expect(element.key).toBe('null');
    expect(element.ref).toBe(null);
    expect(Object.isFrozen(element)).toBe(true);
    expect(Object.isFrozen(element.props)).toBe(true);
    expect(element.props).toEqual({ foo: '12' });});


  it('ignores undefined key and ref', function () {
    var props = { 
      foo: '56', 
      key: undefined, 
      ref: undefined };

    var element = React.createFactory(ComponentClass)(props);
    expect(element.type).toBe(ComponentClass);
    expect(element.key).toBe(null);
    expect(element.ref).toBe(null);
    expect(Object.isFrozen(element)).toBe(true);
    expect(Object.isFrozen(element.props)).toBe(true);
    expect(element.props).toEqual({ foo: '56' });});


  it('ignores key and ref warning getters', function () {
    var elementA = React.createElement('div');
    var elementB = React.createElement('div', elementA.props);
    expect(elementB.key).toBe(null);
    expect(elementB.ref).toBe(null);});


  it('coerces the key to a string', function () {
    var element = React.createFactory(ComponentClass)({ 
      key: 12, 
      foo: '56' });

    expect(element.type).toBe(ComponentClass);
    expect(element.key).toBe('12');
    expect(element.ref).toBe(null);
    expect(Object.isFrozen(element)).toBe(true);
    expect(Object.isFrozen(element.props)).toBe(true);
    expect(element.props).toEqual({ foo: '56' });});


  it('preserves the owner on the element', function () {
    var Component = React.createFactory(ComponentClass);
    var element;

    var Wrapper = React.createClass({ displayName: 'Wrapper', 
      render: function () {
        element = Component();
        return element;} });



    var instance = ReactTestUtils.renderIntoDocument(
    React.createElement(Wrapper));


    expect(element._owner.getPublicInstance()).toBe(instance);});


  it('merges an additional argument onto the children prop', function () {
    spyOn(console, 'error');
    var a = 1;
    var element = React.createFactory(ComponentClass)({ 
      children: 'text' }, 
    a);
    expect(element.props.children).toBe(a);
    expect(console.error.calls.count()).toBe(0);});


  it('does not override children if no rest args are provided', function () {
    spyOn(console, 'error');
    var element = React.createFactory(ComponentClass)({ 
      children: 'text' });

    expect(element.props.children).toBe('text');
    expect(console.error.calls.count()).toBe(0);});


  it('overrides children if null is provided as an argument', function () {
    spyOn(console, 'error');
    var element = React.createFactory(ComponentClass)({ 
      children: 'text' }, 
    null);
    expect(element.props.children).toBe(null);
    expect(console.error.calls.count()).toBe(0);});


  it('merges rest arguments onto the children prop in an array', function () {
    spyOn(console, 'error');
    var a = 1;
    var b = 2;
    var c = 3;
    var element = React.createFactory(ComponentClass)(null, a, b, c);
    expect(element.props.children).toEqual([1, 2, 3]);
    expect(console.error.calls.count()).toBe(0);});


  // NOTE: We're explicitly not using JSX here. This is intended to test
  // classic JS without JSX.
  it('allows static methods to be called using the type property', function () {
    spyOn(console, 'error');

    var StaticMethodComponentClass = React.createClass({ displayName: 'StaticMethodComponentClass', 
      statics: { 
        someStaticMethod: function () {
          return 'someReturnValue';} }, 


      getInitialState: function () {
        return { valueToReturn: 'hi' };}, 

      render: function () {
        return React.createElement('div');} });



    var element = React.createElement(StaticMethodComponentClass);
    expect(element.type.someStaticMethod()).toBe('someReturnValue');
    expect(console.error.calls.count()).toBe(0);});


  // NOTE: We're explicitly not using JSX here. This is intended to test
  // classic JS without JSX.
  it('identifies valid elements', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('div');} });



    expect(React.isValidElement(React.createElement('div'))).
    toEqual(true);
    expect(React.isValidElement(React.createElement(Component))).
    toEqual(true);

    expect(React.isValidElement(null)).toEqual(false);
    expect(React.isValidElement(true)).toEqual(false);
    expect(React.isValidElement({})).toEqual(false);
    expect(React.isValidElement('string')).toEqual(false);
    expect(React.isValidElement(React.DOM.div)).toEqual(false);
    expect(React.isValidElement(Component)).toEqual(false);
    expect(React.isValidElement({ type: 'div', props: {} })).toEqual(false);

    var jsonElement = JSON.stringify(React.createElement('div'));
    expect(React.isValidElement(JSON.parse(jsonElement))).toBe(true);});


  it('allows the use of PropTypes validators in statics', function () {
    // TODO: This test was added to cover a special case where we proxied
    // methods. However, we don't do that any more so this test can probably
    // be removed. Leaving it in classic as a safety precaution.
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {return null;}, 
      statics: { 
        specialType: React.PropTypes.shape({ monkey: React.PropTypes.any }) } });



    expect(typeof Component.specialType).toBe('function');
    expect(typeof Component.specialType.isRequired).toBe('function');});


  // NOTE: We're explicitly not using JSX here. This is intended to test
  // classic JS without JSX.
  it('is indistinguishable from a plain object', function () {
    var element = React.createElement('div', { className: 'foo' });
    var object = {};
    expect(element.constructor).toBe(object.constructor);});


  // NOTE: We're explicitly not using JSX here. This is intended to test
  // classic JS without JSX.
  it('should use default prop value when removing a prop', function () {
    var Component = React.createClass({ displayName: 'Component', 
      getDefaultProps: function () {
        return { fruit: 'persimmon' };}, 

      render: function () {
        return React.createElement('span');} });



    var container = document.createElement('div');
    var instance = ReactDOM.render(
    React.createElement(Component, { fruit: 'mango' }), 
    container);

    expect(instance.props.fruit).toBe('mango');

    ReactDOM.render(React.createElement(Component), container);
    expect(instance.props.fruit).toBe('persimmon');});


  // NOTE: We're explicitly not using JSX here. This is intended to test
  // classic JS without JSX.
  it('should normalize props with default values', function () {
    var Component = React.createClass({ displayName: 'Component', 
      getDefaultProps: function () {
        return { prop: 'testKey' };}, 

      render: function () {
        return React.createElement('span', null, this.props.prop);} });



    var instance = ReactTestUtils.renderIntoDocument(
    React.createElement(Component));

    expect(instance.props.prop).toBe('testKey');

    var inst2 = ReactTestUtils.renderIntoDocument(
    React.createElement(Component, { prop: null }));

    expect(inst2.props.prop).toBe(null);});


  it('throws when changing a prop (in dev) after element creation', function () {
    var Outer = React.createClass({ displayName: 'Outer', 
      render: function () {
        var el = React.createElement('div', { className: 'moo', __source: { fileName: _jsxFileName, lineNumber: 444 } });

        expect(function () {
          el.props.className = 'quack';}).
        toThrow();
        expect(el.props.className).toBe('moo');

        return el;} });


    var outer = ReactTestUtils.renderIntoDocument(React.createElement(Outer, { color: 'orange', __source: { fileName: _jsxFileName, lineNumber: 454 } }));
    expect(ReactDOM.findDOMNode(outer).className).toBe('moo');});


  it('throws when adding a prop (in dev) after element creation', function () {
    var container = document.createElement('div');
    var Outer = React.createClass({ displayName: 'Outer', 
      getDefaultProps: function () {return { sound: 'meow' };}, 
      render: function () {
        var el = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 463 } }, this.props.sound);

        expect(function () {
          el.props.className = 'quack';}).
        toThrow();

        expect(el.props.className).toBe(undefined);

        return el;} });


    var outer = ReactDOM.render(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 474 } }), container);
    expect(ReactDOM.findDOMNode(outer).textContent).toBe('meow');
    expect(ReactDOM.findDOMNode(outer).className).toBe('');});


  it('does not warn for NaN props', function () {
    spyOn(console, 'error');
    var Test = React.createClass({ displayName: 'Test', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 483 } });} });


    var test = ReactTestUtils.renderIntoDocument(React.createElement(Test, { value: +undefined, __source: { fileName: _jsxFileName, lineNumber: 486 } }));
    expect(test.props.value).toBeNaN();
    expect(console.error.calls.count()).toBe(0);});


  // NOTE: We're explicitly not using JSX here. This is intended to test
  // classic JS without JSX.
  it('identifies elements, but not JSON, if Symbols are supported', function () {
    // Rudimentary polyfill
    // Once all jest engines support Symbols natively we can swap this to test
    // WITH native Symbols by default.
    var REACT_ELEMENT_TYPE = function () {}; // fake Symbol
    var OTHER_SYMBOL = function () {}; // another fake Symbol
    global.Symbol = function (name) {
      return OTHER_SYMBOL;};

    global.Symbol['for'] = function (key) {
      if (key === 'react.element') {
        return REACT_ELEMENT_TYPE;}

      return OTHER_SYMBOL;};


    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('div');} });



    expect(React.isValidElement(React.createElement('div'))).
    toEqual(true);
    expect(React.isValidElement(React.createElement(Component))).
    toEqual(true);

    expect(React.isValidElement(null)).toEqual(false);
    expect(React.isValidElement(true)).toEqual(false);
    expect(React.isValidElement({})).toEqual(false);
    expect(React.isValidElement('string')).toEqual(false);
    expect(React.isValidElement(React.DOM.div)).toEqual(false);
    expect(React.isValidElement(Component)).toEqual(false);
    expect(React.isValidElement({ type: 'div', props: {} })).toEqual(false);

    var jsonElement = JSON.stringify(React.createElement('div'));
    expect(React.isValidElement(JSON.parse(jsonElement))).toBe(false);});});




describe('comparing jsx vs .createFactory() vs .createElement()', function () {
  var Child;

  beforeEach(function () {
    jest.resetModuleRegistry();
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    Child = jest.genMockFromModule('ReactElementTestChild');});



  describe('when using jsx only', function () {
    var Parent, instance;
    beforeEach(function () {
      Parent = React.createClass({ displayName: 'Parent', 
        render: function () {
          return (
            React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 556 } }, 
            React.createElement(Child, { ref: 'child', foo: 'foo value', __source: { fileName: _jsxFileName, lineNumber: 557 } }, 'children value')));} });




      instance = ReactTestUtils.renderIntoDocument(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 562 } }));});


    it('should scry children but cannot', function () {
      var children = ReactTestUtils.scryRenderedComponentsWithType(instance, Child);
      expect(children.length).toBe(1);});


    it('does not maintain refs', function () {
      expect(instance.refs.child).not.toBeUndefined();});


    it('can capture Child instantiation calls', function () {
      expect(Child.mock.calls[0][0]).toEqual({ foo: 'foo value', children: 'children value' });});});



  describe('when using parent that uses .createFactory()', function () {
    var factory, instance;
    beforeEach(function () {
      var childFactory = React.createFactory(Child);
      var Parent = React.createClass({ displayName: 'Parent', 
        render: function () {
          return React.DOM.div({}, childFactory({ ref: 'child', foo: 'foo value' }, 'children value'));} });


      factory = React.createFactory(Parent);
      instance = ReactTestUtils.renderIntoDocument(factory());});


    it('can properly scry children', function () {
      var children = ReactTestUtils.scryRenderedComponentsWithType(instance, Child);
      expect(children.length).toBe(1);});


    it('does not maintain refs', function () {
      expect(instance.refs.child).not.toBeUndefined();});


    it('can capture Child instantiation calls', function () {
      expect(Child.mock.calls[0][0]).toEqual({ foo: 'foo value', children: 'children value' });});});



  describe('when using parent that uses .createElement()', function () {
    var factory, instance;
    beforeEach(function () {
      var Parent = React.createClass({ displayName: 'Parent', 
        render: function () {
          return React.DOM.div({}, React.createElement(Child, { ref: 'child', foo: 'foo value' }, 'children value'));} });


      factory = React.createFactory(Parent);
      instance = ReactTestUtils.renderIntoDocument(factory());});


    it('should scry children but cannot', function () {
      var children = ReactTestUtils.scryRenderedComponentsWithType(instance, Child);
      expect(children.length).toBe(1);});


    it('does not maintain refs', function () {
      expect(instance.refs.child).not.toBeUndefined();});


    it('can capture Child instantiation calls', function () {
      expect(Child.mock.calls[0][0]).toEqual({ foo: 'foo value', children: 'children value' });});});});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],43:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\classic\\element\\__tests__\\ReactElementClone-test.js';

var React;
var ReactDOM;
var ReactTestUtils;

describe('ReactElementClone', function () {
  var ComponentClass;

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

    // NOTE: We're explicitly not using JSX here. This is intended to test
    // classic JS without JSX.
    ComponentClass = React.createClass({ displayName: 'ComponentClass', 
      render: function () {
        return React.createElement('div');} });});




  it('should clone a DOM component with new props', function () {
    var Grandparent = React.createClass({ displayName: 'Grandparent', 
      render: function () {
        return React.createElement(Parent, { child: React.createElement('div', { className: 'child', __source: { fileName: _jsxFileName, lineNumber: 38 } }), __source: { fileName: _jsxFileName, lineNumber: 38 } });} });


    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return (
          React.createElement('div', { className: 'parent', __source: { fileName: _jsxFileName, lineNumber: 44 } }, 
          React.cloneElement(this.props.child, { className: 'xyz' })));} });




    var component = ReactTestUtils.renderIntoDocument(React.createElement(Grandparent, { __source: { fileName: _jsxFileName, lineNumber: 50 } }));
    expect(ReactDOM.findDOMNode(component).childNodes[0].className).toBe('xyz');});


  it('should clone a composite component with new props', function () {
    var Child = React.createClass({ displayName: 'Child', 
      render: function () {
        return React.createElement('div', { className: this.props.className, __source: { fileName: _jsxFileName, lineNumber: 57 } });} });


    var Grandparent = React.createClass({ displayName: 'Grandparent', 
      render: function () {
        return React.createElement(Parent, { child: React.createElement(Child, { className: 'child', __source: { fileName: _jsxFileName, lineNumber: 62 } }), __source: { fileName: _jsxFileName, lineNumber: 62 } });} });


    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return (
          React.createElement('div', { className: 'parent', __source: { fileName: _jsxFileName, lineNumber: 68 } }, 
          React.cloneElement(this.props.child, { className: 'xyz' })));} });




    var component = ReactTestUtils.renderIntoDocument(React.createElement(Grandparent, { __source: { fileName: _jsxFileName, lineNumber: 74 } }));
    expect(ReactDOM.findDOMNode(component).childNodes[0].className).toBe('xyz');});


  it('should warn if the config object inherits from any type other than Object', function () {
    spyOn(console, 'error');
    React.cloneElement('div', { foo: 1 });
    expect(console.error).not.toHaveBeenCalled();
    React.cloneElement('div', Object.create({ foo: 1 }));
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'React.cloneElement(...): Expected props argument to be a plain object. ' + 
    'Properties defined in its prototype chain will be ignored.');});



  it('does not fail if config has no prototype', function () {
    var config = Object.create(null, { foo: { value: 1, enumerable: true } });
    React.cloneElement(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 92 } }), config);});


  it('should keep the original ref if it is not overridden', function () {
    var Grandparent = React.createClass({ displayName: 'Grandparent', 
      render: function () {
        return React.createElement(Parent, { child: React.createElement('div', { ref: 'yolo', __source: { fileName: _jsxFileName, lineNumber: 98 } }), __source: { fileName: _jsxFileName, lineNumber: 98 } });} });



    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 105 } }, 
          React.cloneElement(this.props.child, { className: 'xyz' })));} });





    var component = ReactTestUtils.renderIntoDocument(React.createElement(Grandparent, { __source: { fileName: _jsxFileName, lineNumber: 112 } }));
    expect(component.refs.yolo.tagName).toBe('DIV');});


  it('should transfer the key property', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return null;} });


    var clone = React.cloneElement(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 122 } }), { key: 'xyz' });
    expect(clone.key).toBe('xyz');});


  it('should transfer children', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        expect(this.props.children).toBe('xyz');
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 130 } });} });



    ReactTestUtils.renderIntoDocument(
    React.cloneElement(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 135 } }), { children: 'xyz' }));});



  it('should shallow clone children', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        expect(this.props.children).toBe('xyz');
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 143 } });} });



    ReactTestUtils.renderIntoDocument(
    React.cloneElement(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 148 } }, 'xyz'), {}));});



  it('should accept children as rest arguments', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return null;} });



    var clone = React.cloneElement(
    React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 160 } }, 'xyz'), 
    { children: React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 161 } }) }, 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 162 } }), 
    React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 163 } }));


    expect(clone.props.children).toEqual([
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 167 } }), 
    React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 168 } })]);});



  it('should override children if undefined is provided as an argument', function () {
    var element = React.createElement(ComponentClass, { 
      children: 'text' }, 
    undefined);
    expect(element.props.children).toBe(undefined);

    var element2 = React.cloneElement(React.createElement(ComponentClass, { 
      children: 'text' }), 
    {}, undefined);
    expect(element2.props.children).toBe(undefined);});


  it('should support keys and refs', function () {
    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        var clone = 
        React.cloneElement(this.props.children, { key: 'xyz', ref: 'xyz' });
        expect(clone.key).toBe('xyz');
        expect(clone.ref).toBe('xyz');
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 191 } }, clone);} });



    var Grandparent = React.createClass({ displayName: 'Grandparent', 
      render: function () {
        return React.createElement(Parent, { ref: 'parent', __source: { fileName: _jsxFileName, lineNumber: 197 } }, React.createElement('span', { key: 'abc', __source: { fileName: _jsxFileName, lineNumber: 197 } }));} });



    var component = ReactTestUtils.renderIntoDocument(React.createElement(Grandparent, { __source: { fileName: _jsxFileName, lineNumber: 201 } }));
    expect(component.refs.parent.refs.xyz.tagName).toBe('SPAN');});


  it('should steal the ref if a new ref is specified', function () {
    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        var clone = React.cloneElement(this.props.children, { ref: 'xyz' });
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 209 } }, clone);} });



    var Grandparent = React.createClass({ displayName: 'Grandparent', 
      render: function () {
        return React.createElement(Parent, { ref: 'parent', __source: { fileName: _jsxFileName, lineNumber: 215 } }, React.createElement('span', { ref: 'child', __source: { fileName: _jsxFileName, lineNumber: 215 } }));} });



    var component = ReactTestUtils.renderIntoDocument(React.createElement(Grandparent, { __source: { fileName: _jsxFileName, lineNumber: 219 } }));
    expect(component.refs.child).toBeUndefined();
    expect(component.refs.parent.refs.xyz.tagName).toBe('SPAN');});


  it('should overwrite props', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        expect(this.props.myprop).toBe('xyz');
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 228 } });} });



    ReactTestUtils.renderIntoDocument(
    React.cloneElement(React.createElement(Component, { myprop: 'abc', __source: { fileName: _jsxFileName, lineNumber: 233 } }), { myprop: 'xyz' }));});



  it('should normalize props with default values', function () {
    var Component = React.createClass({ displayName: 'Component', 
      getDefaultProps: function () {
        return { prop: 'testKey' };}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 243 } });} });



    var instance = React.createElement(Component);
    var clonedInstance = React.cloneElement(instance, { prop: undefined });
    expect(clonedInstance.props.prop).toBe('testKey');
    var clonedInstance2 = React.cloneElement(instance, { prop: null });
    expect(clonedInstance2.props.prop).toBe(null);

    var instance2 = React.createElement(Component, { prop: 'newTestKey' });
    var cloneInstance3 = React.cloneElement(instance2, { prop: undefined });
    expect(cloneInstance3.props.prop).toBe('testKey');
    var cloneInstance4 = React.cloneElement(instance2, {});
    expect(cloneInstance4.props.prop).toBe('newTestKey');});


  it('warns for keys for arrays of elements in rest args', function () {
    spyOn(console, 'error');

    React.cloneElement(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 263 } }), null, [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 263 } }), React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 263 } })]);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Each child in an array or iterator should have a unique "key" prop.');});



  it('does not warns for arrays of elements with keys', function () {
    spyOn(console, 'error');

    React.cloneElement(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 274 } }), null, [React.createElement('div', { key: '#1', __source: { fileName: _jsxFileName, lineNumber: 274 } }), React.createElement('div', { key: '#2', __source: { fileName: _jsxFileName, lineNumber: 274 } })]);

    expect(console.error.calls.count()).toBe(0);});


  it('does not warn when the element is directly in rest args', function () {
    spyOn(console, 'error');

    React.cloneElement(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 282 } }), null, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 282 } }), React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 282 } }));

    expect(console.error.calls.count()).toBe(0);});


  it('does not warn when the array contains a non-element', function () {
    spyOn(console, 'error');

    React.cloneElement(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 290 } }), null, [{}, {}]);

    expect(console.error.calls.count()).toBe(0);});


  it('should check declared prop types after clone', function () {
    spyOn(console, 'error');
    var Component = React.createClass({ displayName: 'Component', 
      propTypes: { 
        color: React.PropTypes.string.isRequired }, 

      render: function () {
        return React.createElement('div', null, 'My color is ' + this.color);} });


    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return React.cloneElement(this.props.child, { color: 123 });} });


    var GrandParent = React.createClass({ displayName: 'GrandParent', 
      render: function () {
        return React.createElement(
        Parent, 
        { child: React.createElement(Component, { color: 'red' }) });} });



    ReactTestUtils.renderIntoDocument(React.createElement(GrandParent));
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Failed prop type: ' + 
    'Invalid prop `color` of type `number` supplied to `Component`, ' + 
    'expected `string`.\n' + 
    '    in Component (created by GrandParent)\n' + 
    '    in Parent (created by GrandParent)\n' + 
    '    in GrandParent');});



  it('should ignore key and ref warning getters', function () {
    var elementA = React.createElement('div');
    var elementB = React.cloneElement(elementA, elementA.props);
    expect(elementB.key).toBe(null);
    expect(elementB.ref).toBe(null);});


  it('should ignore undefined key and ref', function () {
    var element = React.createFactory(ComponentClass)({ 
      key: '12', 
      ref: '34', 
      foo: '56' });

    var props = { 
      key: undefined, 
      ref: undefined, 
      foo: 'ef' };

    var clone = React.cloneElement(element, props);
    expect(clone.type).toBe(ComponentClass);
    expect(clone.key).toBe('12');
    expect(clone.ref).toBe('34');
    expect(Object.isFrozen(element)).toBe(true);
    expect(Object.isFrozen(element.props)).toBe(true);
    expect(clone.props).toEqual({ foo: 'ef' });});


  it('should extract null key and ref', function () {
    var element = React.createFactory(ComponentClass)({ 
      key: '12', 
      ref: '34', 
      foo: '56' });

    var props = { 
      key: null, 
      ref: null, 
      foo: 'ef' };

    var clone = React.cloneElement(element, props);
    expect(clone.type).toBe(ComponentClass);
    expect(clone.key).toBe('null');
    expect(clone.ref).toBe(null);
    expect(Object.isFrozen(element)).toBe(true);
    expect(Object.isFrozen(element.props)).toBe(true);
    expect(clone.props).toEqual({ foo: 'ef' });});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],44:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

// NOTE: We're explicitly not using JSX in this file. This is intended to test
// classic JS without JSX.
var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\classic\\element\\__tests__\\ReactElementValidator-test.js';
var React;
var ReactDOM;
var ReactTestUtils;

describe('ReactElementValidator', function () {
  function normalizeCodeLocInfo(str) {
    return str.replace(/\(at .+?:\d+\)/g, '(at **)');}


  var ComponentClass;

  beforeEach(function () {
    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    ComponentClass = React.createClass({ displayName: 'ComponentClass', 
      render: function () {
        return React.createElement('div');} });});




  it('warns for keys for arrays of elements in rest args', function () {
    spyOn(console, 'error');
    var Component = React.createFactory(ComponentClass);

    Component(null, [Component(), Component()]);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Each child in an array or iterator should have a unique "key" prop.');});



  it('warns for keys for arrays of elements with owner info', function () {
    spyOn(console, 'error');
    var Component = React.createFactory(ComponentClass);

    var InnerClass = React.createClass({ 
      displayName: 'InnerClass', 
      render: function () {
        return Component(null, this.props.childSet);} });



    var InnerComponent = React.createFactory(InnerClass);

    var ComponentWrapper = React.createClass({ 
      displayName: 'ComponentWrapper', 
      render: function () {
        return InnerComponent({ childSet: [Component(), Component()] });} });



    ReactTestUtils.renderIntoDocument(
    React.createElement(ComponentWrapper));


    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Each child in an array or iterator should have a unique "key" prop. ' + 
    'Check the render method of `InnerClass`. ' + 
    'It was passed a child from ComponentWrapper. ');});



  it('warns for keys for arrays with no owner or parent info', function () {
    spyOn(console, 'error');

    var Anonymous = React.createClass({ 
      displayName: undefined, 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 91 } });} });



    var divs = [
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 96 } }), 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 97 } })];

    ReactTestUtils.renderIntoDocument(React.createElement(Anonymous, { __source: { fileName: _jsxFileName, lineNumber: 99 } }, divs));

    expect(console.error.calls.count()).toBe(1);
    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
    'Warning: Each child in an array or iterator should have a unique ' + 
    '"key" prop. See https://fb.me/react-warning-keys for more information.\n' + 
    '    in div (at **)');});



  it('warns for keys for arrays of elements with no owner info', function () {
    spyOn(console, 'error');

    var divs = [
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 113 } }), 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 114 } })];

    ReactTestUtils.renderIntoDocument(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 116 } }, divs));

    expect(console.error.calls.count()).toBe(1);
    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
    'Warning: Each child in an array or iterator should have a unique ' + 
    '"key" prop. Check the top-level render call using <div>. See ' + 
    'https://fb.me/react-warning-keys for more information.\n' + 
    '    in div (at **)');});



  it('warns for keys with component stack info', function () {
    spyOn(console, 'error');

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 132 } }, [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 132 } }), React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 132 } })]);} });



    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return React.cloneElement(this.props.child);} });



    var GrandParent = React.createClass({ displayName: 'GrandParent', 
      render: function () {
        return React.createElement(Parent, { child: React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 144 } }), __source: { fileName: _jsxFileName, lineNumber: 144 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(GrandParent, { __source: { fileName: _jsxFileName, lineNumber: 148 } }));

    expect(console.error.calls.count()).toBe(1);
    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
    'Warning: Each child in an array or iterator should have a unique ' + 
    '"key" prop. Check the render method of `Component`. See ' + 
    'https://fb.me/react-warning-keys for more information.\n' + 
    '    in div (at **)\n' + 
    '    in Component (at **)\n' + 
    '    in Parent (at **)\n' + 
    '    in GrandParent (at **)');});



  it('does not warn for keys when passing children down', function () {
    spyOn(console, 'error');

    var Wrapper = React.createClass({ displayName: 'Wrapper', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 168 } }, 
          this.props.children, 
          React.createElement('footer', { __source: { fileName: _jsxFileName, lineNumber: 170 } })));} });





    ReactTestUtils.renderIntoDocument(
    React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 177 } }, 
    React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 178 } }), 
    React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 179 } })));



    expect(console.error.calls.count()).toBe(0);});


  it('warns for keys for iterables of elements in rest args', function () {
    spyOn(console, 'error');
    var Component = React.createFactory(ComponentClass);

    var iterable = { 
      '@@iterator': function () {
        var i = 0;
        return { 
          next: function () {
            var done = ++i > 2;
            return { value: done ? undefined : Component(), done: done };} };} };





    Component(null, iterable);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Each child in an array or iterator should have a unique "key" prop.');});



  it('does not warns for arrays of elements with keys', function () {
    spyOn(console, 'error');
    var Component = React.createFactory(ComponentClass);

    Component(null, [Component({ key: '#1' }), Component({ key: '#2' })]);

    expect(console.error.calls.count()).toBe(0);});


  it('does not warns for iterable elements with keys', function () {
    spyOn(console, 'error');
    var Component = React.createFactory(ComponentClass);

    var iterable = { 
      '@@iterator': function () {
        var i = 0;
        return { 
          next: function () {
            var done = ++i > 2;
            return { 
              value: done ? undefined : Component({ key: '#' + i }), 
              done: done };} };} };






    Component(null, iterable);

    expect(console.error.calls.count()).toBe(0);});


  it('does not warn when the element is directly in rest args', function () {
    spyOn(console, 'error');
    var Component = React.createFactory(ComponentClass);

    Component(null, Component(), Component());

    expect(console.error.calls.count()).toBe(0);});


  it('does not warn when the array contains a non-element', function () {
    spyOn(console, 'error');
    var Component = React.createFactory(ComponentClass);

    Component(null, [{}, {}]);

    expect(console.error.calls.count()).toBe(0);});


  // TODO: These warnings currently come from the composite component, but
  // they should be moved into the ReactElementValidator.

  it('should give context for PropType errors in nested components.', function () {
    // In this test, we're making sure that if a proptype error is found in a
    // component, we give a small hint as to which parent instantiated that
    // component as per warnings about key usage in ReactElementValidator.
    spyOn(console, 'error');
    var MyComp = React.createClass({ displayName: 'MyComp', 
      propTypes: { 
        color: React.PropTypes.string }, 

      render: function () {
        return React.createElement('div', null, 'My color is ' + this.color);} });


    var ParentComp = React.createClass({ displayName: 'ParentComp', 
      render: function () {
        return React.createElement(MyComp, { color: 123 });} });


    ReactTestUtils.renderIntoDocument(React.createElement(ParentComp));
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Failed prop type: ' + 
    'Invalid prop `color` of type `number` supplied to `MyComp`, ' + 
    'expected `string`.\n' + 
    '    in MyComp (created by ParentComp)\n' + 
    '    in ParentComp');});



  it('gives a helpful error when passing null, undefined, boolean, or number', function () {
    spyOn(console, 'error');
    React.createElement(undefined);
    React.createElement(null);
    React.createElement(true);
    React.createElement(123);
    expect(console.error.calls.count()).toBe(4);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: React.createElement: type should not be null, undefined, ' + 
    'boolean, or number. It should be a string (for DOM elements) or a ' + 
    'ReactClass (for composite components).');

    expect(console.error.calls.argsFor(1)[0]).toBe(
    'Warning: React.createElement: type should not be null, undefined, ' + 
    'boolean, or number. It should be a string (for DOM elements) or a ' + 
    'ReactClass (for composite components).');

    expect(console.error.calls.argsFor(2)[0]).toBe(
    'Warning: React.createElement: type should not be null, undefined, ' + 
    'boolean, or number. It should be a string (for DOM elements) or a ' + 
    'ReactClass (for composite components).');

    expect(console.error.calls.argsFor(3)[0]).toBe(
    'Warning: React.createElement: type should not be null, undefined, ' + 
    'boolean, or number. It should be a string (for DOM elements) or a ' + 
    'ReactClass (for composite components).');

    React.createElement('div');
    expect(console.error.calls.count()).toBe(4);});


  it('includes the owner name when passing null, undefined, boolean, or number', function () {
    spyOn(console, 'error');
    var ParentComp = React.createClass({ displayName: 'ParentComp', 
      render: function () {
        return React.createElement(null);} });


    expect(function () {
      ReactTestUtils.renderIntoDocument(React.createElement(ParentComp));}).
    toThrowError(
    'Element type is invalid: expected a string (for built-in components) ' + 
    'or a class/function (for composite components) but got: null. Check ' + 
    'the render method of `ParentComp`.');

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: React.createElement: type should not be null, undefined, ' + 
    'boolean, or number. It should be a string (for DOM elements) or a ' + 
    'ReactClass (for composite components). Check the render method of ' + 
    '`ParentComp`.');});



  it('should check default prop values', function () {
    spyOn(console, 'error');

    var Component = React.createClass({ displayName: 'Component', 
      propTypes: { prop: React.PropTypes.string.isRequired }, 
      getDefaultProps: function () {
        return { prop: null };}, 

      render: function () {
        return React.createElement('span', null, this.props.prop);} });



    ReactTestUtils.renderIntoDocument(React.createElement(Component));

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Failed prop type: ' + 
    'Required prop `prop` was not specified in `Component`.\n' + 
    '    in Component');});



  it('should not check the default for explicit null', function () {
    spyOn(console, 'error');

    var Component = React.createClass({ displayName: 'Component', 
      propTypes: { prop: React.PropTypes.string.isRequired }, 
      getDefaultProps: function () {
        return { prop: 'text' };}, 

      render: function () {
        return React.createElement('span', null, this.props.prop);} });



    ReactTestUtils.renderIntoDocument(
    React.createElement(Component, { prop: null }));


    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Failed prop type: ' + 
    'Required prop `prop` was not specified in `Component`.\n' + 
    '    in Component');});



  it('should check declared prop types', function () {
    spyOn(console, 'error');

    var Component = React.createClass({ displayName: 'Component', 
      propTypes: { 
        prop: React.PropTypes.string.isRequired }, 

      render: function () {
        return React.createElement('span', null, this.props.prop);} });



    ReactTestUtils.renderIntoDocument(
    React.createElement(Component));

    ReactTestUtils.renderIntoDocument(
    React.createElement(Component, { prop: 42 }));


    expect(console.error.calls.count()).toBe(2);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Failed prop type: ' + 
    'Required prop `prop` was not specified in `Component`.\n' + 
    '    in Component');


    expect(console.error.calls.argsFor(1)[0]).toBe(
    'Warning: Failed prop type: ' + 
    'Invalid prop `prop` of type `number` supplied to ' + 
    '`Component`, expected `string`.\n' + 
    '    in Component');


    ReactTestUtils.renderIntoDocument(
    React.createElement(Component, { prop: 'string' }));


    // Should not error for strings
    expect(console.error.calls.count()).toBe(2);});


  it('should warn if a PropType creator is used as a PropType', function () {
    spyOn(console, 'error');

    var Component = React.createClass({ displayName: 'Component', 
      propTypes: { 
        myProp: React.PropTypes.shape }, 

      render: function () {
        return React.createElement('span', null, this.props.myProp.value);} });



    ReactTestUtils.renderIntoDocument(
    React.createElement(Component, { myProp: { value: 'hi' } }));


    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Component: type specification of prop `myProp` is invalid; ' + 
    'the type checker function must return `null` or an `Error` but ' + 
    'returned a function. You may have forgotten to pass an argument to ' + 
    'the type checker creator (arrayOf, instanceOf, objectOf, oneOf, ' + 
    'oneOfType, and shape all require an argument).');});



  it('should warn when accessing .type on an element factory', function () {
    spyOn(console, 'error');
    var TestComponent = React.createClass({ displayName: 'TestComponent', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 465 } });} });


    var TestFactory = React.createFactory(TestComponent);
    expect(TestFactory.type).toBe(TestComponent);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Factory.type is deprecated. Access the class directly before ' + 
    'passing it to createFactory.');

    // Warn once, not again
    expect(TestFactory.type).toBe(TestComponent);
    expect(console.error.calls.count()).toBe(1);});


  it('does not warn when using DOM node as children', function () {
    spyOn(console, 'error');
    var DOMContainer = React.createClass({ displayName: 'DOMContainer', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 484 } });}, 

      componentDidMount: function () {
        ReactDOM.findDOMNode(this).appendChild(this.props.children);} });



    var node = document.createElement('div');
    // This shouldn't cause a stack overflow or any other problems (#3883)
    ReactTestUtils.renderIntoDocument(React.createElement(DOMContainer, { __source: { fileName: _jsxFileName, lineNumber: 493 } }, node));
    expect(console.error.calls.count()).toBe(0);});


  it('should not enumerate enumerable numbers (#4776)', function () {
    /*eslint-disable no-extend-native */
    Number.prototype['@@iterator'] = function () {
      throw new Error('number iterator called');};

    /*eslint-enable no-extend-native */

    try {
      void 
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 506 } }, 
      5, 
      12, 
      13);} finally 


    {
      delete Number.prototype['@@iterator'];}});



  it('does not blow up with inlined children', function () {
    // We don't suggest this since it silences all sorts of warnings, but we
    // shouldn't blow up either.

    var child = { 
      $$typeof: React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 522 } }).$$typeof, 
      type: 'span', 
      key: null, 
      ref: null, 
      props: {}, 
      _owner: null };


    void React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 530 } }, [child]);});


  it('does not blow up on key warning with undefined type', function () {
    spyOn(console, 'error');
    var Foo = undefined;
    void React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 536 } }, [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 536 } })]);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: React.createElement: type should not be null, undefined, ' + 
    'boolean, or number. It should be a string (for DOM elements) or a ' + 
    'ReactClass (for composite components).');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],45:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if (__DEV__) {
  ReactPropTypeLocationNames = { 
    prop: 'prop', 
    context: 'context', 
    childContext: 'child context' };}



module.exports = ReactPropTypeLocationNames;
},{}],46:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var ReactPropTypeLocations = keyMirror({ 
  prop: null, 
  context: null, 
  childContext: null });


module.exports = ReactPropTypeLocations;
},{"fbjs/lib/keyMirror":417}],47:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');
var ReactPropTypeLocationNames = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocationNames.js');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getIteratorFn = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\getIteratorFn.js');

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = { 
  array: createPrimitiveTypeChecker('array'), 
  bool: createPrimitiveTypeChecker('boolean'), 
  func: createPrimitiveTypeChecker('function'), 
  number: createPrimitiveTypeChecker('number'), 
  object: createPrimitiveTypeChecker('object'), 
  string: createPrimitiveTypeChecker('string'), 
  symbol: createPrimitiveTypeChecker('symbol'), 

  any: createAnyTypeChecker(), 
  arrayOf: createArrayOfTypeChecker, 
  element: createElementTypeChecker(), 
  instanceOf: createInstanceTypeChecker, 
  node: createNodeChecker(), 
  objectOf: createObjectOfTypeChecker, 
  oneOf: createEnumTypeChecker, 
  oneOfType: createUnionTypeChecker, 
  shape: createShapeTypeChecker };


/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
/*eslint-disable no-self-compare*/
function is(x, y) {
  // SameValue algorithm
  if (x === y) {// Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return x !== 0 || 1 / x === 1 / y;} else 
  {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;}}


/*eslint-enable no-self-compare*/

function createChainableTypeChecker(validate) {
  function checkType(
  isRequired, 
  props, 
  propName, 
  componentName, 
  location, 
  propFullName) 
  {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
        'Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + 
        componentName + '`.'));}


      return null;} else 
    {
      return validate(props, propName, componentName, location, propFullName);}}



  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;}


function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
      'Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + 
      preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + 
      expectedType + '`.'));}


    return null;}

  return createChainableTypeChecker(validate);}


function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));}


function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new Error('Property `' + 
      propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');}


    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
      'Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + 
      propType + '` supplied to `' + componentName + '`, expected an array.'));}


    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(
      propValue, 
      i, 
      componentName, 
      location, 
      propFullName + '[' + i + ']');

      if (error instanceof Error) {
        return error;}}


    return null;}

  return createChainableTypeChecker(validate);}


function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
      'Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + 
      componentName + '`, expected a single ReactElement.'));}


    return null;}

  return createChainableTypeChecker(validate);}


function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new Error(
      'Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + 
      actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + 
      expectedClassName + '`.'));}


    return null;}

  return createChainableTypeChecker(validate);}


function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');});}





  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (is(propValue, expectedValues[i])) {
        return null;}}



    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
    'Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + 
    componentName + '`, expected one of ' + valuesString + '.'));}


  return createChainableTypeChecker(validate);}


function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new Error('Property `' + 
      propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');}


    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
      'Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + 
      propType + '` supplied to `' + componentName + '`, expected an object.'));}


    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(
        propValue, 
        key, 
        componentName, 
        location, 
        propFullName + '.' + key);

        if (error instanceof Error) {
          return error;}}}



    return null;}

  return createChainableTypeChecker(validate);}


function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');});}





  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (
      checker(props, propName, componentName, location, propFullName) == null) 
      {
        return null;}}



    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
    'Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + 
    componentName + '`.'));}


  return createChainableTypeChecker(validate);}


function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
      'Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + 
      componentName + '`, expected a ReactNode.'));}


    return null;}

  return createChainableTypeChecker(validate);}


function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
      'Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + 
      componentName + '`, expected `object`.'));}


    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;}

      var error = checker(
      propValue, 
      key, 
      componentName, 
      location, 
      propFullName + '.' + key);

      if (error) {
        return error;}}


    return null;}

  return createChainableTypeChecker(validate);}


function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);}

      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;}


      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;}}} else 


        {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;}}}}} else 




      {
        return false;}


      return true;
    default:
      return false;}}



function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === 'symbol') {
    return true;}


  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
  if (propValue['@@toStringTag'] === 'Symbol') {
    return true;}


  // Fallback for non-spec compliant Symbols which are polyfilled.
  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
    return true;}


  return false;}


// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';}

  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';}

  if (isSymbol(propType, propValue)) {
    return 'symbol';}

  return propType;}


// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';} else 
    if (propValue instanceof RegExp) {
      return 'regexp';}}


  return propType;}


// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return ANONYMOUS;}

  return propValue.constructor.name;}


module.exports = ReactPropTypes;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocationNames.js":45,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\getIteratorFn.js":296,"fbjs/lib/emptyFunction":406}],48:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\classic\\types\\__tests__\\ReactPropTypes-test.js';

var PropTypes;
var React;
var ReactFragment;
var ReactPropTypeLocations;
var ReactTestUtils;

var Component;
var MyComponent;
var requiredMessage = 
'Required prop `testProp` was not specified in `testComponent`.';

function typeCheckFail(declaration, value, message) {
  var props = { testProp: value };
  var error = declaration(
  props, 
  'testProp', 
  'testComponent', 
  ReactPropTypeLocations.prop);

  expect(error instanceof Error).toBe(true);
  expect(error.message).toBe(message);}


function typeCheckPass(declaration, value) {
  var props = { testProp: value };
  var error = declaration(
  props, 
  'testProp', 
  'testComponent', 
  ReactPropTypeLocations.prop);

  expect(error).toBe(null);}


describe('ReactPropTypes', function () {
  beforeEach(function () {
    PropTypes = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypes.js');
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactFragment = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js');
    ReactPropTypeLocations = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocations.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  describe('Primitive Types', function () {
    it('should warn for invalid strings', function () {
      typeCheckFail(
      PropTypes.string, 
      [], 
      'Invalid prop `testProp` of type `array` supplied to ' + 
      '`testComponent`, expected `string`.');

      typeCheckFail(
      PropTypes.string, 
      false, 
      'Invalid prop `testProp` of type `boolean` supplied to ' + 
      '`testComponent`, expected `string`.');

      typeCheckFail(
      PropTypes.string, 
      0, 
      'Invalid prop `testProp` of type `number` supplied to ' + 
      '`testComponent`, expected `string`.');

      typeCheckFail(
      PropTypes.string, 
      {}, 
      'Invalid prop `testProp` of type `object` supplied to ' + 
      '`testComponent`, expected `string`.');

      typeCheckFail(
      PropTypes.string, 
      Symbol(), 
      'Invalid prop `testProp` of type `symbol` supplied to ' + 
      '`testComponent`, expected `string`.');});



    it('should fail date and regexp correctly', function () {
      typeCheckFail(
      PropTypes.string, 
      new Date(), 
      'Invalid prop `testProp` of type `date` supplied to ' + 
      '`testComponent`, expected `string`.');

      typeCheckFail(
      PropTypes.string, 
      /please/, 
      'Invalid prop `testProp` of type `regexp` supplied to ' + 
      '`testComponent`, expected `string`.');});



    it('should not warn for valid values', function () {
      typeCheckPass(PropTypes.array, []);
      typeCheckPass(PropTypes.bool, false);
      typeCheckPass(PropTypes.func, function () {});
      typeCheckPass(PropTypes.number, 0);
      typeCheckPass(PropTypes.string, '');
      typeCheckPass(PropTypes.object, {});
      typeCheckPass(PropTypes.object, new Date());
      typeCheckPass(PropTypes.object, /please/);
      typeCheckPass(PropTypes.symbol, Symbol());});


    it('should be implicitly optional and not warn without values', function () {
      typeCheckPass(PropTypes.string, null);
      typeCheckPass(PropTypes.string, undefined);});


    it('should warn for missing required values', function () {
      typeCheckFail(PropTypes.string.isRequired, null, requiredMessage);
      typeCheckFail(PropTypes.string.isRequired, undefined, requiredMessage);});});



  describe('Any type', function () {
    it('should should accept any value', function () {
      typeCheckPass(PropTypes.any, 0);
      typeCheckPass(PropTypes.any, 'str');
      typeCheckPass(PropTypes.any, []);
      typeCheckPass(PropTypes.any, Symbol());});


    it('should be implicitly optional and not warn without values', function () {
      typeCheckPass(PropTypes.any, null);
      typeCheckPass(PropTypes.any, undefined);});


    it('should warn for missing required values', function () {
      typeCheckFail(PropTypes.any.isRequired, null, requiredMessage);
      typeCheckFail(PropTypes.any.isRequired, undefined, requiredMessage);});});



  describe('ArrayOf Type', function () {
    it('should fail for invalid argument', function () {
      typeCheckFail(
      PropTypes.arrayOf({ foo: PropTypes.string }), 
      { foo: 'bar' }, 
      'Property `testProp` of component `testComponent` has invalid PropType notation inside arrayOf.');});



    it('should support the arrayOf propTypes', function () {
      typeCheckPass(PropTypes.arrayOf(PropTypes.number), [1, 2, 3]);
      typeCheckPass(PropTypes.arrayOf(PropTypes.string), ['a', 'b', 'c']);
      typeCheckPass(PropTypes.arrayOf(PropTypes.oneOf(['a', 'b'])), ['a', 'b']);
      typeCheckPass(PropTypes.arrayOf(PropTypes.symbol), [Symbol(), Symbol()]);});


    it('should support arrayOf with complex types', function () {
      typeCheckPass(
      PropTypes.arrayOf(PropTypes.shape({ a: PropTypes.number.isRequired })), 
      [{ a: 1 }, { a: 2 }]);


      function Thing() {}
      typeCheckPass(
      PropTypes.arrayOf(PropTypes.instanceOf(Thing)), 
      [new Thing(), new Thing()]);});



    it('should warn with invalid items in the array', function () {
      typeCheckFail(
      PropTypes.arrayOf(PropTypes.number), 
      [1, 2, 'b'], 
      'Invalid prop `testProp[2]` of type `string` supplied to ' + 
      '`testComponent`, expected `number`.');});



    it('should warn with invalid complex types', function () {
      function Thing() {}
      var name = Thing.name || '<<anonymous>>';

      typeCheckFail(
      PropTypes.arrayOf(PropTypes.instanceOf(Thing)), 
      [new Thing(), 'xyz'], 
      'Invalid prop `testProp[1]` of type `String` supplied to ' + 
      '`testComponent`, expected instance of `' + name + '`.');});



    it('should warn when passed something other than an array', function () {
      typeCheckFail(
      PropTypes.arrayOf(PropTypes.number), 
      { '0': 'maybe-array', length: 1 }, 
      'Invalid prop `testProp` of type `object` supplied to ' + 
      '`testComponent`, expected an array.');

      typeCheckFail(
      PropTypes.arrayOf(PropTypes.number), 
      123, 
      'Invalid prop `testProp` of type `number` supplied to ' + 
      '`testComponent`, expected an array.');

      typeCheckFail(
      PropTypes.arrayOf(PropTypes.number), 
      'string', 
      'Invalid prop `testProp` of type `string` supplied to ' + 
      '`testComponent`, expected an array.');});



    it('should not warn when passing an empty array', function () {
      typeCheckPass(PropTypes.arrayOf(PropTypes.number), []);});


    it('should be implicitly optional and not warn without values', function () {
      typeCheckPass(PropTypes.arrayOf(PropTypes.number), null);
      typeCheckPass(PropTypes.arrayOf(PropTypes.number), undefined);});


    it('should warn for missing required values', function () {
      typeCheckFail(
      PropTypes.arrayOf(PropTypes.number).isRequired, 
      null, 
      requiredMessage);

      typeCheckFail(
      PropTypes.arrayOf(PropTypes.number).isRequired, 
      undefined, 
      requiredMessage);});});




  describe('Component Type', function () {
    beforeEach(function () {
      Component = React.createClass({ displayName: 'Component', 
        propTypes: { 
          label: PropTypes.element.isRequired }, 


        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 250 } }, this.props.label);} });});




    it('should support components', function () {
      typeCheckPass(PropTypes.element, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 256 } }));});


    it('should not support multiple components or scalar values', function () {
      var message = 'Invalid prop `testProp` supplied to `testComponent`, ' + 
      'expected a single ReactElement.';
      typeCheckFail(PropTypes.element, [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 262 } }), React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 262 } })], message);
      typeCheckFail(PropTypes.element, 123, message);
      typeCheckFail(PropTypes.element, 'foo', message);
      typeCheckFail(PropTypes.element, false, message);});


    it('should be able to define a single child as label', function () {
      spyOn(console, 'error');

      var instance = React.createElement(Component, { label: React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 271 } }), __source: { fileName: _jsxFileName, lineNumber: 271 } });
      instance = ReactTestUtils.renderIntoDocument(instance);

      expect(console.error.calls.count()).toBe(0);});


    it('should warn when passing no label and isRequired is set', function () {
      spyOn(console, 'error');

      var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 280 } });
      instance = ReactTestUtils.renderIntoDocument(instance);

      expect(console.error.calls.count()).toBe(1);});


    it('should be implicitly optional and not warn without values', function () {
      typeCheckPass(PropTypes.element, null);
      typeCheckPass(PropTypes.element, undefined);});


    it('should warn for missing required values', function () {
      typeCheckFail(PropTypes.element.isRequired, null, requiredMessage);
      typeCheckFail(PropTypes.element.isRequired, undefined, requiredMessage);});});



  describe('Instance Types', function () {
    it('should warn for invalid instances', function () {
      function Person() {}
      function Cat() {}
      var personName = Person.name || '<<anonymous>>';
      var dateName = Date.name || '<<anonymous>>';
      var regExpName = RegExp.name || '<<anonymous>>';

      typeCheckFail(
      PropTypes.instanceOf(Person), 
      false, 
      'Invalid prop `testProp` of type `Boolean` supplied to ' + 
      '`testComponent`, expected instance of `' + personName + '`.');

      typeCheckFail(
      PropTypes.instanceOf(Person), 
      {}, 
      'Invalid prop `testProp` of type `Object` supplied to ' + 
      '`testComponent`, expected instance of `' + personName + '`.');

      typeCheckFail(
      PropTypes.instanceOf(Person), 
      '', 
      'Invalid prop `testProp` of type `String` supplied to ' + 
      '`testComponent`, expected instance of `' + personName + '`.');

      typeCheckFail(
      PropTypes.instanceOf(Date), 
      {}, 
      'Invalid prop `testProp` of type `Object` supplied to ' + 
      '`testComponent`, expected instance of `' + dateName + '`.');

      typeCheckFail(
      PropTypes.instanceOf(RegExp), 
      {}, 
      'Invalid prop `testProp` of type `Object` supplied to ' + 
      '`testComponent`, expected instance of `' + regExpName + '`.');

      typeCheckFail(
      PropTypes.instanceOf(Person), 
      new Cat(), 
      'Invalid prop `testProp` of type `Cat` supplied to ' + 
      '`testComponent`, expected instance of `' + personName + '`.');

      typeCheckFail(
      PropTypes.instanceOf(Person), 
      Object.create(null), 
      'Invalid prop `testProp` of type `<<anonymous>>` supplied to ' + 
      '`testComponent`, expected instance of `' + personName + '`.');});



    it('should not warn for valid values', function () {
      function Person() {}
      function Engineer() {}
      Engineer.prototype = new Person();

      typeCheckPass(PropTypes.instanceOf(Person), new Person());
      typeCheckPass(PropTypes.instanceOf(Person), new Engineer());

      typeCheckPass(PropTypes.instanceOf(Date), new Date());
      typeCheckPass(PropTypes.instanceOf(RegExp), /please/);});


    it('should be implicitly optional and not warn without values', function () {
      typeCheckPass(PropTypes.instanceOf(String), null);
      typeCheckPass(PropTypes.instanceOf(String), undefined);});


    it('should warn for missing required values', function () {
      typeCheckFail(
      PropTypes.instanceOf(String).isRequired, null, requiredMessage);

      typeCheckFail(
      PropTypes.instanceOf(String).isRequired, undefined, requiredMessage);});});




  describe('React Component Types', function () {
    beforeEach(function () {
      MyComponent = React.createClass({ displayName: 'MyComponent', 
        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 380 } });} });});




    it('should warn for invalid values', function () {
      var failMessage = 'Invalid prop `testProp` supplied to ' + 
      '`testComponent`, expected a ReactNode.';
      typeCheckFail(PropTypes.node, true, failMessage);
      typeCheckFail(PropTypes.node, function () {}, failMessage);
      typeCheckFail(PropTypes.node, { key: function () {} }, failMessage);
      typeCheckFail(PropTypes.node, { key: React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 391 } }) }, failMessage);});


    it('should not warn for valid values', function () {
      spyOn(console, 'error');
      typeCheckPass(PropTypes.node, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 396 } }));
      typeCheckPass(PropTypes.node, false);
      typeCheckPass(PropTypes.node, React.createElement(MyComponent, { __source: { fileName: _jsxFileName, lineNumber: 398 } }));
      typeCheckPass(PropTypes.node, 'Some string');
      typeCheckPass(PropTypes.node, []);

      typeCheckPass(PropTypes.node, [
      123, 
      'Some string', 
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 405 } }), 
      ['Another string', [456], React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 406 } }), React.createElement(MyComponent, { __source: { fileName: _jsxFileName, lineNumber: 406 } })], 
      React.createElement(MyComponent, { __source: { fileName: _jsxFileName, lineNumber: 407 } })]);


      // Object of renderable things
      var frag = ReactFragment.create;
      typeCheckPass(PropTypes.node, frag({ 
        k0: 123, 
        k1: 'Some string', 
        k2: React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 415 } }), 
        k3: frag({ 
          k30: React.createElement(MyComponent, { __source: { fileName: _jsxFileName, lineNumber: 417 } }), 
          k31: frag({ k310: React.createElement('a', { __source: { fileName: _jsxFileName, lineNumber: 418 } }) }), 
          k32: 'Another string' }), 

        k4: null, 
        k5: undefined }));

      expect(console.error.calls.count()).toBe(0);});


    it('should not warn for iterables', function () {
      var iterable = { 
        '@@iterator': function () {
          var i = 0;
          return { 
            next: function () {
              var done = ++i > 2;
              return { value: done ? undefined : React.createElement(MyComponent, { __source: { fileName: _jsxFileName, lineNumber: 434 } }), done: done };} };} };





      typeCheckPass(PropTypes.node, iterable);});


    it('should not warn for entry iterables', function () {
      var iterable = { 
        '@@iterator': function () {
          var i = 0;
          return { 
            next: function () {
              var done = ++i > 2;
              return { value: done ? undefined : ['#' + i, React.createElement(MyComponent, { __source: { fileName: _jsxFileName, lineNumber: 450 } })], done: done };} };} };




      iterable.entries = iterable['@@iterator'];

      typeCheckPass(PropTypes.node, iterable);});


    it('should not warn for null/undefined if not required', function () {
      typeCheckPass(PropTypes.node, null);
      typeCheckPass(PropTypes.node, undefined);});


    it('should warn for missing required values', function () {
      typeCheckFail(
      PropTypes.node.isRequired, 
      null, 
      'Required prop `testProp` was not specified in `testComponent`.');

      typeCheckFail(
      PropTypes.node.isRequired, 
      undefined, 
      'Required prop `testProp` was not specified in `testComponent`.');});



    it('should accept empty array for required props', function () {
      typeCheckPass(PropTypes.node.isRequired, []);});});



  describe('ObjectOf Type', function () {
    it('should fail for invalid argument', function () {
      typeCheckFail(
      PropTypes.objectOf({ foo: PropTypes.string }), 
      { foo: 'bar' }, 
      'Property `testProp` of component `testComponent` has invalid PropType notation inside objectOf.');});



    it('should support the objectOf propTypes', function () {
      typeCheckPass(PropTypes.objectOf(PropTypes.number), { a: 1, b: 2, c: 3 });
      typeCheckPass(
      PropTypes.objectOf(PropTypes.string), 
      { a: 'a', b: 'b', c: 'c' });

      typeCheckPass(
      PropTypes.objectOf(PropTypes.oneOf(['a', 'b'])), 
      { a: 'a', b: 'b' });

      typeCheckPass(
      PropTypes.objectOf(PropTypes.symbol), 
      { a: Symbol(), b: Symbol(), c: Symbol() });});



    it('should support objectOf with complex types', function () {
      typeCheckPass(
      PropTypes.objectOf(PropTypes.shape({ a: PropTypes.number.isRequired })), 
      { a: { a: 1 }, b: { a: 2 } });


      function Thing() {}
      typeCheckPass(
      PropTypes.objectOf(PropTypes.instanceOf(Thing)), 
      { a: new Thing(), b: new Thing() });});



    it('should warn with invalid items in the object', function () {
      typeCheckFail(
      PropTypes.objectOf(PropTypes.number), 
      { a: 1, b: 2, c: 'b' }, 
      'Invalid prop `testProp.c` of type `string` supplied to `testComponent`, ' + 
      'expected `number`.');});



    it('should warn with invalid complex types', function () {
      function Thing() {}
      var name = Thing.name || '<<anonymous>>';

      typeCheckFail(
      PropTypes.objectOf(PropTypes.instanceOf(Thing)), 
      { a: new Thing(), b: 'xyz' }, 
      'Invalid prop `testProp.b` of type `String` supplied to ' + 
      '`testComponent`, expected instance of `' + name + '`.');});



    it('should warn when passed something other than an object', function () {
      typeCheckFail(
      PropTypes.objectOf(PropTypes.number), 
      [1, 2], 
      'Invalid prop `testProp` of type `array` supplied to ' + 
      '`testComponent`, expected an object.');

      typeCheckFail(
      PropTypes.objectOf(PropTypes.number), 
      123, 
      'Invalid prop `testProp` of type `number` supplied to ' + 
      '`testComponent`, expected an object.');

      typeCheckFail(
      PropTypes.objectOf(PropTypes.number), 
      'string', 
      'Invalid prop `testProp` of type `string` supplied to ' + 
      '`testComponent`, expected an object.');

      typeCheckFail(
      PropTypes.objectOf(PropTypes.symbol), 
      Symbol(), 
      'Invalid prop `testProp` of type `symbol` supplied to ' + 
      '`testComponent`, expected an object.');});



    it('should not warn when passing an empty object', function () {
      typeCheckPass(PropTypes.objectOf(PropTypes.number), {});});


    it('should be implicitly optional and not warn without values', function () {
      typeCheckPass(PropTypes.objectOf(PropTypes.number), null);
      typeCheckPass(PropTypes.objectOf(PropTypes.number), undefined);});


    it('should warn for missing required values', function () {
      typeCheckFail(
      PropTypes.objectOf(PropTypes.number).isRequired, 
      null, 
      requiredMessage);

      typeCheckFail(
      PropTypes.objectOf(PropTypes.number).isRequired, 
      undefined, 
      requiredMessage);});});




  describe('OneOf Types', function () {
    it('should fail for invalid argument', function () {
      typeCheckFail(
      PropTypes.oneOf('red', 'blue'), 
      'red', 
      'Invalid argument supplied to oneOf, expected an instance of array.');});



    it('should warn for invalid values', function () {
      typeCheckFail(
      PropTypes.oneOf(['red', 'blue']), 
      true, 
      'Invalid prop `testProp` of value `true` supplied to ' + 
      '`testComponent`, expected one of ["red","blue"].');

      typeCheckFail(
      PropTypes.oneOf(['red', 'blue']), 
      [], 
      'Invalid prop `testProp` of value `` supplied to `testComponent`, ' + 
      'expected one of ["red","blue"].');

      typeCheckFail(
      PropTypes.oneOf(['red', 'blue']), 
      '', 
      'Invalid prop `testProp` of value `` supplied to `testComponent`, ' + 
      'expected one of ["red","blue"].');

      typeCheckFail(
      PropTypes.oneOf([0, 'false']), 
      false, 
      'Invalid prop `testProp` of value `false` supplied to ' + 
      '`testComponent`, expected one of [0,"false"].');});



    it('should not warn for valid values', function () {
      typeCheckPass(PropTypes.oneOf(['red', 'blue']), 'red');
      typeCheckPass(PropTypes.oneOf(['red', 'blue']), 'blue');
      typeCheckPass(PropTypes.oneOf(['red', 'blue', NaN]), NaN);});


    it('should be implicitly optional and not warn without values', function () {
      typeCheckPass(PropTypes.oneOf(['red', 'blue']), null);
      typeCheckPass(PropTypes.oneOf(['red', 'blue']), undefined);});


    it('should warn for missing required values', function () {
      typeCheckFail(
      PropTypes.oneOf(['red', 'blue']).isRequired, 
      null, 
      requiredMessage);

      typeCheckFail(
      PropTypes.oneOf(['red', 'blue']).isRequired, 
      undefined, 
      requiredMessage);});});




  describe('Union Types', function () {
    it('should fail for invalid argument', function () {
      typeCheckFail(
      PropTypes.oneOfType(PropTypes.string, PropTypes.number), 
      'red', 
      'Invalid argument supplied to oneOfType, expected an instance of array.');});



    it('should warn if none of the types are valid', function () {
      typeCheckFail(
      PropTypes.oneOfType([PropTypes.string, PropTypes.number]), 
      [], 
      'Invalid prop `testProp` supplied to `testComponent`.');


      var checker = PropTypes.oneOfType([
      PropTypes.shape({ a: PropTypes.number.isRequired }), 
      PropTypes.shape({ b: PropTypes.number.isRequired })]);

      typeCheckFail(
      checker, 
      { c: 1 }, 
      'Invalid prop `testProp` supplied to `testComponent`.');});



    it('should not warn if one of the types are valid', function () {
      var checker = PropTypes.oneOfType([
      PropTypes.string, 
      PropTypes.number]);

      typeCheckPass(checker, null);
      typeCheckPass(checker, 'foo');
      typeCheckPass(checker, 123);

      checker = PropTypes.oneOfType([
      PropTypes.shape({ a: PropTypes.number.isRequired }), 
      PropTypes.shape({ b: PropTypes.number.isRequired })]);

      typeCheckPass(checker, { a: 1 });
      typeCheckPass(checker, { b: 1 });});


    it('should be implicitly optional and not warn without values', function () {
      typeCheckPass(
      PropTypes.oneOfType([PropTypes.string, PropTypes.number]), null);

      typeCheckPass(
      PropTypes.oneOfType([PropTypes.string, PropTypes.number]), undefined);});



    it('should warn for missing required values', function () {
      typeCheckFail(
      PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired, 
      null, 
      requiredMessage);

      typeCheckFail(
      PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired, 
      undefined, 
      requiredMessage);});});




  describe('Shape Types', function () {
    it('should warn for non objects', function () {
      typeCheckFail(
      PropTypes.shape({}), 
      'some string', 
      'Invalid prop `testProp` of type `string` supplied to ' + 
      '`testComponent`, expected `object`.');

      typeCheckFail(
      PropTypes.shape({}), 
      ['array'], 
      'Invalid prop `testProp` of type `array` supplied to ' + 
      '`testComponent`, expected `object`.');});



    it('should not warn for empty values', function () {
      typeCheckPass(PropTypes.shape({}), undefined);
      typeCheckPass(PropTypes.shape({}), null);
      typeCheckPass(PropTypes.shape({}), {});});


    it('should not warn for an empty object', function () {
      typeCheckPass(PropTypes.shape({}).isRequired, {});});


    it('should not warn for non specified types', function () {
      typeCheckPass(PropTypes.shape({}), { key: 1 });});


    it('should not warn for valid types', function () {
      typeCheckPass(PropTypes.shape({ key: PropTypes.number }), { key: 1 });});


    it('should warn for required valid types', function () {
      typeCheckFail(
      PropTypes.shape({ key: PropTypes.number.isRequired }), 
      {}, 
      'Required prop `testProp.key` was not specified in `testComponent`.');});



    it('should warn for the first required type', function () {
      typeCheckFail(
      PropTypes.shape({ 
        key: PropTypes.number.isRequired, 
        secondKey: PropTypes.number.isRequired }), 

      {}, 
      'Required prop `testProp.key` was not specified in `testComponent`.');});



    it('should warn for invalid key types', function () {
      typeCheckFail(PropTypes.shape({ key: PropTypes.number }), 
      { key: 'abc' }, 
      'Invalid prop `testProp.key` of type `string` supplied to `testComponent`, ' + 
      'expected `number`.');});



    it('should be implicitly optional and not warn without values', function () {
      typeCheckPass(
      PropTypes.shape(PropTypes.shape({ key: PropTypes.number })), null);

      typeCheckPass(
      PropTypes.shape(PropTypes.shape({ key: PropTypes.number })), undefined);});



    it('should warn for missing required values', function () {
      typeCheckFail(
      PropTypes.shape({ key: PropTypes.number }).isRequired, 
      null, 
      requiredMessage);

      typeCheckFail(
      PropTypes.shape({ key: PropTypes.number }).isRequired, 
      undefined, 
      requiredMessage);});});




  describe('Symbol Type', function () {
    it('should warn for non-symbol', function () {
      typeCheckFail(
      PropTypes.symbol, 
      'hello', 
      'Invalid prop `testProp` of type `string` supplied to ' + 
      '`testComponent`, expected `symbol`.');

      typeCheckFail(
      PropTypes.symbol, 
      function () {}, 
      'Invalid prop `testProp` of type `function` supplied to ' + 
      '`testComponent`, expected `symbol`.');

      typeCheckFail(
      PropTypes.symbol, 
      { 
        '@@toStringTag': 'Katana' }, 

      'Invalid prop `testProp` of type `object` supplied to ' + 
      '`testComponent`, expected `symbol`.');});



    it('should not warn for a polyfilled Symbol', function () {
      var CoreSymbol = require('core-js/library/es6/symbol');
      typeCheckPass(PropTypes.symbol, CoreSymbol('core-js'));});});



  describe('Custom validator', function () {
    beforeEach(function () {
      jest.resetModuleRegistry();});


    it('should have been called with the right params', function () {
      var spy = jasmine.createSpy();
      Component = React.createClass({ displayName: 'Component', 
        propTypes: { num: spy }, 

        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 845 } });} });



      var instance = React.createElement(Component, { num: 5, __source: { fileName: _jsxFileName, lineNumber: 849 } });
      instance = ReactTestUtils.renderIntoDocument(instance);

      expect(spy.calls.count()).toBe(1);
      expect(spy.calls.argsFor(0)[1]).toBe('num');});


    it('should have been called even if the prop is not present', function () {
      var spy = jasmine.createSpy();
      Component = React.createClass({ displayName: 'Component', 
        propTypes: { num: spy }, 

        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 862 } });} });



      var instance = React.createElement(Component, { bla: 5, __source: { fileName: _jsxFileName, lineNumber: 866 } });
      instance = ReactTestUtils.renderIntoDocument(instance);

      expect(spy.calls.count()).toBe(1);
      expect(spy.calls.argsFor(0)[1]).toBe('num');});


    it('should have received the validator\'s return value', function () {
      spyOn(console, 'error');
      var spy = jasmine.createSpy().and.callFake(
      function (props, propName, componentName) {
        if (props[propName] !== 5) {
          return new Error('num must be 5!');}});



      Component = React.createClass({ displayName: 'Component', 
        propTypes: { num: spy }, 

        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 886 } });} });



      var instance = React.createElement(Component, { num: 6, __source: { fileName: _jsxFileName, lineNumber: 890 } });
      instance = ReactTestUtils.renderIntoDocument(instance);
      expect(console.error.calls.count()).toBe(1);
      expect(
      console.error.calls.argsFor(0)[0].replace(/\(at .+?:\d+\)/g, '(at **)')).
      toBe(
      'Warning: Failed prop type: num must be 5!\n' + 
      '    in Component (at **)');});



    it('should not warn if the validator returned null', 
    function () {
      spyOn(console, 'error');
      var spy = jasmine.createSpy().and.callFake(
      function (props, propName, componentName) {
        return null;});


      Component = React.createClass({ displayName: 'Component', 
        propTypes: { num: spy }, 

        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 913 } });} });



      var instance = React.createElement(Component, { num: 5, __source: { fileName: _jsxFileName, lineNumber: 917 } });
      instance = ReactTestUtils.renderIntoDocument(instance);
      expect(console.error.calls.count()).toBe(0);});});});
},{"core-js/library/es6/symbol":346,"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js":3,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocations.js":46,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypes.js":47,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],49:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule checkReactTypeSpec
 */

'use strict';

var ReactComponentTreeDevtool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js');
var ReactPropTypeLocationNames = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocationNames.js');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        invariant(
        typeof typeSpecs[typeSpecName] === 'function', 
        '%s: %s type `%s` is invalid; it must be a function, usually from ' + 
        'React.PropTypes.', 
        componentName || 'React class', 
        ReactPropTypeLocationNames[location], 
        typeSpecName);

        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location);} 
      catch (ex) {
        error = ex;}

      warning(
      !error || error instanceof Error, 
      '%s: type specification of %s `%s` is invalid; the type checker ' + 
      'function must return `null` or an `Error` but returned a %s. ' + 
      'You may have forgotten to pass an argument to the type checker ' + 
      'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 
      'shape all require an argument).', 
      componentName || 'React class', 
      ReactPropTypeLocationNames[location], 
      typeSpecName, 
      typeof error);

      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (debugID !== null) {
          componentStackInfo = ReactComponentTreeDevtool.getStackAddendumByID(debugID);} else 
        if (element !== null) {
          componentStackInfo = ReactComponentTreeDevtool.getCurrentStackAddendum(element);}


        warning(
        false, 
        'Failed %s type: %s%s', 
        location, 
        error.message, 
        componentStackInfo);}}}}






module.exports = checkReactTypeSpec;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocationNames.js":45,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js":211,"fbjs/lib/invariant":414,"fbjs/lib/warning":424}],50:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactNoopUpdateQueue = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\modern\\class\\ReactNoopUpdateQueue.js');

var canDefineProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\canDefineProperty.js');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;}


ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  invariant(
  typeof partialState === 'object' || 
  typeof partialState === 'function' || 
  partialState == null, 
  'setState(...): takes an object of state variables to update or a ' + 
  'function which returns an object of state variables.');

  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');}};



/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');}};



/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (__DEV__) {
  var deprecatedAPIs = { 
    isMounted: [
    'isMounted', 
    'Instead, make sure to clean up subscriptions and pending requests in ' + 
    'componentWillUnmount to prevent memory leaks.'], 

    replaceState: [
    'replaceState', 
    'Refactor your code to use setState instead (see ' + 
    'https://github.com/facebook/react/issues/3236).'] };


  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, { 
        get: function () {
          warning(
          false, 
          '%s(...) is deprecated in plain JavaScript React classes. %s', 
          info[0], 
          info[1]);

          return undefined;} });}};




  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);}}}




module.exports = ReactComponent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\modern\\class\\ReactNoopUpdateQueue.js":51,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\canDefineProperty.js":291,"fbjs/lib/emptyObject":407,"fbjs/lib/invariant":414,"fbjs/lib/warning":424}],51:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNoopUpdateQueue
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnTDZ(publicInstance, callerName) {
  if (__DEV__) {
    warning(
    false, 
    '%s(...): Can only update a mounted or mounting component. ' + 
    'This usually means you called %s() on an unmounted component. ' + 
    'This is a no-op. Please check the code for the %s component.', 
    callerName, 
    callerName, 
    publicInstance.constructor && publicInstance.constructor.displayName || '');}}




/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = { 

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;}, 


  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {}, 

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnTDZ(publicInstance, 'forceUpdate');}, 


  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnTDZ(publicInstance, 'replaceState');}, 


  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnTDZ(publicInstance, 'setState');} };



module.exports = ReactNoopUpdateQueue;
},{"fbjs/lib/warning":424}],52:[function(require,module,exports){
(function (process,__dirname){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var spawnSync = require('child_process').spawnSync;
var path = require('path');

describe('ReactClassEquivalence', function () {
  it('tests the same thing for es6 classes and CoffeeScript', function () {
    var result1 = runJest('ReactCoffeeScriptClass-test.coffee');
    var result2 = runJest('ReactES6Class-test.js');
    compareResults(result1, result2);});


  it('tests the same thing for es6 classes and TypeScript', function () {
    var result1 = runJest('ReactTypeScriptClass-test.ts');
    var result2 = runJest('ReactES6Class-test.js');
    compareResults(result1, result2);});});




function runJest(testFile) {
  var cwd = process.cwd();
  var jestBin = path.resolve('node_modules', '.bin', 'jest');
  var setupFile = path.resolve(__dirname, 'setupSpecEquivalenceReporter.js');
  var result = spawnSync('node', [
  jestBin, 
  testFile, 
  '--setupTestFrameworkScriptFile', 
  setupFile], 
  { cwd: cwd });

  if (result.error) {
    throw result.error;}


  if (result.status !== 0) {
    throw new Error(
    'jest process exited with: ' + 
    result.status + 
    '\n' + 
    'stdout: ' + 
    result.stdout.toString() + 
    'stderr: ' + 
    result.stderr.toString());}



  return result.stdout.toString();}


function compareResults(a, b) {
  var regexp = /^EQUIVALENCE.*$/gm;
  var aSpecs = (a.match(regexp) || []).sort().join('\n');
  var bSpecs = (b.match(regexp) || []).sort().join('\n');

  if (aSpecs.length === 0 && bSpecs.length === 0) {
    throw new Error('No spec results found in the output');}


  expect(aSpecs).toEqual(bSpecs);}
}).call(this,require('_process'),"/browsertests\\src\\isomorphic\\modern\\class\\__tests__")
},{"_process":427,"child_process":345,"path":426}],53:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\modern\\class\\__tests__\\ReactES6Class-test.js';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var React;
var ReactDOM;

describe('ReactES6Class', function () {

  var container;
  var freeze = function (expectation) {
    Object.freeze(expectation);
    return expectation;};

  var Inner;
  var attachedListener = null;
  var renderedName = null;

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    container = document.createElement('div');
    attachedListener = null;
    renderedName = null;
    Inner = function (_React$Component) {_inherits(Inner, _React$Component);function Inner() {_classCallCheck(this, Inner);return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));}Inner.prototype.
      getName = function getName() {
        return this.props.name;};Inner.prototype.

      render = function render() {
        attachedListener = this.props.onClick;
        renderedName = this.props.name;
        return React.createElement('div', { className: this.props.name, __source: { fileName: _jsxFileName, lineNumber: 41 } });};return Inner;}(React.Component);});




  function test(element, expectedTag, expectedClassName) {
    var instance = ReactDOM.render(element, container);
    expect(container.firstChild).not.toBeNull();
    expect(container.firstChild.tagName).toBe(expectedTag);
    expect(container.firstChild.className).toBe(expectedClassName);
    return instance;}


  it('preserves the name of the class for use in error messages', function () {var 
    Foo = function (_React$Component2) {_inherits(Foo, _React$Component2);function Foo() {_classCallCheck(this, Foo);return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));}return Foo;}(React.Component);
    expect(Foo.name).toBe('Foo');});


  it('throws if no render function is defined', function () {
    spyOn(console, 'error');var 
    Foo = function (_React$Component3) {_inherits(Foo, _React$Component3);function Foo() {_classCallCheck(this, Foo);return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));}return Foo;}(React.Component);
    expect(function () {return ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 62 } }), container);}).toThrow();

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Foo(...): No `render` method found on the returned component ' + 
    'instance: you may have forgotten to define `render`.');});



  it('renders a simple stateless component with prop', function () {var 
    Foo = function (_React$Component4) {_inherits(Foo, _React$Component4);function Foo() {_classCallCheck(this, Foo);return _possibleConstructorReturn(this, _React$Component4.apply(this, arguments));}Foo.prototype.
      render = function render() {
        return React.createElement(Inner, { name: this.props.bar, __source: { fileName: _jsxFileName, lineNumber: 74 } });};return Foo;}(React.Component);


    test(React.createElement(Foo, { bar: 'foo', __source: { fileName: _jsxFileName, lineNumber: 77 } }), 'DIV', 'foo');
    test(React.createElement(Foo, { bar: 'bar', __source: { fileName: _jsxFileName, lineNumber: 78 } }), 'DIV', 'bar');});


  it('renders based on state using initial values in this.props', function () {var 
    Foo = function (_React$Component5) {_inherits(Foo, _React$Component5);
      function Foo(props) {_classCallCheck(this, Foo);var _this5 = _possibleConstructorReturn(this, 
        _React$Component5.call(this, props));
        _this5.state = { bar: _this5.props.initialValue };return _this5;}Foo.prototype.

      render = function render() {
        return React.createElement('span', { className: this.state.bar, __source: { fileName: _jsxFileName, lineNumber: 88 } });};return Foo;}(React.Component);


    test(React.createElement(Foo, { initialValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 91 } }), 'SPAN', 'foo');});


  it('renders based on state using props in the constructor', function () {var 
    Foo = function (_React$Component6) {_inherits(Foo, _React$Component6);
      function Foo(props) {_classCallCheck(this, Foo);var _this6 = _possibleConstructorReturn(this, 
        _React$Component6.call(this, props));
        _this6.state = { bar: props.initialValue };return _this6;}Foo.prototype.

      changeState = function changeState() {
        this.setState({ bar: 'bar' });};Foo.prototype.

      render = function render() {
        if (this.state.bar === 'foo') {
          return React.createElement('div', { className: 'foo', __source: { fileName: _jsxFileName, lineNumber: 105 } });}

        return React.createElement('span', { className: this.state.bar, __source: { fileName: _jsxFileName, lineNumber: 107 } });};return Foo;}(React.Component);


    var instance = test(React.createElement(Foo, { initialValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 110 } }), 'DIV', 'foo');
    instance.changeState();
    test(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 112 } }), 'SPAN', 'bar');});


  it('renders based on context in the constructor', function () {var 
    Foo = function (_React$Component7) {_inherits(Foo, _React$Component7);
      function Foo(props, context) {_classCallCheck(this, Foo);var _this7 = _possibleConstructorReturn(this, 
        _React$Component7.call(this, props, context));
        _this7.state = { tag: context.tag, className: _this7.context.className };return _this7;}Foo.prototype.

      render = function render() {
        var Tag = this.state.tag;
        return React.createElement(Tag, { className: this.state.className, __source: { fileName: _jsxFileName, lineNumber: 123 } });};return Foo;}(React.Component);


    Foo.contextTypes = { 
      tag: React.PropTypes.string, 
      className: React.PropTypes.string };var 


    Outer = function (_React$Component8) {_inherits(Outer, _React$Component8);function Outer() {_classCallCheck(this, Outer);return _possibleConstructorReturn(this, _React$Component8.apply(this, arguments));}Outer.prototype.
      getChildContext = function getChildContext() {
        return { tag: 'span', className: 'foo' };};Outer.prototype.

      render = function render() {
        return React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 136 } });};return Outer;}(React.Component);


    Outer.childContextTypes = { 
      tag: React.PropTypes.string, 
      className: React.PropTypes.string };

    test(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 143 } }), 'SPAN', 'foo');});


  it('renders only once when setting state in componentWillMount', function () {
    var renderCount = 0;var 
    Foo = function (_React$Component9) {_inherits(Foo, _React$Component9);
      function Foo(props) {_classCallCheck(this, Foo);var _this9 = _possibleConstructorReturn(this, 
        _React$Component9.call(this, props));
        _this9.state = { bar: props.initialValue };return _this9;}Foo.prototype.

      componentWillMount = function componentWillMount() {
        this.setState({ bar: 'bar' });};Foo.prototype.

      render = function render() {
        renderCount++;
        return React.createElement('span', { className: this.state.bar, __source: { fileName: _jsxFileName, lineNumber: 158 } });};return Foo;}(React.Component);


    test(React.createElement(Foo, { initialValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 161 } }), 'SPAN', 'bar');
    expect(renderCount).toBe(1);});


  it('should throw with non-object in the initial state property', function () {
    [['an array'], 'a string', 1234].forEach(function (state) {var 
      Foo = function (_React$Component10) {_inherits(Foo, _React$Component10);
        function Foo() {_classCallCheck(this, Foo);var _this10 = _possibleConstructorReturn(this, 
          _React$Component10.call(this));
          _this10.state = state;return _this10;}Foo.prototype.

        render = function render() {
          return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 173 } });};return Foo;}(React.Component);


      expect(function () {return test(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 176 } }), 'span', '');}).toThrowError(
      'Foo.state: must be set to an object or null');});});




  it('should render with null in the initial state property', function () {var 
    Foo = function (_React$Component11) {_inherits(Foo, _React$Component11);
      function Foo() {_classCallCheck(this, Foo);var _this11 = _possibleConstructorReturn(this, 
        _React$Component11.call(this));
        _this11.state = null;return _this11;}Foo.prototype.

      render = function render() {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 189 } });};return Foo;}(React.Component);


    test(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 192 } }), 'SPAN', '');});


  it('setState through an event handler', function () {var 
    Foo = function (_React$Component12) {_inherits(Foo, _React$Component12);
      function Foo(props) {_classCallCheck(this, Foo);var _this12 = _possibleConstructorReturn(this, 
        _React$Component12.call(this, props));
        _this12.state = { bar: props.initialValue };return _this12;}Foo.prototype.

      handleClick = function handleClick() {
        this.setState({ bar: 'bar' });};Foo.prototype.

      render = function render() {
        return (
          React.createElement(Inner, { 
            name: this.state.bar, 
            onClick: this.handleClick.bind(this), __source: { fileName: _jsxFileName, lineNumber: 206 } }));};return Foo;}(React.Component);




    test(React.createElement(Foo, { initialValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 213 } }), 'DIV', 'foo');
    attachedListener();
    expect(renderedName).toBe('bar');});


  it('should not implicitly bind event handlers', function () {var 
    Foo = function (_React$Component13) {_inherits(Foo, _React$Component13);
      function Foo(props) {_classCallCheck(this, Foo);var _this13 = _possibleConstructorReturn(this, 
        _React$Component13.call(this, props));
        _this13.state = { bar: props.initialValue };return _this13;}Foo.prototype.

      handleClick = function handleClick() {
        this.setState({ bar: 'bar' });};Foo.prototype.

      render = function render() {
        return (
          React.createElement(Inner, { 
            name: this.state.bar, 
            onClick: this.handleClick, __source: { fileName: _jsxFileName, lineNumber: 229 } }));};return Foo;}(React.Component);




    test(React.createElement(Foo, { initialValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 236 } }), 'DIV', 'foo');
    expect(attachedListener).toThrow();});


  it('renders using forceUpdate even when there is no state', function () {var 
    Foo = function (_React$Component14) {_inherits(Foo, _React$Component14);
      function Foo(props) {_classCallCheck(this, Foo);var _this14 = _possibleConstructorReturn(this, 
        _React$Component14.call(this, props));
        _this14.mutativeValue = props.initialValue;return _this14;}Foo.prototype.

      handleClick = function handleClick() {
        this.mutativeValue = 'bar';
        this.forceUpdate();};Foo.prototype.

      render = function render() {
        return (
          React.createElement(Inner, { 
            name: this.mutativeValue, 
            onClick: this.handleClick.bind(this), __source: { fileName: _jsxFileName, lineNumber: 252 } }));};return Foo;}(React.Component);




    test(React.createElement(Foo, { initialValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 259 } }), 'DIV', 'foo');
    attachedListener();
    expect(renderedName).toBe('bar');});


  it('will call all the normal life cycle methods', function () {
    var lifeCycles = [];var 
    Foo = function (_React$Component15) {_inherits(Foo, _React$Component15);
      function Foo() {_classCallCheck(this, Foo);var _this15 = _possibleConstructorReturn(this, 
        _React$Component15.call(this));
        _this15.state = {};return _this15;}Foo.prototype.

      componentWillMount = function componentWillMount() {
        lifeCycles.push('will-mount');};Foo.prototype.

      componentDidMount = function componentDidMount() {
        lifeCycles.push('did-mount');};Foo.prototype.

      componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        lifeCycles.push('receive-props', nextProps);};Foo.prototype.

      shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        lifeCycles.push('should-update', nextProps, nextState);
        return true;};Foo.prototype.

      componentWillUpdate = function componentWillUpdate(nextProps, nextState) {
        lifeCycles.push('will-update', nextProps, nextState);};Foo.prototype.

      componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        lifeCycles.push('did-update', prevProps, prevState);};Foo.prototype.

      componentWillUnmount = function componentWillUnmount() {
        lifeCycles.push('will-unmount');};Foo.prototype.

      render = function render() {
        return React.createElement('span', { className: this.props.value, __source: { fileName: _jsxFileName, lineNumber: 294 } });};return Foo;}(React.Component);


    test(React.createElement(Foo, { value: 'foo', __source: { fileName: _jsxFileName, lineNumber: 297 } }), 'SPAN', 'foo');
    expect(lifeCycles).toEqual([
    'will-mount', 
    'did-mount']);

    lifeCycles = []; // reset
    test(React.createElement(Foo, { value: 'bar', __source: { fileName: _jsxFileName, lineNumber: 303 } }), 'SPAN', 'bar');
    expect(lifeCycles).toEqual([
    'receive-props', freeze({ value: 'bar' }), 
    'should-update', freeze({ value: 'bar' }), {}, 
    'will-update', freeze({ value: 'bar' }), {}, 
    'did-update', freeze({ value: 'foo' }), {}]);

    lifeCycles = []; // reset
    ReactDOM.unmountComponentAtNode(container);
    expect(lifeCycles).toEqual([
    'will-unmount']);});



  it('warns when classic properties are defined on the instance, but does not invoke them.', function () {
    spyOn(console, 'error');
    var getDefaultPropsWasCalled = false;
    var getInitialStateWasCalled = false;var 
    Foo = function (_React$Component16) {_inherits(Foo, _React$Component16);
      function Foo() {_classCallCheck(this, Foo);var _this16 = _possibleConstructorReturn(this, 
        _React$Component16.call(this));
        _this16.contextTypes = {};
        _this16.propTypes = {};return _this16;}Foo.prototype.

      getInitialState = function getInitialState() {
        getInitialStateWasCalled = true;
        return {};};Foo.prototype.

      getDefaultProps = function getDefaultProps() {
        getDefaultPropsWasCalled = true;
        return {};};Foo.prototype.

      render = function render() {
        return React.createElement('span', { className: 'foo', __source: { fileName: _jsxFileName, lineNumber: 336 } });};return Foo;}(React.Component);


    test(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 339 } }), 'SPAN', 'foo');
    expect(getInitialStateWasCalled).toBe(false);
    expect(getDefaultPropsWasCalled).toBe(false);
    expect(console.error.calls.count()).toBe(4);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'getInitialState was defined on Foo, a plain JavaScript class.');

    expect(console.error.calls.argsFor(1)[0]).toContain(
    'getDefaultProps was defined on Foo, a plain JavaScript class.');

    expect(console.error.calls.argsFor(2)[0]).toContain(
    'propTypes was defined as an instance property on Foo.');

    expect(console.error.calls.argsFor(3)[0]).toContain(
    'contextTypes was defined as an instance property on Foo.');});



  it('should warn when misspelling shouldComponentUpdate', function () {
    spyOn(console, 'error');var 

    NamedComponent = function (_React$Component17) {_inherits(NamedComponent, _React$Component17);function NamedComponent() {_classCallCheck(this, NamedComponent);return _possibleConstructorReturn(this, _React$Component17.apply(this, arguments));}NamedComponent.prototype.
      componentShouldUpdate = function componentShouldUpdate() {
        return false;};NamedComponent.prototype.

      render = function render() {
        return React.createElement('span', { className: 'foo', __source: { fileName: _jsxFileName, lineNumber: 365 } });};return NamedComponent;}(React.Component);


    test(React.createElement(NamedComponent, { __source: { fileName: _jsxFileName, lineNumber: 368 } }), 'SPAN', 'foo');

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: ' + 
    'NamedComponent has a method called componentShouldUpdate(). Did you ' + 
    'mean shouldComponentUpdate()? The name is phrased as a question ' + 
    'because the function is expected to return a value.');});



  it('should warn when misspelling componentWillReceiveProps', function () {
    spyOn(console, 'error');var 

    NamedComponent = function (_React$Component18) {_inherits(NamedComponent, _React$Component18);function NamedComponent() {_classCallCheck(this, NamedComponent);return _possibleConstructorReturn(this, _React$Component18.apply(this, arguments));}NamedComponent.prototype.
      componentWillRecieveProps = function componentWillRecieveProps() {
        return false;};NamedComponent.prototype.

      render = function render() {
        return React.createElement('span', { className: 'foo', __source: { fileName: _jsxFileName, lineNumber: 387 } });};return NamedComponent;}(React.Component);


    test(React.createElement(NamedComponent, { __source: { fileName: _jsxFileName, lineNumber: 390 } }), 'SPAN', 'foo');

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: ' + 
    'NamedComponent has a method called componentWillRecieveProps(). Did ' + 
    'you mean componentWillReceiveProps()?');});



  it('should throw AND warn when trying to access classic APIs', function () {
    spyOn(console, 'error');
    var instance = test(React.createElement(Inner, { name: 'foo', __source: { fileName: _jsxFileName, lineNumber: 402 } }), 'DIV', 'foo');
    expect(function () {return instance.replaceState({});}).toThrow();
    expect(function () {return instance.isMounted();}).toThrow();
    expect(function () {return instance.setProps({ name: 'bar' });}).toThrow();
    expect(function () {return instance.replaceProps({ name: 'bar' });}).toThrow();
    expect(console.error.calls.count()).toBe(2);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'replaceState(...) is deprecated in plain JavaScript React classes');

    expect(console.error.calls.argsFor(1)[0]).toContain(
    'isMounted(...) is deprecated in plain JavaScript React classes');});



  it('supports this.context passed via getChildContext', function () {var 
    Bar = function (_React$Component19) {_inherits(Bar, _React$Component19);function Bar() {_classCallCheck(this, Bar);return _possibleConstructorReturn(this, _React$Component19.apply(this, arguments));}Bar.prototype.
      render = function render() {
        return React.createElement('div', { className: this.context.bar, __source: { fileName: _jsxFileName, lineNumber: 419 } });};return Bar;}(React.Component);


    Bar.contextTypes = { bar: React.PropTypes.string };var 
    Foo = function (_React$Component20) {_inherits(Foo, _React$Component20);function Foo() {_classCallCheck(this, Foo);return _possibleConstructorReturn(this, _React$Component20.apply(this, arguments));}Foo.prototype.
      getChildContext = function getChildContext() {
        return { bar: 'bar-through-context' };};Foo.prototype.

      render = function render() {
        return React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 428 } });};return Foo;}(React.Component);


    Foo.childContextTypes = { bar: React.PropTypes.string };
    test(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 432 } }), 'DIV', 'bar-through-context');});


  it('supports classic refs', function () {var 
    Foo = function (_React$Component21) {_inherits(Foo, _React$Component21);function Foo() {_classCallCheck(this, Foo);return _possibleConstructorReturn(this, _React$Component21.apply(this, arguments));}Foo.prototype.
      render = function render() {
        return React.createElement(Inner, { name: 'foo', ref: 'inner', __source: { fileName: _jsxFileName, lineNumber: 438 } });};return Foo;}(React.Component);


    var instance = test(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 441 } }), 'DIV', 'foo');
    expect(instance.refs.inner.getName()).toBe('foo');});


  it('supports drilling through to the DOM using findDOMNode', function () {
    var instance = test(React.createElement(Inner, { name: 'foo', __source: { fileName: _jsxFileName, lineNumber: 446 } }), 'DIV', 'foo');
    var node = ReactDOM.findDOMNode(instance);
    expect(node).toBe(container.firstChild);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62}],54:[function(require,module,exports){
(function (global){
/*!
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var expect = global.expect;

var numExpectations = 0;

global.expect = function () {
  numExpectations += 1;
  return expect.apply(this, arguments);};


beforeEach(function () {return numExpectations = 0;});

jasmine.currentEnv_.addReporter({ 
  specDone: function (spec) {
    console.log(
    'EQUIVALENCE: ' + spec.description + ', ' + ('status: ' + 
    spec.status + ', ') + ('numExpectations: ' + 
    numExpectations));} });
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],55:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\modern\\element\\__tests__\\ReactJSXElement-test.js', _assign = require('object-assign');function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var React;
var ReactDOM;
var ReactTestUtils;

describe('ReactJSXElement', function () {
  var Component;

  beforeEach(function () {
    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    Component = function (_React$Component) {_inherits(Component, _React$Component);function Component() {_classCallCheck(this, Component);return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));}Component.prototype.
      render = function render() {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 29 } });};return Component;}(React.Component);});




  it('returns a complete element according to spec', function () {
    var element = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 35 } });
    expect(element.type).toBe(Component);
    expect(element.key).toBe(null);
    expect(element.ref).toBe(null);
    var expectation = {};
    Object.freeze(expectation);
    expect(element.props).toEqual(expectation);});


  it('allows a lower-case to be passed as the string type', function () {
    var element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 45 } });
    expect(element.type).toBe('div');
    expect(element.key).toBe(null);
    expect(element.ref).toBe(null);
    var expectation = {};
    Object.freeze(expectation);
    expect(element.props).toEqual(expectation);});


  it('allows a string to be passed as the type', function () {
    var TagName = 'div';
    var element = React.createElement(TagName, { __source: { fileName: _jsxFileName, lineNumber: 56 } });
    expect(element.type).toBe('div');
    expect(element.key).toBe(null);
    expect(element.ref).toBe(null);
    var expectation = {};
    Object.freeze(expectation);
    expect(element.props).toEqual(expectation);});


  it('returns an immutable element', function () {
    var element = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 66 } });
    expect(function () {return element.type = 'div';}).toThrow();});


  it('does not reuse the object that is spread into props', function () {
    var config = { foo: 1 };
    var element = React.createElement(Component, _extends({}, config, { __source: { fileName: _jsxFileName, lineNumber: 72 } }));
    expect(element.props.foo).toBe(1);
    config.foo = 2;
    expect(element.props.foo).toBe(1);});


  it('extracts key and ref from the rest of the props', function () {
    var element = React.createElement(Component, { key: '12', ref: '34', foo: '56', __source: { fileName: _jsxFileName, lineNumber: 79 } });
    expect(element.type).toBe(Component);
    expect(element.key).toBe('12');
    expect(element.ref).toBe('34');
    var expectation = { foo: '56' };
    Object.freeze(expectation);
    expect(element.props).toEqual(expectation);});


  it('coerces the key to a string', function () {
    var element = React.createElement(Component, { key: 12, foo: '56', __source: { fileName: _jsxFileName, lineNumber: 89 } });
    expect(element.type).toBe(Component);
    expect(element.key).toBe('12');
    expect(element.ref).toBe(null);
    var expectation = { foo: '56' };
    Object.freeze(expectation);
    expect(element.props).toEqual(expectation);});


  it('merges JSX children onto the children prop', function () {
    spyOn(console, 'error');
    var a = 1;
    var element = React.createElement(Component, { children: 'text', __source: { fileName: _jsxFileName, lineNumber: 101 } }, a);
    expect(element.props.children).toBe(a);
    expect(console.error.calls.count()).toBe(0);});


  it('does not override children if no JSX children are provided', function () {
    spyOn(console, 'error');
    var element = React.createElement(Component, { children: 'text', __source: { fileName: _jsxFileName, lineNumber: 108 } });
    expect(element.props.children).toBe('text');
    expect(console.error.calls.count()).toBe(0);});


  it('overrides children if null is provided as a JSX child', function () {
    spyOn(console, 'error');
    var element = React.createElement(Component, { children: 'text', __source: { fileName: _jsxFileName, lineNumber: 115 } }, null);
    expect(element.props.children).toBe(null);
    expect(console.error.calls.count()).toBe(0);});


  it('overrides children if undefined is provided as an argument', function () {
    var element = React.createElement(Component, { children: 'text', __source: { fileName: _jsxFileName, lineNumber: 121 } }, undefined);
    expect(element.props.children).toBe(undefined);

    var element2 = React.cloneElement(
    React.createElement(Component, { children: 'text', __source: { fileName: _jsxFileName, lineNumber: 125 } }), 
    {}, 
    undefined);

    expect(element2.props.children).toBe(undefined);});


  it('merges JSX children onto the children prop in an array', function () {
    spyOn(console, 'error');
    var a = 1;
    var b = 2;
    var c = 3;
    var element = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 137 } }, a, b, c);
    expect(element.props.children).toEqual([1, 2, 3]);
    expect(console.error.calls.count()).toBe(0);});


  it('allows static methods to be called using the type property', function () {
    spyOn(console, 'error');var 

    StaticMethodComponent = function () {function StaticMethodComponent() {_classCallCheck(this, StaticMethodComponent);}StaticMethodComponent.
      someStaticMethod = function someStaticMethod() {
        return 'someReturnValue';};StaticMethodComponent.prototype.

      render = function render() {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 150 } });};return StaticMethodComponent;}();



    var element = React.createElement(StaticMethodComponent, { __source: { fileName: _jsxFileName, lineNumber: 154 } });
    expect(element.type.someStaticMethod()).toBe('someReturnValue');
    expect(console.error.calls.count()).toBe(0);});


  it('identifies valid elements', function () {
    expect(React.isValidElement(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 160 } }))).toEqual(true);
    expect(React.isValidElement(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 161 } }))).toEqual(true);

    expect(React.isValidElement(null)).toEqual(false);
    expect(React.isValidElement(true)).toEqual(false);
    expect(React.isValidElement({})).toEqual(false);
    expect(React.isValidElement('string')).toEqual(false);
    expect(React.isValidElement(Component)).toEqual(false);
    expect(React.isValidElement({ type: 'div', props: {} })).toEqual(false);});


  it('is indistinguishable from a plain object', function () {
    var element = React.createElement('div', { className: 'foo', __source: { fileName: _jsxFileName, lineNumber: 172 } });
    var object = {};
    expect(element.constructor).toBe(object.constructor);});


  it('should use default prop value when removing a prop', function () {
    Component.defaultProps = { fruit: 'persimmon' };

    var container = document.createElement('div');
    var instance = ReactDOM.render(
    React.createElement(Component, { fruit: 'mango', __source: { fileName: _jsxFileName, lineNumber: 182 } }), 
    container);

    expect(instance.props.fruit).toBe('mango');

    ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 187 } }), container);
    expect(instance.props.fruit).toBe('persimmon');});


  it('should normalize props with default values', function () {var 
    NormalizingComponent = function (_React$Component2) {_inherits(NormalizingComponent, _React$Component2);function NormalizingComponent() {_classCallCheck(this, NormalizingComponent);return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));}NormalizingComponent.prototype.
      render = function render() {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 194 } }, this.props.prop);};return NormalizingComponent;}(React.Component);


    NormalizingComponent.defaultProps = { prop: 'testKey' };

    var instance = ReactTestUtils.renderIntoDocument(React.createElement(NormalizingComponent, { __source: { fileName: _jsxFileName, lineNumber: 199 } }));
    expect(instance.props.prop).toBe('testKey');

    var inst2 = 
    ReactTestUtils.renderIntoDocument(React.createElement(NormalizingComponent, { prop: null, __source: { fileName: _jsxFileName, lineNumber: 203 } }));
    expect(inst2.props.prop).toBe(null);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"object-assign":425}],56:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

// TODO: All these warnings should become static errors using Flow instead
// of dynamic errors when using JSX with Flow.
var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\isomorphic\\modern\\element\\__tests__\\ReactJSXElementValidator-test.js';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}
var React;
var ReactTestUtils;

describe('ReactJSXElementValidator', function () {
  var Component;
  var RequiredPropComponent;

  beforeEach(function () {
    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

    Component = function (_React$Component) {_inherits(Component, _React$Component);function Component() {_classCallCheck(this, Component);return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));}Component.prototype.
      render = function render() {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 32 } });};return Component;}(React.Component);



    RequiredPropComponent = function (_React$Component2) {_inherits(RequiredPropComponent, _React$Component2);function RequiredPropComponent() {_classCallCheck(this, RequiredPropComponent);return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));}RequiredPropComponent.prototype.
      render = function render() {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 38 } }, this.props.prop);};return RequiredPropComponent;}(React.Component);


    RequiredPropComponent.displayName = 'RequiredPropComponent';
    RequiredPropComponent.propTypes = { prop: React.PropTypes.string.isRequired };});


  it('warns for keys for arrays of elements in children position', function () {
    spyOn(console, 'error');

    void React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 48 } }, [React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 48 } }), React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 48 } })]);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Each child in an array or iterator should have a unique "key" prop.');});



  it('warns for keys for arrays of elements with owner info', function () {
    spyOn(console, 'error');var 

    InnerComponent = function (_React$Component3) {_inherits(InnerComponent, _React$Component3);function InnerComponent() {_classCallCheck(this, InnerComponent);return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));}InnerComponent.prototype.
      render = function render() {
        return React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 61 } }, this.props.childSet);};return InnerComponent;}(React.Component);var 



    ComponentWrapper = function (_React$Component4) {_inherits(ComponentWrapper, _React$Component4);function ComponentWrapper() {_classCallCheck(this, ComponentWrapper);return _possibleConstructorReturn(this, _React$Component4.apply(this, arguments));}ComponentWrapper.prototype.
      render = function render() {
        return (
          React.createElement(InnerComponent, { 
            childSet: [React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 69 } }), React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 69 } })], __source: { fileName: _jsxFileName, lineNumber: 68 } }));};return ComponentWrapper;}(React.Component);





    ReactTestUtils.renderIntoDocument(React.createElement(ComponentWrapper, { __source: { fileName: _jsxFileName, lineNumber: 75 } }));

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Each child in an array or iterator should have a unique "key" prop. ' + 
    'Check the render method of `InnerComponent`. ' + 
    'It was passed a child from ComponentWrapper. ');});



  it('warns for keys for iterables of elements in rest args', function () {
    spyOn(console, 'error');

    var iterable = { 
      '@@iterator': function () {
        var i = 0;
        return { 
          next: function () {
            var done = ++i > 2;
            return { value: done ? undefined : React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 94 } }), done: done };} };} };





    void React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 100 } }, iterable);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Each child in an array or iterator should have a unique "key" prop.');});



  it('does not warns for arrays of elements with keys', function () {
    spyOn(console, 'error');

    void React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 111 } }, [React.createElement(Component, { key: '#1', __source: { fileName: _jsxFileName, lineNumber: 111 } }), React.createElement(Component, { key: '#2', __source: { fileName: _jsxFileName, lineNumber: 111 } })]);

    expect(console.error.calls.count()).toBe(0);});


  it('does not warns for iterable elements with keys', function () {
    spyOn(console, 'error');

    var iterable = { 
      '@@iterator': function () {
        var i = 0;
        return { 
          next: function () {
            var done = ++i > 2;
            return { 
              value: done ? undefined : React.createElement(Component, { key: '#' + i, __source: { fileName: _jsxFileName, lineNumber: 126 } }), 
              done: done };} };} };






    void React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 134 } }, iterable);

    expect(console.error.calls.count()).toBe(0);});


  it('does not warn for numeric keys in entry iterable as a child', function () {
    spyOn(console, 'error');

    var iterable = { 
      '@@iterator': function () {
        var i = 0;
        return { 
          next: function () {
            var done = ++i > 2;
            return { value: done ? undefined : [i, React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 148 } })], done: done };} };} };




    iterable.entries = iterable['@@iterator'];

    void React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 155 } }, iterable);

    expect(console.error.calls.count()).toBe(0);});


  it('does not warn when the element is directly as children', function () {
    spyOn(console, 'error');

    void React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 163 } }, React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 163 } }), React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 163 } }));

    expect(console.error.calls.count()).toBe(0);});


  it('does not warn when the child array contains non-elements', function () {
    spyOn(console, 'error');

    void React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 171 } }, [{}, {}]);

    expect(console.error.calls.count()).toBe(0);});


  // TODO: These warnings currently come from the composite component, but
  // they should be moved into the ReactElementValidator.

  it('should give context for PropType errors in nested components.', function () {
    // In this test, we're making sure that if a proptype error is found in a
    // component, we give a small hint as to which parent instantiated that
    // component as per warnings about key usage in ReactElementValidator.
    spyOn(console, 'error');var 
    MyComp = function (_React$Component5) {_inherits(MyComp, _React$Component5);function MyComp() {_classCallCheck(this, MyComp);return _possibleConstructorReturn(this, _React$Component5.apply(this, arguments));}MyComp.prototype.
      render = function render() {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 186 } }, 'My color is ', this.color);};return MyComp;}(React.Component);


    MyComp.propTypes = { 
      color: React.PropTypes.string };var 

    ParentComp = function (_React$Component6) {_inherits(ParentComp, _React$Component6);function ParentComp() {_classCallCheck(this, ParentComp);return _possibleConstructorReturn(this, _React$Component6.apply(this, arguments));}ParentComp.prototype.
      render = function render() {
        return React.createElement(MyComp, { color: 123, __source: { fileName: _jsxFileName, lineNumber: 194 } });};return ParentComp;}(React.Component);


    ReactTestUtils.renderIntoDocument(React.createElement(ParentComp, { __source: { fileName: _jsxFileName, lineNumber: 197 } }));
    expect(
    console.error.calls.argsFor(0)[0].replace(/\(at .+?:\d+\)/g, '(at **)')).
    toBe(
    'Warning: Failed prop type: ' + 
    'Invalid prop `color` of type `number` supplied to `MyComp`, ' + 
    'expected `string`.\n' + 
    '    in MyComp (at **)\n' + 
    '    in ParentComp (at **)');});



  it('gives a helpful error when passing null, undefined, or boolean', function () {
    var Undefined = undefined;
    var Null = null;
    var True = true;
    var Num = 123;
    var Div = 'div';
    spyOn(console, 'error');
    void React.createElement(Undefined, { __source: { fileName: _jsxFileName, lineNumber: 216 } });
    void React.createElement(Null, { __source: { fileName: _jsxFileName, lineNumber: 217 } });
    void React.createElement(True, { __source: { fileName: _jsxFileName, lineNumber: 218 } });
    void React.createElement(Num, { __source: { fileName: _jsxFileName, lineNumber: 219 } });
    expect(console.error.calls.count()).toBe(4);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'type should not be null, undefined, boolean, or number. It should be ' + 
    'a string (for DOM elements) or a ReactClass (for composite components).');

    expect(console.error.calls.argsFor(1)[0]).toContain(
    'type should not be null, undefined, boolean, or number. It should be ' + 
    'a string (for DOM elements) or a ReactClass (for composite components).');

    expect(console.error.calls.argsFor(2)[0]).toContain(
    'type should not be null, undefined, boolean, or number. It should be ' + 
    'a string (for DOM elements) or a ReactClass (for composite components).');

    expect(console.error.calls.argsFor(3)[0]).toContain(
    'type should not be null, undefined, boolean, or number. It should be ' + 
    'a string (for DOM elements) or a ReactClass (for composite components).');

    void React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 237 } });
    expect(console.error.calls.count()).toBe(4);});


  it('should check default prop values', function () {
    spyOn(console, 'error');

    RequiredPropComponent.defaultProps = { prop: null };

    ReactTestUtils.renderIntoDocument(React.createElement(RequiredPropComponent, { __source: { fileName: _jsxFileName, lineNumber: 246 } }));

    expect(console.error.calls.count()).toBe(1);
    expect(
    console.error.calls.argsFor(0)[0].replace(/\(at .+?:\d+\)/g, '(at **)')).
    toBe(
    'Warning: Failed prop type: ' + 
    'Required prop `prop` was not specified in `RequiredPropComponent`.\n' + 
    '    in RequiredPropComponent (at **)');});



  it('should not check the default for explicit null', function () {
    spyOn(console, 'error');

    ReactTestUtils.renderIntoDocument(React.createElement(RequiredPropComponent, { prop: null, __source: { fileName: _jsxFileName, lineNumber: 261 } }));

    expect(console.error.calls.count()).toBe(1);
    expect(
    console.error.calls.argsFor(0)[0].replace(/\(at .+?:\d+\)/g, '(at **)')).
    toBe(
    'Warning: Failed prop type: ' + 
    'Required prop `prop` was not specified in `RequiredPropComponent`.\n' + 
    '    in RequiredPropComponent (at **)');});



  it('should check declared prop types', function () {
    spyOn(console, 'error');

    ReactTestUtils.renderIntoDocument(React.createElement(RequiredPropComponent, { __source: { fileName: _jsxFileName, lineNumber: 276 } }));
    ReactTestUtils.renderIntoDocument(React.createElement(RequiredPropComponent, { prop: 42, __source: { fileName: _jsxFileName, lineNumber: 277 } }));

    expect(console.error.calls.count()).toBe(2);
    expect(
    console.error.calls.argsFor(0)[0].replace(/\(at .+?:\d+\)/g, '(at **)')).
    toBe(
    'Warning: Failed prop type: ' + 
    'Required prop `prop` was not specified in `RequiredPropComponent`.\n' + 
    '    in RequiredPropComponent (at **)');


    expect(
    console.error.calls.argsFor(1)[0].replace(/\(at .+?:\d+\)/g, '(at **)')).
    toBe(
    'Warning: Failed prop type: ' + 
    'Invalid prop `prop` of type `number` supplied to ' + 
    '`RequiredPropComponent`, expected `string`.\n' + 
    '    in RequiredPropComponent (at **)');


    ReactTestUtils.renderIntoDocument(React.createElement(RequiredPropComponent, { prop: 'string', __source: { fileName: _jsxFileName, lineNumber: 297 } }));

    // Should not error for strings
    expect(console.error.calls.count()).toBe(2);});


  it('should warn on invalid prop types', function () {
    // Since there is no prevalidation step for ES6 classes, there is no hook
    // for us to issue a warning earlier than element creation when the error
    // actually occurs. Since this step is skipped in production, we should just
    // warn instead of throwing for this case.
    spyOn(console, 'error');var 
    NullPropTypeComponent = function (_React$Component7) {_inherits(NullPropTypeComponent, _React$Component7);function NullPropTypeComponent() {_classCallCheck(this, NullPropTypeComponent);return _possibleConstructorReturn(this, _React$Component7.apply(this, arguments));}NullPropTypeComponent.prototype.
      render = function render() {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 311 } }, this.props.prop);};return NullPropTypeComponent;}(React.Component);


    NullPropTypeComponent.propTypes = { 
      prop: null };

    ReactTestUtils.renderIntoDocument(React.createElement(NullPropTypeComponent, { __source: { fileName: _jsxFileName, lineNumber: 317 } }));
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'NullPropTypeComponent: prop type `prop` is invalid; it must be a ' + 
    'function, usually from React.PropTypes.');});



  it('should warn on invalid context types', function () {
    spyOn(console, 'error');var 
    NullContextTypeComponent = function (_React$Component8) {_inherits(NullContextTypeComponent, _React$Component8);function NullContextTypeComponent() {_classCallCheck(this, NullContextTypeComponent);return _possibleConstructorReturn(this, _React$Component8.apply(this, arguments));}NullContextTypeComponent.prototype.
      render = function render() {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 329 } }, this.props.prop);};return NullContextTypeComponent;}(React.Component);


    NullContextTypeComponent.contextTypes = { 
      prop: null };

    ReactTestUtils.renderIntoDocument(React.createElement(NullContextTypeComponent, { __source: { fileName: _jsxFileName, lineNumber: 335 } }));
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'NullContextTypeComponent: context type `prop` is invalid; it must ' + 
    'be a function, usually from React.PropTypes.');});



  it('should warn if getDefaultProps is specificed on the class', function () {
    spyOn(console, 'error');var 
    GetDefaultPropsComponent = function (_React$Component9) {_inherits(GetDefaultPropsComponent, _React$Component9);function GetDefaultPropsComponent() {_classCallCheck(this, GetDefaultPropsComponent);return _possibleConstructorReturn(this, _React$Component9.apply(this, arguments));}GetDefaultPropsComponent.prototype.
      render = function render() {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 347 } }, this.props.prop);};return GetDefaultPropsComponent;}(React.Component);


    GetDefaultPropsComponent.getDefaultProps = function () {return { 
        prop: 'foo' };};

    ReactTestUtils.renderIntoDocument(React.createElement(GetDefaultPropsComponent, { __source: { fileName: _jsxFileName, lineNumber: 353 } }));
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'getDefaultProps is only used on classic React.createClass definitions.' + 
    ' Use a static property named `defaultProps` instead.');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],57:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

describe('ReactFlowPropTypes', function () {

  // TODO: Test Flow integration and ensure that prop types works.
});
},{}],58:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

describe('ReactTypeScriptPropTypes', function () {

  // TODO: Test TypeScript integration and ensure that prop types works.
});
},{}],59:[function(require,module,exports){
module.exports={
  "name": "react-haste",
  "version": "16.0.0-alpha",
  "license": "BSD-3-Clause"
}

},{}],60:[function(require,module,exports){
/**
 * Copyright (c) 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactART
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\art\\ReactART.js';

require('art/modes/current').setCurrent(
require('art/modes/fast-noSideEffects') // Flip this to DOM mode for debugging
);

var Transform = require('art/core/transform');
var Mode = require('art/modes/current');

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
var ReactInstanceMap = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js');
var ReactMultiChild = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactMultiChild.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');

var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');

var assign = require('object-assign');
var pooledTransform = new Transform();

// Utilities

function childrenAsString(children) {
  if (!children) {
    return '';}

  if (typeof children === 'string') {
    return children;}

  if (children.length) {
    return children.join('\n');}

  return '';}


function createComponent(name) {
  var ReactARTComponent = function (element) {
    this.node = null;
    this.subscriptions = null;
    this.listeners = null;
    this._mountImage = null;
    this._renderedChildren = null;
    this.construct(element);};

  ReactARTComponent.displayName = name;
  for (var i = 1, l = arguments.length; i < l; i++) {
    assign(ReactARTComponent.prototype, arguments[i]);}


  return ReactARTComponent;}


/**
 * Insert `node` into `parentNode` after `referenceNode`.
 */
function injectAfter(parentNode, referenceNode, node) {
  var beforeNode = void 0;
  if (node.parentNode === parentNode && 
  node.previousSibling === referenceNode) {
    return;}

  if (referenceNode == null) {
    // node is supposed to be first.
    beforeNode = parentNode.firstChild;} else 
  {
    // node is supposed to be after referenceNode.
    beforeNode = referenceNode.nextSibling;}

  if (beforeNode && beforeNode.previousSibling !== node) {
    // Cases where `node === beforeNode` should get filtered out by earlier
    // checks and the behavior isn't well-defined.
    invariant(
    node !== beforeNode, 
    'ReactART: Can not insert node before itself');

    node.injectBefore(beforeNode);} else 
  if (node.parentNode !== parentNode) {
    node.inject(parentNode);}}



// ContainerMixin for components that can hold ART nodes

var ContainerMixin = assign({}, ReactMultiChild.Mixin, { 

  /**
   * Moves a child component to the supplied index.
   *
   * @param {ReactComponent} child Component to move.
   * @param {number} toIndex Destination index of the element.
   * @protected
   */
  moveChild: function (child, afterNode, toIndex, lastIndex) {
    var childNode = child._mountImage;
    injectAfter(this.node, afterNode, childNode);}, 


  /**
   * Creates a child component.
   *
   * @param {ReactComponent} child Component to create.
   * @param {object} childNode ART node to insert.
   * @protected
   */
  createChild: function (child, afterNode, childNode) {
    child._mountImage = childNode;
    injectAfter(this.node, afterNode, childNode);}, 


  /**
   * Removes a child component.
   *
   * @param {ReactComponent} child Child to remove.
   * @protected
   */
  removeChild: function (child) {
    child._mountImage.eject();
    child._mountImage = null;}, 


  updateChildrenAtRoot: function (nextChildren, transaction) {
    this.updateChildren(nextChildren, transaction, emptyObject);}, 


  mountAndInjectChildrenAtRoot: function (children, transaction) {
    this.mountAndInjectChildren(children, transaction, emptyObject);}, 


  /**
   * Override to bypass batch updating because it is not necessary.
   *
   * @param {?object} nextChildren.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @override {ReactMultiChild.Mixin.updateChildren}
   */
  updateChildren: function (nextChildren, transaction, context) {
    this._updateChildren(nextChildren, transaction, context);}, 


  // Shorthands

  mountAndInjectChildren: function (children, transaction, context) {
    var mountedImages = this.mountChildren(
    children, 
    transaction, 
    context);

    // Each mount image corresponds to one of the flattened children
    var i = 0;
    for (var key in this._renderedChildren) {
      if (this._renderedChildren.hasOwnProperty(key)) {
        var child = this._renderedChildren[key];
        child._mountImage = mountedImages[i];
        mountedImages[i].inject(this.node);
        i++;}}} });






// Surface is a React DOM Component, not an ART component. It serves as the
// entry point into the ART reconciler.

var Surface = React.createClass({ 

  displayName: 'Surface', 

  mixins: [ContainerMixin], 

  componentDidMount: function () {
    var domNode = ReactDOM.findDOMNode(this);

    this.node = Mode.Surface(+this.props.width, +this.props.height, domNode);

    var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
    transaction.perform(
    this.mountAndInjectChildren, 
    this, 
    this.props.children, 
    transaction, 
    ReactInstanceMap.get(this)._context);

    ReactUpdates.ReactReconcileTransaction.release(transaction);}, 


  componentDidUpdate: function (oldProps) {
    var node = this.node;
    if (this.props.width != oldProps.width || 
    this.props.height != oldProps.height) {
      node.resize(+this.props.width, +this.props.height);}


    var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
    transaction.perform(
    this.updateChildren, 
    this, 
    this.props.children, 
    transaction, 
    ReactInstanceMap.get(this)._context);

    ReactUpdates.ReactReconcileTransaction.release(transaction);

    if (node.render) {
      node.render();}}, 



  componentWillUnmount: function () {
    this.unmountChildren();}, 


  render: function () {
    // This is going to be a placeholder because we don't know what it will
    // actually resolve to because ART may render canvas, vml or svg tags here.
    // We only allow a subset of properties since others might conflict with
    // ART's properties.
    var props = this.props;

    // TODO: ART's Canvas Mode overrides surface title and cursor
    var Tag = Mode.Surface.tagName;
    return (
      React.createElement(Tag, { 
        className: props.className, 
        draggable: props.draggable, 
        role: props.role, 
        style: props.style, 
        title: props.title, __source: { fileName: _jsxFileName, lineNumber: 236 } }));} });






// Various nodes that can go into a surface

var EventTypes = { 
  onMouseMove: 'mousemove', 
  onMouseOver: 'mouseover', 
  onMouseOut: 'mouseout', 
  onMouseUp: 'mouseup', 
  onMouseDown: 'mousedown', 
  onClick: 'click' };


var NodeMixin = { 

  construct: function (element) {
    this._currentElement = element;}, 


  getNativeNode: function () {
    return this.node;}, 


  getPublicInstance: function () {
    return this.node;}, 


  putEventListener: function (type, listener) {
    var subscriptions = this.subscriptions || (this.subscriptions = {});
    var listeners = this.listeners || (this.listeners = {});
    listeners[type] = listener;
    if (listener) {
      if (!subscriptions[type]) {
        subscriptions[type] = this.node.subscribe(type, listener, this);}} else 

    {
      if (subscriptions[type]) {
        subscriptions[type]();
        delete subscriptions[type];}}}, 




  handleEvent: function (event) {
    var listener = this.listeners[event.type];
    if (!listener) {
      return;}

    if (typeof listener === 'function') {
      listener.call(this, event);} else 
    if (listener.handleEvent) {
      listener.handleEvent(event);}}, 



  destroyEventListeners: function () {
    var subscriptions = this.subscriptions;
    if (subscriptions) {
      for (var type in subscriptions) {
        subscriptions[type]();}}


    this.subscriptions = null;
    this.listeners = null;}, 


  applyNodeProps: function (oldProps, props) {
    var node = this.node;

    var scaleX = props.scaleX != null ? props.scaleX : 
    props.scale != null ? props.scale : 1;
    var scaleY = props.scaleY != null ? props.scaleY : 
    props.scale != null ? props.scale : 1;

    pooledTransform.
    transformTo(1, 0, 0, 1, 0, 0).
    move(props.x || 0, props.y || 0).
    rotate(props.rotation || 0, props.originX, props.originY).
    scale(scaleX, scaleY, props.originX, props.originY);

    if (props.transform != null) {
      pooledTransform.transform(props.transform);}


    if (node.xx !== pooledTransform.xx || node.yx !== pooledTransform.yx || 
    node.xy !== pooledTransform.xy || node.yy !== pooledTransform.yy || 
    node.x !== pooledTransform.x || node.y !== pooledTransform.y) {
      node.transformTo(pooledTransform);}


    if (props.cursor !== oldProps.cursor || props.title !== oldProps.title) {
      node.indicate(props.cursor, props.title);}


    if (node.blend && props.opacity !== oldProps.opacity) {
      node.blend(props.opacity == null ? 1 : props.opacity);}


    if (props.visible !== oldProps.visible) {
      if (props.visible == null || props.visible) {
        node.show();} else 
      {
        node.hide();}}



    for (var type in EventTypes) {
      this.putEventListener(EventTypes[type], props[type]);}}, 



  mountComponentIntoNode: function (rootID, container) {
    throw new Error(
    'You cannot render an ART component standalone. ' + 
    'You need to wrap it in a Surface.');} };





// Group

var Group = createComponent('Group', NodeMixin, ContainerMixin, { 

  mountComponent: function (
  transaction, 
  nativeParent, 
  nativeContainerInfo, 
  context) 
  {
    this.node = Mode.Group();
    var props = this._currentElement.props;
    this.applyGroupProps(emptyObject, props);
    this.mountAndInjectChildren(props.children, transaction, context);
    return this.node;}, 


  receiveComponent: function (nextComponent, transaction, context) {
    var props = nextComponent.props;
    var oldProps = this._currentElement.props;
    this.applyGroupProps(oldProps, props);
    this.updateChildren(props.children, transaction, context);
    this._currentElement = nextComponent;}, 


  applyGroupProps: function (oldProps, props) {
    this.node.width = props.width;
    this.node.height = props.height;
    this.applyNodeProps(oldProps, props);}, 


  unmountComponent: function () {
    this.destroyEventListeners();
    this.unmountChildren();} });




// ClippingRectangle
var ClippingRectangle = createComponent(
'ClippingRectangle', NodeMixin, ContainerMixin, { 

  mountComponent: function (
  transaction, 
  nativeParent, 
  nativeContainerInfo, 
  context) 
  {
    this.node = Mode.ClippingRectangle();
    var props = this._currentElement.props;
    this.applyClippingProps(emptyObject, props);
    this.mountAndInjectChildren(props.children, transaction, context);
    return this.node;}, 


  receiveComponent: function (nextComponent, transaction, context) {
    var props = nextComponent.props;
    var oldProps = this._currentElement.props;
    this.applyClippingProps(oldProps, props);
    this.updateChildren(props.children, transaction, context);
    this._currentElement = nextComponent;}, 


  applyClippingProps: function (oldProps, props) {
    this.node.width = props.width;
    this.node.height = props.height;
    this.node.x = props.x;
    this.node.y = props.y;
    this.applyNodeProps(oldProps, props);}, 


  unmountComponent: function () {
    this.destroyEventListeners();
    this.unmountChildren();} });





// Renderables

var RenderableMixin = assign({}, NodeMixin, { 

  applyRenderableProps: function (oldProps, props) {
    if (oldProps.fill !== props.fill) {
      if (props.fill && props.fill.applyFill) {
        props.fill.applyFill(this.node);} else 
      {
        this.node.fill(props.fill);}}


    if (
    oldProps.stroke !== props.stroke || 
    oldProps.strokeWidth !== props.strokeWidth || 
    oldProps.strokeCap !== props.strokeCap || 
    oldProps.strokeJoin !== props.strokeJoin || 
    // TODO: Consider a deep check of stokeDash.
    // This may benefit the VML version in IE.
    oldProps.strokeDash !== props.strokeDash) 
    {
      this.node.stroke(
      props.stroke, 
      props.strokeWidth, 
      props.strokeCap, 
      props.strokeJoin, 
      props.strokeDash);}


    this.applyNodeProps(oldProps, props);}, 


  unmountComponent: function () {
    this.destroyEventListeners();} });




// Shape

var Shape = createComponent('Shape', RenderableMixin, { 

  construct: function (element) {
    this._currentElement = element;
    this._oldDelta = null;
    this._oldPath = null;}, 


  mountComponent: function (
  transaction, 
  nativeParent, 
  nativeContainerInfo, 
  context) 
  {
    this.node = Mode.Shape();
    var props = this._currentElement.props;
    this.applyShapeProps(emptyObject, props);
    return this.node;}, 


  receiveComponent: function (nextComponent, transaction, context) {
    var props = nextComponent.props;
    var oldProps = this._currentElement.props;
    this.applyShapeProps(oldProps, props);
    this._currentElement = nextComponent;}, 


  applyShapeProps: function (oldProps, props) {
    var oldDelta = this._oldDelta;
    var oldPath = this._oldPath;
    var path = props.d || childrenAsString(props.children);

    if (path.delta !== oldDelta || 
    path !== oldPath || 
    oldProps.width !== props.width || 
    oldProps.height !== props.height) {

      this.node.draw(
      path, 
      props.width, 
      props.height);


      this._oldPath = path;
      this._oldDelta = path.delta;}


    this.applyRenderableProps(oldProps, props);} });




// Text

var Text = createComponent('Text', RenderableMixin, { 

  construct: function (element) {
    this._currentElement = element;
    this._oldString = null;}, 


  mountComponent: function (
  transaction, 
  nativeParent, 
  nativeContainerInfo, 
  context) 
  {
    var props = this._currentElement.props;
    var newString = childrenAsString(props.children);
    this.node = Mode.Text(newString, props.font, props.alignment, props.path);
    this._oldString = newString;
    this.applyRenderableProps(emptyObject, props);
    return this.node;}, 


  isSameFont: function (oldFont, newFont) {
    if (oldFont === newFont) {
      return true;}

    if (typeof newFont === 'string' || typeof oldFont === 'string') {
      return false;}

    return (
      newFont.fontSize === oldFont.fontSize && 
      newFont.fontStyle === oldFont.fontStyle && 
      newFont.fontVariant === oldFont.fontVariant && 
      newFont.fontWeight === oldFont.fontWeight && 
      newFont.fontFamily === oldFont.fontFamily);}, 



  receiveComponent: function (nextComponent, transaction, context) {
    var props = nextComponent.props;
    var oldProps = this._currentElement.props;

    var oldString = this._oldString;
    var newString = childrenAsString(props.children);

    if (oldString !== newString || 
    !this.isSameFont(oldProps.font, props.font) || 
    oldProps.alignment !== props.alignment || 
    oldProps.path !== props.path) {
      this.node.draw(
      newString, 
      props.font, 
      props.alignment, 
      props.path);

      this._oldString = newString;}


    this.applyRenderableProps(oldProps, props);
    this._currentElement = nextComponent;} });




// Declarative fill type objects - API design not finalized

var slice = Array.prototype.slice;

function LinearGradient(stops, x1, y1, x2, y2) {
  this.args = slice.call(arguments);}


LinearGradient.prototype.applyFill = function (node) {
  node.fillLinear.apply(node, this.args);};


function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
  this.args = slice.call(arguments);}


RadialGradient.prototype.applyFill = function (node) {
  node.fillRadial.apply(node, this.args);};


function Pattern(url, width, height, left, top) {
  this.args = slice.call(arguments);}


Pattern.prototype.applyFill = function (node) {
  node.fillImage.apply(node, this.args);};


module.exports = { 
  ClippingRectangle: ClippingRectangle, 
  Group: Group, 
  LinearGradient: LinearGradient, 
  Path: Mode.Path, 
  Pattern: Pattern, 
  RadialGradient: RadialGradient, 
  Shape: Shape, 
  Surface: Surface, 
  Text: Text, 
  Transform: Transform };
},{"art/core/transform":312,"art/modes/current":325,"art/modes/fast-noSideEffects":326,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js":246,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactMultiChild.js":247,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"fbjs/lib/emptyObject":407,"fbjs/lib/invariant":414,"object-assign":425}],61:[function(require,module,exports){
/**
 * Copyright (c) 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

/*jslint evil: true */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\art\\__tests__\\ReactART-test.js';

jest.
unmock('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\art\\ReactART.js');

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

var Group;
var Shape;
var Surface;
var TestComponent;

var Missing = {};

var ReactART = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\art\\ReactART.js');
var ARTSVGMode = require('art/modes/svg');
var ARTCurrentMode = require('art/modes/current');

function testDOMNodeStructure(domNode, expectedStructure) {
  expect(domNode).toBeDefined();
  expect(domNode.nodeName).toBe(expectedStructure.nodeName);
  for (var prop in expectedStructure) {
    if (!expectedStructure.hasOwnProperty(prop)) continue;
    if (prop != 'nodeName' && prop != 'children') {
      if (expectedStructure[prop] === Missing) {
        expect(domNode.hasAttribute(prop)).toBe(false);} else 
      {
        expect(domNode.getAttribute(prop)).toBe(expectedStructure[prop]);}}}



  if (expectedStructure.children) {
    expectedStructure.children.forEach(function (subTree, index) {
      testDOMNodeStructure(domNode.childNodes[index], subTree);});}}




describe('ReactART', function () {

  beforeEach(function () {
    ARTCurrentMode.setCurrent(ARTSVGMode);

    Group = ReactART.Group;
    Shape = ReactART.Shape;
    Surface = ReactART.Surface;

    TestComponent = React.createClass({ displayName: 'TestComponent', 
      render: function () {

        var a = 
        React.createElement(Shape, { 
          d: 'M0,0l50,0l0,50l-50,0z', 
          fill: new ReactART.LinearGradient(["black", "white"]), 
          key: 'a', 
          width: 50, height: 50, 
          x: 50, y: 50, 
          opacity: 0.1, __source: { fileName: _jsxFileName, lineNumber: 67 } });


        var b = 
        React.createElement(Shape, { 
          fill: '#3C5A99', 
          key: 'b', 
          scale: 0.5, 
          x: 50, y: 50, 
          title: 'This is an F', 
          cursor: 'pointer', __source: { fileName: _jsxFileName, lineNumber: 77 } }, 'M64.564,38.583H54l0.008-5.834c0-3.035,0.293-4.666,4.657-4.666 h5.833V16.429h-9.33c-11.213,0-15.159,5.654-15.159,15.16v6.994 h-6.99v11.652h6.99v33.815H54V50.235h9.331L64.564,38.583z');





        var c = React.createElement(Group, { key: 'c', __source: { fileName: _jsxFileName, lineNumber: 89 } });

        return (
          React.createElement(Surface, { width: 150, height: 200, __source: { fileName: _jsxFileName, lineNumber: 92 } }, 
          React.createElement(Group, { ref: 'group', __source: { fileName: _jsxFileName, lineNumber: 93 } }, 
          this.props.flipped ? [b, a, c] : [a, b, c])));} });});







  it('should have the correct lifecycle state', function () {
    var instance = React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 103 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    var group = instance.refs.group;
    // Duck type test for an ART group
    expect(typeof group.indicate).toBe('function');});


  it('should render a reasonable SVG structure in SVG mode', function () {
    var instance = React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 111 } });
    instance = ReactTestUtils.renderIntoDocument(instance);

    var expectedStructure = { 
      nodeName: 'svg', 
      width: '150', 
      height: '200', 
      children: [
      { nodeName: 'defs' }, 
      { 
        nodeName: 'g', 
        children: [
        { 
          nodeName: 'defs', 
          children: [
          { nodeName: 'linearGradient' }] }, 


        { nodeName: 'path' }, 
        { nodeName: 'path' }, 
        { nodeName: 'g' }] }] };





    var realNode = ReactDOM.findDOMNode(instance);
    testDOMNodeStructure(realNode, expectedStructure);});


  it('should be able to reorder components', function () {
    var container = document.createElement('div');
    var instance = ReactDOM.render(React.createElement(TestComponent, { flipped: false, __source: { fileName: _jsxFileName, lineNumber: 143 } }), container);

    var expectedStructure = { 
      nodeName: 'svg', 
      children: [
      { nodeName: 'defs' }, 
      { 
        nodeName: 'g', 
        children: [
        { nodeName: 'defs' }, 
        { nodeName: 'path', opacity: '0.1' }, 
        { nodeName: 'path', opacity: Missing }, 
        { nodeName: 'g' }] }] };





    var realNode = ReactDOM.findDOMNode(instance);
    testDOMNodeStructure(realNode, expectedStructure);

    ReactDOM.render(React.createElement(TestComponent, { flipped: true, __source: { fileName: _jsxFileName, lineNumber: 164 } }), container);

    var expectedNewStructure = { 
      nodeName: 'svg', 
      children: [
      { nodeName: 'defs' }, 
      { 
        nodeName: 'g', 
        children: [
        { nodeName: 'defs' }, 
        { nodeName: 'path', opacity: Missing }, 
        { nodeName: 'path', opacity: '0.1' }, 
        { nodeName: 'g' }] }] };





    testDOMNodeStructure(realNode, expectedNewStructure);});


  it('should be able to reorder many components', function () {
    var container = document.createElement('div');

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        var chars = this.props.chars.split('');
        return (
          React.createElement(Surface, { __source: { fileName: _jsxFileName, lineNumber: 192 } }, 
          chars.map(function (text) {return React.createElement(Shape, { key: text, title: text, __source: { fileName: _jsxFileName, lineNumber: 193 } });})));} });





    // Mini multi-child stress test: lots of reorders, some adds, some removes.
    var before = 'abcdefghijklmnopqrst';
    var after = 'mxhpgwfralkeoivcstzy';

    var instance = ReactDOM.render(React.createElement(Component, { chars: before, __source: { fileName: _jsxFileName, lineNumber: 203 } }), container);
    var realNode = ReactDOM.findDOMNode(instance);
    expect(realNode.textContent).toBe(before);

    instance = ReactDOM.render(React.createElement(Component, { chars: after, __source: { fileName: _jsxFileName, lineNumber: 207 } }), container);
    expect(realNode.textContent).toBe(after);

    ReactDOM.unmountComponentAtNode(container);});


  it('renders composite with lifecycle inside group', function () {
    var mounted = false;
    var CustomShape = React.createClass({ displayName: 'CustomShape', 
      render: function () {
        return React.createElement(Shape, { __source: { fileName: _jsxFileName, lineNumber: 217 } });}, 

      componentDidMount: function () {
        mounted = true;} });


    ReactTestUtils.renderIntoDocument(
    React.createElement(Surface, { __source: { fileName: _jsxFileName, lineNumber: 224 } }, 
    React.createElement(Group, { __source: { fileName: _jsxFileName, lineNumber: 225 } }, 
    React.createElement(CustomShape, { __source: { fileName: _jsxFileName, lineNumber: 226 } }))));



    expect(mounted).toBe(true);});


  it('resolves refs before componentDidMount', function () {
    var CustomShape = React.createClass({ displayName: 'CustomShape', 
      render: function () {
        return React.createElement(Shape, { __source: { fileName: _jsxFileName, lineNumber: 236 } });} });


    var ref = null;
    var Outer = React.createClass({ displayName: 'Outer', 
      componentDidMount: function () {
        ref = this.refs.test;}, 

      render: function () {
        return (
          React.createElement(Surface, { __source: { fileName: _jsxFileName, lineNumber: 246 } }, 
          React.createElement(Group, { __source: { fileName: _jsxFileName, lineNumber: 247 } }, 
          React.createElement(CustomShape, { ref: 'test', __source: { fileName: _jsxFileName, lineNumber: 248 } }))));} });





    ReactTestUtils.renderIntoDocument(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 254 } }));
    expect(ref.constructor).toBe(CustomShape);});


  it('resolves refs before componentDidUpdate', function () {
    var CustomShape = React.createClass({ displayName: 'CustomShape', 
      render: function () {
        return React.createElement(Shape, { __source: { fileName: _jsxFileName, lineNumber: 261 } });} });


    var ref = {};
    var Outer = React.createClass({ displayName: 'Outer', 
      componentDidMount: function () {
        ref = this.refs.test;}, 

      componentDidUpdate: function () {
        ref = this.refs.test;}, 

      render: function () {
        return (
          React.createElement(Surface, { __source: { fileName: _jsxFileName, lineNumber: 274 } }, 
          React.createElement(Group, { __source: { fileName: _jsxFileName, lineNumber: 275 } }, 
          this.props.mountCustomShape && React.createElement(CustomShape, { ref: 'test', __source: { fileName: _jsxFileName, lineNumber: 276 } }))));} });





    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 283 } }), container);
    expect(ref).not.toBeDefined();
    ReactDOM.render(React.createElement(Outer, { mountCustomShape: true, __source: { fileName: _jsxFileName, lineNumber: 285 } }), container);
    expect(ref.constructor).toBe(CustomShape);});});
},{"art/modes/current":325,"art/modes/svg":327,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\art\\ReactART.js":60,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],62:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactDefaultInjection = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDefaultInjection.js');
var ReactMount = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactMount.js');
var ReactReconciler = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');
var ReactVersion = require('f:\\GitHubRepos\\react\\browsertests\\src\\ReactVersion.js');

var findDOMNode = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\findDOMNode.js');
var getHostComponentFromComposite = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\getHostComponentFromComposite.js');
var renderSubtreeIntoContainer = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\renderSubtreeIntoContainer.js');
var warning = require('fbjs/lib/warning');

ReactDefaultInjection.inject();

var React = { 
  findDOMNode: findDOMNode, 
  render: ReactMount.render, 
  unmountComponentAtNode: ReactMount.unmountComponentAtNode, 
  version: ReactVersion, 

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates, 
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer };



// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
/* eslint-enable camelcase */if (
typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && 
typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({ 
    ComponentTree: { 
      getClosestInstanceFromNode: 
      ReactDOMComponentTree.getClosestInstanceFromNode, 
      getNodeFromInstance: function (inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);}

        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);} else 
        {
          return null;}} }, 



    Mount: ReactMount, 
    Reconciler: ReactReconciler });}



if (__DEV__) {
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && 
      navigator.userAgent.indexOf('Edge') === -1 || 
      navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && 
        navigator.userAgent.indexOf('Firefox') === -1;
        console.debug(
        'Download the React DevTools ' + (
        showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 
        'for a better development experience: ' + 
        'https://fb.me/react-devtools');}}




    var testFunc = function testFn() {};
    warning(
    (testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 
    'It looks like you\'re using a minified copy of the development build ' + 
    'of React. When deploying React apps to production, make sure to use ' + 
    'the production build which skips development warnings and is faster. ' + 
    'See https://fb.me/react-minification for more details.');


    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = 
    document.documentMode && document.documentMode < 8;

    warning(
    !ieCompatibilityMode, 
    'Internet Explorer is running in compatibility mode; please add the ' + 
    'following tag to your HTML to prevent this from happening: ' + 
    '<meta http-equiv="X-UA-Compatible" content="IE=edge" />');


    var expectedFeatures = [
    // shims
    Array.isArray, 
    Array.prototype.every, 
    Array.prototype.forEach, 
    Array.prototype.indexOf, 
    Array.prototype.map, 
    Date.now, 
    Function.prototype.bind, 
    Object.keys, 
    String.prototype.split, 
    String.prototype.trim];


    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        warning(
        false, 
        'One or more ES5 shims expected by React are not available: ' + 
        'https://fb.me/react-warning-polyfills');

        break;}}}}





module.exports = React;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\ReactVersion.js":1,"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\renderSubtreeIntoContainer.js":13,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactMount.js":72,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\findDOMNode.js":100,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDefaultInjection.js":172,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js":250,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\getHostComponentFromComposite.js":295,"fbjs/lib/ExecutionEnvironment":399,"fbjs/lib/warning":424}],63:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMServer
 */

'use strict';

var ReactDefaultInjection = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDefaultInjection.js');
var ReactServerRendering = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactServerRendering.js');
var ReactVersion = require('f:\\GitHubRepos\\react\\browsertests\\src\\ReactVersion.js');

ReactDefaultInjection.inject();

var ReactDOMServer = { 
  renderToString: ReactServerRendering.renderToString, 
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup, 
  version: ReactVersion };


module.exports = ReactDOMServer;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\ReactVersion.js":1,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactServerRendering.js":153,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDefaultInjection.js":172}],64:[function(require,module,exports){
(function (process,global){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\__tests__\\ReactDOMProduction-test.js';

describe('ReactDOMProduction', function () {
  var oldProcess;

  var React;
  var ReactDOM;

  beforeEach(function () {
    __DEV__ = false;
    oldProcess = process;
    global.process = { env: { NODE_ENV: 'production' } };

    jest.resetModuleRegistry();
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');});


  afterEach(function () {
    __DEV__ = true;
    global.process = oldProcess;});


  it('should use prod fbjs', function () {
    var warning = require('fbjs/lib/warning');

    spyOn(console, 'error');
    warning(false, 'Do cows go moo?');
    expect(console.error.calls.count()).toBe(0);});


  it('should use prod React', function () {
    spyOn(console, 'error');

    // no key warning
    void React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 47 } }, [React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 47 } })]);

    expect(console.error.calls.count()).toBe(0);});


  it('should handle a simple flow', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 55 } }, this.props.children);} });



    var container = document.createElement('div');
    var inst = ReactDOM.render(
    React.createElement('div', { className: 'blue', __source: { fileName: _jsxFileName, lineNumber: 61 } }, 
    React.createElement(Component, { key: 1, __source: { fileName: _jsxFileName, lineNumber: 62 } }, 'A'), 
    React.createElement(Component, { key: 2, __source: { fileName: _jsxFileName, lineNumber: 63 } }, 'B'), 
    React.createElement(Component, { key: 3, __source: { fileName: _jsxFileName, lineNumber: 64 } }, 'C')), 

    container);


    expect(container.firstChild).toBe(inst);
    expect(inst.className).toBe('blue');
    expect(inst.textContent).toBe('ABC');

    ReactDOM.render(
    React.createElement('div', { className: 'red', __source: { fileName: _jsxFileName, lineNumber: 74 } }, 
    React.createElement(Component, { key: 2, __source: { fileName: _jsxFileName, lineNumber: 75 } }, 'B'), 
    React.createElement(Component, { key: 1, __source: { fileName: _jsxFileName, lineNumber: 76 } }, 'A'), 
    React.createElement(Component, { key: 3, __source: { fileName: _jsxFileName, lineNumber: 77 } }, 'C')), 

    container);


    expect(inst.className).toBe('red');
    expect(inst.textContent).toBe('BAC');

    ReactDOM.unmountComponentAtNode(container);

    expect(container.childNodes.length).toBe(0);});});
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":427,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"fbjs/lib/warning":424}],65:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 */

'use strict';var _assign = require('object-assign');

var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var EventPluginRegistry = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js');
var ReactEventEmitterMixin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactEventEmitterMixin.js');
var ViewportMetrics = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\ViewportMetrics.js');

var getVendorPrefixedEventName = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getVendorPrefixedEventName.js');
var isEventSupported = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\isEventSupported.js');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = { 
  topAbort: 'abort', 
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend', 
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration', 
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart', 
  topBlur: 'blur', 
  topCanPlay: 'canplay', 
  topCanPlayThrough: 'canplaythrough', 
  topChange: 'change', 
  topClick: 'click', 
  topCompositionEnd: 'compositionend', 
  topCompositionStart: 'compositionstart', 
  topCompositionUpdate: 'compositionupdate', 
  topContextMenu: 'contextmenu', 
  topCopy: 'copy', 
  topCut: 'cut', 
  topDoubleClick: 'dblclick', 
  topDrag: 'drag', 
  topDragEnd: 'dragend', 
  topDragEnter: 'dragenter', 
  topDragExit: 'dragexit', 
  topDragLeave: 'dragleave', 
  topDragOver: 'dragover', 
  topDragStart: 'dragstart', 
  topDrop: 'drop', 
  topDurationChange: 'durationchange', 
  topEmptied: 'emptied', 
  topEncrypted: 'encrypted', 
  topEnded: 'ended', 
  topError: 'error', 
  topFocus: 'focus', 
  topInput: 'input', 
  topKeyDown: 'keydown', 
  topKeyPress: 'keypress', 
  topKeyUp: 'keyup', 
  topLoadedData: 'loadeddata', 
  topLoadedMetadata: 'loadedmetadata', 
  topLoadStart: 'loadstart', 
  topMouseDown: 'mousedown', 
  topMouseMove: 'mousemove', 
  topMouseOut: 'mouseout', 
  topMouseOver: 'mouseover', 
  topMouseUp: 'mouseup', 
  topPaste: 'paste', 
  topPause: 'pause', 
  topPlay: 'play', 
  topPlaying: 'playing', 
  topProgress: 'progress', 
  topRateChange: 'ratechange', 
  topScroll: 'scroll', 
  topSeeked: 'seeked', 
  topSeeking: 'seeking', 
  topSelectionChange: 'selectionchange', 
  topStalled: 'stalled', 
  topSuspend: 'suspend', 
  topTextInput: 'textInput', 
  topTimeUpdate: 'timeupdate', 
  topTouchCancel: 'touchcancel', 
  topTouchEnd: 'touchend', 
  topTouchMove: 'touchmove', 
  topTouchStart: 'touchstart', 
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend', 
  topVolumeChange: 'volumechange', 
  topWaiting: 'waiting', 
  topWheel: 'wheel' };


/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};}

  return alreadyListeningTo[mountAt[topListenersIDKey]];}


/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, { 

  /**
   * Injectable event backend
   */
  ReactEventListener: null, 

  injection: { 
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
      ReactBrowserEventEmitter.handleTopLevel);

      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;} }, 



  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);}}, 



  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(
    ReactBrowserEventEmitter.ReactEventListener && 
    ReactBrowserEventEmitter.ReactEventListener.isEnabled());}, 



  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = 
    EventPluginRegistry.registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(
      isListening.hasOwnProperty(dependency) && 
      isListening[dependency])) 
      {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            topLevelTypes.topWheel, 
            'wheel', 
            mountAt);} else 

          if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            topLevelTypes.topWheel, 
            'mousewheel', 
            mountAt);} else 

          {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            topLevelTypes.topWheel, 
            'DOMMouseScroll', 
            mountAt);}} else 


        if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
            topLevelTypes.topScroll, 
            'scroll', 
            mountAt);} else 

          {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            topLevelTypes.topScroll, 
            'scroll', 
            ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);}} else 


        if (dependency === topLevelTypes.topFocus || 
        dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
            topLevelTypes.topFocus, 
            'focus', 
            mountAt);

            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
            topLevelTypes.topBlur, 
            'blur', 
            mountAt);} else 

          if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            topLevelTypes.topFocus, 
            'focusin', 
            mountAt);

            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            topLevelTypes.topBlur, 
            'focusout', 
            mountAt);}



          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;} else 
        if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
          dependency, 
          topEventMapping[dependency], 
          mountAt);}



        isListening[dependency] = true;}}}, 




  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
    topLevelType, 
    handlerBaseName, 
    handle);}, 



  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
    topLevelType, 
    handlerBaseName, 
    handle);}, 



  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = 
      document.createEvent && 'pageX' in document.createEvent('MouseEvent');}

    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;}} });





module.exports = ReactBrowserEventEmitter;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\ViewportMetrics.js":121,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getVendorPrefixedEventName.js":132,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\isEventSupported.js":133,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js":228,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactEventEmitterMixin.js":243,"object-assign":425}],66:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponentTree
 */

'use strict';

var DOMProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js');
var ReactDOMComponentFlags = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMComponentFlags.js');

var invariant = require('fbjs/lib/invariant');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = 
'__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;}

  return component;}


/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;}


function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;}}



/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;}

  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;}

    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID == null) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;}

    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (childNode.nodeType === 1 && 
      childNode.getAttribute(ATTR_NAME) === String(childID) || 
      childNode.nodeType === 8 && 
      childNode.nodeValue === ' react-text: ' + childID + ' ' || 
      childNode.nodeType === 8 && 
      childNode.nodeValue === ' react-empty: ' + childID + ' ') {
        precacheNode(childInst, childNode);
        continue outer;}}


    // We reached the end of the DOM children without finding an ID match.
    invariant(false, 'Unable to find element with ID %s.', childID);}

  inst._flags |= Flags.hasCachedChildNodes;}


/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];}


  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;} else 
    {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;}}



  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);}}



  return closest;}


/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;} else 
  {
    return null;}}



/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  invariant(
  inst._hostNode !== undefined, 
  'getNodeFromInstance: Invalid argument.');


  if (inst._hostNode) {
    return inst._hostNode;}


  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    invariant(
    inst._hostParent, 
    'React DOM tree root should always have a node reference.');

    inst = inst._hostParent;}


  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);}


  return inst._hostNode;}


var ReactDOMComponentTree = { 
  getClosestInstanceFromNode: getClosestInstanceFromNode, 
  getInstanceFromNode: getInstanceFromNode, 
  getNodeFromInstance: getNodeFromInstance, 
  precacheChildNodes: precacheChildNodes, 
  precacheNode: precacheNode, 
  uncacheNode: uncacheNode };


module.exports = ReactDOMComponentTree;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js":159,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMComponentFlags.js":165,"fbjs/lib/invariant":414}],67:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 */

'use strict';

var DOMChildrenOperations = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMChildrenOperations.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = { 

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);} };



module.exports = ReactDOMIDOperations;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMChildrenOperations.js":119}],68:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getNodeForCharacterOffset.js');
var getTextContentAccessor = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getTextContentAccessor.js');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;}


/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return { 
    start: startOffset, 
    end: endOffset };}



/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;}


  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */} 
  catch (e) {
    return null;}


  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
  selection.anchorNode, 
  selection.anchorOffset, 
  selection.focusNode, 
  selection.focusOffset);


  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
  tempRange.startContainer, 
  tempRange.startOffset, 
  tempRange.endContainer, 
  tempRange.endOffset);


  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return { 
    start: isBackward ? end : start, 
    end: isBackward ? start : end };}



/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;} else 
  if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;} else 
  {
    start = offsets.start;
    end = offsets.end;}


  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();}


/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;}


  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? 
  start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;}


  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);} else 
    {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);}}}




var useIEOffsets = 
ExecutionEnvironment.canUseDOM && 
'selection' in document && 
!('getSelection' in window);


var ReactDOMSelection = { 
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets, 

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets };


module.exports = ReactDOMSelection;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getNodeForCharacterOffset.js":130,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getTextContentAccessor.js":131,"fbjs/lib/ExecutionEnvironment":399}],69:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTreeTraversal
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  invariant('_hostNode' in instA, 'getNodeFromInstance: Invalid argument.');
  invariant('_hostNode' in instB, 'getNodeFromInstance: Invalid argument.');

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;}

  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;}


  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;}


  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;}


  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;}

    instA = instA._hostParent;
    instB = instB._hostParent;}

  return null;}


/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  invariant('_hostNode' in instA, 'isAncestor: Invalid argument.');
  invariant('_hostNode' in instB, 'isAncestor: Invalid argument.');

  while (instB) {
    if (instB === instA) {
      return true;}

    instB = instB._hostParent;}

  return false;}


/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  invariant('_hostNode' in inst, 'getParentInstance: Invalid argument.');

  return inst._hostParent;}


/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;}

  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], false, arg);}

  for (i = 0; i < path.length; i++) {
    fn(path[i], true, arg);}}



/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;}

  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;}

  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], true, argFrom);}

  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], false, argTo);}}



module.exports = { 
  isAncestor: isAncestor, 
  getLowestCommonAncestor: getLowestCommonAncestor, 
  getParentInstance: getParentInstance, 
  traverseTwoPhase: traverseTwoPhase, 
  traverseEnterLeave: traverseEnterLeave };
},{"fbjs/lib/invariant":414}],70:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 */

'use strict';var _assign = require('object-assign');

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');

var getEventTarget = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;}

  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);}


// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];}

_assign(TopLevelCallbackBookKeeping.prototype, { 
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;} });


PooledClass.addPoolingTo(
TopLevelCallbackBookKeeping, 
PooledClass.twoArgumentPooler);


function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(
  nativeEventTarget);


  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);} while (
  ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(
    bookKeeping.topLevelType, 
    targetInst, 
    bookKeeping.nativeEvent, 
    getEventTarget(bookKeeping.nativeEvent));}}




function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);}


var ReactEventListener = { 
  _enabled: true, 
  _handleTopLevel: null, 

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null, 

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;}, 


  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;}, 


  isEnabled: function () {
    return ReactEventListener._enabled;}, 



  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;}

    return EventListener.listen(
    element, 
    handlerBaseName, 
    ReactEventListener.dispatchEvent.bind(null, topLevelType));}, 



  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;}

    return EventListener.capture(
    element, 
    handlerBaseName, 
    ReactEventListener.dispatchEvent.bind(null, topLevelType));}, 



  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);}, 


  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;}


    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
    topLevelType, 
    nativeEvent);

    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);} finally 
    {
      TopLevelCallbackBookKeeping.release(bookKeeping);}} };




module.exports = ReactEventListener;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js":129,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js":277,"fbjs/lib/EventListener":398,"fbjs/lib/ExecutionEnvironment":399,"fbjs/lib/getUnboundedScrollPosition":411,"object-assign":425}],71:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMSelection.js');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);}


/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = { 

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (
    nodeName === 'input' && elem.type === 'text' || 
    nodeName === 'textarea' || 
    elem.contentEditable === 'true');}, 



  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return { 
      focusedElem: focusedElem, 
      selectionRange: 
      ReactInputSelection.hasSelectionCapabilities(focusedElem) ? 
      ReactInputSelection.getSelection(focusedElem) : 
      null };}, 



  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && 
    isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
        priorFocusedElem, 
        priorSelectionRange);}


      focusNode(priorFocusedElem);}}, 



  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = { 
        start: input.selectionStart, 
        end: input.selectionEnd };} else 

    if (document.selection && 
    input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = { 
          start: -range.moveStart('character', -input.value.length), 
          end: -range.moveEnd('character', -input.value.length) };}} else 


    {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);}


    return selection || { start: 0, end: 0 };}, 


  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;}


    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);} else 
    if (document.selection && 
    input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();} else 
    {
      ReactDOMSelection.setOffsets(input, offsets);}} };




module.exports = ReactInputSelection;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMSelection.js":68,"fbjs/lib/containsNode":403,"fbjs/lib/focusNode":408,"fbjs/lib/getActiveElement":409}],72:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMLazyTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMLazyTree.js');
var DOMProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js');
var ReactBrowserEventEmitter = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactBrowserEventEmitter.js');
var ReactCurrentOwner = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactDOMContainerInfo = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMContainerInfo.js');
var ReactDOMFeatureFlags = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMFeatureFlags.js');
var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');
var ReactFeatureFlags = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactFeatureFlags.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');
var ReactMarkupChecksum = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactMarkupChecksum.js');
var ReactReconciler = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js');
var ReactUpdateQueue = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdateQueue.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\instantiateReactComponent.js');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\setInnerHTML.js');
var shouldUpdateReactComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\shared\\shouldUpdateReactComponent.js');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;}}


  return string1.length === string2.length ? -1 : minLen;}


/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;}


  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;} else 
  {
    return container.firstChild;}}



function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';}


/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(
wrapperInstance, 
container, 
transaction, 
shouldReuseMarkup, 
context) 
{
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (
    typeof type === 'string' ? type : 
    type.displayName || type.name);

    console.time(markerName);}


  var markup = ReactReconciler.mountComponent(
  wrapperInstance, 
  transaction, 
  null, 
  ReactDOMContainerInfo(wrapperInstance, container), 
  context);


  if (markerName) {
    console.timeEnd(markerName);}


  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(
  markup, 
  container, 
  wrapperInstance, 
  shouldReuseMarkup, 
  transaction);}



/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(
componentInstance, 
container, 
shouldReuseMarkup, 
context) 
{
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);

  transaction.perform(
  mountComponentIntoNode, 
  null, 
  componentInstance, 
  container, 
  transaction, 
  shouldReuseMarkup, 
  context);

  ReactUpdates.ReactReconcileTransaction.release(transaction);}


/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if (__DEV__) {
    ReactInstrumentation.debugTool.onBeginFlush();}

  ReactReconciler.unmountComponent(instance, safely);
  if (__DEV__) {
    ReactInstrumentation.debugTool.onEndFlush();}


  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;}


  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);}}



/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);}}



function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = 
  rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return (
    prevHostInstance && !prevHostInstance._hostParent ? 
    prevHostInstance : null);}



function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;}


/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
  this.rootID = topLevelRootCounter++;};

TopLevelWrapper.prototype.isReactComponent = {};
if (__DEV__) {
  TopLevelWrapper.displayName = 'TopLevelWrapper';}

TopLevelWrapper.prototype.render = function () {
  // this.props is actually a ReactElement
  return this.props;};


/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = { 

  TopLevelWrapper: TopLevelWrapper, 

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID, 

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();}, 


  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (
  prevComponent, 
  nextElement, 
  container, 
  callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);}});



    return prevComponent;}, 


  /**
   * Render a new component into the DOM. Hooked by devtools!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (
  nextElement, 
  container, 
  shouldReuseMarkup, 
  context) 
  {
    if (__DEV__) {
      ReactInstrumentation.debugTool.onBeginFlush();}


    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    warning(
    ReactCurrentOwner.current == null, 
    '_renderNewRootComponent(): Render methods should be a pure function ' + 
    'of props and state; triggering nested component updates from ' + 
    'render is not allowed. If necessary, trigger nested updates in ' + 
    'componentDidUpdate. Check the render method of %s.', 
    ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 
    'ReactCompositeComponent');


    invariant(
    container && (
    container.nodeType === ELEMENT_NODE_TYPE || 
    container.nodeType === DOC_NODE_TYPE || 
    container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE), 

    '_registerComponent(...): Target container is not a DOM element.');


    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement);

    if (__DEV__) {
      // Mute future events from the top level wrapper.
      // It is an implementation detail that devtools should not know about.
      componentInstance._debugID = 0;}


    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(
    batchedMountComponentIntoNode, 
    componentInstance, 
    container, 
    shouldReuseMarkup, 
    context);


    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    if (__DEV__) {
      // The instance here is TopLevelWrapper so we report mount for its child.
      ReactInstrumentation.debugTool.onMountRootComponent(
      componentInstance._renderedComponent._debugID);

      ReactInstrumentation.debugTool.onEndFlush();}


    return componentInstance;}, 


  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    invariant(
    parentComponent != null && parentComponent._reactInternalInstance != null, 
    'parentComponent must be a valid React Component');

    return ReactMount._renderSubtreeIntoContainer(
    parentComponent, 
    nextElement, 
    container, 
    callback);}, 



  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    invariant(
    ReactElement.isValidElement(nextElement), 
    'ReactDOM.render(): Invalid component element.%s', 

    typeof nextElement === 'string' ? 
    ' Instead of passing a string like \'div\', pass ' + 
    'React.createElement(\'div\') or <div />.' : 
    typeof nextElement === 'function' ? 
    ' Instead of passing a class like Foo, pass ' + 
    'React.createElement(Foo) or <Foo />.' : 
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? 
    ' This may be caused by unintentionally loading two independent ' + 
    'copies of React.' : 
    '');



    warning(
    !container || !container.tagName || 
    container.tagName.toUpperCase() !== 'BODY', 
    'render(): Rendering components directly into document.body is ' + 
    'discouraged, since its children are often manipulated by third-party ' + 
    'scripts and browser extensions. This may lead to subtle ' + 
    'reconciliation issues. Try rendering into a container element created ' + 
    'for your app.');


    var nextWrappedElement = ReactElement(
    TopLevelWrapper, 
    null, 
    null, 
    null, 
    null, 
    null, 
    nextElement);


    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);};

        ReactMount._updateRootComponent(
        prevComponent, 
        nextWrappedElement, 
        container, 
        updatedCallback);

        return publicInst;} else 
      {
        ReactMount.unmountComponentAtNode(container);}}



    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = 
    reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (__DEV__) {
      warning(
      !containerHasNonRootReactChild, 
      'render(...): Replacing React-rendered children with a new root ' + 
      'component. If you intended to update the children of this node, ' + 
      'you should instead have the existing children update their state ' + 
      'and render the new components instead of calling ReactDOM.render.');


      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            warning(
            false, 
            'render(): Target node has markup rendered by React, but there ' + 
            'are unrelated nodes as well. This is most commonly caused by ' + 
            'white-space inserted around server-rendered markup.');

            break;}

          rootElementSibling = rootElementSibling.nextSibling;}}}




    var shouldReuseMarkup = 
    containerHasReactMarkup && 
    !prevComponent && 
    !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(
    nextWrappedElement, 
    container, 
    shouldReuseMarkup, 
    parentComponent != null ? 
    parentComponent._reactInternalInstance._processChildContext(
    parentComponent._reactInternalInstance._context) : 

    emptyObject).
    _renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);}

    return component;}, 



  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);}, 


  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    warning(
    ReactCurrentOwner.current == null, 
    'unmountComponentAtNode(): Render methods should be a pure function ' + 
    'of props and state; triggering nested component updates from render ' + 
    'is not allowed. If necessary, trigger nested updates in ' + 
    'componentDidUpdate. Check the render method of %s.', 
    ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 
    'ReactCompositeComponent');


    invariant(
    container && (
    container.nodeType === ELEMENT_NODE_TYPE || 
    container.nodeType === DOC_NODE_TYPE || 
    container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE), 

    'unmountComponentAtNode(...): Target container is not a DOM element.');


    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = 
      container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if (__DEV__) {
        warning(
        !containerHasNonRootReactChild, 
        'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 
        'was rendered by React and is not a top-level container. %s', 

        isContainerReactRoot ? 
        'You may have accidentally passed in a React root node instead ' + 
        'of its container.' : 
        'Instead, have the parent component update its state and ' + 
        'rerender in order to remove this component.');}




      return false;}

    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(
    unmountComponentFromNode, 
    prevComponent, 
    container, 
    false);

    return true;}, 


  _mountImageIntoNode: function (
  markup, 
  container, 
  instance, 
  shouldReuseMarkup, 
  transaction) 
  {
    invariant(
    container && (
    container.nodeType === ELEMENT_NODE_TYPE || 
    container.nodeType === DOC_NODE_TYPE || 
    container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE), 

    'mountComponentIntoNode(...): Target container is not valid.');


    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;} else 
      {
        var checksum = rootElement.getAttribute(
        ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(
        ReactMarkupChecksum.CHECKSUM_ATTR_NAME, 
        checksum);


        var normalizedMarkup = markup;
        if (__DEV__) {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;} else 
          {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);}}



        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + 
        normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + 
        '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        invariant(
        container.nodeType !== DOC_NODE_TYPE, 
        'You\'re trying to render a component to the document using ' + 
        'server rendering but the checksum was invalid. This usually ' + 
        'means you rendered a different component type or props on ' + 
        'the client from the one on the server, or your render() ' + 
        'methods are impure. React cannot handle this case due to ' + 
        'cross-browser quirks by rendering at the document root. You ' + 
        'should look for environment dependent code in your components ' + 
        'and ensure the props are the same client and server side:\n%s', 
        difference);


        if (__DEV__) {
          warning(
          false, 
          'React attempted to reuse markup in a container but the ' + 
          'checksum was invalid. This generally means that you are ' + 
          'using server rendering and the markup generated on the ' + 
          'server was not what the client was expecting. React injected ' + 
          'new markup to compensate which works but you have lost many ' + 
          'of the benefits of server rendering. Instead, figure out ' + 
          'why the markup being generated is different on the client ' + 
          'or server:\n%s', 
          difference);}}}





    invariant(
    container.nodeType !== DOC_NODE_TYPE, 
    'You\'re trying to render a component to the document but ' + 
    'you didn\'t use server rendering. We can\'t do this ' + 
    'without using server rendering due to cross-browser quirks. ' + 
    'See ReactDOMServer.renderToString() for server rendering.');


    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);}

      DOMLazyTree.insertTreeBefore(container, markup, null);} else 
    {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);}


    if (__DEV__) {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation(
        hostNode._debugID, 
        'mount', 
        markup.toString());}}} };






module.exports = ReactMount;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js":38,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactBrowserEventEmitter.js":65,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMLazyTree.js":120,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\setInnerHTML.js":134,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactMarkupChecksum.js":151,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js":159,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMContainerInfo.js":166,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMFeatureFlags.js":169,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\shared\\shouldUpdateReactComponent.js":225,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js":250,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdateQueue.js":254,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\instantiateReactComponent.js":274,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactFeatureFlags.js":279,"fbjs/lib/emptyObject":407,"fbjs/lib/invariant":414,"fbjs/lib/warning":424}],73:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 */

'use strict';var _assign = require('object-assign');

var CallbackQueue = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\CallbackQueue.js');
var PooledClass = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js');
var ReactBrowserEventEmitter = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactBrowserEventEmitter.js');
var ReactInputSelection = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactInputSelection.js');
var Transaction = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\Transaction.js');


/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = { 
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation, 
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection };


/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = { 
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;}, 


  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);} };



/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = { 
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();}, 


  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();} };



/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
SELECTION_RESTORATION, 
EVENT_SUPPRESSION, 
ON_DOM_READY_QUEUEING];


/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;}


var Mixin = { 
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;}, 


  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;}, 


  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();}, 


  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);}, 


  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;} };




_assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactBrowserEventEmitter.js":65,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactInputSelection.js":71,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\CallbackQueue.js":275,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js":277,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\Transaction.js":281,"object-assign":425}],74:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\__tests__\\ReactBrowserEventEmitter-test.js';

var keyOf = require('fbjs/lib/keyOf');

var EventListener;
var EventPluginHub;
var EventPluginRegistry;
var React;
var ReactBrowserEventEmitter;
var ReactDOMComponentTree;
var ReactTestUtils;
var TapEventPlugin;

var tapMoveThreshold;
var idCallOrder;
var recordID = function (id) {
  idCallOrder.push(id);};

var recordIDAndStopPropagation = function (id, event) {
  recordID(id);
  event.stopPropagation();};

var recordIDAndReturnFalse = function (id, event) {
  recordID(id);
  return false;};

var LISTENER = jest.fn();
var ON_CLICK_KEY = keyOf({ onClick: null });
var ON_TOUCH_TAP_KEY = keyOf({ onTouchTap: null });
var ON_CHANGE_KEY = keyOf({ onChange: null });
var ON_MOUSE_ENTER_KEY = keyOf({ onMouseEnter: null });

var GRANDPARENT;
var PARENT;
var CHILD;

function registerSimpleTestHandler() {
  EventPluginHub.putListener(getInternal(CHILD), ON_CLICK_KEY, LISTENER);
  var listener = EventPluginHub.getListener(getInternal(CHILD), ON_CLICK_KEY);
  expect(listener).toEqual(LISTENER);
  return EventPluginHub.getListener(getInternal(CHILD), ON_CLICK_KEY);}


function getInternal(node) {
  return ReactDOMComponentTree.getInstanceFromNode(node);}



describe('ReactBrowserEventEmitter', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();
    LISTENER.mockClear();
    EventListener = require('fbjs/lib/EventListener');
    EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
    EventPluginRegistry = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js');
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactBrowserEventEmitter = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactBrowserEventEmitter.js');
    ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    TapEventPlugin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\TapEventPlugin.js');

    ReactTestUtils.renderIntoDocument(
    React.createElement('div', { ref: function (c) {return GRANDPARENT = c;}, __source: { fileName: _jsxFileName, lineNumber: 74 } }, 
    React.createElement('div', { ref: function (c) {return PARENT = c;}, __source: { fileName: _jsxFileName, lineNumber: 75 } }, 
    React.createElement('div', { ref: function (c) {return CHILD = c;}, __source: { fileName: _jsxFileName, lineNumber: 76 } }))));




    idCallOrder = [];
    tapMoveThreshold = TapEventPlugin.tapMoveThreshold;
    EventPluginHub.injection.injectEventPluginsByName({ 
      TapEventPlugin: TapEventPlugin });});



  it('should store a listener correctly', function () {
    registerSimpleTestHandler();
    var listener = EventPluginHub.getListener(getInternal(CHILD), ON_CLICK_KEY);
    expect(listener).toBe(LISTENER);});


  it('should retrieve a listener correctly', function () {
    registerSimpleTestHandler();
    var listener = EventPluginHub.getListener(getInternal(CHILD), ON_CLICK_KEY);
    expect(listener).toEqual(LISTENER);});


  it('should clear all handlers when asked to', function () {
    registerSimpleTestHandler();
    EventPluginHub.deleteAllListeners(getInternal(CHILD));
    var listener = EventPluginHub.getListener(getInternal(CHILD), ON_CLICK_KEY);
    expect(listener).toBe(undefined);});


  it('should invoke a simple handler registered on a node', function () {
    registerSimpleTestHandler();
    ReactTestUtils.Simulate.click(CHILD);
    expect(LISTENER.mock.calls.length).toBe(1);});


  it(
  'should not invoke handlers if ReactBrowserEventEmitter is disabled', 
  function () {
    registerSimpleTestHandler();
    ReactBrowserEventEmitter.setEnabled(false);
    ReactTestUtils.SimulateNative.click(CHILD);
    expect(LISTENER.mock.calls.length).toBe(0);
    ReactBrowserEventEmitter.setEnabled(true);
    ReactTestUtils.SimulateNative.click(CHILD);
    expect(LISTENER.mock.calls.length).toBe(1);});



  it('should bubble simply', function () {
    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_CLICK_KEY, 
    recordID.bind(null, getInternal(CHILD)));

    EventPluginHub.putListener(
    getInternal(PARENT), 
    ON_CLICK_KEY, 
    recordID.bind(null, getInternal(PARENT)));

    EventPluginHub.putListener(
    getInternal(GRANDPARENT), 
    ON_CLICK_KEY, 
    recordID.bind(null, getInternal(GRANDPARENT)));

    ReactTestUtils.Simulate.click(CHILD);
    expect(idCallOrder.length).toBe(3);
    expect(idCallOrder[0]).toBe(getInternal(CHILD));
    expect(idCallOrder[1]).toBe(getInternal(PARENT));
    expect(idCallOrder[2]).toBe(getInternal(GRANDPARENT));});


  it('should continue bubbling if an error is thrown', function () {
    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_CLICK_KEY, 
    recordID.bind(null, getInternal(CHILD)));

    EventPluginHub.putListener(
    getInternal(PARENT), 
    ON_CLICK_KEY, 
    function () {
      recordID(getInternal(PARENT));
      throw new Error('Handler interrupted');});


    EventPluginHub.putListener(
    getInternal(GRANDPARENT), 
    ON_CLICK_KEY, 
    recordID.bind(null, getInternal(GRANDPARENT)));

    expect(function () {
      ReactTestUtils.Simulate.click(CHILD);}).
    toThrow();
    expect(idCallOrder.length).toBe(3);
    expect(idCallOrder[0]).toBe(getInternal(CHILD));
    expect(idCallOrder[1]).toBe(getInternal(PARENT));
    expect(idCallOrder[2]).toBe(getInternal(GRANDPARENT));});


  it('should set currentTarget', function () {
    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_CLICK_KEY, 
    function (event) {
      recordID(getInternal(CHILD));
      expect(event.currentTarget).toBe(CHILD);});


    EventPluginHub.putListener(
    getInternal(PARENT), 
    ON_CLICK_KEY, 
    function (event) {
      recordID(getInternal(PARENT));
      expect(event.currentTarget).toBe(PARENT);});


    EventPluginHub.putListener(
    getInternal(GRANDPARENT), 
    ON_CLICK_KEY, 
    function (event) {
      recordID(getInternal(GRANDPARENT));
      expect(event.currentTarget).toBe(GRANDPARENT);});


    ReactTestUtils.Simulate.click(CHILD);
    expect(idCallOrder.length).toBe(3);
    expect(idCallOrder[0]).toBe(getInternal(CHILD));
    expect(idCallOrder[1]).toBe(getInternal(PARENT));
    expect(idCallOrder[2]).toBe(getInternal(GRANDPARENT));});


  it('should support stopPropagation()', function () {
    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_CLICK_KEY, 
    recordID.bind(null, getInternal(CHILD)));

    EventPluginHub.putListener(
    getInternal(PARENT), 
    ON_CLICK_KEY, 
    recordIDAndStopPropagation.bind(null, getInternal(PARENT)));

    EventPluginHub.putListener(
    getInternal(GRANDPARENT), 
    ON_CLICK_KEY, 
    recordID.bind(null, getInternal(GRANDPARENT)));

    ReactTestUtils.Simulate.click(CHILD);
    expect(idCallOrder.length).toBe(2);
    expect(idCallOrder[0]).toBe(getInternal(CHILD));
    expect(idCallOrder[1]).toBe(getInternal(PARENT));});


  it('should stop after first dispatch if stopPropagation', function () {
    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_CLICK_KEY, 
    recordIDAndStopPropagation.bind(null, getInternal(CHILD)));

    EventPluginHub.putListener(
    getInternal(PARENT), 
    ON_CLICK_KEY, 
    recordID.bind(null, getInternal(PARENT)));

    EventPluginHub.putListener(
    getInternal(GRANDPARENT), 
    ON_CLICK_KEY, 
    recordID.bind(null, getInternal(GRANDPARENT)));

    ReactTestUtils.Simulate.click(CHILD);
    expect(idCallOrder.length).toBe(1);
    expect(idCallOrder[0]).toBe(getInternal(CHILD));});


  it('should not stopPropagation if false is returned', function () {
    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_CLICK_KEY, 
    recordIDAndReturnFalse.bind(null, getInternal(CHILD)));

    EventPluginHub.putListener(
    getInternal(PARENT), 
    ON_CLICK_KEY, 
    recordID.bind(null, getInternal(PARENT)));

    EventPluginHub.putListener(
    getInternal(GRANDPARENT), 
    ON_CLICK_KEY, 
    recordID.bind(null, getInternal(GRANDPARENT)));

    spyOn(console, 'error');
    ReactTestUtils.Simulate.click(CHILD);
    expect(idCallOrder.length).toBe(3);
    expect(idCallOrder[0]).toBe(getInternal(CHILD));
    expect(idCallOrder[1]).toBe(getInternal(PARENT));
    expect(idCallOrder[2]).toBe(getInternal(GRANDPARENT));
    expect(console.error.calls.count()).toEqual(0);});


  /**
   * The entire event registration state of the world should be "locked-in" at
   * the time the event occurs. This is to resolve many edge cases that come
   * about from a listener on a lower-in-DOM node causing structural changes at
   * places higher in the DOM. If this lower-in-DOM node causes new content to
   * be rendered at a place higher-in-DOM, we need to be careful not to invoke
   * these new listeners.
   */

  it('should invoke handlers that were removed while bubbling', function () {
    var handleParentClick = jest.fn();
    var handleChildClick = function (event) {
      EventPluginHub.deleteAllListeners(getInternal(PARENT));};

    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_CLICK_KEY, 
    handleChildClick);

    EventPluginHub.putListener(
    getInternal(PARENT), 
    ON_CLICK_KEY, 
    handleParentClick);

    ReactTestUtils.Simulate.click(CHILD);
    expect(handleParentClick.mock.calls.length).toBe(1);});


  it('should not invoke newly inserted handlers while bubbling', function () {
    var handleParentClick = jest.fn();
    var handleChildClick = function (event) {
      EventPluginHub.putListener(
      getInternal(PARENT), 
      ON_CLICK_KEY, 
      handleParentClick);};


    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_CLICK_KEY, 
    handleChildClick);

    ReactTestUtils.Simulate.click(CHILD);
    expect(handleParentClick.mock.calls.length).toBe(0);});


  it('should have mouse enter simulated by test utils', function () {
    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_MOUSE_ENTER_KEY, 
    recordID.bind(null, getInternal(CHILD)));

    ReactTestUtils.Simulate.mouseEnter(CHILD);
    expect(idCallOrder.length).toBe(1);
    expect(idCallOrder[0]).toBe(getInternal(CHILD));});


  it('should infer onTouchTap from a touchStart/End', function () {
    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_TOUCH_TAP_KEY, 
    recordID.bind(null, getInternal(CHILD)));

    ReactTestUtils.SimulateNative.touchStart(
    CHILD, 
    ReactTestUtils.nativeTouchData(0, 0));

    ReactTestUtils.SimulateNative.touchEnd(
    CHILD, 
    ReactTestUtils.nativeTouchData(0, 0));

    expect(idCallOrder.length).toBe(1);
    expect(idCallOrder[0]).toBe(getInternal(CHILD));});


  it('should infer onTouchTap from when dragging below threshold', function () {
    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_TOUCH_TAP_KEY, 
    recordID.bind(null, getInternal(CHILD)));

    ReactTestUtils.SimulateNative.touchStart(
    CHILD, 
    ReactTestUtils.nativeTouchData(0, 0));

    ReactTestUtils.SimulateNative.touchEnd(
    CHILD, 
    ReactTestUtils.nativeTouchData(0, tapMoveThreshold - 1));

    expect(idCallOrder.length).toBe(1);
    expect(idCallOrder[0]).toBe(getInternal(CHILD));});


  it('should not onTouchTap from when dragging beyond threshold', function () {
    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_TOUCH_TAP_KEY, 
    recordID.bind(null, getInternal(CHILD)));

    ReactTestUtils.SimulateNative.touchStart(
    CHILD, 
    ReactTestUtils.nativeTouchData(0, 0));

    ReactTestUtils.SimulateNative.touchEnd(
    CHILD, 
    ReactTestUtils.nativeTouchData(0, tapMoveThreshold + 1));

    expect(idCallOrder.length).toBe(0);});


  it('should listen to events only once', function () {
    spyOn(EventListener, 'listen');
    ReactBrowserEventEmitter.listenTo(ON_CLICK_KEY, document);
    ReactBrowserEventEmitter.listenTo(ON_CLICK_KEY, document);
    expect(EventListener.listen.calls.count()).toBe(1);});


  it('should work with event plugins without dependencies', function () {
    spyOn(EventListener, 'listen');

    ReactBrowserEventEmitter.listenTo(ON_CLICK_KEY, document);

    expect(EventListener.listen.calls.argsFor(0)[1]).toBe('click');});


  it('should work with event plugins with dependencies', function () {
    spyOn(EventListener, 'listen');
    spyOn(EventListener, 'capture');

    ReactBrowserEventEmitter.listenTo(ON_CHANGE_KEY, document);

    var setEventListeners = [];
    var listenCalls = EventListener.listen.calls.allArgs();
    var captureCalls = EventListener.capture.calls.allArgs();
    for (var i = 0; i < listenCalls.length; i++) {
      setEventListeners.push(listenCalls[i][1]);}

    for (i = 0; i < captureCalls.length; i++) {
      setEventListeners.push(captureCalls[i][1]);}


    var module = EventPluginRegistry.registrationNameModules[ON_CHANGE_KEY];
    var dependencies = module.eventTypes.change.dependencies;
    expect(setEventListeners.length).toEqual(dependencies.length);

    for (i = 0; i < setEventListeners.length; i++) {
      expect(dependencies.indexOf(setEventListeners[i])).toBeTruthy();}});



  it('should bubble onTouchTap', function () {
    EventPluginHub.putListener(
    getInternal(CHILD), 
    ON_TOUCH_TAP_KEY, 
    recordID.bind(null, getInternal(CHILD)));

    EventPluginHub.putListener(
    getInternal(PARENT), 
    ON_TOUCH_TAP_KEY, 
    recordID.bind(null, getInternal(PARENT)));

    EventPluginHub.putListener(
    getInternal(GRANDPARENT), 
    ON_TOUCH_TAP_KEY, 
    recordID.bind(null, getInternal(GRANDPARENT)));

    ReactTestUtils.SimulateNative.touchStart(
    CHILD, 
    ReactTestUtils.nativeTouchData(0, 0));

    ReactTestUtils.SimulateNative.touchEnd(
    CHILD, 
    ReactTestUtils.nativeTouchData(0, 0));

    expect(idCallOrder.length).toBe(3);
    expect(idCallOrder[0]).toBe(getInternal(CHILD));
    expect(idCallOrder[1]).toBe(getInternal(PARENT));
    expect(idCallOrder[2]).toBe(getInternal(GRANDPARENT));});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactBrowserEventEmitter.js":65,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\TapEventPlugin.js":95,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js":228,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"fbjs/lib/EventListener":398,"fbjs/lib/keyOf":418}],75:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\__tests__\\ReactDOM-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
var div = React.createFactory('div');

describe('ReactDOM', function () {
  // TODO: uncomment this test once we can run in phantom, which
  // supports real submit events.
  /*
  it('should bubble onSubmit', function() {
    var count = 0;
    var form;
    var Parent = React.createClass({
      handleSubmit: function() {
        count++;
        return false;
      },
      render: function() {
        return <Child />;
      }
    });
    var Child = React.createClass({
      render: function() {
        return <form><input type="submit" value="Submit" /></form>;
      },
      componentDidMount: function() {
        form = ReactDOM.findDOMNode(this);
      }
    });
    var instance = ReactTestUtils.renderIntoDocument(<Parent />);
    form.submit();
    expect(count).toEqual(1);
  });
  */

  it('allows a DOM element to be used with a string', function () {
    var element = React.createElement('div', { className: 'foo' });
    var instance = ReactTestUtils.renderIntoDocument(element);
    expect(ReactDOM.findDOMNode(instance).tagName).toBe('DIV');});


  it('should allow children to be passed as an argument', function () {
    var argDiv = ReactTestUtils.renderIntoDocument(
    div(null, 'child'));

    var argNode = ReactDOM.findDOMNode(argDiv);
    expect(argNode.innerHTML).toBe('child');});


  it('should overwrite props.children with children argument', function () {
    var conflictDiv = ReactTestUtils.renderIntoDocument(
    div({ children: 'fakechild' }, 'child'));

    var conflictNode = ReactDOM.findDOMNode(conflictDiv);
    expect(conflictNode.innerHTML).toBe('child');});


  /**
   * We need to make sure that updates occur to the actual node that's in the
   * DOM, instead of a stale cache.
   */
  it('should purge the DOM cache when removing nodes', function () {
    var myDiv = ReactTestUtils.renderIntoDocument(
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 77 } }, 
    React.createElement('div', { key: 'theDog', className: 'dog', __source: { fileName: _jsxFileName, lineNumber: 78 } }), ',', 
    React.createElement('div', { key: 'theBird', className: 'bird', __source: { fileName: _jsxFileName, lineNumber: 79 } })));


    // Warm the cache with theDog
    myDiv = ReactTestUtils.renderIntoDocument(
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 84 } }, 
    React.createElement('div', { key: 'theDog', className: 'dogbeforedelete', __source: { fileName: _jsxFileName, lineNumber: 85 } }), ',', 
    React.createElement('div', { key: 'theBird', className: 'bird', __source: { fileName: _jsxFileName, lineNumber: 86 } }), ','));


    // Remove theDog - this should purge the cache
    myDiv = ReactTestUtils.renderIntoDocument(
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 91 } }, 
    React.createElement('div', { key: 'theBird', className: 'bird', __source: { fileName: _jsxFileName, lineNumber: 92 } }), ','));


    // Now, put theDog back. It's now a different DOM node.
    myDiv = ReactTestUtils.renderIntoDocument(
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 97 } }, 
    React.createElement('div', { key: 'theDog', className: 'dog', __source: { fileName: _jsxFileName, lineNumber: 98 } }), ',', 
    React.createElement('div', { key: 'theBird', className: 'bird', __source: { fileName: _jsxFileName, lineNumber: 99 } }), ','));


    // Change the className of theDog. It will use the same element
    myDiv = ReactTestUtils.renderIntoDocument(
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 104 } }, 
    React.createElement('div', { key: 'theDog', className: 'bigdog', __source: { fileName: _jsxFileName, lineNumber: 105 } }), ',', 
    React.createElement('div', { key: 'theBird', className: 'bird', __source: { fileName: _jsxFileName, lineNumber: 106 } }), ','));


    var root = ReactDOM.findDOMNode(myDiv);
    var dog = root.childNodes[0];
    expect(dog.className).toBe('bigdog');});


  it('allow React.DOM factories to be called without warnings', function () {
    spyOn(console, 'error');
    var element = React.DOM.div();
    expect(element.type).toBe('div');
    expect(console.error.calls.count()).toBe(0);});


  it('throws in render() if the mount callback is not a function', function () {
    function Foo() {
      this.a = 1;
      this.b = 2;}

    var A = React.createClass({ displayName: 'A', 
      getInitialState: function () {
        return {};}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 131 } });} });



    var myDiv = document.createElement('div');
    expect(function () {return ReactDOM.render(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 136 } }), myDiv, 'no');}).toThrowError(
    'ReactDOM.render(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: string.');

    expect(function () {return ReactDOM.render(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 140 } }), myDiv, {});}).toThrowError(
    'ReactDOM.render(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: Object.');

    expect(function () {return ReactDOM.render(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 144 } }), myDiv, new Foo());}).toThrowError(
    'ReactDOM.render(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: Foo (keys: a, b).');});



  it('throws in render() if the update callback is not a function', function () {
    function Foo() {
      this.a = 1;
      this.b = 2;}

    var A = React.createClass({ displayName: 'A', 
      getInitialState: function () {
        return {};}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 160 } });} });



    var myDiv = document.createElement('div');
    ReactDOM.render(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 165 } }), myDiv);

    expect(function () {return ReactDOM.render(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 167 } }), myDiv, 'no');}).toThrowError(
    'ReactDOM.render(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: string.');

    expect(function () {return ReactDOM.render(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 171 } }), myDiv, {});}).toThrowError(
    'ReactDOM.render(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: Object.');

    expect(function () {return ReactDOM.render(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 175 } }), myDiv, new Foo());}).toThrowError(
    'ReactDOM.render(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: Foo (keys: a, b).');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],76:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\__tests__\\ReactDOMComponentTree-test.js';

describe('ReactDOMComponentTree', function () {
  var React;
  var ReactDOM;
  var ReactDOMComponentTree;
  var ReactDOMServer;

  function renderMarkupIntoDocument(elt) {
    var container = document.createElement('div');
    // Force server-rendering path:
    container.innerHTML = ReactDOMServer.renderToString(elt);
    return ReactDOM.render(elt, container);}


  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
    ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');});


  it('finds nodes for instances', function () {
    // This is a little hard to test directly. But refs rely on it -- so we
    // check that we can find a ref at arbitrary points in the tree, even if
    // other nodes don't have a ref.
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        var toRef = this.props.toRef;
        return (
          React.createElement('div', { ref: toRef === 'div' ? 'target' : null, __source: { fileName: _jsxFileName, lineNumber: 42 } }, 
          React.createElement('h1', { ref: toRef === 'h1' ? 'target' : null, __source: { fileName: _jsxFileName, lineNumber: 43 } }, 'hello'), 
          React.createElement('p', { ref: toRef === 'p' ? 'target' : null, __source: { fileName: _jsxFileName, lineNumber: 44 } }, 
          React.createElement('input', { ref: toRef === 'input' ? 'target' : null, __source: { fileName: _jsxFileName, lineNumber: 45 } })), 'goodbye.'));} });







    function renderAndGetRef(toRef) {
      var inst = renderMarkupIntoDocument(React.createElement(Component, { toRef: toRef, __source: { fileName: _jsxFileName, lineNumber: 54 } }));
      return inst.refs.target.nodeName;}


    expect(renderAndGetRef('div')).toBe('DIV');
    expect(renderAndGetRef('h1')).toBe('H1');
    expect(renderAndGetRef('p')).toBe('P');
    expect(renderAndGetRef('input')).toBe('INPUT');});


  it('finds instances for nodes', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 68 } }, 
          React.createElement('h1', { __source: { fileName: _jsxFileName, lineNumber: 69 } }, 'hello'), 
          React.createElement('p', { __source: { fileName: _jsxFileName, lineNumber: 70 } }, 
          React.createElement('input', { __source: { fileName: _jsxFileName, lineNumber: 71 } })), 'goodbye.', 


          React.createElement('main', { dangerouslySetInnerHTML: { __html: '<b><img></b>' }, __source: { fileName: _jsxFileName, lineNumber: 74 } })));} });





    function renderAndQuery(sel) {
      var root = renderMarkupIntoDocument(React.createElement('section', { __source: { fileName: _jsxFileName, lineNumber: 81 } }, React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 81 } })));
      return sel ? root.querySelector(sel) : root;}


    function renderAndGetInstance(sel) {
      return ReactDOMComponentTree.getInstanceFromNode(renderAndQuery(sel));}


    function renderAndGetClosest(sel) {
      return ReactDOMComponentTree.getClosestInstanceFromNode(
      renderAndQuery(sel));}



    expect(renderAndGetInstance(null)._currentElement.type).toBe('section');
    expect(renderAndGetInstance('div')._currentElement.type).toBe('div');
    expect(renderAndGetInstance('h1')._currentElement.type).toBe('h1');
    expect(renderAndGetInstance('p')._currentElement.type).toBe('p');
    expect(renderAndGetInstance('input')._currentElement.type).toBe('input');
    expect(renderAndGetInstance('main')._currentElement.type).toBe('main');

    // This one's a text component!
    var root = renderAndQuery(null);
    var inst = ReactDOMComponentTree.getInstanceFromNode(root.children[0].childNodes[2]);
    expect(inst._stringText).toBe('goodbye.');

    expect(renderAndGetClosest('b')._currentElement.type).toBe('main');
    expect(renderAndGetClosest('img')._currentElement.type).toBe('main');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66}],77:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

describe('ReactDOMIDOperations', function () {
  var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
  var ReactDOMIDOperations = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMIDOperations.js');
  var ReactMultiChildUpdateTypes = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactMultiChildUpdateTypes.js');

  it('should update innerHTML and preserve whitespace', function () {
    var stubNode = document.createElement('div');
    var stubInstance = { _debugID: 1 };
    ReactDOMComponentTree.precacheNode(stubInstance, stubNode);

    var html = '\n  \t  <span>  \n  testContent  \t  </span>  \n  \t';
    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates(
    stubInstance, 
    [{ 
      type: ReactMultiChildUpdateTypes.SET_MARKUP, 
      content: html, 
      fromIndex: null, 
      toIndex: null }], 

    []);


    expect(stubNode.innerHTML).toBe(html);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMIDOperations.js":67,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactMultiChildUpdateTypes.js":248}],78:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\__tests__\\ReactDOMSVG-test.js';

var React;
var ReactDOMServer;

describe('ReactDOMSVG', function () {

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');});


  it('creates initial namespaced markup', function () {
    var markup = ReactDOMServer.renderToString(
    React.createElement('svg', { __source: { fileName: _jsxFileName, lineNumber: 26 } }, 
    React.createElement('image', { xlinkHref: 'http://i.imgur.com/w7GCRPb.png', __source: { fileName: _jsxFileName, lineNumber: 27 } })));


    expect(markup).toContain('xlink:href="http://i.imgur.com/w7GCRPb.png"');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63}],79:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\__tests__\\ReactDOMTreeTraversal-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

/**
 * Ensure that all callbacks are invoked, passing this unique argument.
 */
var ARG = { arg: true };
var ARG2 = { arg2: true };

var ChildComponent = React.createClass({ displayName: 'ChildComponent', 
  render: function () {
    return (
      React.createElement('div', { ref: 'DIV', __source: { fileName: _jsxFileName, lineNumber: 27 } }, 
      React.createElement('div', { ref: 'DIV_1', __source: { fileName: _jsxFileName, lineNumber: 28 } }), 
      React.createElement('div', { ref: 'DIV_2', __source: { fileName: _jsxFileName, lineNumber: 29 } })));} });





var ParentComponent = React.createClass({ displayName: 'ParentComponent', 
  render: function () {
    return (
      React.createElement('div', { ref: 'P', __source: { fileName: _jsxFileName, lineNumber: 38 } }, 
      React.createElement('div', { ref: 'P_P1', __source: { fileName: _jsxFileName, lineNumber: 39 } }, 
      React.createElement(ChildComponent, { ref: 'P_P1_C1', __source: { fileName: _jsxFileName, lineNumber: 40 } }), 
      React.createElement(ChildComponent, { ref: 'P_P1_C2', __source: { fileName: _jsxFileName, lineNumber: 41 } })), 

      React.createElement('div', { ref: 'P_OneOff', __source: { fileName: _jsxFileName, lineNumber: 43 } })));} });





function renderParentIntoDocument() {
  return ReactTestUtils.renderIntoDocument(React.createElement(ParentComponent, { __source: { fileName: _jsxFileName, lineNumber: 50 } }));}


describe('ReactDOMTreeTraversal', function () {
  var ReactDOMTreeTraversal;

  var aggregatedArgs;
  function argAggregator(inst, isUp, arg) {
    aggregatedArgs.push({ 
      node: ReactDOMComponentTree.getNodeFromInstance(inst), 
      isUp: isUp, 
      arg: arg });}



  function getInst(node) {
    return ReactDOMComponentTree.getInstanceFromNode(node);}


  beforeEach(function () {
    ReactDOMTreeTraversal = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMTreeTraversal.js');
    aggregatedArgs = [];});


  describe('traverseTwoPhase', function () {
    it('should not traverse when traversing outside DOM', function () {
      var expectedAggregation = [];
      ReactDOMTreeTraversal.traverseTwoPhase(null, argAggregator, ARG);
      expect(aggregatedArgs).toEqual(expectedAggregation);});


    it('should traverse two phase across component boundary', function () {
      var parent = renderParentIntoDocument();
      var target = getInst(parent.refs.P_P1_C1.refs.DIV_1);
      var expectedAggregation = [
      { node: parent.refs.P, isUp: false, arg: ARG }, 
      { node: parent.refs.P_P1, isUp: false, arg: ARG }, 
      { node: parent.refs.P_P1_C1.refs.DIV, isUp: false, arg: ARG }, 
      { node: parent.refs.P_P1_C1.refs.DIV_1, isUp: false, arg: ARG }, 

      { node: parent.refs.P_P1_C1.refs.DIV_1, isUp: true, arg: ARG }, 
      { node: parent.refs.P_P1_C1.refs.DIV, isUp: true, arg: ARG }, 
      { node: parent.refs.P_P1, isUp: true, arg: ARG }, 
      { node: parent.refs.P, isUp: true, arg: ARG }];

      ReactDOMTreeTraversal.traverseTwoPhase(target, argAggregator, ARG);
      expect(aggregatedArgs).toEqual(expectedAggregation);});


    it('should traverse two phase at shallowest node', function () {
      var parent = renderParentIntoDocument();
      var target = getInst(parent.refs.P);
      var expectedAggregation = [
      { node: parent.refs.P, isUp: false, arg: ARG }, 
      { node: parent.refs.P, isUp: true, arg: ARG }];

      ReactDOMTreeTraversal.traverseTwoPhase(target, argAggregator, ARG);
      expect(aggregatedArgs).toEqual(expectedAggregation);});});



  describe('traverseEnterLeave', function () {
    it('should not traverse when enter/leaving outside DOM', function () {
      var target = null;
      var expectedAggregation = [];
      ReactDOMTreeTraversal.traverseEnterLeave(
      target, target, argAggregator, ARG, ARG2);

      expect(aggregatedArgs).toEqual(expectedAggregation);});


    it('should not traverse if enter/leave the same node', function () {
      var parent = renderParentIntoDocument();
      var leave = getInst(parent.refs.P_P1_C1.refs.DIV_1);
      var enter = getInst(parent.refs.P_P1_C1.refs.DIV_1);
      var expectedAggregation = [];
      ReactDOMTreeTraversal.traverseEnterLeave(
      leave, enter, argAggregator, ARG, ARG2);

      expect(aggregatedArgs).toEqual(expectedAggregation);});


    it('should traverse enter/leave to sibling - avoids parent', function () {
      var parent = renderParentIntoDocument();
      var leave = getInst(parent.refs.P_P1_C1.refs.DIV_1);
      var enter = getInst(parent.refs.P_P1_C1.refs.DIV_2);
      var expectedAggregation = [
      { node: parent.refs.P_P1_C1.refs.DIV_1, isUp: true, arg: ARG }, 
      // enter/leave shouldn't fire anything on the parent
      { node: parent.refs.P_P1_C1.refs.DIV_2, isUp: false, arg: ARG2 }];

      ReactDOMTreeTraversal.traverseEnterLeave(
      leave, enter, argAggregator, ARG, ARG2);

      expect(aggregatedArgs).toEqual(expectedAggregation);});


    it('should traverse enter/leave to parent - avoids parent', function () {
      var parent = renderParentIntoDocument();
      var leave = getInst(parent.refs.P_P1_C1.refs.DIV_1);
      var enter = getInst(parent.refs.P_P1_C1.refs.DIV);
      var expectedAggregation = [
      { node: parent.refs.P_P1_C1.refs.DIV_1, isUp: true, arg: ARG }];

      ReactDOMTreeTraversal.traverseEnterLeave(
      leave, enter, argAggregator, ARG, ARG2);

      expect(aggregatedArgs).toEqual(expectedAggregation);});


    it('should enter from the window', function () {
      var parent = renderParentIntoDocument();
      var leave = null; // From the window or outside of the React sandbox.
      var enter = getInst(parent.refs.P_P1_C1.refs.DIV);
      var expectedAggregation = [
      { node: parent.refs.P, isUp: false, arg: ARG2 }, 
      { node: parent.refs.P_P1, isUp: false, arg: ARG2 }, 
      { node: parent.refs.P_P1_C1.refs.DIV, isUp: false, arg: ARG2 }];

      ReactDOMTreeTraversal.traverseEnterLeave(
      leave, enter, argAggregator, ARG, ARG2);

      expect(aggregatedArgs).toEqual(expectedAggregation);});


    it('should enter from the window to the shallowest', function () {
      var parent = renderParentIntoDocument();
      var leave = null; // From the window or outside of the React sandbox.
      var enter = getInst(parent.refs.P);
      var expectedAggregation = [
      { node: parent.refs.P, isUp: false, arg: ARG2 }];

      ReactDOMTreeTraversal.traverseEnterLeave(
      leave, enter, argAggregator, ARG, ARG2);

      expect(aggregatedArgs).toEqual(expectedAggregation);});


    it('should leave to the window', function () {
      var parent = renderParentIntoDocument();
      var enter = null; // From the window or outside of the React sandbox.
      var leave = getInst(parent.refs.P_P1_C1.refs.DIV);
      var expectedAggregation = [
      { node: parent.refs.P_P1_C1.refs.DIV, isUp: true, arg: ARG }, 
      { node: parent.refs.P_P1, isUp: true, arg: ARG }, 
      { node: parent.refs.P, isUp: true, arg: ARG }];

      ReactDOMTreeTraversal.traverseEnterLeave(
      leave, enter, argAggregator, ARG, ARG2);

      expect(aggregatedArgs).toEqual(expectedAggregation);});


    it('should leave to the window from the shallowest', function () {
      var parent = renderParentIntoDocument();
      var enter = null; // From the window or outside of the React sandbox.
      var leave = getInst(parent.refs.P_P1_C1.refs.DIV);
      var expectedAggregation = [
      { node: parent.refs.P_P1_C1.refs.DIV, isUp: true, arg: ARG }, 
      { node: parent.refs.P_P1, isUp: true, arg: ARG }, 
      { node: parent.refs.P, isUp: true, arg: ARG }];

      ReactDOMTreeTraversal.traverseEnterLeave(
      leave, enter, argAggregator, ARG, ARG2);

      expect(aggregatedArgs).toEqual(expectedAggregation);});});



  describe('getFirstCommonAncestor', function () {
    it('should determine the first common ancestor correctly', function () {
      var parent = renderParentIntoDocument();
      var ancestors = [
      // Common ancestor with self is self.
      { one: parent.refs.P_P1_C1.refs.DIV_1, 
        two: parent.refs.P_P1_C1.refs.DIV_1, 
        com: parent.refs.P_P1_C1.refs.DIV_1 }, 

      // Common ancestor with self is self - even if topmost DOM.
      { one: parent.refs.P, two: parent.refs.P, com: parent.refs.P }, 
      // Siblings
      { 
        one: parent.refs.P_P1_C1.refs.DIV_1, 
        two: parent.refs.P_P1_C1.refs.DIV_2, 
        com: parent.refs.P_P1_C1.refs.DIV }, 

      // Common ancestor with parent is the parent.
      { 
        one: parent.refs.P_P1_C1.refs.DIV_1, 
        two: parent.refs.P_P1_C1.refs.DIV, 
        com: parent.refs.P_P1_C1.refs.DIV }, 

      // Common ancestor with grandparent is the grandparent.
      { 
        one: parent.refs.P_P1_C1.refs.DIV_1, 
        two: parent.refs.P_P1, 
        com: parent.refs.P_P1 }, 

      // Grandparent across subcomponent boundaries.
      { 
        one: parent.refs.P_P1_C1.refs.DIV_1, 
        two: parent.refs.P_P1_C2.refs.DIV_1, 
        com: parent.refs.P_P1 }, 

      // Something deep with something one-off.
      { 
        one: parent.refs.P_P1_C1.refs.DIV_1, 
        two: parent.refs.P_OneOff, 
        com: parent.refs.P }];


      var i;
      for (i = 0; i < ancestors.length; i++) {
        var plan = ancestors[i];
        var firstCommon = ReactDOMTreeTraversal.getLowestCommonAncestor(
        getInst(plan.one), 
        getInst(plan.two));

        expect(firstCommon).toBe(getInst(plan.com));}});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMTreeTraversal.js":69,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],80:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\__tests__\\ReactEventIndependence-test.js';

var React;
var ReactDOM;
var ReactTestUtils;

describe('ReactEventIndependence', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  it('does not crash with other react inside', function () {
    var clicks = 0;
    var div = ReactTestUtils.renderIntoDocument(
    React.createElement('div', { 
      onClick: function () {return clicks++;}, 
      dangerouslySetInnerHTML: { 
        __html: '<button data-reactid=".z">click me</div>' }, __source: { fileName: _jsxFileName, lineNumber: 30 } }));



    ReactTestUtils.SimulateNative.click(div.firstChild);
    expect(clicks).toBe(1);});


  it('does not crash with other react outside', function () {
    var clicks = 0;
    var outer = document.createElement('div');
    outer.setAttribute('data-reactid', '.z');
    var inner = ReactDOM.render(
    React.createElement('button', { onClick: function () {return clicks++;}, __source: { fileName: _jsxFileName, lineNumber: 46 } }, 'click me'), 
    outer);

    ReactTestUtils.SimulateNative.click(inner);
    expect(clicks).toBe(1);});


  it('does not when event fired on unmounted tree', function () {
    var clicks = 0;
    var container = document.createElement('div');
    var button = ReactDOM.render(
    React.createElement('button', { onClick: function () {return clicks++;}, __source: { fileName: _jsxFileName, lineNumber: 57 } }, 'click me'), 
    container);


    // Now we unmount the component, as if caused by a non-React event handler
    // for the same click we're about to simulate, like closing a layer:
    ReactDOM.unmountComponentAtNode(container);
    ReactTestUtils.SimulateNative.click(button);

    // Since the tree is unmounted, we don't dispatch the click event.
    expect(clicks).toBe(0);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],81:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\__tests__\\ReactEventListener-test.js';


var EVENT_TARGET_PARAM = 1;

describe('ReactEventListener', function () {
  var React;
  var ReactDOM;
  var ReactDOMComponentTree;
  var ReactEventListener;
  var ReactTestUtils;
  var handleTopLevel;

  beforeEach(function () {
    jest.resetModuleRegistry();
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
    ReactEventListener = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactEventListener.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

    handleTopLevel = jest.fn();
    ReactEventListener._handleTopLevel = handleTopLevel;});


  it('should dispatch events from outside React tree', function () {
    var otherNode = document.createElement('h1');
    var component = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 39 } }), document.createElement('div'));
    expect(handleTopLevel.mock.calls.length).toBe(0);
    ReactEventListener.dispatchEvent(
    'topMouseOut', 
    { 
      type: 'mouseout', 
      fromElement: otherNode, 
      target: otherNode, 
      srcElement: otherNode, 
      toElement: ReactDOM.findDOMNode(component), 
      relatedTarget: ReactDOM.findDOMNode(component), 
      view: window, 
      path: [otherNode, otherNode] });


    expect(handleTopLevel.mock.calls.length).toBe(1);});


  describe('Propagation', function () {
    it('should propagate events one level down', function () {
      var childContainer = document.createElement('div');
      var childControl = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 60 } }, 'Child');
      var parentContainer = document.createElement('div');
      var parentControl = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 62 } }, 'Parent');
      childControl = ReactDOM.render(childControl, childContainer);
      parentControl = 
      ReactDOM.render(parentControl, parentContainer);
      ReactDOM.findDOMNode(parentControl).appendChild(childContainer);

      var callback = ReactEventListener.dispatchEvent.bind(null, 'test');
      callback({ 
        target: ReactDOM.findDOMNode(childControl) });


      var calls = handleTopLevel.mock.calls;
      expect(calls.length).toBe(2);
      expect(calls[0][EVENT_TARGET_PARAM]).
      toBe(ReactDOMComponentTree.getInstanceFromNode(childControl));
      expect(calls[1][EVENT_TARGET_PARAM]).
      toBe(ReactDOMComponentTree.getInstanceFromNode(parentControl));});


    it('should propagate events two levels down', function () {
      var childContainer = document.createElement('div');
      var childControl = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 83 } }, 'Child');
      var parentContainer = document.createElement('div');
      var parentControl = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 85 } }, 'Parent');
      var grandParentContainer = document.createElement('div');
      var grandParentControl = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 87 } }, 'Parent');
      childControl = ReactDOM.render(childControl, childContainer);
      parentControl = 
      ReactDOM.render(parentControl, parentContainer);
      grandParentControl = 
      ReactDOM.render(grandParentControl, grandParentContainer);
      ReactDOM.findDOMNode(parentControl).appendChild(childContainer);
      ReactDOM.findDOMNode(grandParentControl).appendChild(parentContainer);

      var callback = ReactEventListener.dispatchEvent.bind(null, 'test');
      callback({ 
        target: ReactDOM.findDOMNode(childControl) });


      var calls = handleTopLevel.mock.calls;
      expect(calls.length).toBe(3);
      expect(calls[0][EVENT_TARGET_PARAM]).
      toBe(ReactDOMComponentTree.getInstanceFromNode(childControl));
      expect(calls[1][EVENT_TARGET_PARAM]).
      toBe(ReactDOMComponentTree.getInstanceFromNode(parentControl));
      expect(calls[2][EVENT_TARGET_PARAM]).
      toBe(ReactDOMComponentTree.getInstanceFromNode(grandParentControl));});


    it('should not get confused by disappearing elements', function () {
      var childContainer = document.createElement('div');
      var childControl = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 113 } }, 'Child');
      var parentContainer = document.createElement('div');
      var parentControl = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 115 } }, 'Parent');
      childControl = ReactDOM.render(childControl, childContainer);
      parentControl = 
      ReactDOM.render(parentControl, parentContainer);
      ReactDOM.findDOMNode(parentControl).appendChild(childContainer);

      // ReactBrowserEventEmitter.handleTopLevel might remove the
      // target from the DOM. Here, we have handleTopLevel remove the
      // node when the first event handlers are called; we'll still
      // expect to receive a second call for the parent control.
      var childNode = ReactDOM.findDOMNode(childControl);
      handleTopLevel.mockImplementation(
      function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
        if (topLevelTarget === childNode) {
          ReactDOM.unmountComponentAtNode(childContainer);}});




      var callback = ReactEventListener.dispatchEvent.bind(null, 'test');
      callback({ 
        target: childNode });


      var calls = handleTopLevel.mock.calls;
      expect(calls.length).toBe(2);
      expect(calls[0][EVENT_TARGET_PARAM]).
      toBe(ReactDOMComponentTree.getInstanceFromNode(childNode));
      expect(calls[1][EVENT_TARGET_PARAM]).
      toBe(ReactDOMComponentTree.getInstanceFromNode(parentControl));});


    it('should batch between handlers from different roots', function () {
      var childContainer = document.createElement('div');
      var parentContainer = document.createElement('div');
      var childControl = ReactDOM.render(
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 151 } }, 'Child'), 
      childContainer);

      var parentControl = ReactDOM.render(
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 155 } }, 'Parent'), 
      parentContainer);

      ReactDOM.findDOMNode(parentControl).appendChild(childContainer);

      // Suppose an event handler in each root enqueues an update to the
      // childControl element -- the two updates should get batched together.
      var childNode = ReactDOM.findDOMNode(childControl);
      handleTopLevel.mockImplementation(
      function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
        ReactDOM.render(
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 166 } }, topLevelTarget === childNode ? '1' : '2'), 
        childContainer);

        // Since we're batching, neither update should yet have gone through.
        expect(childNode.textContent).toBe('Child');});



      var callback = 
      ReactEventListener.dispatchEvent.bind(ReactEventListener, 'test');
      callback({ 
        target: childNode });


      var calls = handleTopLevel.mock.calls;
      expect(calls.length).toBe(2);
      expect(childNode.textContent).toBe('2');});});



  it('should not fire duplicate events for a React DOM tree', function () {
    var Wrapper = React.createClass({ displayName: 'Wrapper', 

      getInner: function () {
        return this.refs.inner;}, 


      render: function () {
        var inner = React.createElement('div', { ref: 'inner', __source: { fileName: _jsxFileName, lineNumber: 194 } }, 'Inner');
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 195 } }, React.createElement('div', { id: 'outer', __source: { fileName: _jsxFileName, lineNumber: 195 } }, inner));} });




    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 200 } }));

    var callback = ReactEventListener.dispatchEvent.bind(null, 'test');
    callback({ 
      target: ReactDOM.findDOMNode(instance.getInner()) });


    var calls = handleTopLevel.mock.calls;
    expect(calls.length).toBe(1);
    expect(calls[0][EVENT_TARGET_PARAM]).
    toBe(ReactDOMComponentTree.getInstanceFromNode(instance.getInner()));});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactEventListener.js":70,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],82:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\__tests__\\ReactMount-test.js';

var React;
var ReactDOM;
var ReactDOMServer;
var ReactMount;
var ReactTestUtils;
var WebComponents;

describe('ReactMount', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');
    ReactMount = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactMount.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

    try {
      if (WebComponents === undefined && typeof jest !== 'undefined') {
        WebComponents = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\vendor\\third_party\\webcomponents.js');}} 

    catch (e) {
      // Parse error expected on engines that don't support setters
      // or otherwise aren't supportable by the polyfill.
      // Leave WebComponents undefined.
    }});


  describe('unmountComponentAtNode', function () {
    it('throws when given a non-node', function () {
      var nodeArray = document.getElementsByTagName('div');
      expect(function () {
        ReactDOM.unmountComponentAtNode(nodeArray);}).
      toThrowError(
      'unmountComponentAtNode(...): Target container is not a DOM element.');});});




  it('throws when given a string', function () {
    expect(function () {
      ReactTestUtils.renderIntoDocument('div');}).
    toThrowError(
    'ReactDOM.render(): Invalid component element. Instead of passing a ' + 
    'string like \'div\', pass React.createElement(\'div\') or <div />.');});



  it('throws when given a factory', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 65 } });} });


    expect(function () {
      ReactTestUtils.renderIntoDocument(Component);}).
    toThrowError(
    'ReactDOM.render(): Invalid component element. Instead of passing a ' + 
    'class like Foo, pass React.createElement(Foo) or <Foo />.');});



  it('should render different components in same root', function () {
    var container = document.createElement('container');
    document.body.appendChild(container);

    ReactMount.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 80 } }), container);
    expect(container.firstChild.nodeName).toBe('DIV');

    ReactMount.render(React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 83 } }), container);
    expect(container.firstChild.nodeName).toBe('SPAN');});


  it('should unmount and remount if the key changes', function () {
    var container = document.createElement('container');

    var mockMount = jest.fn();
    var mockUnmount = jest.fn();

    var Component = React.createClass({ displayName: 'Component', 
      componentDidMount: mockMount, 
      componentWillUnmount: mockUnmount, 
      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 97 } }, this.props.text);} });



    expect(mockMount.mock.calls.length).toBe(0);
    expect(mockUnmount.mock.calls.length).toBe(0);

    ReactMount.render(React.createElement(Component, { text: 'orange', key: 'A', __source: { fileName: _jsxFileName, lineNumber: 104 } }), container);
    expect(container.firstChild.innerHTML).toBe('orange');
    expect(mockMount.mock.calls.length).toBe(1);
    expect(mockUnmount.mock.calls.length).toBe(0);

    // If we change the key, the component is unmounted and remounted
    ReactMount.render(React.createElement(Component, { text: 'green', key: 'B', __source: { fileName: _jsxFileName, lineNumber: 110 } }), container);
    expect(container.firstChild.innerHTML).toBe('green');
    expect(mockMount.mock.calls.length).toBe(2);
    expect(mockUnmount.mock.calls.length).toBe(1);

    // But if we don't change the key, the component instance is reused
    ReactMount.render(React.createElement(Component, { text: 'blue', key: 'B', __source: { fileName: _jsxFileName, lineNumber: 116 } }), container);
    expect(container.firstChild.innerHTML).toBe('blue');
    expect(mockMount.mock.calls.length).toBe(2);
    expect(mockUnmount.mock.calls.length).toBe(1);});


  it('should reuse markup if rendering to the same target twice', function () {
    var container = document.createElement('container');
    var instance1 = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 124 } }), container);
    var instance2 = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 125 } }), container);

    expect(instance1 === instance2).toBe(true);});


  it('should warn if mounting into dirty rendered markup', function () {
    var container = document.createElement('container');
    container.innerHTML = ReactDOMServer.renderToString(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 132 } })) + ' ';

    spyOn(console, 'error');
    ReactMount.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 135 } }), container);
    expect(console.error.calls.count()).toBe(1);

    container.innerHTML = ' ' + ReactDOMServer.renderToString(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 138 } }));

    ReactMount.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 140 } }), container);
    expect(console.error.calls.count()).toBe(2);});


  it('should not warn if mounting into non-empty node', function () {
    var container = document.createElement('container');
    container.innerHTML = '<div></div>';

    spyOn(console, 'error');
    ReactMount.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 149 } }), container);
    expect(console.error.calls.count()).toBe(0);});


  it('should warn when mounting into document.body', function () {
    var iFrame = document.createElement('iframe');
    document.body.appendChild(iFrame);
    spyOn(console, 'error');

    ReactMount.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 158 } }), iFrame.contentDocument.body);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Rendering components directly into document.body is discouraged');});



  it('should account for escaping on a checksum mismatch', function () {
    var div = document.createElement('div');
    var markup = ReactDOMServer.renderToString(
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 169 } }, 'This markup contains an nbsp entity:   server text'));
    div.innerHTML = markup;

    spyOn(console, 'error');
    ReactDOM.render(
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 174 } }, 'This markup contains an nbsp entity:   client text'), 
    div);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    ' (client) nbsp entity: &nbsp; client text</div>\n' + 
    ' (server) nbsp entity: &nbsp; server text</div>');});



  if (WebComponents !== undefined) {
    it('should allow mounting/unmounting to document fragment container', function () {
      var shadowRoot;
      var proto = Object.create(HTMLElement.prototype, { 
        createdCallback: { 
          value: function () {
            shadowRoot = this.createShadowRoot();
            ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 191 } }, 'Hi, from within a WC!'), shadowRoot);
            expect(shadowRoot.firstChild.tagName).toBe('DIV');
            ReactDOM.render(React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 193 } }, 'Hi, from within a WC!'), shadowRoot);
            expect(shadowRoot.firstChild.tagName).toBe('SPAN');} } });



      proto.unmount = function () {
        ReactDOM.unmountComponentAtNode(shadowRoot);};

      document.registerElement('x-foo', { prototype: proto });
      var element = document.createElement('x-foo');
      element.unmount();});}



  it('should warn if render removes React-rendered children', function () {
    var container = document.createElement('container');
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 211 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 211 } }));} });


    ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 214 } }), container);

    // Test that blasting away children throws a warning
    spyOn(console, 'error');
    var rootNode = container.firstChild;
    ReactDOM.render(React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 219 } }), rootNode);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: render(...): Replacing React-rendered children with a new ' + 
    'root component. If you intended to update the children of this node, ' + 
    'you should instead have the existing children update their state and ' + 
    'render the new components instead of calling ReactDOM.render.');});



  it('passes the correct callback context', function () {
    var container = document.createElement('div');
    var calls = 0;

    ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 233 } }), container, function () {
      expect(this.nodeName).toBe('DIV');
      calls++;});


    // Update, no type change
    ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 239 } }), container, function () {
      expect(this.nodeName).toBe('DIV');
      calls++;});


    // Update, type change
    ReactDOM.render(React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 245 } }), container, function () {
      expect(this.nodeName).toBe('SPAN');
      calls++;});


    // Batched update, no type change
    ReactDOM.unstable_batchedUpdates(function () {
      ReactDOM.render(React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 252 } }), container, function () {
        expect(this.nodeName).toBe('SPAN');
        calls++;});});



    // Batched update, type change
    ReactDOM.unstable_batchedUpdates(function () {
      ReactDOM.render(React.createElement('article', { __source: { fileName: _jsxFileName, lineNumber: 260 } }), container, function () {
        expect(this.nodeName).toBe('ARTICLE');
        calls++;});});



    expect(calls).toBe(5);});


  it('tracks root instances', function () {
    // Used by devtools.
    expect(Object.keys(ReactMount._instancesByReactRootID).length).toBe(0);
    ReactTestUtils.renderIntoDocument(React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 272 } }));
    expect(Object.keys(ReactMount._instancesByReactRootID).length).toBe(1);
    var container = document.createElement('div');
    ReactDOM.render(React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 275 } }), container);
    expect(Object.keys(ReactMount._instancesByReactRootID).length).toBe(2);
    ReactDOM.unmountComponentAtNode(container);
    expect(Object.keys(ReactMount._instancesByReactRootID).length).toBe(1);});


  it('marks top-level mounts', function () {
    var ReactFeatureFlags = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactFeatureFlags.js');

    var Foo = React.createClass({ displayName: 'Foo', 
      render: function () {
        return React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 286 } });} });



    var Bar = React.createClass({ displayName: 'Bar', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 292 } });} });



    try {
      ReactFeatureFlags.logTopLevelRenders = true;
      spyOn(console, 'time');
      spyOn(console, 'timeEnd');

      ReactTestUtils.renderIntoDocument(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 301 } }));

      expect(console.time.calls.count()).toBe(1);
      expect(console.time.calls.argsFor(0)[0]).toBe('React mount: Foo');
      expect(console.timeEnd.calls.count()).toBe(1);
      expect(console.timeEnd.calls.argsFor(0)[0]).toBe('React mount: Foo');} finally 
    {
      ReactFeatureFlags.logTopLevelRenders = false;}});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactMount.js":72,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactFeatureFlags.js":279,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\vendor\\third_party\\webcomponents.js":299,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],83:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\__tests__\\ReactMountDestruction-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');

describe('ReactMount', function () {
  it('should destroy a react root upon request', function () {
    var mainContainerDiv = document.createElement('div');
    document.body.appendChild(mainContainerDiv);

    var instanceOne = React.createElement('div', { className: 'firstReactDiv', __source: { fileName: _jsxFileName, lineNumber: 22 } });
    var firstRootDiv = document.createElement('div');
    mainContainerDiv.appendChild(firstRootDiv);
    ReactDOM.render(instanceOne, firstRootDiv);

    var instanceTwo = React.createElement('div', { className: 'secondReactDiv', __source: { fileName: _jsxFileName, lineNumber: 27 } });
    var secondRootDiv = document.createElement('div');
    mainContainerDiv.appendChild(secondRootDiv);
    ReactDOM.render(instanceTwo, secondRootDiv);

    // Test that two react roots are rendered in isolation
    expect(firstRootDiv.firstChild.className).toBe('firstReactDiv');
    expect(secondRootDiv.firstChild.className).toBe('secondReactDiv');

    // Test that after unmounting each, they are no longer in the document.
    ReactDOM.unmountComponentAtNode(firstRootDiv);
    expect(firstRootDiv.firstChild).toBeNull();
    ReactDOM.unmountComponentAtNode(secondRootDiv);
    expect(secondRootDiv.firstChild).toBeNull();});


  it('should warn when unmounting a non-container root node', function () {
    var mainContainerDiv = document.createElement('div');

    var component = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 47 } }, 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 48 } }));

    ReactDOM.render(component, mainContainerDiv);

    // Test that unmounting at a root node gives a helpful warning
    var rootDiv = mainContainerDiv.firstChild;
    spyOn(console, 'error');
    ReactDOM.unmountComponentAtNode(rootDiv);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: unmountComponentAtNode(): The node you\'re attempting to ' + 
    'unmount was rendered by React and is not a top-level container. You ' + 
    'may have accidentally passed in a React root node instead of its ' + 
    'container.');});



  it('should warn when unmounting a non-container, non-root node', function () {
    var mainContainerDiv = document.createElement('div');

    var component = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 69 } }, 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 70 } }, 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 71 } })));


    ReactDOM.render(component, mainContainerDiv);

    // Test that unmounting at a non-root node gives a different warning
    var nonRootDiv = mainContainerDiv.firstChild.firstChild;
    spyOn(console, 'error');
    ReactDOM.unmountComponentAtNode(nonRootDiv);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: unmountComponentAtNode(): The node you\'re attempting to ' + 
    'unmount was rendered by React and is not a top-level container. ' + 
    'Instead, have the parent component update its state and rerender in ' + 
    'order to remove this component.');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62}],84:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\__tests__\\ReactRenderDocument-test.js';

var React;
var ReactDOM;
var ReactDOMServer;

var getTestDocument;

var testDocument;

var UNMOUNT_INVARIANT_MESSAGE = 
'<html> tried to unmount. ' + 
'Because of cross-browser quirks it is impossible to unmount some ' + 
'top-level components (eg <html>, <head>, and <body>) reliably and ' + 
'efficiently. To fix this, have a single top-level component that ' + 
'never unmounts render these elements.';

describe('rendering React components at document', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');
    getTestDocument = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\getTestDocument.js');

    testDocument = getTestDocument();});


  it('should be able to adopt server markup', function () {
    expect(testDocument).not.toBeUndefined();

    var Root = React.createClass({ displayName: 'Root', 
      render: function () {
        return (
          React.createElement('html', { __source: { fileName: _jsxFileName, lineNumber: 47 } }, 
          React.createElement('head', { __source: { fileName: _jsxFileName, lineNumber: 48 } }, 
          React.createElement('title', { __source: { fileName: _jsxFileName, lineNumber: 49 } }, 'Hello World')), 

          React.createElement('body', { __source: { fileName: _jsxFileName, lineNumber: 51 } }, 
          'Hello ' + this.props.hello)));} });






    var markup = ReactDOMServer.renderToString(React.createElement(Root, { hello: 'world', __source: { fileName: _jsxFileName, lineNumber: 59 } }));
    testDocument = getTestDocument(markup);
    var body = testDocument.body;

    ReactDOM.render(React.createElement(Root, { hello: 'world', __source: { fileName: _jsxFileName, lineNumber: 63 } }), testDocument);
    expect(testDocument.body.innerHTML).toBe('Hello world');

    ReactDOM.render(React.createElement(Root, { hello: 'moon', __source: { fileName: _jsxFileName, lineNumber: 66 } }), testDocument);
    expect(testDocument.body.innerHTML).toBe('Hello moon');

    expect(body).toBe(testDocument.body);});


  it('should not be able to unmount component from document node', function () {
    expect(testDocument).not.toBeUndefined();

    var Root = React.createClass({ displayName: 'Root', 
      render: function () {
        return (
          React.createElement('html', { __source: { fileName: _jsxFileName, lineNumber: 78 } }, 
          React.createElement('head', { __source: { fileName: _jsxFileName, lineNumber: 79 } }, 
          React.createElement('title', { __source: { fileName: _jsxFileName, lineNumber: 80 } }, 'Hello World')), 

          React.createElement('body', { __source: { fileName: _jsxFileName, lineNumber: 82 } }, 'Hello world')));} });







    var markup = ReactDOMServer.renderToString(React.createElement(Root, { __source: { fileName: _jsxFileName, lineNumber: 90 } }));
    testDocument = getTestDocument(markup);
    ReactDOM.render(React.createElement(Root, { __source: { fileName: _jsxFileName, lineNumber: 92 } }), testDocument);
    expect(testDocument.body.innerHTML).toBe('Hello world');

    expect(function () {
      ReactDOM.unmountComponentAtNode(testDocument);}).
    toThrowError(UNMOUNT_INVARIANT_MESSAGE);

    expect(testDocument.body.innerHTML).toBe('Hello world');});


  it('should not be able to switch root constructors', function () {
    expect(testDocument).not.toBeUndefined();

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return (
          React.createElement('html', { __source: { fileName: _jsxFileName, lineNumber: 108 } }, 
          React.createElement('head', { __source: { fileName: _jsxFileName, lineNumber: 109 } }, 
          React.createElement('title', { __source: { fileName: _jsxFileName, lineNumber: 110 } }, 'Hello World')), 

          React.createElement('body', { __source: { fileName: _jsxFileName, lineNumber: 112 } }, 'Hello world')));} });







    var Component2 = React.createClass({ displayName: 'Component2', 
      render: function () {
        return (
          React.createElement('html', { __source: { fileName: _jsxFileName, lineNumber: 123 } }, 
          React.createElement('head', { __source: { fileName: _jsxFileName, lineNumber: 124 } }, 
          React.createElement('title', { __source: { fileName: _jsxFileName, lineNumber: 125 } }, 'Hello World')), 

          React.createElement('body', { __source: { fileName: _jsxFileName, lineNumber: 127 } }, 'Goodbye world')));} });







    var markup = ReactDOMServer.renderToString(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 135 } }));
    testDocument = getTestDocument(markup);

    ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 138 } }), testDocument);

    expect(testDocument.body.innerHTML).toBe('Hello world');

    // Reactive update
    expect(function () {
      ReactDOM.render(React.createElement(Component2, { __source: { fileName: _jsxFileName, lineNumber: 144 } }), testDocument);}).
    toThrowError(UNMOUNT_INVARIANT_MESSAGE);

    expect(testDocument.body.innerHTML).toBe('Hello world');});


  it('should be able to mount into document', function () {
    expect(testDocument).not.toBeUndefined();

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return (
          React.createElement('html', { __source: { fileName: _jsxFileName, lineNumber: 156 } }, 
          React.createElement('head', { __source: { fileName: _jsxFileName, lineNumber: 157 } }, 
          React.createElement('title', { __source: { fileName: _jsxFileName, lineNumber: 158 } }, 'Hello World')), 

          React.createElement('body', { __source: { fileName: _jsxFileName, lineNumber: 160 } }, 
          this.props.text)));} });






    var markup = ReactDOMServer.renderToString(
    React.createElement(Component, { text: 'Hello world', __source: { fileName: _jsxFileName, lineNumber: 169 } }));

    testDocument = getTestDocument(markup);

    ReactDOM.render(React.createElement(Component, { text: 'Hello world', __source: { fileName: _jsxFileName, lineNumber: 173 } }), testDocument);

    expect(testDocument.body.innerHTML).toBe('Hello world');});


  it('should give helpful errors on state desync', function () {
    expect(testDocument).not.toBeUndefined();

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return (
          React.createElement('html', { __source: { fileName: _jsxFileName, lineNumber: 184 } }, 
          React.createElement('head', { __source: { fileName: _jsxFileName, lineNumber: 185 } }, 
          React.createElement('title', { __source: { fileName: _jsxFileName, lineNumber: 186 } }, 'Hello World')), 

          React.createElement('body', { __source: { fileName: _jsxFileName, lineNumber: 188 } }, 
          this.props.text)));} });






    var markup = ReactDOMServer.renderToString(
    React.createElement(Component, { text: 'Goodbye world', __source: { fileName: _jsxFileName, lineNumber: 197 } }));

    testDocument = getTestDocument(markup);

    expect(function () {
      // Notice the text is different!
      ReactDOM.render(React.createElement(Component, { text: 'Hello world', __source: { fileName: _jsxFileName, lineNumber: 203 } }), testDocument);}).
    toThrowError(
    'You\'re trying to render a component to the document using ' + 
    'server rendering but the checksum was invalid. This usually ' + 
    'means you rendered a different component type or props on ' + 
    'the client from the one on the server, or your render() methods ' + 
    'are impure. React cannot handle this case due to cross-browser ' + 
    'quirks by rendering at the document root. You should look for ' + 
    'environment dependent code in your components and ensure ' + 
    'the props are the same client and server side:\n' + 
    ' (client) dy data-reactid="4">Hello world</body></\n' + 
    ' (server) dy data-reactid="4">Goodbye world</body>');});



  it('should throw on full document render w/ no markup', function () {
    expect(testDocument).not.toBeUndefined();

    var container = testDocument;

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return (
          React.createElement('html', { __source: { fileName: _jsxFileName, lineNumber: 226 } }, 
          React.createElement('head', { __source: { fileName: _jsxFileName, lineNumber: 227 } }, 
          React.createElement('title', { __source: { fileName: _jsxFileName, lineNumber: 228 } }, 'Hello World')), 

          React.createElement('body', { __source: { fileName: _jsxFileName, lineNumber: 230 } }, 
          this.props.text)));} });






    expect(function () {
      ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 239 } }), container);}).
    toThrowError(
    'You\'re trying to render a component to the document but you didn\'t ' + 
    'use server rendering. We can\'t do this without using server ' + 
    'rendering due to cross-browser quirks. See ' + 
    'ReactDOMServer.renderToString() for server rendering.');});



  it('supports findDOMNode on full-page components', function () {
    var tree = 
    React.createElement('html', { __source: { fileName: _jsxFileName, lineNumber: 250 } }, 
    React.createElement('head', { __source: { fileName: _jsxFileName, lineNumber: 251 } }, 
    React.createElement('title', { __source: { fileName: _jsxFileName, lineNumber: 252 } }, 'Hello World')), 

    React.createElement('body', { __source: { fileName: _jsxFileName, lineNumber: 254 } }, 'Hello world'));




    var markup = ReactDOMServer.renderToString(tree);
    testDocument = getTestDocument(markup);
    var component = ReactDOM.render(tree, testDocument);
    expect(testDocument.body.innerHTML).toBe('Hello world');
    expect(ReactDOM.findDOMNode(component).tagName).toBe('HTML');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\getTestDocument.js":305}],85:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\__tests__\\findDOMNode-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

describe('findDOMNode', function () {
  it('findDOMNode should return null if passed null', function () {
    expect(ReactDOM.findDOMNode(null)).toBe(null);});


  it('findDOMNode should find dom element', function () {
    var MyNode = React.createClass({ displayName: 'MyNode', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 26 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 26 } }, 'Noise'));} });



    var myNode = ReactTestUtils.renderIntoDocument(React.createElement(MyNode, { __source: { fileName: _jsxFileName, lineNumber: 30 } }));
    var myDiv = ReactDOM.findDOMNode(myNode);
    var mySameDiv = ReactDOM.findDOMNode(myDiv);
    expect(myDiv.tagName).toBe('DIV');
    expect(mySameDiv).toBe(myDiv);});


  it('findDOMNode should reject random objects', function () {
    expect(function () {
      ReactDOM.findDOMNode({ foo: 'bar' });}).
    toThrowError(
    'Element appears to be neither ReactComponent nor DOMNode (keys: foo)');});



  it('findDOMNode should reject unmounted objects with render func', function () {
    var Foo = React.createClass({ displayName: 'Foo', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 48 } });} });



    var container = document.createElement('div');
    var inst = ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 53 } }), container);
    ReactDOM.unmountComponentAtNode(container);

    expect(function () {return ReactDOM.findDOMNode(inst);}).toThrowError(
    'findDOMNode was called on an unmounted component.');});



  it('findDOMNode should not throw an error when called within a component that is not mounted', function () {
    var Bar = React.createClass({ displayName: 'Bar', 
      componentWillMount: function () {
        expect(ReactDOM.findDOMNode(this)).toBeNull();}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 67 } });} });



    expect(function () {return ReactTestUtils.renderIntoDocument(React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 71 } }));}).not.toThrow();});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],86:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */
'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\__tests__\\inputValueTracking-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
var inputValueTracking = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\inputValueTracking.js');

describe('inputValueTracking', function () {
  var input, checkbox, mockComponent;

  beforeEach(function () {
    input = document.createElement('input');
    input.type = 'text';
    checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    mockComponent = { _hostNode: input, _wrapperState: {} };});


  it('should attach tracker to wrapper state', function () {
    inputValueTracking.track(mockComponent);

    expect(
    mockComponent._wrapperState.hasOwnProperty('valueTracker')).
    toBe(true);});


  it('should define `value` on the instance node', function () {
    inputValueTracking.track(mockComponent);

    expect(
    input.hasOwnProperty('value')).
    toBe(true);});


  it('should define `checked` on the instance node', function () {
    mockComponent._hostNode = checkbox;
    inputValueTracking.track(mockComponent);

    expect(checkbox.hasOwnProperty('checked')).toBe(true);});


  it('should initialize with the current value', function () {
    input.value = 'foo';

    inputValueTracking.track(mockComponent);

    var tracker = mockComponent._wrapperState.valueTracker;

    expect(tracker.getValue()).toEqual('foo');});


  it('should initialize with the current `checked`', function () {
    mockComponent._hostNode = checkbox;
    checkbox.checked = true;
    inputValueTracking.track(mockComponent);

    var tracker = mockComponent._wrapperState.valueTracker;

    expect(tracker.getValue()).toEqual('true');});


  it('should track value changes', function () {
    input.value = 'foo';

    inputValueTracking.track(mockComponent);

    var tracker = mockComponent._wrapperState.valueTracker;

    input.value = 'bar';
    expect(tracker.getValue()).toEqual('bar');});


  it('should tracked`checked` changes', function () {
    mockComponent._hostNode = checkbox;
    checkbox.checked = true;
    inputValueTracking.track(mockComponent);

    var tracker = mockComponent._wrapperState.valueTracker;

    checkbox.checked = false;
    expect(tracker.getValue()).toEqual('false');});


  it('should update value manually', function () {
    input.value = 'foo';
    inputValueTracking.track(mockComponent);

    var tracker = mockComponent._wrapperState.valueTracker;

    tracker.setValue('bar');
    expect(tracker.getValue()).toEqual('bar');});


  it('should coerce value to a string', function () {
    input.value = 'foo';
    inputValueTracking.track(mockComponent);

    var tracker = mockComponent._wrapperState.valueTracker;

    tracker.setValue(500);
    expect(tracker.getValue()).toEqual('500');});


  it('should update value if it changed and return result', function () {
    inputValueTracking.track(mockComponent);
    input.value = 'foo';

    var tracker = mockComponent._wrapperState.valueTracker;

    expect(
    inputValueTracking.updateValueIfChanged(mockComponent)).
    toBe(false);

    tracker.setValue('bar');

    expect(
    inputValueTracking.updateValueIfChanged(mockComponent)).
    toBe(true);

    expect(tracker.getValue()).toEqual('foo');});


  it('should track value and return true when updating untracked instance', function () {
    input.value = 'foo';

    expect(
    inputValueTracking.updateValueIfChanged(mockComponent)).

    toBe(true);

    var tracker = mockComponent._wrapperState.valueTracker;
    expect(tracker.getValue()).toEqual('foo');});


  it('should return tracker from node', function () {
    var node = ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'text', defaultValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 145 } }));
    var tracker = inputValueTracking._getTrackerFromNode(node);
    expect(tracker.getValue()).toEqual('foo');});


  it('should stop tracking', function () {
    inputValueTracking.track(mockComponent);

    expect(
    mockComponent._wrapperState.hasOwnProperty('valueTracker')).
    toBe(true);

    inputValueTracking.stopTracking(mockComponent);

    expect(
    mockComponent._wrapperState.hasOwnProperty('valueTracker')).
    toBe(false);

    expect(input.hasOwnProperty('value')).toBe(false);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\inputValueTracking.js":101,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],87:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var validateDOMNesting;

// https://html.spec.whatwg.org/multipage/syntax.html#special
var specialTags = [
'address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 
'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 
'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 
'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 
'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 
'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 
'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 
'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 
'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 
'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];


// https://html.spec.whatwg.org/multipage/syntax.html#formatting
var formattingTags = [
'a', 'b', 'big', 'code', 'em', 'font', 'i', 'nobr', 's', 'small', 'strike', 
'strong', 'tt', 'u'];


function isTagStackValid(stack) {
  var ancestorInfo = null;
  for (var i = 0; i < stack.length; i++) {
    if (!validateDOMNesting.isTagValidInContext(stack[i], ancestorInfo)) {
      return false;}

    ancestorInfo = 
    validateDOMNesting.updatedAncestorInfo(ancestorInfo, stack[i], null);}

  return true;}


describe('ReactContextValidator', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();

    validateDOMNesting = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\validateDOMNesting.js');});


  it('allows any tag with no context', function () {
    // With renderToString (for example), we don't know where we're mounting the
    // tag so we must err on the side of leniency.
    var allTags = [].concat(specialTags, formattingTags, ['mysterytag']);
    allTags.forEach(function (tag) {
      expect(validateDOMNesting.isTagValidInContext(tag, null)).toBe(true);});});



  it('allows valid nestings', function () {
    expect(isTagStackValid(['table', 'tbody', 'tr', 'td', 'b'])).toBe(true);
    expect(isTagStackValid(['body', 'datalist', 'option'])).toBe(true);
    expect(isTagStackValid(['div', 'a', 'object', 'a'])).toBe(true);
    expect(isTagStackValid(['div', 'p', 'button', 'p'])).toBe(true);
    expect(isTagStackValid(['p', 'svg', 'foreignObject', 'p'])).toBe(true);
    expect(isTagStackValid(['html', 'body', 'div'])).toBe(true);

    // Invalid, but not changed by browser parsing so we allow them
    expect(isTagStackValid(['div', 'ul', 'ul', 'li'])).toBe(true);
    expect(isTagStackValid(['div', 'label', 'div'])).toBe(true);
    expect(isTagStackValid(['div', 'ul', 'li', 'section', 'li'])).toBe(true);
    expect(isTagStackValid(['div', 'ul', 'li', 'dd', 'li'])).toBe(true);});


  it('prevents problematic nestings', function () {
    expect(isTagStackValid(['a', 'a'])).toBe(false);
    expect(isTagStackValid(['form', 'form'])).toBe(false);
    expect(isTagStackValid(['p', 'p'])).toBe(false);
    expect(isTagStackValid(['table', 'tr'])).toBe(false);
    expect(isTagStackValid(['div', 'ul', 'li', 'div', 'li'])).toBe(false);
    expect(isTagStackValid(['div', 'html'])).toBe(false);
    expect(isTagStackValid(['body', 'body'])).toBe(false);
    expect(isTagStackValid(['svg', 'foreignObject', 'body', 'p'])).toBe(false);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\validateDOMNesting.js":136}],88:[function(require,module,exports){
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 */

'use strict';

var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var EventPropagators = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\FallbackCompositionState.js');
var SyntheticCompositionEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticCompositionEvent.js');
var SyntheticInputEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticInputEvent.js');

var keyOf = require('fbjs/lib/keyOf');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = 
ExecutionEnvironment.canUseDOM && 
'CompositionEvent' in window;


var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;}


// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = 
ExecutionEnvironment.canUseDOM && 
'TextEvent' in window && 
!documentMode && 
!isPresto();


// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = 
ExecutionEnvironment.canUseDOM && (

!canUseCompositionEvent || 
documentMode && documentMode > 8 && documentMode <= 11);



/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' && 
    typeof opera.version === 'function' && 
    parseInt(opera.version(), 10) <= 12);}



var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = { 
  beforeInput: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onBeforeInput: null }), 
      captured: keyOf({ onBeforeInputCapture: null }) }, 

    dependencies: [
    topLevelTypes.topCompositionEnd, 
    topLevelTypes.topKeyPress, 
    topLevelTypes.topTextInput, 
    topLevelTypes.topPaste] }, 


  compositionEnd: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onCompositionEnd: null }), 
      captured: keyOf({ onCompositionEndCapture: null }) }, 

    dependencies: [
    topLevelTypes.topBlur, 
    topLevelTypes.topCompositionEnd, 
    topLevelTypes.topKeyDown, 
    topLevelTypes.topKeyPress, 
    topLevelTypes.topKeyUp, 
    topLevelTypes.topMouseDown] }, 


  compositionStart: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onCompositionStart: null }), 
      captured: keyOf({ onCompositionStartCapture: null }) }, 

    dependencies: [
    topLevelTypes.topBlur, 
    topLevelTypes.topCompositionStart, 
    topLevelTypes.topKeyDown, 
    topLevelTypes.topKeyPress, 
    topLevelTypes.topKeyUp, 
    topLevelTypes.topMouseDown] }, 


  compositionUpdate: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onCompositionUpdate: null }), 
      captured: keyOf({ onCompositionUpdateCapture: null }) }, 

    dependencies: [
    topLevelTypes.topBlur, 
    topLevelTypes.topCompositionUpdate, 
    topLevelTypes.topKeyDown, 
    topLevelTypes.topKeyPress, 
    topLevelTypes.topKeyUp, 
    topLevelTypes.topMouseDown] } };




// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && 
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey));}




/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;}}



/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown && 
    nativeEvent.keyCode === START_KEYCODE);}



/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;}}



/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;}

  return null;}


// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(
topLevelType, 
targetInst, 
nativeEvent, 
nativeEventTarget) 
{
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);} else 
  if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;}} else 

  if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;}


  if (!eventType) {
    return null;}


  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = 
      FallbackCompositionState.getPooled(nativeEventTarget);} else 
    if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();}}}




  var event = SyntheticCompositionEvent.getPooled(
  eventType, 
  targetInst, 
  nativeEvent, 
  nativeEventTarget);


  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;} else 
  {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;}}



  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;}


/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;}


      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;}


      return chars;

    default:
      // For other native event types, do nothing.
      return null;}}



/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (
    topLevelType === topLevelTypes.topCompositionEnd || 
    isFallbackCompositionEnd(topLevelType, nativeEvent)) 
    {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;}

    return null;}


  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);}

      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;}}



/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(
topLevelType, 
targetInst, 
nativeEvent, 
nativeEventTarget) 
{
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);} else 
  {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);}


  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;}


  var event = SyntheticInputEvent.getPooled(
  eventTypes.beforeInput, 
  targetInst, 
  nativeEvent, 
  nativeEventTarget);


  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;}


/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = { 

  eventTypes: eventTypes, 

  extractEvents: function (
  topLevelType, 
  targetInst, 
  nativeEvent, 
  nativeEventTarget) 
  {
    return [
    extractCompositionEvent(
    topLevelType, 
    targetInst, 
    nativeEvent, 
    nativeEventTarget), 

    extractBeforeInputEvent(
    topLevelType, 
    targetInst, 
    nativeEvent, 
    nativeEventTarget)];} };





module.exports = BeforeInputEventPlugin;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\FallbackCompositionState.js":92,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticCompositionEvent.js":104,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticInputEvent.js":108,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js":230,"fbjs/lib/ExecutionEnvironment":399,"fbjs/lib/keyOf":418}],89:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
var EventPropagators = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');
var SyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js');

var inputValueTracking = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\inputValueTracking.js');
var getEventTarget = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js');
var isEventSupported = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\isEventSupported.js');
var isTextInputElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\isTextInputElement.js');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;


var eventTypes = { 
  change: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onChange: null }), 
      captured: keyOf({ onChangeCapture: null }) }, 

    dependencies: [
    topLevelTypes.topBlur, 
    topLevelTypes.topChange, 
    topLevelTypes.topClick, 
    topLevelTypes.topFocus, 
    topLevelTypes.topInput, 
    topLevelTypes.topKeyDown, 
    topLevelTypes.topKeyUp, 
    topLevelTypes.topSelectionChange] } };




function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(
  eventTypes.change, 
  inst, 
  nativeEvent, 
  target);

  event.type = 'change';
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;}

/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;



/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return (
    nodeName === 'select' || 
    nodeName === 'input' && elem.type === 'file');}



var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
  !('documentMode' in document) || document.documentMode > 8);}



function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(
  activeElementInst, 
  nativeEvent, 
  getEventTarget(nativeEvent));


  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);}


function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);}


function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);}


function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;}

  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;}


function getInstIfValueChanged(targetInst) {
  if (inputValueTracking.updateValueIfChanged(targetInst)) {
    return targetInst;}}



function getTargetInstForChangeEvent(
topLevelType, 
targetInst) 
{
  if (topLevelType === topLevelTypes.topChange) {
    return targetInst;}}



function handleEventsForChangeEventIE8(
topLevelType, 
target, 
targetInst) 
{
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);} else 
  if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();}}




/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (
  !('documentMode' in document) || document.documentMode > 9);}




/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);}


/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;}

  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;}


/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;}

  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);}}



function handleEventsForInputEventPolyfill(
topLevelType, 
target, 
targetInst) 
{
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);} else 
  if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();}}



// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(
topLevelType, 
targetInst) 
{
  if (topLevelType === topLevelTypes.topSelectionChange || 
  topLevelType === topLevelTypes.topKeyUp || 
  topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);}}




/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return (
    nodeName && nodeName.toLowerCase() === 'input' && (
    elem.type === 'checkbox' || elem.type === 'radio'));}



function getTargetInstForClickEvent(
topLevelType, 
targetInst) 
{
  if (topLevelType === topLevelTypes.topClick) {
    return getInstIfValueChanged(targetInst);}}



function getTargetInstForInputOrChangeEvent(
topLevelType, 
targetInst) 
{
  if (
  topLevelType === topLevelTypes.topInput || 
  topLevelType === topLevelTypes.topChange) 
  {
    return getInstIfValueChanged(targetInst);}}



/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = { 

  eventTypes: eventTypes, 

  _isInputEventSupported: isInputEventSupported, 

  extractEvents: function (
  topLevelType, 
  targetInst, 
  nativeEvent, 
  nativeEventTarget) 
  {
    var targetNode = targetInst ? 
    ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;} else 
      {
        handleEventFunc = handleEventsForChangeEventIE8;}} else 

    if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;} else 
      {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;}} else 

    if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;}


    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = createAndAccumulateChangeEvent(
        inst, 
        nativeEvent, 
        nativeEventTarget);

        return event;}}



    if (handleEventFunc) {
      handleEventFunc(
      topLevelType, 
      targetNode, 
      targetInst);}} };






module.exports = ChangeEventPlugin;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\inputValueTracking.js":101,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js":106,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js":129,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\isEventSupported.js":133,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js":230,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\isTextInputElement.js":297,"fbjs/lib/ExecutionEnvironment":399,"fbjs/lib/keyOf":418}],90:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require('fbjs/lib/keyOf');

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
keyOf({ ResponderEventPlugin: null }), 
keyOf({ SimpleEventPlugin: null }), 
keyOf({ TapEventPlugin: null }), 
keyOf({ EnterLeaveEventPlugin: null }), 
keyOf({ ChangeEventPlugin: null }), 
keyOf({ SelectEventPlugin: null }), 
keyOf({ BeforeInputEventPlugin: null })];


module.exports = DefaultEventPluginOrder;
},{"fbjs/lib/keyOf":418}],91:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 */

'use strict';

var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var EventPropagators = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var SyntheticMouseEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticMouseEvent.js');

var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = { 
  mouseEnter: { 
    registrationName: keyOf({ onMouseEnter: null }), 
    dependencies: [
    topLevelTypes.topMouseOut, 
    topLevelTypes.topMouseOver] }, 


  mouseLeave: { 
    registrationName: keyOf({ onMouseLeave: null }), 
    dependencies: [
    topLevelTypes.topMouseOut, 
    topLevelTypes.topMouseOver] } };




var EnterLeaveEventPlugin = { 

  eventTypes: eventTypes, 

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (
  topLevelType, 
  targetInst, 
  nativeEvent, 
  nativeEventTarget) 
  {
    if (topLevelType === topLevelTypes.topMouseOver && (
    nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;}

    if (topLevelType !== topLevelTypes.topMouseOut && 
    topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;}


    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;} else 
    {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;} else 
      {
        win = window;}}



    var from;
    var to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? 
      ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;} else 
    {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;}


    if (from === to) {
      // Nothing pertains to our managed components.
      return null;}


    var fromNode = 
    from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = 
    to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(
    eventTypes.mouseLeave, 
    from, 
    nativeEvent, 
    nativeEventTarget);

    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(
    eventTypes.mouseEnter, 
    to, 
    nativeEvent, 
    nativeEventTarget);

    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];} };




module.exports = EnterLeaveEventPlugin;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticMouseEvent.js":110,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js":230,"fbjs/lib/keyOf":418}],92:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 */

'use strict';var _assign = require('object-assign');

var PooledClass = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js');

var getTextContentAccessor = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getTextContentAccessor.js');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;}


_assign(FallbackCompositionState.prototype, { 
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;}, 


  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;}

    return this._root[getTextContentAccessor()];}, 


  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;}


    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;}}



    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;}}



    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;} });



PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getTextContentAccessor.js":131,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js":277,"object-assign":425}],93:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var EventPropagators = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactInputSelection = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactInputSelection.js');
var SyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\isTextInputElement.js');
var keyOf = require('fbjs/lib/keyOf');
var shallowEqual = require('fbjs/lib/shallowEqual');

var topLevelTypes = EventConstants.topLevelTypes;

var skipSelectionChangeEvent = 
ExecutionEnvironment.canUseDOM && 
'documentMode' in document && 
document.documentMode <= 11;


var eventTypes = { 
  select: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onSelect: null }), 
      captured: keyOf({ onSelectCapture: null }) }, 

    dependencies: [
    topLevelTypes.topBlur, 
    topLevelTypes.topContextMenu, 
    topLevelTypes.topFocus, 
    topLevelTypes.topKeyDown, 
    topLevelTypes.topMouseDown, 
    topLevelTypes.topMouseUp, 
    topLevelTypes.topSelectionChange] } };




var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;
var ON_SELECT_KEY = keyOf({ onSelect: null });

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && 
  ReactInputSelection.hasSelectionCapabilities(node)) {
    return { 
      start: node.selectionStart, 
      end: node.selectionEnd };} else 

  if (window.getSelection) {
    var selection = window.getSelection();
    return { 
      anchorNode: selection.anchorNode, 
      anchorOffset: selection.anchorOffset, 
      focusNode: selection.focusNode, 
      focusOffset: selection.focusOffset };} else 

  if (document.selection) {
    var range = document.selection.createRange();
    return { 
      parentElement: range.parentElement(), 
      text: range.text, 
      top: range.boundingTop, 
      left: range.boundingLeft };}}




/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || 
  activeElement == null || 
  activeElement !== getActiveElement()) {
    return null;}


  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
    eventTypes.select, 
    activeElementInst, 
    nativeEvent, 
    nativeEventTarget);


    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;}


  return null;}


/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = { 

  eventTypes: eventTypes, 

  extractEvents: function (
  topLevelType, 
  targetInst, 
  nativeEvent, 
  nativeEventTarget) 
  {
    if (!hasListener) {
      return null;}


    var targetNode = targetInst ? 
    ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(targetNode) || 
        targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;}

        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case topLevelTypes.topSelectionChange:
        if (skipSelectionChangeEvent) {
          break;}

      // falls through
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent, nativeEventTarget);}


    return null;}, 


  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === ON_SELECT_KEY) {
      hasListener = true;}} };




module.exports = SelectEventPlugin;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactInputSelection.js":71,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js":106,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js":230,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\isTextInputElement.js":297,"fbjs/lib/ExecutionEnvironment":399,"fbjs/lib/getActiveElement":409,"fbjs/lib/keyOf":418,"fbjs/lib/shallowEqual":423}],94:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var SyntheticAnimationEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticAnimationEvent.js');
var SyntheticClipboardEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticClipboardEvent.js');
var SyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js');
var SyntheticFocusEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticFocusEvent.js');
var SyntheticKeyboardEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticKeyboardEvent.js');
var SyntheticMouseEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticMouseEvent.js');
var SyntheticDragEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticDragEvent.js');
var SyntheticTouchEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticTouchEvent.js');
var SyntheticTransitionEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticTransitionEvent.js');
var SyntheticUIEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticUIEvent.js');
var SyntheticWheelEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticWheelEvent.js');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventCharCode.js');
var invariant = require('fbjs/lib/invariant');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = { 
  abort: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onAbort: true }), 
      captured: keyOf({ onAbortCapture: true }) } }, 


  animationEnd: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onAnimationEnd: true }), 
      captured: keyOf({ onAnimationEndCapture: true }) } }, 


  animationIteration: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onAnimationIteration: true }), 
      captured: keyOf({ onAnimationIterationCapture: true }) } }, 


  animationStart: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onAnimationStart: true }), 
      captured: keyOf({ onAnimationStartCapture: true }) } }, 


  blur: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onBlur: true }), 
      captured: keyOf({ onBlurCapture: true }) } }, 


  canPlay: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onCanPlay: true }), 
      captured: keyOf({ onCanPlayCapture: true }) } }, 


  canPlayThrough: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onCanPlayThrough: true }), 
      captured: keyOf({ onCanPlayThroughCapture: true }) } }, 


  click: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onClick: true }), 
      captured: keyOf({ onClickCapture: true }) } }, 


  contextMenu: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onContextMenu: true }), 
      captured: keyOf({ onContextMenuCapture: true }) } }, 


  copy: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onCopy: true }), 
      captured: keyOf({ onCopyCapture: true }) } }, 


  cut: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onCut: true }), 
      captured: keyOf({ onCutCapture: true }) } }, 


  doubleClick: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onDoubleClick: true }), 
      captured: keyOf({ onDoubleClickCapture: true }) } }, 


  drag: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onDrag: true }), 
      captured: keyOf({ onDragCapture: true }) } }, 


  dragEnd: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onDragEnd: true }), 
      captured: keyOf({ onDragEndCapture: true }) } }, 


  dragEnter: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onDragEnter: true }), 
      captured: keyOf({ onDragEnterCapture: true }) } }, 


  dragExit: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onDragExit: true }), 
      captured: keyOf({ onDragExitCapture: true }) } }, 


  dragLeave: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onDragLeave: true }), 
      captured: keyOf({ onDragLeaveCapture: true }) } }, 


  dragOver: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onDragOver: true }), 
      captured: keyOf({ onDragOverCapture: true }) } }, 


  dragStart: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onDragStart: true }), 
      captured: keyOf({ onDragStartCapture: true }) } }, 


  drop: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onDrop: true }), 
      captured: keyOf({ onDropCapture: true }) } }, 


  durationChange: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onDurationChange: true }), 
      captured: keyOf({ onDurationChangeCapture: true }) } }, 


  emptied: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onEmptied: true }), 
      captured: keyOf({ onEmptiedCapture: true }) } }, 


  encrypted: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onEncrypted: true }), 
      captured: keyOf({ onEncryptedCapture: true }) } }, 


  ended: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onEnded: true }), 
      captured: keyOf({ onEndedCapture: true }) } }, 


  error: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onError: true }), 
      captured: keyOf({ onErrorCapture: true }) } }, 


  focus: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onFocus: true }), 
      captured: keyOf({ onFocusCapture: true }) } }, 


  input: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onInput: true }), 
      captured: keyOf({ onInputCapture: true }) } }, 


  invalid: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onInvalid: true }), 
      captured: keyOf({ onInvalidCapture: true }) } }, 


  keyDown: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onKeyDown: true }), 
      captured: keyOf({ onKeyDownCapture: true }) } }, 


  keyPress: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onKeyPress: true }), 
      captured: keyOf({ onKeyPressCapture: true }) } }, 


  keyUp: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onKeyUp: true }), 
      captured: keyOf({ onKeyUpCapture: true }) } }, 


  load: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onLoad: true }), 
      captured: keyOf({ onLoadCapture: true }) } }, 


  loadedData: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onLoadedData: true }), 
      captured: keyOf({ onLoadedDataCapture: true }) } }, 


  loadedMetadata: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onLoadedMetadata: true }), 
      captured: keyOf({ onLoadedMetadataCapture: true }) } }, 


  loadStart: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onLoadStart: true }), 
      captured: keyOf({ onLoadStartCapture: true }) } }, 


  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onMouseDown: true }), 
      captured: keyOf({ onMouseDownCapture: true }) } }, 


  mouseMove: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onMouseMove: true }), 
      captured: keyOf({ onMouseMoveCapture: true }) } }, 


  mouseOut: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onMouseOut: true }), 
      captured: keyOf({ onMouseOutCapture: true }) } }, 


  mouseOver: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onMouseOver: true }), 
      captured: keyOf({ onMouseOverCapture: true }) } }, 


  mouseUp: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onMouseUp: true }), 
      captured: keyOf({ onMouseUpCapture: true }) } }, 


  paste: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onPaste: true }), 
      captured: keyOf({ onPasteCapture: true }) } }, 


  pause: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onPause: true }), 
      captured: keyOf({ onPauseCapture: true }) } }, 


  play: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onPlay: true }), 
      captured: keyOf({ onPlayCapture: true }) } }, 


  playing: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onPlaying: true }), 
      captured: keyOf({ onPlayingCapture: true }) } }, 


  progress: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onProgress: true }), 
      captured: keyOf({ onProgressCapture: true }) } }, 


  rateChange: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onRateChange: true }), 
      captured: keyOf({ onRateChangeCapture: true }) } }, 


  reset: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onReset: true }), 
      captured: keyOf({ onResetCapture: true }) } }, 


  scroll: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onScroll: true }), 
      captured: keyOf({ onScrollCapture: true }) } }, 


  seeked: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onSeeked: true }), 
      captured: keyOf({ onSeekedCapture: true }) } }, 


  seeking: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onSeeking: true }), 
      captured: keyOf({ onSeekingCapture: true }) } }, 


  stalled: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onStalled: true }), 
      captured: keyOf({ onStalledCapture: true }) } }, 


  submit: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onSubmit: true }), 
      captured: keyOf({ onSubmitCapture: true }) } }, 


  suspend: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onSuspend: true }), 
      captured: keyOf({ onSuspendCapture: true }) } }, 


  timeUpdate: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onTimeUpdate: true }), 
      captured: keyOf({ onTimeUpdateCapture: true }) } }, 


  touchCancel: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onTouchCancel: true }), 
      captured: keyOf({ onTouchCancelCapture: true }) } }, 


  touchEnd: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onTouchEnd: true }), 
      captured: keyOf({ onTouchEndCapture: true }) } }, 


  touchMove: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onTouchMove: true }), 
      captured: keyOf({ onTouchMoveCapture: true }) } }, 


  touchStart: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onTouchStart: true }), 
      captured: keyOf({ onTouchStartCapture: true }) } }, 


  transitionEnd: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onTransitionEnd: true }), 
      captured: keyOf({ onTransitionEndCapture: true }) } }, 


  volumeChange: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onVolumeChange: true }), 
      captured: keyOf({ onVolumeChangeCapture: true }) } }, 


  waiting: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onWaiting: true }), 
      captured: keyOf({ onWaitingCapture: true }) } }, 


  wheel: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onWheel: true }), 
      captured: keyOf({ onWheelCapture: true }) } } };




var topLevelEventsToDispatchConfig = { 
  topAbort: eventTypes.abort, 
  topAnimationEnd: eventTypes.animationEnd, 
  topAnimationIteration: eventTypes.animationIteration, 
  topAnimationStart: eventTypes.animationStart, 
  topBlur: eventTypes.blur, 
  topCanPlay: eventTypes.canPlay, 
  topCanPlayThrough: eventTypes.canPlayThrough, 
  topClick: eventTypes.click, 
  topContextMenu: eventTypes.contextMenu, 
  topCopy: eventTypes.copy, 
  topCut: eventTypes.cut, 
  topDoubleClick: eventTypes.doubleClick, 
  topDrag: eventTypes.drag, 
  topDragEnd: eventTypes.dragEnd, 
  topDragEnter: eventTypes.dragEnter, 
  topDragExit: eventTypes.dragExit, 
  topDragLeave: eventTypes.dragLeave, 
  topDragOver: eventTypes.dragOver, 
  topDragStart: eventTypes.dragStart, 
  topDrop: eventTypes.drop, 
  topDurationChange: eventTypes.durationChange, 
  topEmptied: eventTypes.emptied, 
  topEncrypted: eventTypes.encrypted, 
  topEnded: eventTypes.ended, 
  topError: eventTypes.error, 
  topFocus: eventTypes.focus, 
  topInput: eventTypes.input, 
  topInvalid: eventTypes.invalid, 
  topKeyDown: eventTypes.keyDown, 
  topKeyPress: eventTypes.keyPress, 
  topKeyUp: eventTypes.keyUp, 
  topLoad: eventTypes.load, 
  topLoadedData: eventTypes.loadedData, 
  topLoadedMetadata: eventTypes.loadedMetadata, 
  topLoadStart: eventTypes.loadStart, 
  topMouseDown: eventTypes.mouseDown, 
  topMouseMove: eventTypes.mouseMove, 
  topMouseOut: eventTypes.mouseOut, 
  topMouseOver: eventTypes.mouseOver, 
  topMouseUp: eventTypes.mouseUp, 
  topPaste: eventTypes.paste, 
  topPause: eventTypes.pause, 
  topPlay: eventTypes.play, 
  topPlaying: eventTypes.playing, 
  topProgress: eventTypes.progress, 
  topRateChange: eventTypes.rateChange, 
  topReset: eventTypes.reset, 
  topScroll: eventTypes.scroll, 
  topSeeked: eventTypes.seeked, 
  topSeeking: eventTypes.seeking, 
  topStalled: eventTypes.stalled, 
  topSubmit: eventTypes.submit, 
  topSuspend: eventTypes.suspend, 
  topTimeUpdate: eventTypes.timeUpdate, 
  topTouchCancel: eventTypes.touchCancel, 
  topTouchEnd: eventTypes.touchEnd, 
  topTouchMove: eventTypes.touchMove, 
  topTouchStart: eventTypes.touchStart, 
  topTransitionEnd: eventTypes.transitionEnd, 
  topVolumeChange: eventTypes.volumeChange, 
  topWaiting: eventTypes.waiting, 
  topWheel: eventTypes.wheel };


for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];}


var ON_CLICK_KEY = keyOf({ onClick: null });
var onClickListeners = {};

var SimpleEventPlugin = { 

  eventTypes: eventTypes, 

  extractEvents: function (
  topLevelType, 
  targetInst, 
  nativeEvent, 
  nativeEventTarget) 
  {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;}

    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topAbort:
      case topLevelTypes.topCanPlay:
      case topLevelTypes.topCanPlayThrough:
      case topLevelTypes.topDurationChange:
      case topLevelTypes.topEmptied:
      case topLevelTypes.topEncrypted:
      case topLevelTypes.topEnded:
      case topLevelTypes.topError:
      case topLevelTypes.topInput:
      case topLevelTypes.topInvalid:
      case topLevelTypes.topLoad:
      case topLevelTypes.topLoadedData:
      case topLevelTypes.topLoadedMetadata:
      case topLevelTypes.topLoadStart:
      case topLevelTypes.topPause:
      case topLevelTypes.topPlay:
      case topLevelTypes.topPlaying:
      case topLevelTypes.topProgress:
      case topLevelTypes.topRateChange:
      case topLevelTypes.topReset:
      case topLevelTypes.topSeeked:
      case topLevelTypes.topSeeking:
      case topLevelTypes.topStalled:
      case topLevelTypes.topSubmit:
      case topLevelTypes.topSuspend:
      case topLevelTypes.topTimeUpdate:
      case topLevelTypes.topVolumeChange:
      case topLevelTypes.topWaiting:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;}

      /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;}

      /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topAnimationEnd:
      case topLevelTypes.topAnimationIteration:
      case topLevelTypes.topAnimationStart:
        EventConstructor = SyntheticAnimationEvent;
        break;
      case topLevelTypes.topTransitionEnd:
        EventConstructor = SyntheticTransitionEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;}

    invariant(
    EventConstructor, 
    'SimpleEventPlugin: Unhandled event type, `%s`.', 
    topLevelType);

    var event = EventConstructor.getPooled(
    dispatchConfig, 
    targetInst, 
    nativeEvent, 
    nativeEventTarget);

    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;}, 


  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    if (registrationName === ON_CLICK_KEY) {
      var id = inst._rootNodeID;
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[id]) {
        onClickListeners[id] = EventListener.listen(
        node, 
        'click', 
        emptyFunction);}}}, 





  willDeleteListener: function (inst, registrationName) {
    if (registrationName === ON_CLICK_KEY) {
      var id = inst._rootNodeID;
      onClickListeners[id].remove();
      delete onClickListeners[id];}} };





module.exports = SimpleEventPlugin;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticAnimationEvent.js":102,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticClipboardEvent.js":103,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticDragEvent.js":105,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js":106,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticFocusEvent.js":107,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticKeyboardEvent.js":109,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticMouseEvent.js":110,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticTouchEvent.js":111,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticTransitionEvent.js":112,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticUIEvent.js":113,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticWheelEvent.js":114,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventCharCode.js":126,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js":230,"fbjs/lib/EventListener":398,"fbjs/lib/emptyFunction":406,"fbjs/lib/invariant":414,"fbjs/lib/keyOf":418}],95:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule TapEventPlugin
 */

'use strict';

var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var EventPluginUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js');
var EventPropagators = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js');
var SyntheticUIEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticUIEvent.js');
var TouchEventUtils = require('fbjs/lib/TouchEventUtils');
var ViewportMetrics = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\ViewportMetrics.js');

var keyOf = require('fbjs/lib/keyOf');
var topLevelTypes = EventConstants.topLevelTypes;

var isStartish = EventPluginUtils.isStartish;
var isEndish = EventPluginUtils.isEndish;

/**
 * Number of pixels that are tolerated in between a `touchStart` and `touchEnd`
 * in order to still be considered a 'tap' event.
 */
var tapMoveThreshold = 10;
var startCoords = { x: null, y: null };

var Axis = { 
  x: { page: 'pageX', client: 'clientX', envScroll: 'currentPageScrollLeft' }, 
  y: { page: 'pageY', client: 'clientY', envScroll: 'currentPageScrollTop' } };


function getAxisCoordOfEvent(axis, nativeEvent) {
  var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);
  if (singleTouch) {
    return singleTouch[axis.page];}

  return axis.page in nativeEvent ? 
  nativeEvent[axis.page] : 
  nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];}


function getDistance(coords, nativeEvent) {
  var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);
  var pageY = getAxisCoordOfEvent(Axis.y, nativeEvent);
  return Math.pow(
  Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2), 
  0.5);}



var touchEvents = [
topLevelTypes.topTouchStart, 
topLevelTypes.topTouchCancel, 
topLevelTypes.topTouchEnd, 
topLevelTypes.topTouchMove];


var dependencies = [
topLevelTypes.topMouseDown, 
topLevelTypes.topMouseMove, 
topLevelTypes.topMouseUp].
concat(touchEvents);

var eventTypes = { 
  touchTap: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onTouchTap: null }), 
      captured: keyOf({ onTouchTapCapture: null }) }, 

    dependencies: dependencies } };



var usedTouch = false;
var usedTouchTime = 0;
var TOUCH_DELAY = 1000;

var TapEventPlugin = { 

  tapMoveThreshold: tapMoveThreshold, 

  eventTypes: eventTypes, 

  extractEvents: function (
  topLevelType, 
  targetInst, 
  nativeEvent, 
  nativeEventTarget) 
  {
    if (!isStartish(topLevelType) && !isEndish(topLevelType)) {
      return null;}

    // on ios, there is a delay after touch event and synthetic
    // mouse events, so that user can perform double tap
    // solution: ignore mouse events following touchevent within small timeframe
    if (touchEvents.indexOf(topLevelType) !== -1) {
      usedTouch = true;
      usedTouchTime = Date.now();} else 
    {
      if (usedTouch && Date.now() - usedTouchTime < TOUCH_DELAY) {
        return null;}}


    var event = null;
    var distance = getDistance(startCoords, nativeEvent);
    if (isEndish(topLevelType) && distance < tapMoveThreshold) {
      event = SyntheticUIEvent.getPooled(
      eventTypes.touchTap, 
      targetInst, 
      nativeEvent, 
      nativeEventTarget);}


    if (isStartish(topLevelType)) {
      startCoords.x = getAxisCoordOfEvent(Axis.x, nativeEvent);
      startCoords.y = getAxisCoordOfEvent(Axis.y, nativeEvent);} else 
    if (isEndish(topLevelType)) {
      startCoords.x = 0;
      startCoords.y = 0;}

    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;} };




module.exports = TapEventPlugin;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticUIEvent.js":113,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\ViewportMetrics.js":121,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js":229,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js":230,"fbjs/lib/TouchEventUtils":400,"fbjs/lib/keyOf":418}],96:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\eventPlugins\\__tests__\\ChangeEventPlugin-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
var ChangeEventPlugin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\ChangeEventPlugin.js');
var inputValueTracking = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\inputValueTracking.js');

function getTrackedValue(elem) {
  var tracker = inputValueTracking._getTrackerFromNode(elem);
  return tracker.getValue();}


function setTrackedValue(elem, value) {
  var tracker = inputValueTracking._getTrackerFromNode(elem);
  tracker.setValue(value);}


function setUntrackedValue(elem, value) {
  var tracker = inputValueTracking._getTrackerFromNode(elem);
  var current = tracker.getValue();

  if (elem.type === 'checkbox' || elem.type === 'radio') {
    elem.checked = value;} else 
  {
    elem.value = value;}

  tracker.setValue(current);}


describe('ChangeEventPlugin', function () {
  it('should fire change for checkbox input', function () {
    var called = 0;

    function cb(e) {
      called = 1;
      expect(e.type).toBe('change');}


    var input = ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'checkbox', onChange: cb, __source: { fileName: _jsxFileName, lineNumber: 51 } }));

    setUntrackedValue(input, true);
    ReactTestUtils.SimulateNative.click(input);

    expect(called).toBe(1);});


  it('should catch setting the value programmatically', function () {
    var input = ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'text', defaultValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 61 } }));


    input.value = 'bar';
    expect(getTrackedValue(input)).toBe('bar');});


  it('should not fire change when setting the value programmatically', function () {
    var called = 0;

    function cb(e) {
      called += 1;
      expect(e.type).toBe('change');}


    var input = ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'text', onChange: cb, defaultValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 77 } }));


    input.value = 'bar';
    ReactTestUtils.SimulateNative.change(input);
    expect(called).toBe(0);

    setUntrackedValue(input, 'foo');
    ReactTestUtils.SimulateNative.change(input);

    expect(called).toBe(1);});


  it('should not fire change when setting checked programmatically', function () {
    var called = 0;

    function cb(e) {
      called += 1;
      expect(e.type).toBe('change');}


    var input = ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'checkbox', onChange: cb, defaultChecked: true, __source: { fileName: _jsxFileName, lineNumber: 99 } }));


    input.checked = true;
    ReactTestUtils.SimulateNative.click(input);
    expect(called).toBe(0);

    input.checked = false;
    setTrackedValue(input, undefined);
    ReactTestUtils.SimulateNative.click(input);

    expect(called).toBe(1);});


  it('should unmount', function () {
    var container = document.createElement('div');
    var input = ReactDOM.render(React.createElement('input', { __source: { fileName: _jsxFileName, lineNumber: 115 } }), container);

    ReactDOM.unmountComponentAtNode(container);});


  it('should only fire change for checked radio button once', function () {
    var called = 0;

    function cb(e) {
      called += 1;}


    var input = ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'radio', onChange: cb, __source: { fileName: _jsxFileName, lineNumber: 127 } }));
    setUntrackedValue(input, true);
    ReactTestUtils.SimulateNative.click(input);
    ReactTestUtils.SimulateNative.click(input);
    expect(called).toBe(1);});


  it('should deduplicate input value change events', function () {
    var input;
    var called = 0;

    function cb(e) {
      called += 1;
      expect(e.type).toBe('change');}


    [
    React.createElement('input', { type: 'text', onChange: cb, __source: { fileName: _jsxFileName, lineNumber: 144 } }), 
    React.createElement('input', { type: 'number', onChange: cb, __source: { fileName: _jsxFileName, lineNumber: 145 } }), 
    React.createElement('input', { type: 'range', onChange: cb, __source: { fileName: _jsxFileName, lineNumber: 146 } })].
    forEach(function (element) {
      called = 0;
      input = ReactTestUtils.renderIntoDocument(element);

      setUntrackedValue(input, '40');
      ReactTestUtils.SimulateNative.change(input);
      ReactTestUtils.SimulateNative.change(input);
      expect(called).toBe(1);

      called = 0;
      input = ReactTestUtils.renderIntoDocument(element);
      setUntrackedValue(input, '40');
      ReactTestUtils.SimulateNative.input(input);
      ReactTestUtils.SimulateNative.input(input);
      expect(called).toBe(1);

      called = 0;
      input = ReactTestUtils.renderIntoDocument(element);
      setUntrackedValue(input, '40');
      ReactTestUtils.SimulateNative.input(input);
      ReactTestUtils.SimulateNative.change(input);
      expect(called).toBe(1);});});



  it('should listen for both change and input events when supported', function () {
    var called = 0;

    function cb(e) {
      called += 1;
      expect(e.type).toBe('change');}


    if (!ChangeEventPlugin._isInputEventSupported) {
      return;}


    var input = ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'range', onChange: cb, __source: { fileName: _jsxFileName, lineNumber: 184 } }));
    setUntrackedValue(input, 'bar');

    ReactTestUtils.SimulateNative.input(input);

    setUntrackedValue(input, 'foo');

    ReactTestUtils.SimulateNative.change(input);

    expect(called).toBe(2);});


  it('should only fire events when the value changes for range inputs', function () {
    var called = 0;

    function cb(e) {
      called += 1;
      expect(e.type).toBe('change');}


    var input = ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'range', onChange: cb, __source: { fileName: _jsxFileName, lineNumber: 204 } }));
    setUntrackedValue(input, '40');
    ReactTestUtils.SimulateNative.input(input);
    ReactTestUtils.SimulateNative.change(input);

    setUntrackedValue(input, 'foo');

    ReactTestUtils.SimulateNative.input(input);
    ReactTestUtils.SimulateNative.change(input);
    expect(called).toBe(2);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\ChangeEventPlugin.js":89,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\inputValueTracking.js":101,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],97:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\eventPlugins\\__tests__\\EnterLeaveEventPlugin-test.js';

var EnterLeaveEventPlugin;
var EventConstants;
var React;
var ReactDOM;
var ReactDOMComponentTree;

var topLevelTypes;

describe('EnterLeaveEventPlugin', function () {
    beforeEach(function () {
        jest.resetModuleRegistry();

        EnterLeaveEventPlugin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\EnterLeaveEventPlugin.js');
        EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
        React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
        ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
        ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');

        topLevelTypes = EventConstants.topLevelTypes;});


    it('should set relatedTarget properly in iframe', function () {
        var iframe = document.createElement('iframe');
        document.body.appendChild(iframe);

        var iframeDocument = iframe.contentDocument;

        iframeDocument.write(
        '<!DOCTYPE html><html><head></head><body><div></div></body></html>');

        iframeDocument.close();

        var component = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 46 } }), iframeDocument.body.getElementsByTagName('div')[0]);
        var div = ReactDOM.findDOMNode(component);

        var extracted = EnterLeaveEventPlugin.extractEvents(
        topLevelTypes.topMouseOver, 
        ReactDOMComponentTree.getInstanceFromNode(div), 
        { target: div }, 
        div);

        expect(extracted.length).toBe(2);

        var leave = extracted[0];
        var enter = extracted[1];

        expect(leave.target).toBe(iframe.contentWindow);
        expect(leave.relatedTarget).toBe(div);
        expect(enter.target).toBe(div);
        expect(enter.relatedTarget).toBe(iframe.contentWindow);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\EnterLeaveEventPlugin.js":91,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226}],98:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

describe('FallbackCompositionState', function () {
  var FallbackCompositionState;

  var TEXT = 'Hello world';

  beforeEach(function () {
    FallbackCompositionState = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\FallbackCompositionState.js');});


  function getInput() {
    var input = document.createElement('input');
    input.value = TEXT;
    return input;}


  function getTextarea() {
    var textarea = document.createElement('textarea');
    textarea.value = TEXT;
    return textarea;}


  function getContentEditable() {
    var editable = document.createElement('div');
    var inner = document.createElement('span');
    inner.appendChild(document.createTextNode(TEXT));
    editable.appendChild(inner);
    return editable;}


  function assertExtractedData(modifiedValue, expectedData) {
    var input = getInput();
    var composition = FallbackCompositionState.getPooled(input);
    input.value = modifiedValue;
    expect(composition.getData()).toBe(expectedData);
    FallbackCompositionState.release(composition);}


  it('extracts value via `getText()`', function () {
    var composition = FallbackCompositionState.getPooled(getInput());
    expect(composition.getText()).toBe(TEXT);
    FallbackCompositionState.release(composition);

    composition = FallbackCompositionState.getPooled(getTextarea());
    expect(composition.getText()).toBe(TEXT);
    FallbackCompositionState.release(composition);

    composition = FallbackCompositionState.getPooled(getContentEditable());
    expect(composition.getText()).toBe(TEXT);
    FallbackCompositionState.release(composition);});


  describe('Extract fallback data inserted at collapsed cursor', function () {
    it('extracts when inserted at start of text', function () {
      assertExtractedData('XXXHello world', 'XXX');});


    it('extracts when inserted within text', function () {
      assertExtractedData('Hello XXXworld', 'XXX');});


    it('extracts when inserted at end of text', function () {
      assertExtractedData('Hello worldXXX', 'XXX');});});



  describe('Extract fallback data for non-collapsed range', function () {
    it('extracts when inserted at start of text', function () {
      assertExtractedData('XXX world', 'XXX');});


    it('extracts when inserted within text', function () {
      assertExtractedData('HelXXXrld', 'XXX');});


    it('extracts when inserted at end of text', function () {
      assertExtractedData('Hello XXX', 'XXX');});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\FallbackCompositionState.js":92}],99:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\eventPlugins\\__tests__\\SelectEventPlugin-test.js';

var EventConstants;
var React;
var ReactDOM;
var ReactDOMComponentTree;
var ReactTestUtils;
var SelectEventPlugin;

var topLevelTypes;

describe('SelectEventPlugin', function () {
  function extract(node, topLevelEvent) {
    return SelectEventPlugin.extractEvents(
    topLevelEvent, 
    ReactDOMComponentTree.getInstanceFromNode(node), 
    { target: node }, 
    node);}



  beforeEach(function () {
    EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    SelectEventPlugin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\SelectEventPlugin.js');

    topLevelTypes = EventConstants.topLevelTypes;});


  it('should skip extraction if no listeners are present', function () {
    var WithoutSelect = React.createClass({ displayName: 'WithoutSelect', 
      render: function () {
        return React.createElement('input', { type: 'text', __source: { fileName: _jsxFileName, lineNumber: 47 } });} });



    var rendered = ReactTestUtils.renderIntoDocument(React.createElement(WithoutSelect, { __source: { fileName: _jsxFileName, lineNumber: 51 } }));
    var node = ReactDOM.findDOMNode(rendered);
    node.focus();

    var mousedown = extract(node, topLevelTypes.topMouseDown);
    expect(mousedown).toBe(null);

    var mouseup = extract(node, topLevelTypes.topMouseUp);
    expect(mouseup).toBe(null);});


  it('should extract if an `onSelect` listener is present', function () {
    var WithSelect = React.createClass({ displayName: 'WithSelect', 
      render: function () {
        return React.createElement('input', { type: 'text', onSelect: this.props.onSelect, __source: { fileName: _jsxFileName, lineNumber: 65 } });} });



    var cb = jest.fn();

    var rendered = ReactTestUtils.renderIntoDocument(
    React.createElement(WithSelect, { onSelect: cb, __source: { fileName: _jsxFileName, lineNumber: 72 } }));

    var node = ReactDOM.findDOMNode(rendered);

    node.selectionStart = 0;
    node.selectionEnd = 0;
    node.focus();

    var focus = extract(node, topLevelTypes.topFocus);
    expect(focus).toBe(null);

    var mousedown = extract(node, topLevelTypes.topMouseDown);
    expect(mousedown).toBe(null);

    var mouseup = extract(node, topLevelTypes.topMouseUp);
    expect(mouseup).not.toBe(null);
    expect(typeof mouseup).toBe('object');
    expect(mouseup.type).toBe('select');
    expect(mouseup.target).toBe(node);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\SelectEventPlugin.js":93,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],100:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 */

'use strict';

var ReactCurrentOwner = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactInstanceMap = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js');

var getHostComponentFromComposite = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\getHostComponentFromComposite.js');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (__DEV__) {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      warning(
      owner._warnedAboutRefsInRender, 
      '%s is accessing findDOMNode inside its render(). ' + 
      'render() should be a pure function of props and state. It should ' + 
      'never access something that requires stale data from the previous ' + 
      'render, such as refs. Move this logic to componentDidMount and ' + 
      'componentDidUpdate instead.', 
      owner.getName() || 'A component');

      owner._warnedAboutRefsInRender = true;}}


  if (componentOrElement == null) {
    return null;}

  if (componentOrElement.nodeType === 1) {
    return componentOrElement;}


  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;}


  if (typeof componentOrElement.render === 'function') {
    invariant(
    false, 
    'findDOMNode was called on an unmounted component.');} else 

  {
    invariant(
    false, 
    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', 
    Object.keys(componentOrElement));}}




module.exports = findDOMNode;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js":38,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js":246,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\getHostComponentFromComposite.js":295,"fbjs/lib/invariant":414,"fbjs/lib/warning":424}],101:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule inputValueTracking
 */

'use strict';
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return (
    nodeName && nodeName.toLowerCase() === 'input' && (
    type === 'checkbox' || type === 'radio'));}



function getTracker(inst) {
  return inst._wrapperState.valueTracker;}


function attachTracker(inst, tracker) {
  inst._wrapperState.valueTracker = tracker;}


function detachTracker(inst) {
  delete inst._wrapperState.valueTracker;}


function getValueFromNode(node) {
  var value;
  if (node) {
    value = isCheckable(node) ? 
    '' + node.checked : 
    node.value;}

  return value;}


var inputValueTracking = { 
  // exposed for testing
  _getTrackerFromNode: function (node) {
    return getTracker(
    ReactDOMComponentTree.getInstanceFromNode(node));}, 



  track: function (inst) {
    if (getTracker(inst)) {
      return;}


    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var valueField = isCheckable(node) ? 'checked' : 'value';
    var descriptor = Object.getOwnPropertyDescriptor(
    node.constructor.prototype, 
    valueField);


    var currentValue = '' + node[valueField];

    // if someone has already defined a value or Safari, then bail
    // and don't track value will cause over reporting of changes,
    // but it's better then a hard failure
    // (needed for certain tests that spyOn input values and Safari)
    if (
    node.hasOwnProperty(valueField) || 
    typeof descriptor.get !== 'function' || 
    typeof descriptor.set !== 'function') 
    {
      return;}


    Object.defineProperty(node, valueField, { 
      enumerable: descriptor.enumerable, 
      configurable: true, 
      get: function () {
        return descriptor.get.call(this);}, 

      set: function (value) {
        currentValue = '' + value;
        descriptor.set.call(this, value);} });



    attachTracker(inst, { 
      getValue: function () {
        return currentValue;}, 

      setValue: function (value) {
        currentValue = '' + value;}, 

      stopTracking: function () {
        detachTracker(inst);
        delete node[valueField];} });}, 




  updateValueIfChanged: function (inst) {
    if (!inst) {
      return false;}

    var tracker = getTracker(inst);

    if (!tracker) {
      inputValueTracking.track(inst);
      return true;}


    var lastValue = tracker.getValue();
    var nextValue = getValueFromNode(
    ReactDOMComponentTree.getNodeFromInstance(inst));


    if (nextValue !== lastValue) {
      tracker.setValue(nextValue);
      return true;}


    return false;}, 


  stopTracking: function (inst) {
    var tracker = getTracker(inst);
    if (tracker) {
      tracker.stopTracking();}} };




module.exports = inputValueTracking;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66}],102:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticAnimationEvent
 */

'use strict';

var SyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js');

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = { 
  animationName: null, 
  elapsedTime: null, 
  pseudoElement: null };


/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(
dispatchConfig, 
dispatchMarker, 
nativeEvent, 
nativeEventTarget) 
{
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticEvent.augmentClass(
SyntheticAnimationEvent, 
AnimationEventInterface);


module.exports = SyntheticAnimationEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js":106}],103:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 */

'use strict';

var SyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = { 
  clipboardData: function (event) {
    return (
      'clipboardData' in event ? 
      event.clipboardData : 
      window.clipboardData);} };




/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js":106}],104:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 */

'use strict';

var SyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = { 
  data: null };


/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
dispatchConfig, 
dispatchMarker, 
nativeEvent, 
nativeEventTarget) 
{
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticEvent.augmentClass(
SyntheticCompositionEvent, 
CompositionEventInterface);


module.exports = SyntheticCompositionEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js":106}],105:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 */

'use strict';

var SyntheticMouseEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticMouseEvent.js');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = { 
  dataTransfer: null };


/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticMouseEvent.js":110}],106:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 */

'use strict';var _assign = require('object-assign');

var PooledClass = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js');

var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = [
'dispatchConfig', 
'_targetInst', 
'nativeEvent', 
'isDefaultPrevented', 
'isPropagationStopped', 
'_dispatchListeners', 
'_dispatchInstances'];


/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = { 
  type: null, 
  target: null, 
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull, 
  eventPhase: null, 
  bubbles: null, 
  cancelable: null, 
  timeStamp: function (event) {
    return event.timeStamp || Date.now();}, 

  defaultPrevented: null, 
  isTrusted: null };


/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (__DEV__) {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;}


  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;}

    if (__DEV__) {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);} else 
    {
      if (propName === 'target') {
        this.target = nativeEventTarget;} else 
      {
        this[propName] = nativeEvent[propName];}}}




  var defaultPrevented = nativeEvent.defaultPrevented != null ? 
  nativeEvent.defaultPrevented : 
  nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;} else 
  {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;}

  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;}


_assign(SyntheticEvent.prototype, { 

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;}


    if (event.preventDefault) {
      event.preventDefault();} else 
    {
      event.returnValue = false;}

    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;}, 


  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;}


    if (event.stopPropagation) {
      event.stopPropagation();} else 
    {
      event.cancelBubble = true;}

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;}, 


  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;}, 


  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse, 

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (__DEV__) {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));} else 
      {
        this[propName] = null;}}


    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;}

    if (__DEV__) {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));}} });





SyntheticEvent.Interface = EventInterface;

if (__DEV__) {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, { 
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);}, 

      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), { 
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && 
            !target.constructor.Interface.hasOwnProperty(prop) && 
            shouldBeReleasedProperties.indexOf(prop) === -1) {
              warning(
              didWarnForAddedNewProperty || target.isPersistent(), 
              'This synthetic event is reused for performance reasons. If you\'re ' + 
              'seeing this, you\'re adding a new property in the synthetic event object. ' + 
              'The property is never released. See ' + 
              'https://fb.me/react-event-pooling for more information.');

              didWarnForAddedNewProperty = true;}

            target[prop] = value;
            return true;} });} });




    /*eslint-enable no-func-assign */}}


/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);};


PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return { 
    configurable: true, 
    set: set, 
    get: get };


  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;}


  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;}


  function warn(action, result) {
    var warningCondition = false;
    warning(
    warningCondition, 
    'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 
    'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 
    'If you must keep the original synthetic event around, use event.persist(). ' + 
    'See https://fb.me/react-event-pooling for more information.', 
    action, 
    propName, 
    result);}}
},{"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js":277,"fbjs/lib/emptyFunction":406,"fbjs/lib/warning":424,"object-assign":425}],107:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 */

'use strict';

var SyntheticUIEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticUIEvent.js');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = { 
  relatedTarget: null };


/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticUIEvent.js":113}],108:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 */

'use strict';

var SyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = { 
  data: null };


/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
dispatchConfig, 
dispatchMarker, 
nativeEvent, 
nativeEventTarget) 
{
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticEvent.augmentClass(
SyntheticInputEvent, 
InputEventInterface);


module.exports = SyntheticInputEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js":106}],109:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 */

'use strict';

var SyntheticUIEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticUIEvent.js');

var getEventCharCode = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventCharCode.js');
var getEventKey = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventKey.js');
var getEventModifierState = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventModifierState.js');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = { 
  key: getEventKey, 
  location: null, 
  ctrlKey: null, 
  shiftKey: null, 
  altKey: null, 
  metaKey: null, 
  repeat: null, 
  locale: null, 
  getModifierState: getEventModifierState, 
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);}

    return 0;}, 

  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;}

    return 0;}, 

  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);}

    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;}

    return 0;} };



/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticUIEvent.js":113,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventCharCode.js":126,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventKey.js":127,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventModifierState.js":128}],110:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 */

'use strict';

var SyntheticUIEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticUIEvent.js');
var ViewportMetrics = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\ViewportMetrics.js');

var getEventModifierState = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventModifierState.js');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = { 
  screenX: null, 
  screenY: null, 
  clientX: null, 
  clientY: null, 
  ctrlKey: null, 
  shiftKey: null, 
  altKey: null, 
  metaKey: null, 
  getModifierState: getEventModifierState, 
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;}

    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;}, 

  buttons: null, 
  relatedTarget: function (event) {
    return event.relatedTarget || (
    event.fromElement === event.srcElement ? 
    event.toElement : 
    event.fromElement);}, 


  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? 
    event.pageX : 
    event.clientX + ViewportMetrics.currentScrollLeft;}, 

  pageY: function (event) {
    return 'pageY' in event ? 
    event.pageY : 
    event.clientY + ViewportMetrics.currentScrollTop;} };



/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticUIEvent.js":113,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\ViewportMetrics.js":121,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventModifierState.js":128}],111:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 */

'use strict';

var SyntheticUIEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticUIEvent.js');

var getEventModifierState = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventModifierState.js');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = { 
  touches: null, 
  targetTouches: null, 
  changedTouches: null, 
  altKey: null, 
  metaKey: null, 
  ctrlKey: null, 
  shiftKey: null, 
  getModifierState: getEventModifierState };


/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticUIEvent.js":113,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventModifierState.js":128}],112:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTransitionEvent
 */

'use strict';

var SyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = { 
  propertyName: null, 
  elapsedTime: null, 
  pseudoElement: null };


/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(
dispatchConfig, 
dispatchMarker, 
nativeEvent, 
nativeEventTarget) 
{
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticEvent.augmentClass(
SyntheticTransitionEvent, 
TransitionEventInterface);


module.exports = SyntheticTransitionEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js":106}],113:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 */

'use strict';

var SyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js');

var getEventTarget = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = { 
  view: function (event) {
    if (event.view) {
      return event.view;}


    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;}


    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;} else 
    {
      return window;}}, 


  detail: function (event) {
    return event.detail || 0;} };



/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js":106,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js":129}],114:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 */

'use strict';

var SyntheticMouseEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticMouseEvent.js');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = { 
  deltaX: function (event) {
    return (
      'deltaX' in event ? event.deltaX : 
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0);}, 


  deltaY: function (event) {
    return (
      'deltaY' in event ? event.deltaY : 
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY : 
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0);}, 


  deltaZ: null, 

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null };


/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticMouseEvent.js":110}],115:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var SyntheticClipboardEvent;

describe('SyntheticClipboardEvent', function () {
  var createEvent;

  beforeEach(function () {
    SyntheticClipboardEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticClipboardEvent.js');
    createEvent = function (nativeEvent) {
      var target = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js')(nativeEvent);
      return SyntheticClipboardEvent.getPooled({}, '', nativeEvent, target);};});



  describe('ClipboardEvent interface', function () {
    describe('clipboardData', function () {
      describe('when event has clipboardData', function () {
        it("returns event's clipboardData", function () {
          // Mock clipboardData since native implementation doesn't have a constructor
          var clipboardData = jasmine.createSpyObj(
          'clipboardData', 
          ['dropEffect', 'effectAllowed', 'files', 'items', 'types']);

          var clipboardEvent = createEvent({ clipboardData: clipboardData });

          expect(clipboardEvent.clipboardData).toBe(clipboardData);});});});});





  describe('EventInterface', function () {
    it('normalizes properties from the Event interface', function () {
      var target = document.createElement('div');
      var syntheticEvent = createEvent({ srcElement: target });

      expect(syntheticEvent.target).toBe(target);
      expect(syntheticEvent.type).toBe(undefined);});


    it('is able to `preventDefault` and `stopPropagation`', function () {
      var nativeEvent = {};
      var syntheticEvent = createEvent(nativeEvent);

      expect(syntheticEvent.isDefaultPrevented()).toBe(false);
      syntheticEvent.preventDefault();
      expect(syntheticEvent.isDefaultPrevented()).toBe(true);

      expect(syntheticEvent.isPropagationStopped()).toBe(false);
      syntheticEvent.stopPropagation();
      expect(syntheticEvent.isPropagationStopped()).toBe(true);});


    it('is able to `persist`', function () {
      var syntheticEvent = createEvent({});

      expect(syntheticEvent.isPersistent()).toBe(false);
      syntheticEvent.persist();
      expect(syntheticEvent.isPersistent()).toBe(true);});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticClipboardEvent.js":103,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js":129}],116:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\syntheticEvents\\__tests__\\SyntheticEvent-test.js';

var SyntheticEvent;
var React;
var ReactDOM;
var ReactTestUtils;

describe('SyntheticEvent', function () {
  var createEvent;

  beforeEach(function () {
    SyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js');
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

    createEvent = function (nativeEvent) {
      var target = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js')(nativeEvent);
      return SyntheticEvent.getPooled({}, '', nativeEvent, target);};});



  it('should normalize `target` from the nativeEvent', function () {
    var target = document.createElement('div');
    var syntheticEvent = createEvent({ srcElement: target });

    expect(syntheticEvent.target).toBe(target);
    expect(syntheticEvent.type).toBe(undefined);});


  it('should be able to `preventDefault`', function () {
    var nativeEvent = {};
    var syntheticEvent = createEvent(nativeEvent);

    expect(syntheticEvent.isDefaultPrevented()).toBe(false);
    syntheticEvent.preventDefault();
    expect(syntheticEvent.isDefaultPrevented()).toBe(true);

    expect(syntheticEvent.defaultPrevented).toBe(true);

    expect(nativeEvent.returnValue).toBe(false);});


  it('should be prevented if nativeEvent is prevented', function () {
    expect(
    createEvent({ defaultPrevented: true }).isDefaultPrevented()).
    toBe(true);
    expect(createEvent({ returnValue: false }).isDefaultPrevented()).toBe(true);});


  it('should be able to `stopPropagation`', function () {
    var nativeEvent = {};
    var syntheticEvent = createEvent(nativeEvent);

    expect(syntheticEvent.isPropagationStopped()).toBe(false);
    syntheticEvent.stopPropagation();
    expect(syntheticEvent.isPropagationStopped()).toBe(true);

    expect(nativeEvent.cancelBubble).toBe(true);});


  it('should be able to `persist`', function () {
    var syntheticEvent = createEvent({});

    expect(syntheticEvent.isPersistent()).toBe(false);
    syntheticEvent.persist();
    expect(syntheticEvent.isPersistent()).toBe(true);});


  it('should be nullified if the synthetic event has called destructor and log warnings', function () {
    spyOn(console, 'error');
    var target = document.createElement('div');
    var syntheticEvent = createEvent({ srcElement: target });
    syntheticEvent.destructor();
    expect(syntheticEvent.type).toBe(null);
    expect(syntheticEvent.nativeEvent).toBe(null);
    expect(syntheticEvent.target).toBe(null);
    // once for each property accessed
    expect(console.error.calls.count()).toBe(3);
    // assert the first warning for accessing `type`
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: This synthetic event is reused for performance reasons. If ' + 
    'you\'re seeing this, you\'re accessing the property `type` on a ' + 
    'released/nullified synthetic event. This is set to null. If you must ' + 
    'keep the original synthetic event around, use event.persist(). ' + 
    'See https://fb.me/react-event-pooling for more information.');});



  it('should warn when setting properties of a destructored synthetic event', function () {
    spyOn(console, 'error');
    var target = document.createElement('div');
    var syntheticEvent = createEvent({ srcElement: target });
    syntheticEvent.destructor();
    expect(syntheticEvent.type = 'MouseEvent').toBe('MouseEvent');
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: This synthetic event is reused for performance reasons. If ' + 
    'you\'re seeing this, you\'re setting the property `type` on a ' + 
    'released/nullified synthetic event. This is effectively a no-op. If you must ' + 
    'keep the original synthetic event around, use event.persist(). ' + 
    'See https://fb.me/react-event-pooling for more information.');});



  it('should warn if the synthetic event has been released when calling `preventDefault`', function () {
    spyOn(console, 'error');
    var syntheticEvent = createEvent({});
    SyntheticEvent.release(syntheticEvent);
    syntheticEvent.preventDefault();
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: This synthetic event is reused for performance reasons. If ' + 
    'you\'re seeing this, you\'re accessing the method `preventDefault` on a ' + 
    'released/nullified synthetic event. This is a no-op function. If you must ' + 
    'keep the original synthetic event around, use event.persist(). ' + 
    'See https://fb.me/react-event-pooling for more information.');});



  it('should warn if the synthetic event has been released when calling `stopPropagation`', function () {
    spyOn(console, 'error');
    var syntheticEvent = createEvent({});
    SyntheticEvent.release(syntheticEvent);
    syntheticEvent.stopPropagation();
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: This synthetic event is reused for performance reasons. If ' + 
    'you\'re seeing this, you\'re accessing the method `stopPropagation` on a ' + 
    'released/nullified synthetic event. This is a no-op function. If you must ' + 
    'keep the original synthetic event around, use event.persist(). ' + 
    'See https://fb.me/react-event-pooling for more information.');});



  // TODO: reenable this test. We are currently silencing these warnings when
  // using TestUtils.Simulate to avoid spurious warnings that result from the
  // way we simulate events.
  xit('should properly log warnings when events simulated with rendered components', function () {
    spyOn(console, 'error');
    var event;
    var element = document.createElement('div');
    function assignEvent(e) {
      event = e;}

    var instance = ReactDOM.render(React.createElement('div', { onClick: assignEvent, __source: { fileName: _jsxFileName, lineNumber: 157 } }), element);
    ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(instance));
    expect(console.error.calls.count()).toBe(0);

    // access a property to cause the warning
    event.nativeEvent; // eslint-disable-line no-unused-expressions

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: This synthetic event is reused for performance reasons. If ' + 
    'you\'re seeing this, you\'re accessing the property `nativeEvent` on a ' + 
    'released/nullified synthetic event. This is set to null. If you must ' + 
    'keep the original synthetic event around, use event.persist(). ' + 
    'See https://fb.me/react-event-pooling for more information.');});



  it('should warn if Proxy is supported and the synthetic event is added a property', function () {
    spyOn(console, 'error');
    var syntheticEvent = createEvent({});
    syntheticEvent.foo = 'bar';
    SyntheticEvent.release(syntheticEvent);
    expect(syntheticEvent.foo).toBe('bar');
    if (typeof Proxy === 'function') {
      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toBe(
      'Warning: This synthetic event is reused for performance reasons. If ' + 
      'you\'re seeing this, you\'re adding a new property in the synthetic ' + 
      'event object. The property is never released. ' + 
      'See https://fb.me/react-event-pooling for more information.');} else 

    {
      expect(console.error.calls.count()).toBe(0);}});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js":106,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js":129,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],117:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var SyntheticKeyboardEvent;
var getEventCharCode;

describe('SyntheticKeyboardEvent', function () {
  var createEvent;

  beforeEach(function () {
    // Mock getEventCharCode for proper unit testing
    jest.mock('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventCharCode.js');
    getEventCharCode = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventCharCode.js');

    SyntheticKeyboardEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticKeyboardEvent.js');
    createEvent = function (nativeEvent) {
      var target = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js')(nativeEvent);
      return SyntheticKeyboardEvent.getPooled({}, '', nativeEvent, target);};});



  describe('KeyboardEvent interface', function () {
    describe('charCode', function () {
      describe('when event is `keypress`', function () {
        it('returns whatever getEventCharCode returns', function () {
          getEventCharCode.mockReturnValue(100500);
          var keyboardEvent = createEvent({ type: 'keypress', charCode: 50 });

          expect(keyboardEvent.charCode).toBe(100500);});});



      describe('when event is not `keypress`', function () {
        it('returns 0', function () {
          var keyboardEvent = createEvent({ type: 'keyup', charCode: 50 });
          expect(keyboardEvent.charCode).toBe(0);});});});




    describe('keyCode', function () {
      describe('when event is `keydown` or `keyup`', function () {
        it('returns a passed keyCode', function () {
          var keyboardEvent = createEvent({ type: 'keyup', keyCode: 40 });
          expect(keyboardEvent.keyCode).toBe(40);});});



      describe('when event is `keypress`', function () {
        it('returns 0', function () {
          var keyboardEvent = createEvent({ type: 'keypress', charCode: 40 });
          expect(keyboardEvent.keyCode).toBe(0);});});});




    describe('which', function () {
      describe('when event is `keypress`', function () {
        it('returns whatever getEventCharCode returns', function () {
          getEventCharCode.mockReturnValue(9001);
          var keyboardEvent = createEvent({ type: 'keypress', charCode: 50 });

          expect(keyboardEvent.which).toBe(9001);});});



      describe('when event is `keydown` or `keyup`', function () {
        it('returns a passed keyCode', function () {
          var keyboardEvent = createEvent({ type: 'keyup', keyCode: 40 });
          expect(keyboardEvent.which).toBe(40);});});



      describe('when event type is unknown', function () {
        it('returns 0', function () {
          var keyboardEvent = createEvent({ type: 'keysmack', keyCode: 40 });
          expect(keyboardEvent.which).toBe(0);});});});});





  describe('EventInterface', function () {
    it('normalizes properties from the Event interface', function () {
      var target = document.createElement('div');
      var syntheticEvent = createEvent({ srcElement: target });

      expect(syntheticEvent.target).toBe(target);
      expect(syntheticEvent.type).toBe(undefined);});


    it('is able to `preventDefault` and `stopPropagation`', function () {
      var nativeEvent = {};
      var syntheticEvent = createEvent(nativeEvent);

      expect(syntheticEvent.isDefaultPrevented()).toBe(false);
      syntheticEvent.preventDefault();
      expect(syntheticEvent.isDefaultPrevented()).toBe(true);

      expect(syntheticEvent.isPropagationStopped()).toBe(false);
      syntheticEvent.stopPropagation();
      expect(syntheticEvent.isPropagationStopped()).toBe(true);});


    it('is able to `persist`', function () {
      var syntheticEvent = createEvent({});

      expect(syntheticEvent.isPersistent()).toBe(false);
      syntheticEvent.persist();
      expect(syntheticEvent.isPersistent()).toBe(true);});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticKeyboardEvent.js":109,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventCharCode.js":126,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js":129}],118:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var SyntheticWheelEvent;

describe('SyntheticWheelEvent', function () {
  var createEvent;

  beforeEach(function () {
    SyntheticWheelEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticWheelEvent.js');

    createEvent = function (nativeEvent) {
      var target = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js')(nativeEvent);
      return SyntheticWheelEvent.getPooled({}, '', nativeEvent, target);};});



  it('should normalize properties from the Event interface', function () {
    var target = document.createElement('div');
    var syntheticEvent = createEvent({ srcElement: target });

    expect(syntheticEvent.target).toBe(target);
    expect(syntheticEvent.type).toBe(undefined);});


  it('should normalize properties from the MouseEvent interface', function () {
    expect(createEvent({ which: 2, button: 1 }).button).toBe(1);});


  it('should normalize properties from the WheelEvent interface', function () {
    var standardEvent = createEvent({ deltaX: 10, deltaY: -50 });
    expect(standardEvent.deltaX).toBe(10);
    expect(standardEvent.deltaY).toBe(-50);

    var webkitEvent = createEvent({ wheelDeltaX: -10, wheelDeltaY: 50 });
    expect(webkitEvent.deltaX).toBe(10);
    expect(webkitEvent.deltaY).toBe(-50);});


  it('should be able to `preventDefault` and `stopPropagation`', function () {
    var nativeEvent = {};
    var syntheticEvent = createEvent(nativeEvent);

    expect(syntheticEvent.isDefaultPrevented()).toBe(false);
    syntheticEvent.preventDefault();
    expect(syntheticEvent.isDefaultPrevented()).toBe(true);

    expect(syntheticEvent.isPropagationStopped()).toBe(false);
    syntheticEvent.stopPropagation();
    expect(syntheticEvent.isPropagationStopped()).toBe(true);});


  it('should be able to `persist`', function () {
    var syntheticEvent = createEvent({});

    expect(syntheticEvent.isPersistent()).toBe(false);
    syntheticEvent.persist();
    expect(syntheticEvent.isPersistent()).toBe(true);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticWheelEvent.js":114,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventTarget.js":129}],119:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 */

'use strict';

var DOMLazyTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMLazyTree.js');
var Danger = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\Danger.js');
var ReactMultiChildUpdateTypes = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactMultiChildUpdateTypes.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');

var createMicrosoftUnsafeLocalFunction = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\createMicrosoftUnsafeLocalFunction.js');
var setInnerHTML = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\setInnerHTML.js');
var setTextContent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\setTextContent.js');

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];}

  return node ? node.nextSibling : parentNode.firstChild;}


/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(
function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);});



function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);}


function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);} else 
  {
    insertChildAt(parentNode, childNode, referenceNode);}}



function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);}

  parentNode.removeChild(childNode);}


function moveDelimitedText(
parentNode, 
openingComment, 
closingComment, 
referenceNode) 
{
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;}

    node = nextNode;}}



function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;} else 
    {
      parentNode.removeChild(node);}}}




function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(
      parentNode, 
      document.createTextNode(stringText), 
      nodeAfterComment);}} else 


  {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);} else 
    {
      removeDelimitedText(parentNode, openingComment, closingComment);}}



  if (__DEV__) {
    ReactInstrumentation.debugTool.onHostOperation(
    ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID, 
    'replace text', 
    stringText);}}




var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (__DEV__) {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation(
      prevInstance._debugID, 
      'replace with', 
      markup.toString());} else 

    {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation(
        nextInstance._debugID, 
        'mount', 
        markup.toString());}}};}






/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = { 

  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup, 

  replaceDelimitedText: replaceDelimitedText, 

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if (__DEV__) {
      var parentNodeDebugID = 
      ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;}


    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertLazyTreeChildAt(
          parentNode, 
          update.content, 
          getNodeAfter(parentNode, update.afterNode));

          if (__DEV__) {
            ReactInstrumentation.debugTool.onHostOperation(
            parentNodeDebugID, 
            'insert child', 
            { toIndex: update.toIndex, content: update.content.toString() });}


          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          moveChild(
          parentNode, 
          update.fromNode, 
          getNodeAfter(parentNode, update.afterNode));

          if (__DEV__) {
            ReactInstrumentation.debugTool.onHostOperation(
            parentNodeDebugID, 
            'move child', 
            { fromIndex: update.fromIndex, toIndex: update.toIndex });}


          break;
        case ReactMultiChildUpdateTypes.SET_MARKUP:
          setInnerHTML(
          parentNode, 
          update.content);

          if (__DEV__) {
            ReactInstrumentation.debugTool.onHostOperation(
            parentNodeDebugID, 
            'replace children', 
            update.content.toString());}


          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(
          parentNode, 
          update.content);

          if (__DEV__) {
            ReactInstrumentation.debugTool.onHostOperation(
            parentNodeDebugID, 
            'replace text', 
            update.content.toString());}


          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          removeChild(parentNode, update.fromNode);
          if (__DEV__) {
            ReactInstrumentation.debugTool.onHostOperation(
            parentNodeDebugID, 
            'remove child', 
            { fromIndex: update.fromIndex });}


          break;}}} };






module.exports = DOMChildrenOperations;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMLazyTree.js":120,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\createMicrosoftUnsafeLocalFunction.js":125,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\setInnerHTML.js":134,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\setTextContent.js":135,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\Danger.js":161,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactMultiChildUpdateTypes.js":248}],120:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMLazyTree
 */

'use strict';

var DOMNamespaces = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMNamespaces.js');

var createMicrosoftUnsafeLocalFunction = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\createMicrosoftUnsafeLocalFunction.js');
var setTextContent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\setTextContent.js');

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = 
typeof document !== 'undefined' && 
typeof document.documentMode === 'number' || 

typeof navigator !== 'undefined' && 
typeof navigator.userAgent === 'string' && 
/\bEdge\/\d/.test(navigator.userAgent);


function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;}

  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);}} else 

  if (tree.html != null) {
    node.innerHTML = tree.html;} else 
  if (tree.text != null) {
    setTextContent(node, tree.text);}}



var insertTreeBefore = createMicrosoftUnsafeLocalFunction(
function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || 

  tree.node.nodeType === ELEMENT_NODE_TYPE && 
  tree.node.nodeName.toLowerCase() === 'object' && (
  tree.node.namespaceURI == null || 
  tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);} else 
  {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);}});




function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);}


function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);} else 
  {
    parentTree.node.appendChild(childTree.node);}}



function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;} else 
  {
    tree.node.innerHTML = html;}}



function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;} else 
  {
    setTextContent(tree.node, text);}}



function toString() {
  return this.node.nodeName;}


function DOMLazyTree(node) {
  return { 
    node: node, 
    children: [], 
    html: null, 
    text: null, 
    toString: toString };}



DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\createMicrosoftUnsafeLocalFunction.js":125,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\setTextContent.js":135,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMNamespaces.js":158}],121:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = { 

  currentScrollLeft: 0, 

  currentScrollTop: 0, 

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;} };




module.exports = ViewportMetrics;
},{}],122:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var getEventCharCode = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventCharCode.js');

describe('getEventCharCode', function () {
  describe('when charCode is present in nativeEvent', function () {
    describe('when charCode is 0 and keyCode is 13', function () {
      it('returns 13', function () {
        var nativeEvent = new KeyboardEvent(
        'keypress', { charCode: 0, keyCode: 13 });


        expect(getEventCharCode(nativeEvent)).toBe(13);});});



    describe('when charCode is not 0 and/or keyCode is not 13', function () {
      describe('when charCode is 32 or bigger', function () {
        it('returns charCode', function () {
          var nativeEvent = new KeyboardEvent('keypress', { charCode: 32 });

          expect(getEventCharCode(nativeEvent)).toBe(32);});});



      describe('when charCode is smaller than 32', function () {
        describe('when charCode is 13', function () {
          it('returns 13', function () {
            var nativeEvent = new KeyboardEvent('keypress', { charCode: 13 });

            expect(getEventCharCode(nativeEvent)).toBe(13);});});



        describe('when charCode is not 13', function () {
          it('returns 0', function () {
            var nativeEvent = new KeyboardEvent('keypress', { charCode: 31 });

            expect(getEventCharCode(nativeEvent)).toBe(0);});});});});});






  /**
    nativeEvent is represented as a plain object here to ease testing, because
    KeyboardEvent's 'charCode' event key cannot be deleted to simulate a missing
    charCode key.
  */
  describe('when charCode is not present in nativeEvent', function () {
    describe('when keyCode is 32 or bigger', function () {
      it('returns keyCode', function () {
        var nativeEvent = { 'keyCode': 32 };

        expect(getEventCharCode(nativeEvent)).toBe(32);});});



    describe('when keyCode is smaller than 32', function () {
      describe('when keyCode is 13', function () {
        it('returns 13', function () {
          var nativeEvent = { 'keyCode': 13 };

          expect(getEventCharCode(nativeEvent)).toBe(13);});});



      describe('when keyCode is not 13', function () {
        it('returns 0', function () {
          var nativeEvent = { 'keyCode': 31 };

          expect(getEventCharCode(nativeEvent)).toBe(0);});});});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventCharCode.js":126}],123:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var getEventKey = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventKey.js');

describe('getEventKey', function () {
  describe('when key is implemented in a browser', function () {
    describe('when key is not normalized', function () {
      it('returns a normalized value', function () {
        var nativeEvent = new KeyboardEvent('keypress', { key: 'Del' });

        expect(getEventKey(nativeEvent)).toBe('Delete');});});



    describe('when key is normalized', function () {
      it('returns a key', function () {
        var nativeEvent = new KeyboardEvent('keypress', { key: 'f' });

        expect(getEventKey(nativeEvent)).toBe('f');});});});




  describe('when key is not implemented in a browser', function () {
    describe('when event type is keypress', function () {
      describe('when charCode is 13', function () {
        it("returns 'Enter'", function () {
          var nativeEvent = new KeyboardEvent('keypress', { charCode: 13 });

          expect(getEventKey(nativeEvent)).toBe('Enter');});});



      describe('when charCode is not 13', function () {
        it('returns a string from a charCode', function () {
          var nativeEvent = new KeyboardEvent('keypress', { charCode: 65 });

          expect(getEventKey(nativeEvent)).toBe('A');});});});




    describe('when event type is keydown or keyup', function () {
      describe('when keyCode is recognized', function () {
        it('returns a translated key', function () {
          var nativeEvent = new KeyboardEvent('keydown', { keyCode: 45 });

          expect(getEventKey(nativeEvent)).toBe('Insert');});});



      describe('when keyCode is not recognized', function () {
        it('returns Unidentified', function () {
          var nativeEvent = new KeyboardEvent('keydown', { keyCode: 1337 });

          expect(getEventKey(nativeEvent)).toBe('Unidentified');});});});




    describe('when event type is unknown', function () {
      it('returns an empty string', function () {
        var nativeEvent = new KeyboardEvent('keysmack');

        expect(getEventKey(nativeEvent)).toBe('');});});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventKey.js":127}],124:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var getTestDocument = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\getTestDocument.js');

var getNodeForCharacterOffset = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getNodeForCharacterOffset.js');

// Create node from HTML string
function createNode(html) {
  var node = (getTestDocument() || document).createElement('div');
  node.innerHTML = html;
  return node;}


// Check getNodeForCharacterOffset return value matches expected result.
function expectNodeOffset(result, textContent, nodeOffset) {
  expect(result.node.textContent).toBe(textContent);
  expect(result.offset).toBe(nodeOffset);}


describe('getNodeForCharacterOffset', function () {
  it('should handle siblings', function () {
    var node = createNode('<i>123</i><i>456</i><i>789</i>');

    expectNodeOffset(getNodeForCharacterOffset(node, 0), '123', 0);
    expectNodeOffset(getNodeForCharacterOffset(node, 4), '456', 1);});


  it('should handle trailing chars', function () {
    var node = createNode('<i>123</i><i>456</i><i>789</i>');

    expectNodeOffset(getNodeForCharacterOffset(node, 3), '123', 3);
    expectNodeOffset(getNodeForCharacterOffset(node, 9), '789', 3);});


  it('should handle trees', function () {
    var node = createNode(
    '<i>' + 
    '<i>1</i>' + 
    '<i>' + 
    '<i>' + 
    '<i>2</i>' + 
    '<i></i>' + 
    '</i>' + 
    '</i>' + 
    '<i>' + 
    '3' + 
    '<i>45</i>' + 
    '</i>' + 
    '</i>');


    expectNodeOffset(getNodeForCharacterOffset(node, 3), '3', 1);
    expectNodeOffset(getNodeForCharacterOffset(node, 5), '45', 2);
    expect(getNodeForCharacterOffset(node, 10)).toBeUndefined();});


  it('should handle non-existent offset', function () {
    var node = createNode('<i>123</i>');

    expect(getNodeForCharacterOffset(node, -1)).toBeUndefined();
    expect(getNodeForCharacterOffset(node, 4)).toBeUndefined();});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getNodeForCharacterOffset.js":130,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\getTestDocument.js":305}],125:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createMicrosoftUnsafeLocalFunction
 */

/* globals MSApp */

'use strict';

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);});};} else 


  {
    return func;}};



module.exports = createMicrosoftUnsafeLocalFunction;
},{}],126:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;}} else 

  {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;}


  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;}


  return 0;}


module.exports = getEventCharCode;
},{}],127:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 */

'use strict';

var getEventCharCode = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventCharCode.js');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = { 
  'Esc': 'Escape', 
  'Spacebar': ' ', 
  'Left': 'ArrowLeft', 
  'Up': 'ArrowUp', 
  'Right': 'ArrowRight', 
  'Down': 'ArrowDown', 
  'Del': 'Delete', 
  'Win': 'OS', 
  'Menu': 'ContextMenu', 
  'Apps': 'ContextMenu', 
  'Scroll': 'ScrollLock', 
  'MozPrintableKey': 'Unidentified' };


/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = { 
  8: 'Backspace', 
  9: 'Tab', 
  12: 'Clear', 
  13: 'Enter', 
  16: 'Shift', 
  17: 'Control', 
  18: 'Alt', 
  19: 'Pause', 
  20: 'CapsLock', 
  27: 'Escape', 
  32: ' ', 
  33: 'PageUp', 
  34: 'PageDown', 
  35: 'End', 
  36: 'Home', 
  37: 'ArrowLeft', 
  38: 'ArrowUp', 
  39: 'ArrowRight', 
  40: 'ArrowDown', 
  45: 'Insert', 
  46: 'Delete', 
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6', 
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12', 
  144: 'NumLock', 
  145: 'ScrollLock', 
  224: 'Meta' };


/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;}}



  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);}

  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';}

  return '';}


module.exports = getEventKey;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\getEventCharCode.js":126}],128:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = { 
  'Alt': 'altKey', 
  'Control': 'ctrlKey', 
  'Meta': 'metaKey', 
  'Shift': 'shiftKey' };


// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);}

  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;}


function getEventModifierState(nativeEvent) {
  return modifierStateGetter;}


module.exports = getEventModifierState;
},{}],129:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;}


  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;}


module.exports = getEventTarget;
},{}],130:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;}

  return node;}


/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;}

    node = node.parentNode;}}



/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return { 
          node: node, 
          offset: offset - nodeStart };}



      nodeStart = nodeEnd;}


    node = getLeafNode(getSiblingNode(node));}}



module.exports = getNodeForCharacterOffset;
},{}],131:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 
    'textContent' : 
    'innerText';}

  return contentKey;}


module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":399}],132:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getVendorPrefixedEventName
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;}


/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = { 
  animationend: makePrefixMap('Animation', 'AnimationEnd'), 
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'), 
  animationstart: makePrefixMap('Animation', 'AnimationStart'), 
  transitionend: makePrefixMap('Transition', 'TransitionEnd') };


/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;}


  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;}}



/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];} else 

  if (!vendorPrefixes[eventName]) {
    return eventName;}


  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];}}



  return '';}


module.exports = getVendorPrefixedEventName;
},{"fbjs/lib/ExecutionEnvironment":399}],133:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = 
  document.implementation && 
  document.implementation.hasFeature && 
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;}


/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || 
  capture && !('addEventListener' in document)) {
    return false;}


  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';}


  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');}


  return isSupported;}


module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":399}],134:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\createMicrosoftUnsafeLocalFunction.js');

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(
function (node, html) {
  node.innerHTML = html;});



if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);}


      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || 
      html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);} else 
        {
          textNode.deleteData(0, 1);}} else 

      {
        node.innerHTML = html;}};}



  testElement = null;}


module.exports = setInnerHTML;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\createMicrosoftUnsafeLocalFunction.js":125,"fbjs/lib/ExecutionEnvironment":399}],135:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\escapeTextContentForBrowser.js');
var setInnerHTML = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\setInnerHTML.js');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  node.textContent = text;};


if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));};}}




module.exports = setTextContent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\setInnerHTML.js":134,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\escapeTextContentForBrowser.js":186,"fbjs/lib/ExecutionEnvironment":399}],136:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule validateDOMNesting
 */

'use strict';var _assign = require('object-assign');

var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if (__DEV__) {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = [
  'address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 
  'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 
  'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 
  'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 
  'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 
  'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 
  'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 
  'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 
  'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 
  'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 
  'xmp'];


  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = [
  'applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 
  'template', 

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];


  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = 
  ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = { 
    current: null, 

    formTag: null, 
    aTagInScope: null, 
    buttonTagInScope: null, 
    nobrTagInScope: null, 
    pTagInButtonScope: null, 

    listItemTagAutoclosing: null, 
    dlItemTagAutoclosing: null };


  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;}

    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;}


    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (
    specialTags.indexOf(tag) !== -1 && 
    tag !== 'address' && tag !== 'div' && tag !== 'p') 
    {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;}


    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;}

    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;}

    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;}

    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;}

    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;}

    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;}

    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;}


    return ancestorInfo;};


  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return (
          tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || 
          tag === 'template');


      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return (
          tag === 'tr' || tag === 'style' || tag === 'script' || 
          tag === 'template');


      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return (
          tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || 
          tag === 'tfoot' || tag === 'thead' || tag === 'style' || 
          tag === 'script' || tag === 'template');


      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return (
          tag === 'base' || tag === 'basefont' || tag === 'bgsound' || 
          tag === 'link' || tag === 'meta' || tag === 'title' || 
          tag === 'noscript' || tag === 'noframes' || tag === 'style' || 
          tag === 'script' || tag === 'template');


      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';}


    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return (
          parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && 
          parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6');


      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;}


    return true;};


  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;}


    return null;};


  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];}


    var stack = [];
    do {
      stack.push(instance);} while (
    instance = instance._currentElement._owner);
    stack.reverse();
    return stack;};


  var didWarn = {};

  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    var invalidParent = 
    isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = 
    invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = 
      ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;} else 
        {
          break;}}



      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(
      function (inst) {return inst.getName() || UNKNOWN;});

      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(
      function (inst) {return inst.getName() || UNKNOWN;});

      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? 
      childOwners[deepestCommon].getName() || UNKNOWN : 
      [], 
      ancestorOwnerNames, 
      ancestorTag, 
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], 
      childOwnerNames, 
      childTag).
      join(' > ');

      var warnKey = 
      !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;}

      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      if (childTag !== '#text') {
        tagDisplayName = '<' + childTag + '>';}


      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += 
          ' Add a <tbody> to your code to match the DOM tree generated by ' + 
          'the browser.';}

        warning(
        false, 
        'validateDOMNesting(...): %s cannot appear as a child of <%s>. ' + 
        'See %s.%s', 
        tagDisplayName, 
        ancestorTag, 
        ownerInfo, 
        info);} else 

      {
        warning(
        false, 
        'validateDOMNesting(...): %s cannot appear as a descendant of ' + 
        '<%s>. See %s.', 
        tagDisplayName, 
        ancestorTag, 
        ownerInfo);}}};





  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return (
      isTagValidWithParent(tag, parentTag) && 
      !findInvalidAncestorForTag(tag, ancestorInfo));};}




module.exports = validateDOMNesting;
},{"fbjs/lib/emptyFunction":406,"fbjs/lib/warning":424,"object-assign":425}],137:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusUtils
 */

'use strict';

var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');

var focusNode = require('fbjs/lib/focusNode');

var AutoFocusUtils = { 
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));} };



module.exports = AutoFocusUtils;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"fbjs/lib/focusNode":408}],138:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DisabledInputUtils
 */

'use strict';

var disableableMouseListenerNames = { 
  onClick: true, 
  onDoubleClick: true, 
  onMouseDown: true, 
  onMouseMove: true, 
  onMouseUp: true, 

  onClickCapture: true, 
  onDoubleClickCapture: true, 
  onMouseDownCapture: true, 
  onMouseMoveCapture: true, 
  onMouseUpCapture: true };


/**
 * Implements a host component that does not receive mouse events
 * when `disabled` is set.
 */
var DisabledInputUtils = { 
  getHostProps: function (inst, props) {
    if (!props.disabled) {
      return props;}


    // Copy the props, except the mouse listeners
    var hostProps = {};
    for (var key in props) {
      if (!disableableMouseListenerNames[key] && props.hasOwnProperty(key)) {
        hostProps[key] = props[key];}}



    return hostProps;} };



module.exports = DisabledInputUtils;
},{}],139:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 */

'use strict';

var ReactPropTypes = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypes.js');
var ReactPropTypeLocations = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocations.js');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = { 
  'button': true, 
  'checkbox': true, 
  'image': true, 
  'hidden': true, 
  'radio': true, 
  'reset': true, 
  'submit': true };


function _assertSingleLink(inputProps) {
  invariant(
  inputProps.checkedLink == null || inputProps.valueLink == null, 
  'Cannot provide a checkedLink and a valueLink. If you want to use ' + 
  'checkedLink, you probably don\'t want to use valueLink and vice versa.');}


function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  invariant(
  inputProps.value == null && inputProps.onChange == null, 
  'Cannot provide a valueLink and a value or onChange event. If you want ' + 
  'to use value or onChange, you probably don\'t want to use valueLink.');}



function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  invariant(
  inputProps.checked == null && inputProps.onChange == null, 
  'Cannot provide a checkedLink and a checked property or onChange event. ' + 
  'If you want to use checked or onChange, you probably don\'t want to ' + 
  'use checkedLink');}



var propTypes = { 
  value: function (props, propName, componentName) {
    if (!props[propName] || 
    hasReadOnlyValue[props.type] || 
    props.onChange || 
    props.readOnly || 
    props.disabled) {
      return null;}

    return new Error(
    'You provided a `value` prop to a form field without an ' + 
    '`onChange` handler. This will render a read-only field. If ' + 
    'the field should be mutable use `defaultValue`. Otherwise, ' + 
    'set either `onChange` or `readOnly`.');}, 


  checked: function (props, propName, componentName) {
    if (!props[propName] || 
    props.onChange || 
    props.readOnly || 
    props.disabled) {
      return null;}

    return new Error(
    'You provided a `checked` prop to a form field without an ' + 
    '`onChange` handler. This will render a read-only field. If ' + 
    'the field should be mutable use `defaultChecked`. Otherwise, ' + 
    'set either `onChange` or `readOnly`.');}, 


  onChange: ReactPropTypes.func };


var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';}}


  return '';}


/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = { 
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](
        props, 
        propName, 
        tagName, 
        ReactPropTypeLocations.prop);}


      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        warning(false, 'Failed form propType: %s%s', error.message, addendum);}}}, 




  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;}

    return inputProps.value;}, 


  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;}

    return inputProps.checked;}, 


  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);} else 
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);} else 
    if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);}} };




module.exports = LinkedValueUtils;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocations.js":46,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypes.js":47,"fbjs/lib/invariant":414,"fbjs/lib/warning":424}],140:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var DisabledInputUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\DisabledInputUtils.js');

/**
 * Implements a <button> host component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = { 
  getHostProps: DisabledInputUtils.getHostProps };


module.exports = ReactDOMButton;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\DisabledInputUtils.js":138}],141:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';var _assign = require('object-assign');

var DisabledInputUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\DisabledInputUtils.js');
var DOMPropertyOperations = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMPropertyOperations.js');
var LinkedValueUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\LinkedValueUtils.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueNull = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);}}



function warnIfValueIsNull(props) {
  if (props != null && props.value === null && !didWarnValueNull) {
    warning(
    false, 
    '`value` prop on `input` should not be null. ' + 
    'Consider using the empty string to clear the component or `undefined` ' + 
    'for uncontrolled components.');


    didWarnValueNull = true;}}



/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = { 
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({ 
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined }, 
    DisabledInputUtils.getHostProps(inst, props), { 
      defaultChecked: undefined, 
      defaultValue: undefined, 
      value: value != null ? value : inst._wrapperState.initialValue, 
      checked: checked != null ? checked : inst._wrapperState.initialChecked, 
      onChange: inst._wrapperState.onChange });


    return hostProps;}, 


  mountWrapper: function (inst, props) {
    if (__DEV__) {
      LinkedValueUtils.checkPropTypes(
      'input', 
      props, 
      inst._currentElement._owner);


      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        warning(
        false, 
        '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.');

        didWarnValueLink = true;}

      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        warning(
        false, 
        '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.');

        didWarnCheckedLink = true;}

      if (
      props.checked !== undefined && 
      props.defaultChecked !== undefined && 
      !didWarnCheckedDefaultChecked) 
      {
        warning(
        false, 
        '%s contains an input of type %s with both checked and defaultChecked props. ' + 
        'Input elements must be either controlled or uncontrolled ' + 
        '(specify either the checked prop, or the defaultChecked prop, but not ' + 
        'both). Decide between using a controlled or uncontrolled input ' + 
        'element and remove one of these props. More info: ' + 
        'https://fb.me/react-controlled-components', 
        owner && owner.getName() || 'A component', 
        props.type);

        didWarnCheckedDefaultChecked = true;}

      if (
      props.value !== undefined && 
      props.defaultValue !== undefined && 
      !didWarnValueDefaultValue) 
      {
        warning(
        false, 
        '%s contains an input of type %s with both value and defaultValue props. ' + 
        'Input elements must be either controlled or uncontrolled ' + 
        '(specify either the value prop, or the defaultValue prop, but not ' + 
        'both). Decide between using a controlled or uncontrolled input ' + 
        'element and remove one of these props. More info: ' + 
        'https://fb.me/react-controlled-components', 
        owner && owner.getName() || 'A component', 
        props.type);

        didWarnValueDefaultValue = true;}

      warnIfValueIsNull(props);}


    var defaultValue = props.defaultValue;
    inst._wrapperState = { 
      initialChecked: props.checked != null ? props.checked : props.defaultChecked, 
      initialValue: props.value != null ? props.value : defaultValue, 
      listeners: null, 
      onChange: _handleChange.bind(inst) };


    if (__DEV__) {
      inst._wrapperState.controlled = props.checked !== undefined || props.value !== undefined;}}, 



  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (__DEV__) {
      warnIfValueIsNull(props);

      var defaultValue = props.defaultChecked || props.defaultValue;
      var controlled = props.checked !== undefined || props.value !== undefined;
      var owner = inst._currentElement._owner;

      if (
      !inst._wrapperState.controlled && 
      controlled && !didWarnUncontrolledToControlled) 
      {
        warning(
        false, 
        '%s is changing an uncontrolled input of type %s to be controlled. ' + 
        'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 
        'Decide between using a controlled or uncontrolled input ' + 
        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', 
        owner && owner.getName() || 'A component', 
        props.type);

        didWarnUncontrolledToControlled = true;}

      if (
      inst._wrapperState.controlled && (
      defaultValue || !controlled) && 
      !didWarnControlledToUncontrolled) 
      {
        warning(
        false, 
        '%s is changing a controlled input of type %s to be uncontrolled. ' + 
        'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 
        'Decide between using a controlled or uncontrolled input ' + 
        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', 
        owner && owner.getName() || 'A component', 
        props.type);

        didWarnControlledToUncontrolled = true;}}



    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(
      ReactDOMComponentTree.getNodeFromInstance(inst), 
      'checked', 
      checked || false);}



    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {

      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;}} else 

    {
      if (props.value == null && props.defaultValue != null) {
        node.defaultValue = '' + props.defaultValue;}

      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;}}}, 




  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    node.value = node.value; // Detach value from defaultValue

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    node.name = undefined;
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    node.name = name;} };



function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;}


    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll(
    'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || 
      otherNode.form !== rootNode.form) {
        continue;}

      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      invariant(
      otherInstance, 
      'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 
      'same `name` is not supported.');

      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);}}



  return returnValue;}


module.exports = ReactDOMInput;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\DisabledInputUtils.js":138,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\LinkedValueUtils.js":139,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMPropertyOperations.js":160,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"fbjs/lib/invariant":414,"fbjs/lib/warning":424,"object-assign":425}],142:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';var _assign = require('object-assign');

var ReactChildren = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\ReactChildren.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactDOMSelect = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\ReactDOMSelect.js');

var warning = require('fbjs/lib/warning');
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  ReactChildren.forEach(children, function (child) {
    if (child == null) {
      return;}

    if (typeof child === 'string' || typeof child === 'number') {
      content += child;} else 
    if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      warning(
      false, 
      'Only strings and numbers are supported as <option> children.');}});




  return content;}


/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = { 
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (__DEV__) {
      warning(
      props.selected == null, 
      'Use the `defaultValue` or `value` props on <select> instead of ' + 
      'setting `selected` on <option>.');}



    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;}


      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);}}



    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';} else 
      {
        value = flattenChildren(props.children);}

      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;}}} else 


      {
        selected = '' + selectValue === value;}}



    inst._wrapperState = { selected: selected };}, 


  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);}}, 



  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;}


    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;}


    return hostProps;} };




module.exports = ReactDOMOption;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\children\\ReactChildren.js":26,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\ReactDOMSelect.js":143,"fbjs/lib/warning":424,"object-assign":425}],143:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';var _assign = require('object-assign');

var DisabledInputUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\DisabledInputUtils.js');
var LinkedValueUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\LinkedValueUtils.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');

var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnValueNull = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);}}}




function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';}}


  return '';}


function warnIfValueIsNull(props) {
  if (props != null && props.value === null && !didWarnValueNull) {
    warning(
    false, 
    '`value` prop on `select` should not be null. ' + 
    'Consider using the empty string to clear the component or `undefined` ' + 
    'for uncontrolled components.');


    didWarnValueNull = true;}}



var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes(
  'select', 
  props, 
  owner);


  if (props.valueLink !== undefined && !didWarnValueLink) {
    warning(
    false, 
    '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.');

    didWarnValueLink = true;}


  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;}

    if (props.multiple) {
      warning(
      Array.isArray(props[propName]), 
      'The `%s` prop supplied to <select> must be an array if ' + 
      '`multiple` is true.%s', 
      propName, 
      getDeclarationErrorAddendum(owner));} else 

    {
      warning(
      !Array.isArray(props[propName]), 
      'The `%s` prop supplied to <select> must be a scalar ' + 
      'value if `multiple` is false.%s', 
      propName, 
      getDeclarationErrorAddendum(owner));}}}





/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;}

    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;}}} else 


  {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;}}


    if (options.length) {
      options[0].selected = true;}}}




/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = { 
  getHostProps: function (inst, props) {
    return _assign({}, DisabledInputUtils.getHostProps(inst, props), { 
      onChange: inst._wrapperState.onChange, 
      value: undefined });}, 



  mountWrapper: function (inst, props) {
    if (__DEV__) {
      checkSelectPropTypes(inst, props);
      warnIfValueIsNull(props);}


    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = { 
      pendingUpdate: false, 
      initialValue: value != null ? value : props.defaultValue, 
      listeners: null, 
      onChange: _handleChange.bind(inst), 
      wasMultiple: Boolean(props.multiple) };


    if (
    props.value !== undefined && 
    props.defaultValue !== undefined && 
    !didWarnValueDefaultValue) 
    {
      warning(
      false, 
      'Select elements must be either controlled or uncontrolled ' + 
      '(specify either the value prop, or the defaultValue prop, but not ' + 
      'both). Decide between using a controlled or uncontrolled select ' + 
      'element and remove one of these props. More info: ' + 
      'https://fb.me/react-controlled-components');

      didWarnValueDefaultValue = true;}}, 



  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;}, 


  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;
    if (__DEV__) {
      warnIfValueIsNull(props);}


    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);} else 
    if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);} else 
      {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');}}} };





function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;}

  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;}


module.exports = ReactDOMSelect;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\DisabledInputUtils.js":138,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\LinkedValueUtils.js":139,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"fbjs/lib/warning":424,"object-assign":425}],144:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';var _assign = require('object-assign');

var DisabledInputUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\DisabledInputUtils.js');
var LinkedValueUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\LinkedValueUtils.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnValueNull = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);}}



function warnIfValueIsNull(props) {
  if (props != null && props.value === null && !didWarnValueNull) {
    warning(
    false, 
    '`value` prop on `textarea` should not be null. ' + 
    'Consider using the empty string to clear the component or `undefined` ' + 
    'for uncontrolled components.');


    didWarnValueNull = true;}}



/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = { 
  getHostProps: function (inst, props) {
    invariant(
    props.dangerouslySetInnerHTML == null, 
    '`dangerouslySetInnerHTML` does not make sense on <textarea>.');


    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, DisabledInputUtils.getHostProps(inst, props), { 
      value: undefined, 
      defaultValue: undefined, 
      children: '' + inst._wrapperState.initialValue, 
      onChange: inst._wrapperState.onChange });


    return hostProps;}, 


  mountWrapper: function (inst, props) {
    if (__DEV__) {
      LinkedValueUtils.checkPropTypes(
      'textarea', 
      props, 
      inst._currentElement._owner);

      if (props.valueLink !== undefined && !didWarnValueLink) {
        warning(
        false, 
        '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.');

        didWarnValueLink = true;}

      if (
      props.value !== undefined && 
      props.defaultValue !== undefined && 
      !didWarnValDefaultVal) 
      {
        warning(
        false, 
        'Textarea elements must be either controlled or uncontrolled ' + 
        '(specify either the value prop, or the defaultValue prop, but not ' + 
        'both). Decide between using a controlled or uncontrolled textarea ' + 
        'and remove one of these props. More info: ' + 
        'https://fb.me/react-controlled-components');

        didWarnValDefaultVal = true;}

      warnIfValueIsNull(props);}



    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (__DEV__) {
          warning(
          false, 
          'Use the `defaultValue` or `value` props instead of setting ' + 
          'children on <textarea>.');}


        invariant(
        defaultValue == null, 
        'If you supply `defaultValue` on a <textarea>, do not pass children.');

        if (Array.isArray(children)) {
          invariant(
          children.length <= 1, 
          '<textarea> can only have at most one child.');

          children = children[0];}


        defaultValue = '' + children;}

      if (defaultValue == null) {
        defaultValue = '';}

      initialValue = defaultValue;}


    inst._wrapperState = { 
      initialValue: '' + initialValue, 
      listeners: null, 
      onChange: _handleChange.bind(inst) };}, 



  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (__DEV__) {
      warnIfValueIsNull(props);}


    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;}

      if (props.defaultValue == null) {
        node.defaultValue = newValue;}}


    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;}}, 



  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    node.value = node.value; // Detach value from defaultValue
  } };


function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;}


module.exports = ReactDOMTextarea;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\DisabledInputUtils.js":138,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\LinkedValueUtils.js":139,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"fbjs/lib/invariant":414,"fbjs/lib/warning":424,"object-assign":425}],145:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';


describe('DisabledInputUtils', function () {
  var React;
  var ReactDOM;
  var ReactTestUtils;

  var elements = ['button', 'input', 'select', 'textarea'];

  function expectClickThru(element) {
    onClick.mockClear();
    ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(element));
    expect(onClick.mock.calls.length).toBe(1);}


  function expectNoClickThru(element) {
    onClick.mockClear();
    ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(element));
    expect(onClick.mock.calls.length).toBe(0);}


  function mounted(element) {
    element = ReactTestUtils.renderIntoDocument(element);
    return element;}


  var onClick = jest.fn();

  elements.forEach(function (tagName) {

    describe(tagName, function () {

      beforeEach(function () {
        React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
        ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
        ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


      it('should forward clicks when it starts out not disabled', function () {
        var element = React.createElement(tagName, { 
          onClick: onClick });


        expectClickThru(mounted(element));});


      it('should not forward clicks when it starts out disabled', function () {
        var element = React.createElement(tagName, { 
          onClick: onClick, 
          disabled: true });


        expectNoClickThru(mounted(element));});


      it('should forward clicks when it becomes not disabled', function () {
        var container = document.createElement('div');
        var element = ReactDOM.render(
        React.createElement(tagName, { onClick: onClick, disabled: true }), 
        container);

        element = ReactDOM.render(
        React.createElement(tagName, { onClick: onClick }), 
        container);

        expectClickThru(element);});


      it('should not forward clicks when it becomes disabled', function () {
        var container = document.createElement('div');
        var element = ReactDOM.render(
        React.createElement(tagName, { onClick: onClick }), 
        container);

        element = ReactDOM.render(
        React.createElement(tagName, { onClick: onClick, disabled: true }), 
        container);

        expectNoClickThru(element);});


      it('should work correctly if the listener is changed', function () {
        var container = document.createElement('div');
        var element = ReactDOM.render(
        React.createElement(tagName, { onClick: onClick, disabled: true }), 
        container);

        element = ReactDOM.render(
        React.createElement(tagName, { onClick: onClick, disabled: false }), 
        container);

        expectClickThru(element);});});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],146:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

describe('ReactDOMIframe', function () {
  var React;
  var ReactDOM;
  var ReactTestUtils;

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  it('should trigger load events', function () {
    var onLoadSpy = jasmine.createSpy();
    var iframe = React.createElement('iframe', { onLoad: onLoadSpy });
    iframe = ReactTestUtils.renderIntoDocument(iframe);

    var loadEvent = document.createEvent('Event');
    loadEvent.initEvent('load', false, false);

    ReactDOM.findDOMNode(iframe).dispatchEvent(loadEvent);

    expect(onLoadSpy).toHaveBeenCalled();});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],147:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\wrappers\\__tests__\\ReactDOMInput-test.js';


var emptyFunction = require('fbjs/lib/emptyFunction');

describe('ReactDOMInput', function () {
  var EventConstants;
  var React;
  var ReactDOM;
  var ReactDOMServer;
  var ReactDOMFeatureFlags;
  var ReactLink;
  var ReactTestUtils;
  var inputValueTracking;

  function setUntrackedValue(elem, value) {
    var tracker = inputValueTracking._getTrackerFromNode(elem);
    var current = tracker.getValue();
    elem.value = value;
    tracker.setValue(current);}


  beforeEach(function () {
    jest.resetModuleRegistry();
    EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');
    ReactDOMFeatureFlags = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMFeatureFlags.js');
    ReactLink = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\ReactLink.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    inputValueTracking = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\inputValueTracking.js');
    spyOn(console, 'error');});


  it('should display `defaultValue` of number 0', function () {
    var stub = React.createElement('input', { type: 'text', defaultValue: 0, __source: { fileName: _jsxFileName, lineNumber: 48 } });
    stub = ReactTestUtils.renderIntoDocument(stub);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.getAttribute('value')).toBe('0');
    expect(node.value).toBe('0');});


  it('should display "true" for `defaultValue` of `true`', function () {
    var stub = React.createElement('input', { type: 'text', defaultValue: true, __source: { fileName: _jsxFileName, lineNumber: 57 } });
    stub = ReactTestUtils.renderIntoDocument(stub);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.value).toBe('true');});


  it('should display "false" for `defaultValue` of `false`', function () {
    var stub = React.createElement('input', { type: 'text', defaultValue: false, __source: { fileName: _jsxFileName, lineNumber: 65 } });
    stub = ReactTestUtils.renderIntoDocument(stub);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.value).toBe('false');});


  it('should update `defaultValue` for uncontrolled input', function () {
    var container = document.createElement('div');

    var node = ReactDOM.render(React.createElement('input', { type: 'text', defaultValue: '0', __source: { fileName: _jsxFileName, lineNumber: 75 } }), container);

    expect(node.value).toBe('0');

    ReactDOM.render(React.createElement('input', { type: 'text', defaultValue: '1', __source: { fileName: _jsxFileName, lineNumber: 79 } }), container);

    expect(node.value).toBe('0');
    expect(node.defaultValue).toBe('1');});


  it('should take `defaultValue` when changing to uncontrolled input', function () {
    var container = document.createElement('div');

    var node = ReactDOM.render(React.createElement('input', { type: 'text', value: '0', readOnly: 'true', __source: { fileName: _jsxFileName, lineNumber: 88 } }), container);

    expect(node.value).toBe('0');

    ReactDOM.render(React.createElement('input', { type: 'text', defaultValue: '1', __source: { fileName: _jsxFileName, lineNumber: 92 } }), container);

    expect(node.value).toBe('0');});


  it('should render defaultValue for SSR', function () {
    var markup = ReactDOMServer.renderToString(React.createElement('input', { type: 'text', defaultValue: '1', __source: { fileName: _jsxFileName, lineNumber: 98 } }));
    var div = document.createElement('div');
    div.innerHTML = markup;
    expect(div.firstChild.getAttribute('value')).toBe('1');
    expect(div.firstChild.getAttribute('defaultValue')).toBe(null);});


  it('should render value for SSR', function () {
    var element = React.createElement('input', { type: 'text', value: '1', onChange: function () {}, __source: { fileName: _jsxFileName, lineNumber: 106 } });
    var markup = ReactDOMServer.renderToString(element);
    var div = document.createElement('div');
    div.innerHTML = markup;
    expect(div.firstChild.getAttribute('value')).toBe('1');
    expect(div.firstChild.getAttribute('defaultValue')).toBe(null);});


  it('should display "foobar" for `defaultValue` of `objToString`', function () {
    var objToString = { 
      toString: function () {
        return 'foobar';} };



    var stub = React.createElement('input', { type: 'text', defaultValue: objToString, __source: { fileName: _jsxFileName, lineNumber: 121 } });
    stub = ReactTestUtils.renderIntoDocument(stub);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.value).toBe('foobar');});


  it('should display `value` of number 0', function () {
    var stub = React.createElement('input', { type: 'text', value: 0, __source: { fileName: _jsxFileName, lineNumber: 129 } });
    stub = ReactTestUtils.renderIntoDocument(stub);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.value).toBe('0');});


  it('should allow setting `value` to `true`', function () {
    var container = document.createElement('div');
    var stub = React.createElement('input', { type: 'text', value: 'yolo', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 138 } });
    var node = ReactDOM.render(stub, container);

    expect(node.value).toBe('yolo');

    stub = ReactDOM.render(
    React.createElement('input', { type: 'text', value: true, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 144 } }), 
    container);

    expect(node.value).toEqual('true');});


  it('should allow setting `value` to `false`', function () {
    var container = document.createElement('div');
    var stub = React.createElement('input', { type: 'text', value: 'yolo', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 152 } });
    var node = ReactDOM.render(stub, container);

    expect(node.value).toBe('yolo');

    stub = ReactDOM.render(
    React.createElement('input', { type: 'text', value: false, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 158 } }), 
    container);

    expect(node.value).toEqual('false');});


  it('should allow setting `value` to `objToString`', function () {
    var container = document.createElement('div');
    var stub = React.createElement('input', { type: 'text', value: 'foo', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 166 } });
    var node = ReactDOM.render(stub, container);

    expect(node.value).toBe('foo');

    var objToString = { 
      toString: function () {
        return 'foobar';} };


    stub = ReactDOM.render(
    React.createElement('input', { type: 'text', value: objToString, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 177 } }), 
    container);

    expect(node.value).toEqual('foobar');});


  it('should not incur unnecessary DOM mutations', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement('input', { value: 'a', __source: { fileName: _jsxFileName, lineNumber: 185 } }), container);

    var node = container.firstChild;
    var nodeValue = 'a';
    var nodeValueSetter = jest.genMockFn();
    Object.defineProperty(node, 'value', { 
      get: function () {
        return nodeValue;}, 

      set: nodeValueSetter.mockImplementation(function (newValue) {
        nodeValue = newValue;}) });



    ReactDOM.render(React.createElement('input', { value: 'a', __source: { fileName: _jsxFileName, lineNumber: 199 } }), container);
    expect(nodeValueSetter.mock.calls.length).toBe(0);

    ReactDOM.render(React.createElement('input', { value: 'b', __source: { fileName: _jsxFileName, lineNumber: 202 } }), container);
    expect(nodeValueSetter.mock.calls.length).toBe(1);});


  it('should properly control a value of number `0`', function () {
    var stub = React.createElement('input', { type: 'text', value: 0, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 207 } });
    stub = ReactTestUtils.renderIntoDocument(stub);
    var node = ReactDOM.findDOMNode(stub);

    node.value = 'giraffe';
    ReactTestUtils.Simulate.change(node);
    expect(node.value).toBe('0');});


  it('should have the correct target value', function () {
    var handled = false;
    var handler = function (event) {
      expect(event.target.nodeName).toBe('INPUT');
      handled = true;};

    var stub = React.createElement('input', { type: 'text', value: 0, onChange: handler, __source: { fileName: _jsxFileName, lineNumber: 222 } });
    var container = document.createElement('div');
    var node = ReactDOM.render(stub, container);

    setUntrackedValue(node, 'giraffe');

    var fakeNativeEvent = new function () {}();
    fakeNativeEvent.target = node;
    fakeNativeEvent.path = [node, container];
    ReactTestUtils.simulateNativeEventOnNode(
    EventConstants.topLevelTypes.topInput, 
    node, 
    fakeNativeEvent);


    expect(handled).toBe(true);});


  it('should not set a value for submit buttons unnecessarily', function () {
    var stub = React.createElement('input', { type: 'submit', __source: { fileName: _jsxFileName, lineNumber: 241 } });
    stub = ReactTestUtils.renderIntoDocument(stub);
    var node = ReactDOM.findDOMNode(stub);

    // The value shouldn't be '', or else the button will have no text; it
    // should have the default "Submit" or "Submit Query" label. Most browsers
    // report this as not having a `value` attribute at all; IE reports it as
    // the actual label that the user sees.
    expect(
    !node.hasAttribute('value') || node.getAttribute('value').length > 0).
    toBe(true);});


  it('should control radio buttons', function () {
    var RadioGroup = React.createClass({ displayName: 'RadioGroup', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 258 } }, 
          React.createElement('input', { 
            ref: 'a', 
            type: 'radio', 
            name: 'fruit', 
            checked: true, 
            onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 259 } }), 'A', 

          React.createElement('input', { 
            ref: 'b', 
            type: 'radio', 
            name: 'fruit', 
            onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 266 } }), 'B', 


          React.createElement('form', { __source: { fileName: _jsxFileName, lineNumber: 273 } }, 
          React.createElement('input', { 
            ref: 'c', 
            type: 'radio', 
            name: 'fruit', 
            defaultChecked: true, 
            onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 274 } }))));} });







    var stub = ReactTestUtils.renderIntoDocument(React.createElement(RadioGroup, { __source: { fileName: _jsxFileName, lineNumber: 287 } }));
    var aNode = ReactDOM.findDOMNode(stub.refs.a);
    var bNode = ReactDOM.findDOMNode(stub.refs.b);
    var cNode = ReactDOM.findDOMNode(stub.refs.c);

    expect(aNode.checked).toBe(true);
    expect(bNode.checked).toBe(false);
    // c is in a separate form and shouldn't be affected at all here
    expect(cNode.checked).toBe(true);

    bNode.checked = true;
    // This next line isn't necessary in a proper browser environment, but
    // jsdom doesn't uncheck the others in a group (which makes this whole test
    // a little less effective)
    aNode.checked = false;
    expect(cNode.checked).toBe(true);

    // Now let's run the actual ReactDOMInput change event handler
    ReactTestUtils.Simulate.change(bNode);

    // The original state should have been restored
    expect(aNode.checked).toBe(true);
    expect(cNode.checked).toBe(true);});


  it('should support ReactLink', function () {
    var link = new ReactLink('yolo', jest.fn());
    var instance = React.createElement('input', { type: 'text', valueLink: link, __source: { fileName: _jsxFileName, lineNumber: 314 } });

    instance = ReactTestUtils.renderIntoDocument(instance);

    expect(ReactDOM.findDOMNode(instance).value).toBe('yolo');
    expect(link.value).toBe('yolo');
    expect(link.requestChange.mock.calls.length).toBe(0);

    ReactDOM.findDOMNode(instance).value = 'test';
    ReactTestUtils.Simulate.change(ReactDOM.findDOMNode(instance));

    expect(link.requestChange.mock.calls.length).toBe(1);
    expect(link.requestChange.mock.calls[0][0]).toEqual('test');});


  it('should warn with value and no onChange handler', function () {
    var link = new ReactLink('yolo', jest.fn());
    ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'text', valueLink: link, __source: { fileName: _jsxFileName, lineNumber: 331 } }));
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.');


    ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'text', value: 'zoink', onChange: jest.fn(), __source: { fileName: _jsxFileName, lineNumber: 338 } }));

    expect(console.error.calls.count()).toBe(1);
    ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'text', value: 'zoink', __source: { fileName: _jsxFileName, lineNumber: 341 } }));
    expect(console.error.calls.count()).toBe(2);});


  it('should warn with value and no onChange handler and readOnly specified', function () {
    ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'text', value: 'zoink', readOnly: true, __source: { fileName: _jsxFileName, lineNumber: 347 } }));

    expect(console.error.calls.count()).toBe(0);

    ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'text', value: 'zoink', readOnly: false, __source: { fileName: _jsxFileName, lineNumber: 352 } }));

    expect(console.error.calls.count()).toBe(1);});


  it('should have a this value of undefined if bind is not used', function () {
    var unboundInputOnChange = function () {
      expect(this).toBe(undefined);};


    var instance = React.createElement('input', { type: 'text', onChange: unboundInputOnChange, __source: { fileName: _jsxFileName, lineNumber: 362 } });
    instance = ReactTestUtils.renderIntoDocument(instance);

    ReactTestUtils.Simulate.change(instance);});


  it('should throw if both value and valueLink are provided', function () {
    var node = document.createElement('div');
    var link = new ReactLink('yolo', jest.fn());
    var instance = React.createElement('input', { type: 'text', valueLink: link, __source: { fileName: _jsxFileName, lineNumber: 371 } });

    expect(function () {return ReactDOM.render(instance, node);}).not.toThrow();

    instance = 
    React.createElement('input', { 
      type: 'text', 
      valueLink: link, 
      value: 'test', 
      onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 376 } });

    expect(function () {return ReactDOM.render(instance, node);}).toThrow();

    instance = React.createElement('input', { type: 'text', valueLink: link, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 384 } });
    expect(function () {return ReactDOM.render(instance, node);}).toThrow();});



  it('should support checkedLink', function () {
    var link = new ReactLink(true, jest.fn());
    var instance = React.createElement('input', { type: 'checkbox', checkedLink: link, __source: { fileName: _jsxFileName, lineNumber: 391 } });

    instance = ReactTestUtils.renderIntoDocument(instance);

    expect(ReactDOM.findDOMNode(instance).checked).toBe(true);
    expect(link.value).toBe(true);
    expect(link.requestChange.mock.calls.length).toBe(0);

    ReactDOM.findDOMNode(instance).checked = false;
    ReactTestUtils.Simulate.change(ReactDOM.findDOMNode(instance));

    expect(link.requestChange.mock.calls.length).toBe(1);
    expect(link.requestChange.mock.calls[0][0]).toEqual(false);});


  it('should warn with checked and no onChange handler', function () {
    var node = document.createElement('div');
    var link = new ReactLink(true, jest.fn());
    ReactDOM.render(React.createElement('input', { type: 'checkbox', checkedLink: link, __source: { fileName: _jsxFileName, lineNumber: 409 } }), node);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.');


    ReactTestUtils.renderIntoDocument(
    React.createElement('input', { 
      type: 'checkbox', 
      checked: 'false', 
      onChange: jest.fn(), __source: { fileName: _jsxFileName, lineNumber: 416 } }));


    expect(console.error.calls.count()).toBe(1);

    ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'checkbox', checked: 'false', readOnly: true, __source: { fileName: _jsxFileName, lineNumber: 425 } }));

    expect(console.error.calls.count()).toBe(1);

    ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'checkbox', checked: 'false', __source: { fileName: _jsxFileName, lineNumber: 429 } }));
    expect(console.error.calls.count()).toBe(2);});


  it('should warn with checked and no onChange handler with readOnly specified', function () {
    ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'checkbox', checked: 'false', readOnly: true, __source: { fileName: _jsxFileName, lineNumber: 435 } }));

    expect(console.error.calls.count()).toBe(0);

    ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'checkbox', checked: 'false', readOnly: false, __source: { fileName: _jsxFileName, lineNumber: 440 } }));

    expect(console.error.calls.count()).toBe(1);});


  it('should throw if both checked and checkedLink are provided', function () {
    var node = document.createElement('div');
    var link = new ReactLink(true, jest.fn());
    var instance = React.createElement('input', { type: 'checkbox', checkedLink: link, __source: { fileName: _jsxFileName, lineNumber: 448 } });

    expect(function () {return ReactDOM.render(instance, node);}).not.toThrow();

    instance = 
    React.createElement('input', { 
      type: 'checkbox', 
      checkedLink: link, 
      checked: 'false', 
      onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 453 } });

    expect(function () {return ReactDOM.render(instance, node);}).toThrow();

    instance = 
    React.createElement('input', { type: 'checkbox', checkedLink: link, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 462 } });
    expect(function () {return ReactDOM.render(instance, node);}).toThrow();});



  it('should update defaultValue to empty string', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement('input', { type: 'text', defaultValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 469 } }), container);
    ReactDOM.render(React.createElement('input', { type: 'text', defaultValue: '', __source: { fileName: _jsxFileName, lineNumber: 470 } }), container);
    expect(container.firstChild.defaultValue).toBe('');});


  it('should throw if both checkedLink and valueLink are provided', function () {
    var node = document.createElement('div');
    var link = new ReactLink(true, jest.fn());
    var instance = React.createElement('input', { type: 'checkbox', checkedLink: link, __source: { fileName: _jsxFileName, lineNumber: 477 } });

    expect(function () {return ReactDOM.render(instance, node);}).not.toThrow();

    instance = React.createElement('input', { type: 'checkbox', valueLink: link, __source: { fileName: _jsxFileName, lineNumber: 481 } });
    expect(function () {return ReactDOM.render(instance, node);}).not.toThrow();

    instance = 
    React.createElement('input', { type: 'checkbox', checkedLink: link, valueLink: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 485 } });
    expect(function () {return ReactDOM.render(instance, node);}).toThrow();});


  it('should warn if value is null', function () {
    ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'text', value: null, __source: { fileName: _jsxFileName, lineNumber: 490 } }));
    expect(console.error.calls.argsFor(0)[0]).toContain(
    '`value` prop on `input` should not be null. ' + 
    'Consider using the empty string to clear the component or `undefined` ' + 
    'for uncontrolled components.');


    ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'text', value: null, __source: { fileName: _jsxFileName, lineNumber: 497 } }));
    expect(console.error.calls.count()).toBe(1);});


  it('should warn if checked and defaultChecked props are specified', function () {
    ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'radio', checked: true, defaultChecked: true, readOnly: true, __source: { fileName: _jsxFileName, lineNumber: 503 } }));

    expect(console.error.calls.argsFor(0)[0]).toContain(
    'A component contains an input of type radio with both checked and defaultChecked props. ' + 
    'Input elements must be either controlled or uncontrolled ' + 
    '(specify either the checked prop, or the defaultChecked prop, but not ' + 
    'both). Decide between using a controlled or uncontrolled input ' + 
    'element and remove one of these props. More info: ' + 
    'https://fb.me/react-controlled-components');


    ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'radio', checked: true, defaultChecked: true, readOnly: true, __source: { fileName: _jsxFileName, lineNumber: 515 } }));

    expect(console.error.calls.count()).toBe(1);});


  it('should warn if value and defaultValue props are specified', function () {
    ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'text', value: 'foo', defaultValue: 'bar', readOnly: true, __source: { fileName: _jsxFileName, lineNumber: 522 } }));

    expect(console.error.calls.argsFor(0)[0]).toContain(
    'A component contains an input of type text with both value and defaultValue props. ' + 
    'Input elements must be either controlled or uncontrolled ' + 
    '(specify either the value prop, or the defaultValue prop, but not ' + 
    'both). Decide between using a controlled or uncontrolled input ' + 
    'element and remove one of these props. More info: ' + 
    'https://fb.me/react-controlled-components');


    ReactTestUtils.renderIntoDocument(
    React.createElement('input', { type: 'text', value: 'foo', defaultValue: 'bar', readOnly: true, __source: { fileName: _jsxFileName, lineNumber: 534 } }));

    expect(console.error.calls.count()).toBe(1);});


  it('should warn if controlled input switches to uncontrolled', function () {
    var stub = React.createElement('input', { type: 'text', value: 'controlled', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 540 } });
    var container = document.createElement('div');
    ReactDOM.render(stub, container);
    ReactDOM.render(React.createElement('input', { type: 'text', __source: { fileName: _jsxFileName, lineNumber: 543 } }), container);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'A component is changing a controlled input of type text to be uncontrolled. ' + 
    'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 
    'Decide between using a controlled or uncontrolled input ' + 
    'element for the lifetime of the component. More info: https://fb.me/react-controlled-components');});



  it('should warn if controlled input switches to uncontrolled with defaultValue', function () {
    var stub = React.createElement('input', { type: 'text', value: 'controlled', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 554 } });
    var container = document.createElement('div');
    ReactDOM.render(stub, container);
    ReactDOM.render(React.createElement('input', { type: 'text', defaultValue: 'uncontrolled', __source: { fileName: _jsxFileName, lineNumber: 557 } }), container);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'A component is changing a controlled input of type text to be uncontrolled. ' + 
    'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 
    'Decide between using a controlled or uncontrolled input ' + 
    'element for the lifetime of the component. More info: https://fb.me/react-controlled-components');});



  it('should warn if uncontrolled input switches to controlled', function () {
    var stub = React.createElement('input', { type: 'text', __source: { fileName: _jsxFileName, lineNumber: 568 } });
    var container = document.createElement('div');
    ReactDOM.render(stub, container);
    ReactDOM.render(React.createElement('input', { type: 'text', value: 'controlled', __source: { fileName: _jsxFileName, lineNumber: 571 } }), container);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'A component is changing an uncontrolled input of type text to be controlled. ' + 
    'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 
    'Decide between using a controlled or uncontrolled input ' + 
    'element for the lifetime of the component. More info: https://fb.me/react-controlled-components');});



  it('should warn if controlled checkbox switches to uncontrolled', function () {
    var stub = React.createElement('input', { type: 'checkbox', checked: true, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 582 } });
    var container = document.createElement('div');
    ReactDOM.render(stub, container);
    ReactDOM.render(React.createElement('input', { type: 'checkbox', __source: { fileName: _jsxFileName, lineNumber: 585 } }), container);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'A component is changing a controlled input of type checkbox to be uncontrolled. ' + 
    'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 
    'Decide between using a controlled or uncontrolled input ' + 
    'element for the lifetime of the component. More info: https://fb.me/react-controlled-components');});



  it('should warn if controlled checkbox switches to uncontrolled with defaultChecked', function () {
    var stub = React.createElement('input', { type: 'checkbox', checked: true, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 596 } });
    var container = document.createElement('div');
    ReactDOM.render(stub, container);
    ReactDOM.render(React.createElement('input', { type: 'checkbox', defaultChecked: true, __source: { fileName: _jsxFileName, lineNumber: 599 } }), container);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'A component is changing a controlled input of type checkbox to be uncontrolled. ' + 
    'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 
    'Decide between using a controlled or uncontrolled input ' + 
    'element for the lifetime of the component. More info: https://fb.me/react-controlled-components');});



  it('should warn if uncontrolled checkbox switches to controlled', function () {
    var stub = React.createElement('input', { type: 'checkbox', __source: { fileName: _jsxFileName, lineNumber: 610 } });
    var container = document.createElement('div');
    ReactDOM.render(stub, container);
    ReactDOM.render(React.createElement('input', { type: 'checkbox', checked: true, __source: { fileName: _jsxFileName, lineNumber: 613 } }), container);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'A component is changing an uncontrolled input of type checkbox to be controlled. ' + 
    'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 
    'Decide between using a controlled or uncontrolled input ' + 
    'element for the lifetime of the component. More info: https://fb.me/react-controlled-components');});



  it('should warn if controlled radio switches to uncontrolled', function () {
    var stub = React.createElement('input', { type: 'radio', checked: true, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 624 } });
    var container = document.createElement('div');
    ReactDOM.render(stub, container);
    ReactDOM.render(React.createElement('input', { type: 'radio', __source: { fileName: _jsxFileName, lineNumber: 627 } }), container);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'A component is changing a controlled input of type radio to be uncontrolled. ' + 
    'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 
    'Decide between using a controlled or uncontrolled input ' + 
    'element for the lifetime of the component. More info: https://fb.me/react-controlled-components');});



  it('should warn if controlled radio switches to uncontrolled with defaultChecked', function () {
    var stub = React.createElement('input', { type: 'radio', checked: true, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 638 } });
    var container = document.createElement('div');
    ReactDOM.render(stub, container);
    ReactDOM.render(React.createElement('input', { type: 'radio', defaultChecked: true, __source: { fileName: _jsxFileName, lineNumber: 641 } }), container);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'A component is changing a controlled input of type radio to be uncontrolled. ' + 
    'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 
    'Decide between using a controlled or uncontrolled input ' + 
    'element for the lifetime of the component. More info: https://fb.me/react-controlled-components');});



  it('should warn if uncontrolled radio switches to controlled', function () {
    var stub = React.createElement('input', { type: 'radio', __source: { fileName: _jsxFileName, lineNumber: 652 } });
    var container = document.createElement('div');
    ReactDOM.render(stub, container);
    ReactDOM.render(React.createElement('input', { type: 'radio', checked: true, __source: { fileName: _jsxFileName, lineNumber: 655 } }), container);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'A component is changing an uncontrolled input of type radio to be controlled. ' + 
    'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 
    'Decide between using a controlled or uncontrolled input ' + 
    'element for the lifetime of the component. More info: https://fb.me/react-controlled-components');});



  it('sets type before value always', function () {
    if (!ReactDOMFeatureFlags.useCreateElement) {
      return;}

    var log = [];
    var originalCreateElement = document.createElement;
    spyOn(document, 'createElement').and.callFake(function (type) {
      var el = originalCreateElement.apply(this, arguments);
      if (type === 'input') {
        Object.defineProperty(el, 'value', { 
          get: function () {}, 
          set: function () {
            log.push('set value');} });


        spyOn(el, 'setAttribute').and.callFake(function (name, value) {
          log.push('set ' + name);});}


      return el;});


    ReactTestUtils.renderIntoDocument(React.createElement('input', { value: 'hi', type: 'radio', __source: { fileName: _jsxFileName, lineNumber: 687 } }));
    // Setting value before type does bad things. Make sure we set type first.
    expect(log).toEqual([
    'set data-reactroot', 
    'set type', 
    'set value', 
    'set value', 
    'set name', 
    'set checked', 
    'set checked', 
    'set name']);});



  it('sets value properly with type coming later in props', function () {
    var input = ReactTestUtils.renderIntoDocument(
    React.createElement('input', { value: 'hi', type: 'radio', __source: { fileName: _jsxFileName, lineNumber: 703 } }));

    expect(input.value).toBe('hi');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\ReactLink.js":10,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\inputValueTracking.js":101,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMFeatureFlags.js":169,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"fbjs/lib/emptyFunction":406}],148:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\wrappers\\__tests__\\ReactDOMOption-test.js';


describe('ReactDOMOption', function () {
  var React;
  var ReactDOM;
  var ReactTestUtils;

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  it('should flatten children to a string', function () {
    var stub = React.createElement('option', { __source: { fileName: _jsxFileName, lineNumber: 27 } }, 1, ' ', 'foo');
    stub = ReactTestUtils.renderIntoDocument(stub);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.innerHTML).toBe('1 foo');});


  it('should ignore and warn invalid children types', function () {
    spyOn(console, 'error');
    var stub = React.createElement('option', { __source: { fileName: _jsxFileName, lineNumber: 36 } }, 1, ' ', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 36 } }), ' ', 2);
    stub = ReactTestUtils.renderIntoDocument(stub);
    var node = ReactDOM.findDOMNode(stub);
    expect(node.innerHTML).toBe('1  2');
    ReactTestUtils.renderIntoDocument(React.createElement('option', { __source: { fileName: _jsxFileName, lineNumber: 40 } }, 1, ' ', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 40 } }), ' ', 2));
    // only warn once
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain('Only strings and numbers are supported as <option> children.');});


  it('should ignore null/undefined/false children without warning', function () {
    var stub = React.createElement('option', { __source: { fileName: _jsxFileName, lineNumber: 47 } }, 1, ' ', false, true, null, undefined, ' ', 2);
    spyOn(console, 'error');
    stub = ReactTestUtils.renderIntoDocument(stub);

    var node = ReactDOM.findDOMNode(stub);

    expect(console.error.calls.count()).toBe(0);
    expect(node.innerHTML).toBe('1  2');});


  it('should be able to use dangerouslySetInnerHTML on option', function () {
    var stub = React.createElement('option', { dangerouslySetInnerHTML: { __html: 'foobar' }, __source: { fileName: _jsxFileName, lineNumber: 58 } });
    stub = ReactTestUtils.renderIntoDocument(stub);

    var node = ReactDOM.findDOMNode(stub);
    expect(node.innerHTML).toBe('foobar');});


  it('should set attribute for empty value', function () {
    var container = document.createElement('div');
    var option = ReactDOM.render(React.createElement('option', { value: '', __source: { fileName: _jsxFileName, lineNumber: 67 } }), container);
    expect(option.hasAttribute('value')).toBe(true);
    expect(option.getAttribute('value')).toBe('');

    ReactDOM.render(React.createElement('option', { value: 'lava', __source: { fileName: _jsxFileName, lineNumber: 71 } }), container);
    expect(option.hasAttribute('value')).toBe(true);
    expect(option.getAttribute('value')).toBe('lava');});


  it('should allow ignoring `value` on option', function () {
    var a = 'a';
    var stub = 
    React.createElement('select', { value: 'giraffe', onChange: function () {}, __source: { fileName: _jsxFileName, lineNumber: 79 } }, 
    React.createElement('option', { __source: { fileName: _jsxFileName, lineNumber: 80 } }, 'monkey'), 
    React.createElement('option', { __source: { fileName: _jsxFileName, lineNumber: 81 } }, 'gir', a, 'ffe'), 
    React.createElement('option', { __source: { fileName: _jsxFileName, lineNumber: 82 } }, 'gorill', a));

    var options = stub.props.children;
    var container = document.createElement('div');
    stub = ReactDOM.render(stub, container);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.selectedIndex).toBe(1);

    ReactDOM.render(
    React.createElement('select', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 92 } }, options), 
    container);

    expect(node.selectedIndex).toEqual(2);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],149:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\wrappers\\__tests__\\ReactDOMSelect-test.js';


describe('ReactDOMSelect', function () {
  var React;
  var ReactDOM;
  var ReactDOMServer;
  var ReactLink;
  var ReactTestUtils;

  var noop = function () {};

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');
    ReactLink = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\ReactLink.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  it('should allow setting `defaultValue`', function () {
    var stub = 
    React.createElement('select', { defaultValue: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 34 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 35 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 36 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 37 } }, 'A gorilla!'));

    var options = stub.props.children;
    var container = document.createElement('div');
    stub = ReactDOM.render(stub, container);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.value).toBe('giraffe');

    // Changing `defaultValue` should do nothing.
    ReactDOM.render(
    React.createElement('select', { defaultValue: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 48 } }, options), 
    container);

    expect(node.value).toEqual('giraffe');});


  it('should not throw with `defaultValue` and without children', function () {
    var stub = React.createElement('select', { defaultValue: 'dummy', __source: { fileName: _jsxFileName, lineNumber: 55 } });

    expect(function () {
      ReactTestUtils.renderIntoDocument(stub);}).
    not.toThrow();});


  it('should not control when using `defaultValue`', function () {
    var el = 
    React.createElement('select', { defaultValue: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 64 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 65 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 66 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 67 } }, 'A gorilla!'));

    var container = document.createElement('div');
    var stub = ReactDOM.render(el, container);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.value).toBe('giraffe');

    node.value = 'monkey';
    ReactDOM.render(el, container);
    // Uncontrolled selects shouldn't change the value after first mounting
    expect(node.value).toEqual('monkey');});


  it('should allow setting `defaultValue` with multiple', function () {
    var stub = 
    React.createElement('select', { multiple: true, defaultValue: ['giraffe', 'gorilla'], __source: { fileName: _jsxFileName, lineNumber: 83 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 84 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 85 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 86 } }, 'A gorilla!'));

    var options = stub.props.children;
    var container = document.createElement('div');
    stub = ReactDOM.render(stub, container);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(true); // giraffe
    expect(node.options[2].selected).toBe(true); // gorilla

    // Changing `defaultValue` should do nothing.
    ReactDOM.render(
    React.createElement('select', { multiple: true, defaultValue: ['monkey'], __source: { fileName: _jsxFileName, lineNumber: 99 } }, options), 
    container);


    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(true); // giraffe
    expect(node.options[2].selected).toBe(true); // gorilla
  });

  it('should allow setting `value`', function () {
    var stub = 
    React.createElement('select', { value: 'giraffe', onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 110 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 111 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 112 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 113 } }, 'A gorilla!'));

    var options = stub.props.children;
    var container = document.createElement('div');
    stub = ReactDOM.render(stub, container);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.value).toBe('giraffe');

    // Changing the `value` prop should change the selected option.
    ReactDOM.render(
    React.createElement('select', { value: 'gorilla', onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 124 } }, options), 
    container);

    expect(node.value).toEqual('gorilla');});


  it('should not throw with `value` and without children', function () {
    var stub = React.createElement('select', { value: 'dummy', onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 131 } });

    expect(function () {
      ReactTestUtils.renderIntoDocument(stub);}).
    not.toThrow();});


  it('should allow setting `value` with multiple', function () {
    var stub = 
    React.createElement('select', { multiple: true, value: ['giraffe', 'gorilla'], onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 140 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 141 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 142 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 143 } }, 'A gorilla!'));

    var options = stub.props.children;
    var container = document.createElement('div');
    stub = ReactDOM.render(stub, container);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(true); // giraffe
    expect(node.options[2].selected).toBe(true); // gorilla

    // Changing the `value` prop should change the selected options.
    ReactDOM.render(
    React.createElement('select', { multiple: true, value: ['monkey'], onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 156 } }, 
    options), 

    container);


    expect(node.options[0].selected).toBe(true); // monkey
    expect(node.options[1].selected).toBe(false); // giraffe
    expect(node.options[2].selected).toBe(false); // gorilla
  });

  it('should not select other options automatically', function () {
    var stub = 
    React.createElement('select', { multiple: true, value: ['12'], onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 169 } }, 
    React.createElement('option', { value: '1', __source: { fileName: _jsxFileName, lineNumber: 170 } }, 'one'), 
    React.createElement('option', { value: '2', __source: { fileName: _jsxFileName, lineNumber: 171 } }, 'two'), 
    React.createElement('option', { value: '12', __source: { fileName: _jsxFileName, lineNumber: 172 } }, 'twelve'));

    stub = ReactTestUtils.renderIntoDocument(stub);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.options[0].selected).toBe(false); // one
    expect(node.options[1].selected).toBe(false); // two
    expect(node.options[2].selected).toBe(true); // twelve
  });

  it('should reset child options selected when they are changed and `value` is set', function () {
    var stub = React.createElement('select', { multiple: true, value: ['a', 'b'], onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 183 } });
    var container = document.createElement('div');
    stub = ReactDOM.render(stub, container);

    ReactDOM.render(
    React.createElement('select', { multiple: true, value: ['a', 'b'], onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 188 } }, 
    React.createElement('option', { value: 'a', __source: { fileName: _jsxFileName, lineNumber: 189 } }, 'a'), 
    React.createElement('option', { value: 'b', __source: { fileName: _jsxFileName, lineNumber: 190 } }, 'b'), 
    React.createElement('option', { value: 'c', __source: { fileName: _jsxFileName, lineNumber: 191 } }, 'c')), 

    container);


    var node = ReactDOM.findDOMNode(stub);

    expect(node.options[0].selected).toBe(true); // a
    expect(node.options[1].selected).toBe(true); // b
    expect(node.options[2].selected).toBe(false); // c
  });

  it('should allow setting `value` with `objectToString`', function () {
    var objectToString = { 
      animal: 'giraffe', 
      toString: function () {
        return this.animal;} };



    var el = 
    React.createElement('select', { multiple: true, value: [objectToString], onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 212 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 213 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 214 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 215 } }, 'A gorilla!'));

    var container = document.createElement('div');
    var stub = ReactDOM.render(el, container);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(true); // giraffe
    expect(node.options[2].selected).toBe(false); // gorilla

    // Changing the `value` prop should change the selected options.
    objectToString.animal = 'monkey';

    var el2 = 
    React.createElement('select', { multiple: true, value: [objectToString], __source: { fileName: _jsxFileName, lineNumber: 229 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 230 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 231 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 232 } }, 'A gorilla!'));

    ReactDOM.render(el2, container);

    expect(node.options[0].selected).toBe(true); // monkey
    expect(node.options[1].selected).toBe(false); // giraffe
    expect(node.options[2].selected).toBe(false); // gorilla
  });

  it('should allow switching to multiple', function () {
    var stub = 
    React.createElement('select', { defaultValue: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 243 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 244 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 245 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 246 } }, 'A gorilla!'));

    var options = stub.props.children;
    var container = document.createElement('div');
    stub = ReactDOM.render(stub, container);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(true); // giraffe
    expect(node.options[2].selected).toBe(false); // gorilla

    // When making it multiple, giraffe and gorilla should be selected
    ReactDOM.render(
    React.createElement('select', { multiple: true, defaultValue: ['giraffe', 'gorilla'], __source: { fileName: _jsxFileName, lineNumber: 259 } }, 
    options), 

    container);


    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(true); // giraffe
    expect(node.options[2].selected).toBe(true); // gorilla
  });

  it('should allow switching from multiple', function () {
    var stub = 
    React.createElement('select', { multiple: true, defaultValue: ['giraffe', 'gorilla'], __source: { fileName: _jsxFileName, lineNumber: 272 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 273 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 274 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 275 } }, 'A gorilla!'));

    var options = stub.props.children;
    var container = document.createElement('div');
    stub = ReactDOM.render(stub, container);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(true); // giraffe
    expect(node.options[2].selected).toBe(true); // gorilla

    // When removing multiple, defaultValue is applied again, being omitted
    // means that "monkey" will be selected
    ReactDOM.render(
    React.createElement('select', { defaultValue: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 289 } }, options), 
    container);



    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(false); // giraffe
    expect(node.options[2].selected).toBe(true); // gorilla
  });

  it('should remember value when switching to uncontrolled', function () {
    var stub = 
    React.createElement('select', { value: 'giraffe', onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 301 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 302 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 303 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 304 } }, 'A gorilla!'));

    var options = stub.props.children;
    var container = document.createElement('div');
    stub = ReactDOM.render(stub, container);
    var node = ReactDOM.findDOMNode(stub);

    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(true); // giraffe
    expect(node.options[2].selected).toBe(false); // gorilla

    ReactDOM.render(React.createElement('select', { __source: { fileName: _jsxFileName, lineNumber: 315 } }, options), container);

    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(true); // giraffe
    expect(node.options[2].selected).toBe(false); // gorilla
  });

  it('should remember updated value when switching to uncontrolled', function () {
    var stub = 
    React.createElement('select', { value: 'giraffe', onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 324 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 325 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 326 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 327 } }, 'A gorilla!'));

    var options = stub.props.children;
    var container = document.createElement('div');
    stub = ReactDOM.render(stub, container);
    var node = ReactDOM.findDOMNode(stub);

    ReactDOM.render(
    React.createElement('select', { value: 'gorilla', onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 335 } }, options), 
    container);


    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(false); // giraffe
    expect(node.options[2].selected).toBe(true); // gorilla

    ReactDOM.render(React.createElement('select', { __source: { fileName: _jsxFileName, lineNumber: 343 } }, options), container);

    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(false); // giraffe
    expect(node.options[2].selected).toBe(true); // gorilla
  });

  it('should support ReactLink', function () {
    var link = new ReactLink('giraffe', jest.fn());
    var stub = 
    React.createElement('select', { valueLink: link, __source: { fileName: _jsxFileName, lineNumber: 353 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 354 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 355 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 356 } }, 'A gorilla!'));


    spyOn(console, 'error');

    stub = ReactTestUtils.renderIntoDocument(stub);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.');


    var node = ReactDOM.findDOMNode(stub);

    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(true); // giraffe
    expect(node.options[2].selected).toBe(false); // gorilla
    expect(link.requestChange.mock.calls.length).toBe(0);

    node.options[1].selected = false;
    node.options[2].selected = true;
    ReactTestUtils.Simulate.change(node);

    expect(link.requestChange.mock.calls.length).toBe(1);
    expect(link.requestChange.mock.calls[0][0]).toEqual('gorilla');});



  it('should support server-side rendering', function () {
    var stub = 
    React.createElement('select', { value: 'giraffe', onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 386 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 387 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 388 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 389 } }, 'A gorilla!'));

    var markup = ReactDOMServer.renderToString(stub);
    expect(markup).toContain('<option selected="" value="giraffe"');
    expect(markup).not.toContain('<option selected="" value="monkey"');
    expect(markup).not.toContain('<option selected="" value="gorilla"');});


  it('should support server-side rendering with defaultValue', function () {
    var stub = 
    React.createElement('select', { defaultValue: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 399 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 400 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 401 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 402 } }, 'A gorilla!'));

    var markup = ReactDOMServer.renderToString(stub);
    expect(markup).toContain('<option selected="" value="giraffe"');
    expect(markup).not.toContain('<option selected="" value="monkey"');
    expect(markup).not.toContain('<option selected="" value="gorilla"');});


  it('should support server-side rendering with multiple', function () {
    var stub = 
    React.createElement('select', { multiple: true, value: ['giraffe', 'gorilla'], onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 412 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 413 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 414 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 415 } }, 'A gorilla!'));

    var markup = ReactDOMServer.renderToString(stub);
    expect(markup).toContain('<option selected="" value="giraffe"');
    expect(markup).toContain('<option selected="" value="gorilla"');
    expect(markup).not.toContain('<option selected="" value="monkey"');});


  it('should not control defaultValue if readding options', function () {
    var container = document.createElement('div');

    var select = ReactDOM.render(
    React.createElement('select', { multiple: true, defaultValue: ['giraffe'], __source: { fileName: _jsxFileName, lineNumber: 427 } }, 
    React.createElement('option', { key: 'monkey', value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 428 } }, 'A monkey!'), 
    React.createElement('option', { key: 'giraffe', value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 429 } }, 'A giraffe!'), 
    React.createElement('option', { key: 'gorilla', value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 430 } }, 'A gorilla!')), 

    container);

    var node = ReactDOM.findDOMNode(select);

    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(true); // giraffe
    expect(node.options[2].selected).toBe(false); // gorilla

    ReactDOM.render(
    React.createElement('select', { multiple: true, defaultValue: ['giraffe'], __source: { fileName: _jsxFileName, lineNumber: 441 } }, 
    React.createElement('option', { key: 'monkey', value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 442 } }, 'A monkey!'), 
    React.createElement('option', { key: 'gorilla', value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 443 } }, 'A gorilla!')), 

    container);


    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(false); // gorilla

    ReactDOM.render(
    React.createElement('select', { multiple: true, defaultValue: ['giraffe'], __source: { fileName: _jsxFileName, lineNumber: 452 } }, 
    React.createElement('option', { key: 'monkey', value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 453 } }, 'A monkey!'), 
    React.createElement('option', { key: 'giraffe', value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 454 } }, 'A giraffe!'), 
    React.createElement('option', { key: 'gorilla', value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 455 } }, 'A gorilla!')), 

    container);


    expect(node.options[0].selected).toBe(false); // monkey
    expect(node.options[1].selected).toBe(false); // giraffe
    expect(node.options[2].selected).toBe(false); // gorilla
  });

  it('should warn if value is null', function () {
    spyOn(console, 'error');

    ReactTestUtils.renderIntoDocument(React.createElement('select', { value: null, __source: { fileName: _jsxFileName, lineNumber: 468 } }, React.createElement('option', { value: 'test', __source: { fileName: _jsxFileName, lineNumber: 468 } })));
    expect(console.error.calls.argsFor(0)[0]).toContain(
    '`value` prop on `select` should not be null. ' + 
    'Consider using the empty string to clear the component or `undefined` ' + 
    'for uncontrolled components.');


    ReactTestUtils.renderIntoDocument(React.createElement('select', { value: null, __source: { fileName: _jsxFileName, lineNumber: 475 } }, React.createElement('option', { value: 'test', __source: { fileName: _jsxFileName, lineNumber: 475 } })));
    expect(console.error.calls.count()).toBe(1);});


  it('should refresh state on change', function () {
    var stub = 
    React.createElement('select', { value: 'giraffe', onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 481 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 482 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 483 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 484 } }, 'A gorilla!'));

    stub = ReactTestUtils.renderIntoDocument(stub);
    var node = ReactDOM.findDOMNode(stub);

    ReactTestUtils.Simulate.change(node);

    expect(node.value).toBe('giraffe');});


  it('should warn if value and defaultValue props are specified', function () {
    spyOn(console, 'error');
    ReactTestUtils.renderIntoDocument(
    React.createElement('select', { value: 'giraffe', defaultValue: 'giraffe', readOnly: true, __source: { fileName: _jsxFileName, lineNumber: 497 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 498 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 499 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 500 } }, 'A gorilla!')));


    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Select elements must be either controlled or uncontrolled ' + 
    '(specify either the value prop, or the defaultValue prop, but not ' + 
    'both). Decide between using a controlled or uncontrolled select ' + 
    'element and remove one of these props. More info: ' + 
    'https://fb.me/react-controlled-components');


    ReactTestUtils.renderIntoDocument(
    React.createElement('select', { value: 'giraffe', defaultValue: 'giraffe', readOnly: true, __source: { fileName: _jsxFileName, lineNumber: 512 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 513 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 514 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 515 } }, 'A gorilla!')));


    expect(console.error.calls.count()).toBe(1);});


  it('should be able to safely remove select onChange', function () {
    function changeView() {
      ReactDOM.unmountComponentAtNode(container);}


    var container = document.createElement('div');
    var stub = 
    React.createElement('select', { value: 'giraffe', onChange: changeView, __source: { fileName: _jsxFileName, lineNumber: 528 } }, 
    React.createElement('option', { value: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 529 } }, 'A monkey!'), 
    React.createElement('option', { value: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 530 } }, 'A giraffe!'), 
    React.createElement('option', { value: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 531 } }, 'A gorilla!'));

    stub = ReactDOM.render(stub, container);
    var node = ReactDOM.findDOMNode(stub);

    expect(function () {return ReactTestUtils.Simulate.change(node);}).not.toThrow(
    "Cannot set property 'pendingUpdate' of null");});



  it('should select grandchild options nested inside an optgroup', function () {
    var stub = 
    React.createElement('select', { value: 'b', onChange: noop, __source: { fileName: _jsxFileName, lineNumber: 543 } }, 
    React.createElement('optgroup', { label: 'group', __source: { fileName: _jsxFileName, lineNumber: 544 } }, 
    React.createElement('option', { value: 'a', __source: { fileName: _jsxFileName, lineNumber: 545 } }, 'a'), 
    React.createElement('option', { value: 'b', __source: { fileName: _jsxFileName, lineNumber: 546 } }, 'b'), 
    React.createElement('option', { value: 'c', __source: { fileName: _jsxFileName, lineNumber: 547 } }, 'c')));


    var container = document.createElement('div');
    var node = ReactDOM.render(stub, container);

    expect(node.options[0].selected).toBe(false); // a
    expect(node.options[1].selected).toBe(true); // b
    expect(node.options[2].selected).toBe(false); // c
  });});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\ReactLink.js":10,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],150:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\client\\wrappers\\__tests__\\ReactDOMTextarea-test.js';

var emptyFunction = require('fbjs/lib/emptyFunction');

describe('ReactDOMTextarea', function () {
  var React;
  var ReactDOM;
  var ReactDOMServer;
  var ReactLink;
  var ReactTestUtils;

  var renderTextarea;

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');
    ReactLink = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\ReactLink.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

    renderTextarea = function (component, container) {
      if (!container) {
        container = document.createElement('div');}

      var node = ReactDOM.render(component, container);

      // Fixing jsdom's quirky behavior -- in reality, the parser should strip
      // off the leading newline but we need to do it by hand here.
      node.defaultValue = node.innerHTML.replace(/^\n/, '');
      return node;};});



  it('should allow setting `defaultValue`', function () {
    var container = document.createElement('div');
    var node = renderTextarea(React.createElement('textarea', { defaultValue: 'giraffe', __source: { fileName: _jsxFileName, lineNumber: 47 } }), container);

    expect(node.value).toBe('giraffe');

    // Changing `defaultValue` should do nothing.
    renderTextarea(React.createElement('textarea', { defaultValue: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 52 } }), container);
    expect(node.value).toEqual('giraffe');

    node.value = 'cat';

    renderTextarea(React.createElement('textarea', { defaultValue: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 57 } }), container);
    expect(node.value).toEqual('cat');});


  it('should display `defaultValue` of number 0', function () {
    var stub = React.createElement('textarea', { defaultValue: 0, __source: { fileName: _jsxFileName, lineNumber: 62 } });
    var node = renderTextarea(stub);

    expect(node.value).toBe('0');});


  it('should display "false" for `defaultValue` of `false`', function () {
    var stub = React.createElement('textarea', { defaultValue: false, __source: { fileName: _jsxFileName, lineNumber: 69 } });
    var node = renderTextarea(stub);

    expect(node.value).toBe('false');});


  it('should display "foobar" for `defaultValue` of `objToString`', function () {
    var objToString = { 
      toString: function () {
        return 'foobar';} };



    var stub = React.createElement('textarea', { defaultValue: objToString, __source: { fileName: _jsxFileName, lineNumber: 82 } });
    var node = renderTextarea(stub);

    expect(node.value).toBe('foobar');});


  it('should set defaultValue', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement('textarea', { defaultValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 90 } }), container);
    ReactDOM.render(React.createElement('textarea', { defaultValue: 'bar', __source: { fileName: _jsxFileName, lineNumber: 91 } }), container);
    ReactDOM.render(React.createElement('textarea', { defaultValue: 'noise', __source: { fileName: _jsxFileName, lineNumber: 92 } }), container);
    expect(container.firstChild.defaultValue).toBe('noise');});


  it('should not render value as an attribute', function () {
    var stub = React.createElement('textarea', { value: 'giraffe', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 97 } });
    var node = renderTextarea(stub);

    expect(node.getAttribute('value')).toBe(null);});


  it('should display `value` of number 0', function () {
    var stub = React.createElement('textarea', { value: 0, __source: { fileName: _jsxFileName, lineNumber: 104 } });
    var node = renderTextarea(stub);

    expect(node.value).toBe('0');});


  it('should update defaultValue to empty string', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement('textarea', { defaultValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 112 } }), container);
    ReactDOM.render(React.createElement('textarea', { defaultValue: '', __source: { fileName: _jsxFileName, lineNumber: 113 } }), container);
    expect(container.firstChild.defaultValue).toBe('');});


  it('should allow setting `value` to `giraffe`', function () {
    var container = document.createElement('div');
    var stub = React.createElement('textarea', { value: 'giraffe', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 119 } });
    var node = renderTextarea(stub, container);

    expect(node.value).toBe('giraffe');

    stub = ReactDOM.render(
    React.createElement('textarea', { value: 'gorilla', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 125 } }), 
    container);

    expect(node.value).toEqual('gorilla');});


  it('should render defaultValue for SSR', function () {
    var markup = ReactDOMServer.renderToString(React.createElement('textarea', { defaultValue: '1', __source: { fileName: _jsxFileName, lineNumber: 132 } }));
    var div = document.createElement('div');
    div.innerHTML = markup;
    expect(div.firstChild.innerHTML).toBe('1');
    expect(div.firstChild.getAttribute('defaultValue')).toBe(null);});


  it('should render value for SSR', function () {
    var element = React.createElement('textarea', { value: '1', onChange: function () {}, __source: { fileName: _jsxFileName, lineNumber: 140 } });
    var markup = ReactDOMServer.renderToString(element);
    var div = document.createElement('div');
    div.innerHTML = markup;
    expect(div.firstChild.innerHTML).toBe('1');
    expect(div.firstChild.getAttribute('defaultValue')).toBe(null);});


  it('should allow setting `value` to `true`', function () {
    var container = document.createElement('div');
    var stub = React.createElement('textarea', { value: 'giraffe', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 150 } });
    var node = renderTextarea(stub, container);

    expect(node.value).toBe('giraffe');

    stub = ReactDOM.render(
    React.createElement('textarea', { value: true, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 156 } }), 
    container);

    expect(node.value).toEqual('true');});


  it('should allow setting `value` to `false`', function () {
    var container = document.createElement('div');
    var stub = React.createElement('textarea', { value: 'giraffe', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 164 } });
    var node = renderTextarea(stub, container);

    expect(node.value).toBe('giraffe');

    stub = ReactDOM.render(
    React.createElement('textarea', { value: false, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 170 } }), 
    container);

    expect(node.value).toEqual('false');});


  it('should allow setting `value` to `objToString`', function () {
    var container = document.createElement('div');
    var stub = React.createElement('textarea', { value: 'giraffe', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 178 } });
    var node = renderTextarea(stub, container);

    expect(node.value).toBe('giraffe');

    var objToString = { 
      toString: function () {
        return 'foo';} };


    stub = ReactDOM.render(
    React.createElement('textarea', { value: objToString, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 189 } }), 
    container);

    expect(node.value).toEqual('foo');});


  it('should take updates to `defaultValue` for uncontrolled textarea', function () {
    var container = document.createElement('div');

    var node = ReactDOM.render(React.createElement('textarea', { defaultValue: '0', __source: { fileName: _jsxFileName, lineNumber: 198 } }), container);

    expect(node.value).toBe('0');

    ReactDOM.render(React.createElement('textarea', { defaultValue: '1', __source: { fileName: _jsxFileName, lineNumber: 202 } }), container);

    expect(node.value).toBe('0');});


  it('should take updates to children in lieu of `defaultValue` for uncontrolled textarea', function () {
    var container = document.createElement('div');

    var node = ReactDOM.render(React.createElement('textarea', { defaultValue: '0', __source: { fileName: _jsxFileName, lineNumber: 210 } }), container);

    expect(node.value).toBe('0');

    spyOn(console, 'error'); // deprecation warning for `children` content

    ReactDOM.render(React.createElement('textarea', { __source: { fileName: _jsxFileName, lineNumber: 216 } }, '1'), container);

    expect(node.value).toBe('0');});


  it('should not incur unnecessary DOM mutations', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement('textarea', { value: 'a', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 223 } }), container);

    var node = container.firstChild;
    var nodeValue = 'a';
    var nodeValueSetter = jest.genMockFn();
    Object.defineProperty(node, 'value', { 
      get: function () {
        return nodeValue;}, 

      set: nodeValueSetter.mockImplementation(function (newValue) {
        nodeValue = newValue;}) });



    ReactDOM.render(React.createElement('textarea', { value: 'a', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 237 } }), container);
    expect(nodeValueSetter.mock.calls.length).toBe(0);

    ReactDOM.render(React.createElement('textarea', { value: 'b', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 240 } }), container);
    expect(nodeValueSetter.mock.calls.length).toBe(1);});


  it('should properly control a value of number `0`', function () {
    var stub = React.createElement('textarea', { value: 0, onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 245 } });
    var node = renderTextarea(stub);

    node.value = 'giraffe';
    ReactTestUtils.Simulate.change(node);
    expect(node.value).toBe('0');});


  it('should treat children like `defaultValue`', function () {
    spyOn(console, 'error');

    var container = document.createElement('div');
    var stub = React.createElement('textarea', { __source: { fileName: _jsxFileName, lineNumber: 257 } }, 'giraffe');
    var node = renderTextarea(stub, container);

    expect(console.error.calls.count()).toBe(1);
    expect(node.value).toBe('giraffe');

    // Changing children should do nothing, it functions like `defaultValue`.
    stub = ReactDOM.render(React.createElement('textarea', { __source: { fileName: _jsxFileName, lineNumber: 264 } }, 'gorilla'), container);
    expect(node.value).toEqual('giraffe');});


  it('should keep value when switching to uncontrolled element if not changed', function () {
    var container = document.createElement('div');

    var node = renderTextarea(React.createElement('textarea', { value: 'kitten', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 271 } }), container);

    expect(node.value).toBe('kitten');

    ReactDOM.render(React.createElement('textarea', { defaultValue: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 275 } }), container);

    expect(node.value).toEqual('kitten');});


  it('should keep value when switching to uncontrolled element if changed', function () {
    var container = document.createElement('div');

    var node = renderTextarea(React.createElement('textarea', { value: 'kitten', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 283 } }), container);

    expect(node.value).toBe('kitten');

    ReactDOM.render(React.createElement('textarea', { value: 'puppies', onChange: emptyFunction, __source: { fileName: _jsxFileName, lineNumber: 287 } }), container);

    expect(node.value).toBe('puppies');

    ReactDOM.render(React.createElement('textarea', { defaultValue: 'gorilla', __source: { fileName: _jsxFileName, lineNumber: 291 } }), container);

    expect(node.value).toEqual('puppies');});


  it('should allow numbers as children', function () {
    spyOn(console, 'error');
    var node = renderTextarea(React.createElement('textarea', { __source: { fileName: _jsxFileName, lineNumber: 298 } }, 17));
    expect(console.error.calls.count()).toBe(1);
    expect(node.value).toBe('17');});


  it('should allow booleans as children', function () {
    spyOn(console, 'error');
    var node = renderTextarea(React.createElement('textarea', { __source: { fileName: _jsxFileName, lineNumber: 305 } }, false));
    expect(console.error.calls.count()).toBe(1);
    expect(node.value).toBe('false');});


  it('should allow objects as children', function () {
    spyOn(console, 'error');
    var obj = { 
      toString: function () {
        return 'sharkswithlasers';} };


    var node = renderTextarea(React.createElement('textarea', { __source: { fileName: _jsxFileName, lineNumber: 317 } }, obj));
    expect(console.error.calls.count()).toBe(1);
    expect(node.value).toBe('sharkswithlasers');});


  it('should throw with multiple or invalid children', function () {
    spyOn(console, 'error');

    expect(function () {
      ReactTestUtils.renderIntoDocument(
      React.createElement('textarea', { __source: { fileName: _jsxFileName, lineNumber: 327 } }, 'hello', 'there'));}).

    toThrow();

    expect(console.error.calls.count()).toBe(1);

    var node;
    expect(function () {
      node = renderTextarea(React.createElement('textarea', { __source: { fileName: _jsxFileName, lineNumber: 335 } }, React.createElement('strong', { __source: { fileName: _jsxFileName, lineNumber: 335 } })));}).
    not.toThrow();

    expect(node.value).toBe('[object Object]');

    expect(console.error.calls.count()).toBe(2);});


  it('should support ReactLink', function () {
    var link = new ReactLink('yolo', jest.fn());
    var instance = React.createElement('textarea', { valueLink: link, __source: { fileName: _jsxFileName, lineNumber: 345 } });

    spyOn(console, 'error');
    instance = renderTextarea(instance);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.');



    expect(instance.value).toBe('yolo');
    expect(link.value).toBe('yolo');
    expect(link.requestChange.mock.calls.length).toBe(0);

    instance.value = 'test';
    ReactTestUtils.Simulate.change(instance);

    expect(link.requestChange.mock.calls.length).toBe(1);
    expect(link.requestChange.mock.calls[0][0]).toEqual('test');});


  it('should unmount', function () {
    var container = document.createElement('div');
    renderTextarea(React.createElement('textarea', { __source: { fileName: _jsxFileName, lineNumber: 368 } }), container);
    ReactDOM.unmountComponentAtNode(container);});


  it('should warn if value is null', function () {
    spyOn(console, 'error');

    ReactTestUtils.renderIntoDocument(React.createElement('textarea', { value: null, __source: { fileName: _jsxFileName, lineNumber: 375 } }));
    expect(console.error.calls.argsFor(0)[0]).toContain(
    '`value` prop on `textarea` should not be null. ' + 
    'Consider using the empty string to clear the component or `undefined` ' + 
    'for uncontrolled components.');


    ReactTestUtils.renderIntoDocument(React.createElement('textarea', { value: null, __source: { fileName: _jsxFileName, lineNumber: 382 } }));
    expect(console.error.calls.count()).toBe(1);});


  it('should warn if value and defaultValue are specified', function () {
    spyOn(console, 'error');
    ReactTestUtils.renderIntoDocument(
    React.createElement('textarea', { value: 'foo', defaultValue: 'bar', readOnly: true, __source: { fileName: _jsxFileName, lineNumber: 389 } }));

    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Textarea elements must be either controlled or uncontrolled ' + 
    '(specify either the value prop, or the defaultValue prop, but not ' + 
    'both). Decide between using a controlled or uncontrolled textarea ' + 
    'and remove one of these props. More info: ' + 
    'https://fb.me/react-controlled-components');


    ReactTestUtils.renderIntoDocument(
    React.createElement('textarea', { value: 'foo', defaultValue: 'bar', readOnly: true, __source: { fileName: _jsxFileName, lineNumber: 400 } }));

    expect(console.error.calls.count()).toBe(1);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\link\\ReactLink.js":10,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"fbjs/lib/emptyFunction":406}],151:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\adler32.js');

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;


var ReactMarkupChecksum = { 
  CHECKSUM_ATTR_NAME: 'data-react-checksum', 

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;} else 
    {
      return markup.replace(
      TAG_END, 
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');}}, 




  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(
    ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;} };



module.exports = ReactMarkupChecksum;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\adler32.js":290}],152:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerBatchingStrategy
 */

'use strict';

var ReactServerBatchingStrategy = { 
  isBatchingUpdates: false, 
  batchedUpdates: function (callback) {
    // Don't do anything here. During the server rendering we don't want to
    // schedule any updates. We will simply ignore them.
  } };


module.exports = ReactServerBatchingStrategy;
},{}],153:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactDOMContainerInfo = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMContainerInfo.js');
var ReactDefaultBatchingStrategy = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactDefaultBatchingStrategy.js');
var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');
var ReactMarkupChecksum = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactMarkupChecksum.js');
var ReactReconciler = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js');
var ReactServerBatchingStrategy = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactServerBatchingStrategy.js');
var ReactServerRenderingTransaction = 
require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactServerRenderingTransaction.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\instantiateReactComponent.js');
var invariant = require('fbjs/lib/invariant');

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToStringImpl(element, makeStaticMarkup) {
  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    transaction = ReactServerRenderingTransaction.getPooled(makeStaticMarkup);

    return transaction.perform(function () {
      if (__DEV__) {
        ReactInstrumentation.debugTool.onBeginFlush();}

      var componentInstance = instantiateReactComponent(element);
      var markup = ReactReconciler.mountComponent(
      componentInstance, 
      transaction, 
      null, 
      ReactDOMContainerInfo(), 
      emptyObject);

      if (__DEV__) {
        ReactInstrumentation.debugTool.onUnmountComponent(
        componentInstance._debugID);

        ReactInstrumentation.debugTool.onEndFlush();}

      if (!makeStaticMarkup) {
        markup = ReactMarkupChecksum.addChecksumToMarkup(markup);}

      return markup;}, 
    null);} finally 
  {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);}}



/**
 * Render a ReactElement to its initial HTML. This should only be used on the
 * server.
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostring
 */
function renderToString(element) {
  invariant(
  ReactElement.isValidElement(element), 
  'renderToString(): You must pass a valid ReactElement.');

  return renderToStringImpl(element, false);}


/**
 * Similar to renderToString, except this doesn't create extra DOM attributes
 * such as data-react-id that React uses internally.
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostaticmarkup
 */
function renderToStaticMarkup(element) {
  invariant(
  ReactElement.isValidElement(element), 
  'renderToStaticMarkup(): You must pass a valid ReactElement.');

  return renderToStringImpl(element, true);}


module.exports = { 
  renderToString: renderToString, 
  renderToStaticMarkup: renderToStaticMarkup };
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactMarkupChecksum.js":151,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactServerBatchingStrategy.js":152,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactServerRenderingTransaction.js":154,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMContainerInfo.js":166,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactDefaultBatchingStrategy.js":241,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js":250,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\instantiateReactComponent.js":274,"fbjs/lib/emptyObject":407,"fbjs/lib/invariant":414}],154:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 */

'use strict';var _assign = require('object-assign');

var PooledClass = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js');
var Transaction = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\Transaction.js');


/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

var noopCallbackQueue = { 
  enqueue: function () {} };


/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;}


var Mixin = { 
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;}, 


  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;}, 


  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {}, 


  checkpoint: function () {}, 


  rollback: function () {} };




_assign(
ReactServerRenderingTransaction.prototype, 
Transaction.Mixin, 
Mixin);


PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js":277,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\Transaction.js":281,"object-assign":425}],155:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\server\\__tests__\\ReactServerRendering-test.js';

var ExecutionEnvironment;
var React;
var ReactDOM;
var ReactMarkupChecksum;
var ReactReconcileTransaction;
var ReactTestUtils;
var ReactServerRendering;

var ID_ATTRIBUTE_NAME;
var ROOT_ATTRIBUTE_NAME;

describe('ReactServerRendering', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactMarkupChecksum = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactMarkupChecksum.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    ReactReconcileTransaction = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactReconcileTransaction.js');

    ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
    ExecutionEnvironment.canUseDOM = false;
    ReactServerRendering = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactServerRendering.js');

    var DOMProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js');
    ID_ATTRIBUTE_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
    ROOT_ATTRIBUTE_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;});


  describe('renderToString', function () {
    it('should generate simple markup', function () {
      var response = ReactServerRendering.renderToString(
      React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 46 } }, 'hello world'));

      expect(response).toMatch(
      '<span ' + ROOT_ATTRIBUTE_NAME + '="" ' + 
      ID_ATTRIBUTE_NAME + '="[^"]+" ' + 
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="[^"]+">hello world</span>');});



    it('should generate simple markup for self-closing tags', function () {
      var response = ReactServerRendering.renderToString(
      React.createElement('img', { __source: { fileName: _jsxFileName, lineNumber: 57 } }));

      expect(response).toMatch(
      '<img ' + ROOT_ATTRIBUTE_NAME + '="" ' + 
      ID_ATTRIBUTE_NAME + '="[^"]+" ' + 
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="[^"]+"/>');});



    it('should generate simple markup for attribute with `>` symbol', function () {
      var response = ReactServerRendering.renderToString(
      React.createElement('img', { 'data-attr': '>', __source: { fileName: _jsxFileName, lineNumber: 68 } }));

      expect(response).toMatch(
      '<img data-attr="&gt;" ' + ROOT_ATTRIBUTE_NAME + '="" ' + 
      ID_ATTRIBUTE_NAME + '="[^"]+" ' + 
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="[^"]+"/>');});



    it('should generate comment markup for component returns null', function () {
      var NullComponent = React.createClass({ displayName: 'NullComponent', 
        render: function () {
          return null;} });


      var response = ReactServerRendering.renderToString(React.createElement(NullComponent, { __source: { fileName: _jsxFileName, lineNumber: 83 } }));
      expect(response).toBe('<!-- react-empty: 1 -->');});


    it('should not register event listeners', function () {
      var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
      var cb = jest.fn();

      ReactServerRendering.renderToString(
      React.createElement('span', { onClick: cb, __source: { fileName: _jsxFileName, lineNumber: 92 } }, 'hello world'));

      expect(EventPluginHub.__getListenerBank()).toEqual({});});


    it('should render composite components', function () {
      var Parent = React.createClass({ displayName: 'Parent', 
        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 100 } }, React.createElement(Child, { name: 'child', __source: { fileName: _jsxFileName, lineNumber: 100 } }));} });


      var Child = React.createClass({ displayName: 'Child', 
        render: function () {
          return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 105 } }, 'My name is ', this.props.name);} });


      var response = ReactServerRendering.renderToString(
      React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 109 } }));

      expect(response).toMatch(
      '<div ' + ROOT_ATTRIBUTE_NAME + '="" ' + 
      ID_ATTRIBUTE_NAME + '="[^"]+" ' + 
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="[^"]+">' + 
      '<span ' + ID_ATTRIBUTE_NAME + '="[^"]+">' + 
      '<!-- react-text: [0-9]+ -->My name is <!-- /react-text -->' + 
      '<!-- react-text: [0-9]+ -->child<!-- /react-text -->' + 
      '</span>' + 
      '</div>');});



    it('should only execute certain lifecycle methods', function () {
      function runTest() {
        var lifecycle = [];
        var TestComponent = React.createClass({ displayName: 'TestComponent', 
          componentWillMount: function () {
            lifecycle.push('componentWillMount');}, 

          componentDidMount: function () {
            lifecycle.push('componentDidMount');}, 

          getInitialState: function () {
            lifecycle.push('getInitialState');
            return { name: 'TestComponent' };}, 

          render: function () {
            lifecycle.push('render');
            return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 139 } }, 'Component name: ', this.state.name);}, 

          componentWillUpdate: function () {
            lifecycle.push('componentWillUpdate');}, 

          componentDidUpdate: function () {
            lifecycle.push('componentDidUpdate');}, 

          shouldComponentUpdate: function () {
            lifecycle.push('shouldComponentUpdate');}, 

          componentWillReceiveProps: function () {
            lifecycle.push('componentWillReceiveProps');}, 

          componentWillUnmount: function () {
            lifecycle.push('componentWillUnmount');} });



        var response = ReactServerRendering.renderToString(
        React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 159 } }));


        expect(response).toMatch(
        '<span ' + ROOT_ATTRIBUTE_NAME + '="" ' + 
        ID_ATTRIBUTE_NAME + '="[^"]+" ' + 
        ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="[^"]+">' + 
        '<!-- react-text: [0-9]+ -->Component name: <!-- /react-text -->' + 
        '<!-- react-text: [0-9]+ -->TestComponent<!-- /react-text -->' + 
        '</span>');

        expect(lifecycle).toEqual(
        ['getInitialState', 'componentWillMount', 'render']);}



      runTest();

      // This should work the same regardless of whether you can use DOM or not.
      ExecutionEnvironment.canUseDOM = true;
      runTest();});


    it('should have the correct mounting behavior', function () {
      // This test is testing client-side behavior.
      ExecutionEnvironment.canUseDOM = true;

      var mountCount = 0;
      var numClicks = 0;

      var TestComponent = React.createClass({ displayName: 'TestComponent', 
        componentDidMount: function () {
          mountCount++;}, 

        click: function () {
          numClicks++;}, 

        render: function () {
          return (
            React.createElement('span', { ref: 'span', onClick: this.click, __source: { fileName: _jsxFileName, lineNumber: 198 } }, 'Name: ', this.props.name));} });




      var element = document.createElement('div');
      ReactDOM.render(React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 204 } }), element);

      var lastMarkup = element.innerHTML;

      // Exercise the update path. Markup should not change,
      // but some lifecycle methods should be run again.
      ReactDOM.render(React.createElement(TestComponent, { name: 'x', __source: { fileName: _jsxFileName, lineNumber: 210 } }), element);
      expect(mountCount).toEqual(1);

      // Unmount and remount. We should get another mount event and
      // we should get different markup, as the IDs are unique each time.
      ReactDOM.unmountComponentAtNode(element);
      expect(element.innerHTML).toEqual('');
      ReactDOM.render(React.createElement(TestComponent, { name: 'x', __source: { fileName: _jsxFileName, lineNumber: 217 } }), element);
      expect(mountCount).toEqual(2);
      expect(element.innerHTML).not.toEqual(lastMarkup);

      // Now kill the node and render it on top of server-rendered markup, as if
      // we used server rendering. We should mount again, but the markup should
      // be unchanged. We will append a sentinel at the end of innerHTML to be
      // sure that innerHTML was not changed.
      ReactDOM.unmountComponentAtNode(element);
      expect(element.innerHTML).toEqual('');

      ExecutionEnvironment.canUseDOM = false;
      lastMarkup = ReactServerRendering.renderToString(
      React.createElement(TestComponent, { name: 'x', __source: { fileName: _jsxFileName, lineNumber: 230 } }));

      ExecutionEnvironment.canUseDOM = true;
      element.innerHTML = lastMarkup;

      var instance = ReactDOM.render(React.createElement(TestComponent, { name: 'x', __source: { fileName: _jsxFileName, lineNumber: 235 } }), element);
      expect(mountCount).toEqual(3);
      expect(element.innerHTML).toBe(lastMarkup);

      // Ensure the events system works after mount into server markup
      expect(numClicks).toEqual(0);
      ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(instance.refs.span));
      expect(numClicks).toEqual(1);

      ReactDOM.unmountComponentAtNode(element);
      expect(element.innerHTML).toEqual('');

      // Now simulate a situation where the app is not idempotent. React should
      // warn but do the right thing.
      element.innerHTML = lastMarkup;
      spyOn(console, 'error');
      instance = ReactDOM.render(React.createElement(TestComponent, { name: 'y', __source: { fileName: _jsxFileName, lineNumber: 251 } }), element);
      expect(mountCount).toEqual(4);
      expect(console.error.calls.count()).toBe(1);
      expect(element.innerHTML.length > 0).toBe(true);
      expect(element.innerHTML).not.toEqual(lastMarkup);

      // Ensure the events system works after markup mismatch.
      expect(numClicks).toEqual(1);
      ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(instance.refs.span));
      expect(numClicks).toEqual(2);});


    it('should throw with silly args', function () {
      expect(
      ReactServerRendering.renderToString.bind(
      ReactServerRendering, 
      'not a component')).

      toThrowError(
      'renderToString(): You must pass a valid ReactElement.');});});




  describe('renderToStaticMarkup', function () {
    it('should not put checksum and React ID on components', function () {
      var NestedComponent = React.createClass({ displayName: 'NestedComponent', 
        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 279 } }, 'inner text');} });



      var TestComponent = React.createClass({ displayName: 'TestComponent', 
        render: function () {
          return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 285 } }, React.createElement(NestedComponent, { __source: { fileName: _jsxFileName, lineNumber: 285 } }));} });



      var response = ReactServerRendering.renderToStaticMarkup(
      React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 290 } }));


      expect(response).toBe('<span><div>inner text</div></span>');});


    it('should not put checksum and React ID on text components', function () {
      var TestComponent = React.createClass({ displayName: 'TestComponent', 
        render: function () {
          return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 299 } }, 'hello', ' ', 'world');} });



      var response = ReactServerRendering.renderToStaticMarkup(
      React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 304 } }));


      expect(response).toBe('<span>hello world</span>');});


    it('should not register event listeners', function () {
      var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
      var cb = jest.fn();

      ReactServerRendering.renderToString(
      React.createElement('span', { onClick: cb, __source: { fileName: _jsxFileName, lineNumber: 315 } }, 'hello world'));

      expect(EventPluginHub.__getListenerBank()).toEqual({});});


    it('should only execute certain lifecycle methods', function () {
      function runTest() {
        var lifecycle = [];
        var TestComponent = React.createClass({ displayName: 'TestComponent', 
          componentWillMount: function () {
            lifecycle.push('componentWillMount');}, 

          componentDidMount: function () {
            lifecycle.push('componentDidMount');}, 

          getInitialState: function () {
            lifecycle.push('getInitialState');
            return { name: 'TestComponent' };}, 

          render: function () {
            lifecycle.push('render');
            return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 336 } }, 'Component name: ', this.state.name);}, 

          componentWillUpdate: function () {
            lifecycle.push('componentWillUpdate');}, 

          componentDidUpdate: function () {
            lifecycle.push('componentDidUpdate');}, 

          shouldComponentUpdate: function () {
            lifecycle.push('shouldComponentUpdate');}, 

          componentWillReceiveProps: function () {
            lifecycle.push('componentWillReceiveProps');}, 

          componentWillUnmount: function () {
            lifecycle.push('componentWillUnmount');} });



        var response = ReactServerRendering.renderToStaticMarkup(
        React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 356 } }));


        expect(response).toBe('<span>Component name: TestComponent</span>');
        expect(lifecycle).toEqual(
        ['getInitialState', 'componentWillMount', 'render']);}



      runTest();

      // This should work the same regardless of whether you can use DOM or not.
      ExecutionEnvironment.canUseDOM = true;
      runTest();});


    it('should throw with silly args', function () {
      expect(
      ReactServerRendering.renderToStaticMarkup.bind(
      ReactServerRendering, 
      'not a component')).

      toThrowError(
      'renderToStaticMarkup(): You must pass a valid ReactElement.');});



    it('allows setState in componentWillMount without using DOM', function () {
      var Component = React.createClass({ displayName: 'Component', 
        componentWillMount: function () {
          this.setState({ text: 'hello, world' });}, 

        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 389 } }, this.state.text);} });



      ReactReconcileTransaction.prototype.perform = function () {
        // We shouldn't ever be calling this on the server
        throw new Error('Browser reconcile transaction should not be used');};

      var markup = ReactServerRendering.renderToString(
      React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 398 } }));

      expect(markup.indexOf('hello, world') >= 0).toBe(true);});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactReconcileTransaction.js":73,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactMarkupChecksum.js":151,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactServerRendering.js":153,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js":159,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"fbjs/lib/ExecutionEnvironment":399}],156:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = { 
  animationIterationCount: true, 
  borderImageOutset: true, 
  borderImageSlice: true, 
  borderImageWidth: true, 
  boxFlex: true, 
  boxFlexGroup: true, 
  boxOrdinalGroup: true, 
  columnCount: true, 
  flex: true, 
  flexGrow: true, 
  flexPositive: true, 
  flexShrink: true, 
  flexNegative: true, 
  flexOrder: true, 
  gridRow: true, 
  gridColumn: true, 
  fontWeight: true, 
  lineClamp: true, 
  lineHeight: true, 
  opacity: true, 
  order: true, 
  orphans: true, 
  tabSize: true, 
  widows: true, 
  zIndex: true, 
  zoom: true, 

  // SVG-related properties
  fillOpacity: true, 
  floodOpacity: true, 
  stopOpacity: true, 
  strokeDasharray: true, 
  strokeDashoffset: true, 
  strokeMiterlimit: true, 
  strokeOpacity: true, 
  strokeWidth: true };


/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);}


/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];});});



/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = { 
  background: { 
    backgroundAttachment: true, 
    backgroundColor: true, 
    backgroundImage: true, 
    backgroundPositionX: true, 
    backgroundPositionY: true, 
    backgroundRepeat: true }, 

  backgroundPosition: { 
    backgroundPositionX: true, 
    backgroundPositionY: true }, 

  border: { 
    borderWidth: true, 
    borderStyle: true, 
    borderColor: true }, 

  borderBottom: { 
    borderBottomWidth: true, 
    borderBottomStyle: true, 
    borderBottomColor: true }, 

  borderLeft: { 
    borderLeftWidth: true, 
    borderLeftStyle: true, 
    borderLeftColor: true }, 

  borderRight: { 
    borderRightWidth: true, 
    borderRightStyle: true, 
    borderRightColor: true }, 

  borderTop: { 
    borderTopWidth: true, 
    borderTopStyle: true, 
    borderTopColor: true }, 

  font: { 
    fontStyle: true, 
    fontVariant: true, 
    fontWeight: true, 
    fontSize: true, 
    lineHeight: true, 
    fontFamily: true }, 

  outline: { 
    outlineWidth: true, 
    outlineStyle: true, 
    outlineColor: true } };



var CSSProperty = { 
  isUnitlessNumber: isUnitlessNumber, 
  shorthandPropertyExpansions: shorthandPropertyExpansions };


module.exports = CSSProperty;
},{}],157:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 */

'use strict';

var CSSProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\CSSProperty.js');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\dangerousStyleValue.js');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);});


var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';} 
  catch (e) {
    hasShorthandPropertyBug = true;}

  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';}}



if (__DEV__) {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;}


    warnedStyleNames[name] = true;
    warning(
    false, 
    'Unsupported style property %s. Did you mean %s?%s', 
    name, 
    camelizeStyleName(name), 
    checkRenderMessage(owner));};



  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;}


    warnedStyleNames[name] = true;
    warning(
    false, 
    'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', 
    name, 
    name.charAt(0).toUpperCase() + name.slice(1), 
    checkRenderMessage(owner));};



  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;}


    warnedStyleValues[value] = true;
    warning(
    false, 
    'Style property values shouldn\'t contain a semicolon.%s ' + 
    'Try "%s: %s" instead.', 
    checkRenderMessage(owner), 
    name, 
    value.replace(badStyleValueWithSemicolonPattern, ''));};



  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;}


    warnedForNaNValue = true;
    warning(
    false, 
    '`NaN` is an invalid value for the `%s` css style property.%s', 
    name, 
    checkRenderMessage(owner));};



  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';}}


    return '';};


  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;}

    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);} else 
    if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);} else 
    if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);}


    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);}};}




/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = { 

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;}

      var styleValue = styles[styleName];
      if (__DEV__) {
        warnValidStyle(styleName, styleValue, component);}

      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += 
        dangerousStyleValue(styleName, styleValue, component) + ';';}}


    return serialized || null;}, 


  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if (__DEV__) {
      ReactInstrumentation.debugTool.onHostOperation(
      component._debugID, 
      'update styles', 
      styles);}



    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;}

      if (__DEV__) {
        warnValidStyle(styleName, styles[styleName], component);}

      var styleValue = dangerousStyleValue(
      styleName, 
      styles[styleName], 
      component);

      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;}

      if (styleValue) {
        style[styleName] = styleValue;} else 
      {
        var expansion = 
        hasShorthandPropertyBug && 
        CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';}} else 

        {
          style[styleName] = '';}}}} };







module.exports = CSSPropertyOperations;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\CSSProperty.js":156,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\dangerousStyleValue.js":184,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"fbjs/lib/ExecutionEnvironment":399,"fbjs/lib/camelizeStyleName":402,"fbjs/lib/hyphenateStyleName":413,"fbjs/lib/memoizeStringOnly":420,"fbjs/lib/warning":424}],158:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMNamespaces
 */

'use strict';

var DOMNamespaces = { 
  html: 'http://www.w3.org/1999/xhtml', 
  mathml: 'http://www.w3.org/1998/Math/MathML', 
  svg: 'http://www.w3.org/2000/svg' };


module.exports = DOMNamespaces;
},{}],159:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;}


var DOMPropertyInjection = { 
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1, 
  HAS_SIDE_EFFECTS: 0x2, 
  HAS_BOOLEAN_VALUE: 0x4, 
  HAS_NUMERIC_VALUE: 0x8, 
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8, 
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20, 

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
      domPropertyConfig.isCustomAttribute);}



    for (var propName in Properties) {
      invariant(
      !DOMProperty.properties.hasOwnProperty(propName), 
      'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + 
      '\'%s\' which has already been injected. You may be accidentally ' + 
      'injecting the same DOM property config twice, or you may be ' + 
      'injecting two configs that have conflicting property names.', 
      propName);


      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = { 
        attributeName: lowerCased, 
        attributeNamespace: null, 
        propertyName: propName, 
        mutationMethod: null, 

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY), 
        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS), 
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE), 
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE), 
        hasPositiveNumericValue: 
        checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE), 
        hasOverloadedBooleanValue: 
        checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE) };


      invariant(
      propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects, 
      'DOMProperty: Properties that have side effects must use property: %s', 
      propName);

      invariant(
      propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + 
      propertyInfo.hasOverloadedBooleanValue <= 1, 
      'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 
      'numeric value, but not a combination: %s', 
      propName);


      if (__DEV__) {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;}


      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (__DEV__) {
          DOMProperty.getPossibleStandardName[attributeName] = propName;}}



      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];}


      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];}


      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];}


      DOMProperty.properties[propName] = propertyInfo;}} };




/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */


/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = { 

  ID_ATTRIBUTE_NAME: 'data-reactid', 
  ROOT_ATTRIBUTE_NAME: 'data-reactroot', 

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR, 
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040', 

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasSideEffects:
   *   Whether or not setting a value causes side effects such as triggering
   *   resources to be loaded or text selection changes. If true, we read from
   *   the DOM before updating to ensure that the value is only set if it has
   *   changed.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {}, 

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   * @type {Object}
   */
  getPossibleStandardName: __DEV__ ? {} : null, 

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [], 

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;}}


    return false;}, 


  injection: DOMPropertyInjection };


module.exports = DOMProperty;
},{"fbjs/lib/invariant":414}],160:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 */

'use strict';

var DOMProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactDOMInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMInstrumentation.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');

var quoteAttributeValueForBrowser = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\quoteAttributeValueForBrowser.js');
var warning = require('fbjs/lib/warning');

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
'^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;}

  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;}

  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;}

  illegalAttributeNameCache[attributeName] = true;
  warning(
  false, 
  'Invalid attribute name: `%s`', 
  attributeName);

  return false;}


function shouldIgnoreValue(propertyInfo, value) {
  return value == null || 
  propertyInfo.hasBooleanValue && !value || 
  propertyInfo.hasNumericValue && isNaN(value) || 
  propertyInfo.hasPositiveNumericValue && value < 1 || 
  propertyInfo.hasOverloadedBooleanValue && value === false;}


/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = { 

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + 
    quoteAttributeValueForBrowser(id);}, 


  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);}, 


  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';}, 


  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');}, 


  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    if (__DEV__) {
      ReactDOMInstrumentation.debugTool.onCreateMarkupForProperty(name, value);}

    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? 
    DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';}

      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || 
      propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';}

      return attributeName + '=' + quoteAttributeValueForBrowser(value);} else 
    if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';}

      return name + '=' + quoteAttributeValueForBrowser(value);}

    return null;}, 


  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';}

    return name + '=' + quoteAttributeValueForBrowser(value);}, 


  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? 
    DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);} else 
      if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;} else 
      if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!propertyInfo.hasSideEffects || 
        '' + node[propName] !== '' + value) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;}} else 

      {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);} else 
        if (propertyInfo.hasBooleanValue || 
        propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');} else 
        {
          node.setAttribute(attributeName, '' + value);}}} else 


    if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;}


    if (__DEV__) {
      ReactDOMInstrumentation.debugTool.onSetValueForProperty(node, name, value);
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation(
      ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 
      'update attribute', 
      payload);}}, 




  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;}

    if (value == null) {
      node.removeAttribute(name);} else 
    {
      node.setAttribute(name, '' + value);}


    if (__DEV__) {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation(
      ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 
      'update attribute', 
      payload);}}, 




  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if (__DEV__) {
      ReactDOMInstrumentation.debugTool.onDeleteValueForProperty(node, name);
      ReactInstrumentation.debugTool.onHostOperation(
      ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 
      'remove attribute', 
      name);}}, 




  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? 
    DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);} else 
      if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          // No HAS_SIDE_EFFECTS logic here, only `value` has it and is string.
          node[propName] = false;} else 
        {
          if (!propertyInfo.hasSideEffects || 
          '' + node[propName] !== '') {
            node[propName] = '';}}} else 


      {
        node.removeAttribute(propertyInfo.attributeName);}} else 

    if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);}


    if (__DEV__) {
      ReactDOMInstrumentation.debugTool.onDeleteValueForProperty(node, name);
      ReactInstrumentation.debugTool.onHostOperation(
      ReactDOMComponentTree.getInstanceFromNode(node)._debugID, 
      'remove attribute', 
      name);}} };






module.exports = DOMPropertyOperations;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js":159,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMInstrumentation.js":170,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\quoteAttributeValueForBrowser.js":187,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"fbjs/lib/warning":424}],161:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 */

'use strict';

var DOMLazyTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMLazyTree.js');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var getMarkupWrap = require('fbjs/lib/getMarkupWrap');
var invariant = require('fbjs/lib/invariant');

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));}


var Danger = { 

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function (markupList) {
    invariant(
    ExecutionEnvironment.canUseDOM, 
    'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 
    'thread. Make sure `window` and `document` are available globally ' + 
    'before requiring React when unit testing or use ' + 
    'ReactDOMServer.renderToString for server rendering.');

    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      invariant(
      markupList[i], 
      'dangerouslyRenderMarkup(...): Missing markup.');

      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];}

    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;}

      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
          OPEN_TAG_NAME_EXP, 
          // This index will be parsed back out below.
          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');}}




      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
      markupListByNodeName.join(''), 
      emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute && 
        renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          invariant(
          !resultList.hasOwnProperty(resultIndex), 
          'Danger: Assigning to an already-occupied result index.');


          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;} else 

        if (__DEV__) {
          console.error(
          'Danger: Discarding unexpected node:', 
          renderNode);}}}





    // Although resultList was populated out of order, it should now be a dense
    // array.
    invariant(
    resultListAssignmentCount === resultList.length, 
    'Danger: Did not assign to every index of resultList.');


    invariant(
    resultList.length === markupList.length, 
    'Danger: Expected markup to render %s nodes, but rendered %s.', 
    markupList.length, 
    resultList.length);


    return resultList;}, 


  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    invariant(
    ExecutionEnvironment.canUseDOM, 
    'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 
    'worker thread. Make sure `window` and `document` are available ' + 
    'globally before requiring React when unit testing or use ' + 
    'ReactDOMServer.renderToString() for server rendering.');

    invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.');
    invariant(
    oldChild.nodeName !== 'HTML', 
    'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + 
    '<html> node. This is because browser quirks make this unreliable ' + 
    'and/or slow. If you want to render to the root you must use ' + 
    'server rendering. See ReactDOMServer.renderToString().');


    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);} else 
    {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);}} };





module.exports = Danger;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMLazyTree.js":120,"fbjs/lib/ExecutionEnvironment":399,"fbjs/lib/createNodesFromMarkup":405,"fbjs/lib/emptyFunction":406,"fbjs/lib/getMarkupWrap":410,"fbjs/lib/invariant":414}],162:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js');

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = 
DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = 
DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = { 
  isCustomAttribute: RegExp.prototype.test.bind(
  new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')), 

  Properties: { 
    /**
     * Standard Properties
     */
    accept: 0, 
    acceptCharset: 0, 
    accessKey: 0, 
    action: 0, 
    allowFullScreen: HAS_BOOLEAN_VALUE, 
    allowTransparency: 0, 
    alt: 0, 
    async: HAS_BOOLEAN_VALUE, 
    autoComplete: 0, 
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE, 
    capture: HAS_BOOLEAN_VALUE, 
    cellPadding: 0, 
    cellSpacing: 0, 
    charSet: 0, 
    challenge: 0, 
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE, 
    cite: 0, 
    classID: 0, 
    className: 0, 
    cols: HAS_POSITIVE_NUMERIC_VALUE, 
    colSpan: 0, 
    content: 0, 
    contentEditable: 0, 
    contextMenu: 0, 
    controls: HAS_BOOLEAN_VALUE, 
    coords: 0, 
    crossOrigin: 0, 
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0, 
    'default': HAS_BOOLEAN_VALUE, 
    defer: HAS_BOOLEAN_VALUE, 
    dir: 0, 
    disabled: HAS_BOOLEAN_VALUE, 
    download: HAS_OVERLOADED_BOOLEAN_VALUE, 
    draggable: 0, 
    encType: 0, 
    form: 0, 
    formAction: 0, 
    formEncType: 0, 
    formMethod: 0, 
    formNoValidate: HAS_BOOLEAN_VALUE, 
    formTarget: 0, 
    frameBorder: 0, 
    headers: 0, 
    height: 0, 
    hidden: HAS_BOOLEAN_VALUE, 
    high: 0, 
    href: 0, 
    hrefLang: 0, 
    htmlFor: 0, 
    httpEquiv: 0, 
    icon: 0, 
    id: 0, 
    inputMode: 0, 
    integrity: 0, 
    is: 0, 
    keyParams: 0, 
    keyType: 0, 
    kind: 0, 
    label: 0, 
    lang: 0, 
    list: 0, 
    loop: HAS_BOOLEAN_VALUE, 
    low: 0, 
    manifest: 0, 
    marginHeight: 0, 
    marginWidth: 0, 
    max: 0, 
    maxLength: 0, 
    media: 0, 
    mediaGroup: 0, 
    method: 0, 
    min: 0, 
    minLength: 0, 
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE, 
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE, 
    name: 0, 
    nonce: 0, 
    noValidate: HAS_BOOLEAN_VALUE, 
    open: HAS_BOOLEAN_VALUE, 
    optimum: 0, 
    pattern: 0, 
    placeholder: 0, 
    poster: 0, 
    preload: 0, 
    profile: 0, 
    radioGroup: 0, 
    readOnly: HAS_BOOLEAN_VALUE, 
    rel: 0, 
    required: HAS_BOOLEAN_VALUE, 
    reversed: HAS_BOOLEAN_VALUE, 
    role: 0, 
    rows: HAS_POSITIVE_NUMERIC_VALUE, 
    rowSpan: HAS_NUMERIC_VALUE, 
    sandbox: 0, 
    scope: 0, 
    scoped: HAS_BOOLEAN_VALUE, 
    scrolling: 0, 
    seamless: HAS_BOOLEAN_VALUE, 
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE, 
    shape: 0, 
    size: HAS_POSITIVE_NUMERIC_VALUE, 
    sizes: 0, 
    span: HAS_POSITIVE_NUMERIC_VALUE, 
    spellCheck: 0, 
    src: 0, 
    srcDoc: 0, 
    srcLang: 0, 
    srcSet: 0, 
    start: HAS_NUMERIC_VALUE, 
    step: 0, 
    style: 0, 
    summary: 0, 
    tabIndex: 0, 
    target: 0, 
    title: 0, 
    // Setting .type throws on non-<input> tags
    type: 0, 
    useMap: 0, 
    value: 0, 
    width: 0, 
    wmode: 0, 
    wrap: 0, 

    /**
     * RDFa Properties
     */
    about: 0, 
    datatype: 0, 
    inlist: 0, 
    prefix: 0, 
    // property is also supported for OpenGraph in meta tags.
    property: 0, 
    resource: 0, 
    'typeof': 0, 
    vocab: 0, 

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0, 
    autoCorrect: 0, 
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0, 
    // color is for Safari mask-icon link
    color: 0, 
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0, 
    itemScope: HAS_BOOLEAN_VALUE, 
    itemType: 0, 
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0, 
    itemRef: 0, 
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0, 
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0, 
    // IE-only attribute that controls focus behavior
    unselectable: 0 }, 

  DOMAttributeNames: { 
    acceptCharset: 'accept-charset', 
    className: 'class', 
    htmlFor: 'for', 
    httpEquiv: 'http-equiv' }, 

  DOMPropertyNames: {} };



module.exports = HTMLDOMPropertyConfig;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js":159}],163:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

'use strict';

var DOMChildrenOperations = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMChildrenOperations.js');
var ReactDOMIDOperations = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMIDOperations.js');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = { 

  processChildrenUpdates: 
  ReactDOMIDOperations.dangerouslyProcessChildrenUpdates, 

  replaceNodeWithMarkup: 
  DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup, 

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function (rootNodeID) {} };




module.exports = ReactComponentBrowserEnvironment;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMIDOperations.js":67,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMChildrenOperations.js":119}],164:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 */

/* global hasOwnProperty:true */

'use strict';var _assign = require('object-assign');

var AutoFocusUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\AutoFocusUtils.js');
var CSSPropertyOperations = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\CSSPropertyOperations.js');
var DOMLazyTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMLazyTree.js');
var DOMNamespaces = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMNamespaces.js');
var DOMProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js');
var DOMPropertyOperations = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMPropertyOperations.js');
var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
var EventPluginRegistry = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js');
var ReactBrowserEventEmitter = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactBrowserEventEmitter.js');
var ReactComponentBrowserEnvironment = 
require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactComponentBrowserEnvironment.js');
var ReactDOMButton = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\ReactDOMButton.js');
var ReactDOMComponentFlags = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMComponentFlags.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactDOMInput = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\ReactDOMInput.js');
var ReactDOMOption = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\ReactDOMOption.js');
var ReactDOMSelect = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\ReactDOMSelect.js');
var ReactDOMTextarea = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\ReactDOMTextarea.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');
var ReactMultiChild = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactMultiChild.js');
var ReactServerRenderingTransaction = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactServerRenderingTransaction.js');

var emptyFunction = require('fbjs/lib/emptyFunction');
var escapeTextContentForBrowser = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\escapeTextContentForBrowser.js');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\isEventSupported.js');
var keyOf = require('fbjs/lib/keyOf');
var shallowEqual = require('fbjs/lib/shallowEqual');
var inputValueTracking = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\inputValueTracking.js');
var validateDOMNesting = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\validateDOMNesting.js');
var warning = require('fbjs/lib/warning');

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var STYLE = keyOf({ style: null });
var HTML = keyOf({ __html: null });
var RESERVED_PROPS = { 
  children: null, 
  dangerouslySetInnerHTML: null, 
  suppressContentEditableWarning: null };


// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;


function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';}}}



  return '';}


function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';} else 
    {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? 
          key : 
          JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));}}


      return '{' + pairs.join(', ') + '}';}} else 

  if (typeof obj === 'string') {
    return JSON.stringify(obj);} else 
  if (typeof obj === 'function') {
    return '[function object]';}

  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);}


var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;}

  if (shallowEqual(style1, style2)) {
    return;}


  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();}


  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;}


  styleMutationWarning[hash] = true;

  warning(
  false, 
  '`%s` was passed a style object that has previously been mutated. ' + 
  'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 
  'the `render` %s. Previous style: %s. Mutated style: %s.', 
  componentName, 
  owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', 
  friendlyStringify(style1), 
  friendlyStringify(style2));}



/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;}

  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    invariant(
    props.children == null && props.dangerouslySetInnerHTML == null, 
    '%s is a void element tag and must not have `children` or ' + 
    'use `props.dangerouslySetInnerHTML`.%s', 
    component._tag, 
    component._currentElement._owner ? 
    ' Check the render method of ' + 
    component._currentElement._owner.getName() + '.' : 
    '');}


  if (props.dangerouslySetInnerHTML != null) {
    invariant(
    props.children == null, 
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.');

    invariant(
    typeof props.dangerouslySetInnerHTML === 'object' && 
    HTML in props.dangerouslySetInnerHTML, 
    '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 
    'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 
    'for more information.');}


  if (__DEV__) {
    warning(
    props.innerHTML == null, 
    'Directly setting property `innerHTML` is not permitted. ' + 
    'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

    warning(
    props.suppressContentEditableWarning || 
    !props.contentEditable || 
    props.children == null, 
    'A component is `contentEditable` and contains `children` managed by ' + 
    'React. It is now your responsibility to guarantee that none of ' + 
    'those nodes are unexpectedly modified or duplicated. This is ' + 
    'probably not intentional.');

    warning(
    props.onFocusIn == null && 
    props.onFocusOut == null, 
    'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 
    'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 
    'are not needed/supported by React.');}


  invariant(
  props.style == null || typeof props.style === 'object', 
  'The `style` prop expects a mapping from style properties to values, ' + 
  'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 
  'using JSX.%s', 
  getDeclarationErrorAddendum(component));}



function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;}

  if (__DEV__) {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    warning(
    registrationName !== 'onScroll' || isEventSupported('scroll', true), 
    'This browser doesn\'t support the `onScroll` event');}


  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, { 
    inst: inst, 
    registrationName: registrationName, 
    listener: listener });}



function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(
  listenerToPut.inst, 
  listenerToPut.registrationName, 
  listenerToPut.listener);}



function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);}


function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);}


function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);}


var setContentChildForInstrumentation = emptyFunction;
if (__DEV__) {
  setContentChildForInstrumentation = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    var contentDebugID = debugID + '#text';

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);}

      this._contentDebugID = null;
      return;}


    this._contentDebugID = contentDebugID;
    var text = '' + content;

    ReactInstrumentation.debugTool.onSetDisplayName(contentDebugID, '#text');
    ReactInstrumentation.debugTool.onSetParent(contentDebugID, debugID);
    ReactInstrumentation.debugTool.onSetText(contentDebugID, text);

    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);} else 
    {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);}};}




// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = { 
  topAbort: 'abort', 
  topCanPlay: 'canplay', 
  topCanPlayThrough: 'canplaythrough', 
  topDurationChange: 'durationchange', 
  topEmptied: 'emptied', 
  topEncrypted: 'encrypted', 
  topEnded: 'ended', 
  topError: 'error', 
  topLoadedData: 'loadeddata', 
  topLoadedMetadata: 'loadedmetadata', 
  topLoadStart: 'loadstart', 
  topPause: 'pause', 
  topPlay: 'play', 
  topPlaying: 'playing', 
  topProgress: 'progress', 
  topRateChange: 'ratechange', 
  topSeeked: 'seeked', 
  topSeeking: 'seeking', 
  topStalled: 'stalled', 
  topSuspend: 'suspend', 
  topTimeUpdate: 'timeupdate', 
  topVolumeChange: 'volumechange', 
  topWaiting: 'waiting' };


function trackInputValue() {
  inputValueTracking.track(this);}


function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  invariant(inst._rootNodeID, 'Must be mounted to trap events');
  var node = getNode(inst);
  invariant(
  node, 
  'trapBubbledEvent(...): Requires node to be rendered.');


  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [
      ReactBrowserEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topLoad, 
      'load', 
      node)];


      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(
          ReactBrowserEventEmitter.trapBubbledEvent(
          EventConstants.topLevelTypes[event], 
          mediaEvents[event], 
          node));}}





      break;
    case 'img':
      inst._wrapperState.listeners = [
      ReactBrowserEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topError, 
      'error', 
      node), 

      ReactBrowserEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topLoad, 
      'load', 
      node)];


      break;
    case 'form':
      inst._wrapperState.listeners = [
      ReactBrowserEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topReset, 
      'reset', 
      node), 

      ReactBrowserEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topSubmit, 
      'submit', 
      node)];


      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [
      ReactBrowserEventEmitter.trapBubbledEvent(
      EventConstants.topLevelTypes.topInvalid, 
      'invalid', 
      node)];


      break;}}



function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);}


// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = { 
  'area': true, 
  'base': true, 
  'br': true, 
  'col': true, 
  'embed': true, 
  'hr': true, 
  'img': true, 
  'input': true, 
  'keygen': true, 
  'link': true, 
  'meta': true, 
  'param': true, 
  'source': true, 
  'track': true, 
  'wbr': true };
// NOTE: menuitem's close tag should be omitted, but that causes problems.


var newlineEatingTags = { 
  'listing': true, 
  'pre': true, 
  'textarea': true };


// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({ 
  'menuitem': true }, 
omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag);
    validatedTagCache[tag] = true;}}



function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;}


var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = null;
  this._domID = null;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (__DEV__) {
    this._ancestorInfo = null;
    setContentChildForInstrumentation.call(this, null);}}



ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = { 

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the containing DOM component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (
  transaction, 
  hostParent, 
  hostContainerInfo, 
  context) 
  {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'video':
        this._wrapperState = { 
          listeners: null };

        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'button':
        props = ReactDOMButton.getHostProps(this, props, hostParent);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;}


    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;} else 
    if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;}

    if (namespaceURI == null || 
    namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;}

    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;} else 
      if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;}}


    this._namespaceURI = namespaceURI;

    if (__DEV__) {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;} else 
      if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;}

      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, this, parentInfo);}

      this._ancestorInfo = 
      validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);}


    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);} else 
        if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);} else 
        {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);}} else 

      {
        el = ownerDocument.createElementNS(
        namespaceURI, 
        this._currentElement.type);}


      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);}

      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;} else 
    {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';} else 
      {
        mountImage = 
        tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';}}



    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(
        inputPostMount, 
        this);

        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(
        textareaPostMount, 
        this);

        break;
      case 'select':
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(
          AutoFocusUtils.focusDOMComponent, 
          this);}


        break;
      case 'option':
        transaction.getReactMountReady().enqueue(
        optionPostMount, 
        this);

        break;}


    return mountImage;}, 


  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;}

      var propValue = props[propKey];
      if (propValue == null) {
        continue;}

      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);}} else 

      {
        if (propKey === STYLE) {
          if (propValue) {
            if (__DEV__) {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;}

            propValue = this._previousStyleCopy = _assign({}, props.style);}

          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);}

        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);}} else 

        {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);}

        if (markup) {
          ret += ' ' + markup;}}}




    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;}


    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();}

    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;}, 


  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;}} else 

    {
      var contentToUse = 
      CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (__DEV__) {
          setContentChildForInstrumentation.call(this, contentToUse);}} else 

      if (childrenToUse != null) {
        var mountImages = this.mountChildren(
        childrenToUse, 
        transaction, 
        context);

        ret = mountImages.join('');}}


    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;} else 
    {
      return ret;}}, 



  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);}} else 

    {
      var contentToUse = 
      CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        if (__DEV__) {
          setContentChildForInstrumentation.call(this, contentToUse);}

        DOMLazyTree.queueText(lazyTree, contentToUse);} else 
      if (childrenToUse != null) {
        var mountImages = this.mountChildren(
        childrenToUse, 
        transaction, 
        context);

        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);}}}}, 





  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);}, 


  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'button':
        lastProps = ReactDOMButton.getHostProps(this, lastProps);
        nextProps = ReactDOMButton.getHostProps(this, nextProps);
        break;
      case 'input':
        ReactDOMInput.updateWrapper(this);
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;}


    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(
    lastProps, 
    nextProps, 
    transaction, 
    context);


    if (this._tag === 'select') {
      // <select> value update needs to occur after <option> children
      // reconciliation
      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);}}, 



  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || 
      !lastProps.hasOwnProperty(propKey) || 
      lastProps[propKey] == null) {
        continue;}

      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';}}


        this._previousStyleCopy = null;} else 
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);}} else 

      if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(
          getNode(this), 
          propKey);}} else 


      if (
      DOMProperty.properties[propKey] || 
      DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);}}


    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = 
      propKey === STYLE ? this._previousStyleCopy : 
      lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || 
      nextProp === lastProp || 
      nextProp == null && lastProp == null) {
        continue;}

      if (propKey === STYLE) {
        if (nextProp) {
          if (__DEV__) {
            checkAndWarnForMutatedStyle(
            this._previousStyleCopy, 
            this._previousStyle, 
            this);

            this._previousStyle = nextProp;}

          nextProp = this._previousStyleCopy = _assign({}, nextProp);} else 
        {
          this._previousStyleCopy = null;}

        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (
            !nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';}}


          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && 
            lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];}}} else 


        {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;}} else 

      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);} else 
        if (lastProp) {
          deleteListener(this, propKey);}} else 

      if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(
          getNode(this), 
          propKey, 
          nextProp);}} else 


      if (
      DOMProperty.properties[propKey] || 
      DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);} else 
        {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);}}}



    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(
      getNode(this), 
      styleUpdates, 
      this);}}, 




  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = 
    CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = 
    CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = 
    lastProps.dangerouslySetInnerHTML && 
    lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = 
    nextProps.dangerouslySetInnerHTML && 
    nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);} else 
    if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (__DEV__) {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);}}



    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (__DEV__) {
          setContentChildForInstrumentation.call(this, nextContent);}}} else 


    if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);}

      if (__DEV__) {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);}} else 

    if (nextChildren != null) {
      if (__DEV__) {
        setContentChildForInstrumentation.call(this, null);}


      this.updateChildren(nextChildren, transaction, context);}}, 



  getHostNode: function () {
    return getNode(this);}, 


  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();}}


        break;
      case 'input':
      case 'textarea':
        inputValueTracking.stopTracking(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        invariant(
        false, 
        '<%s> tried to unmount. Because of cross-browser quirks it is ' + 
        'impossible to unmount some top-level components (eg <html>, ' + 
        '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 
        'single top-level component that never unmounts render these ' + 
        'elements.', 
        this._tag);

        break;}


    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
    this._domID = null;
    this._wrapperState = null;

    if (__DEV__) {
      setContentChildForInstrumentation.call(this, null);}}, 



  getPublicInstance: function () {
    return getNode(this);} };




_assign(
ReactDOMComponent.prototype, 
ReactDOMComponent.Mixin, 
ReactMultiChild.Mixin);


module.exports = ReactDOMComponent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactBrowserEventEmitter.js":65,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\inputValueTracking.js":101,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMLazyTree.js":120,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\isEventSupported.js":133,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\validateDOMNesting.js":136,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\AutoFocusUtils.js":137,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\ReactDOMButton.js":140,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\ReactDOMInput.js":141,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\ReactDOMOption.js":142,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\ReactDOMSelect.js":143,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\wrappers\\ReactDOMTextarea.js":144,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactServerRenderingTransaction.js":154,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\CSSPropertyOperations.js":157,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMNamespaces.js":158,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js":159,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMPropertyOperations.js":160,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactComponentBrowserEnvironment.js":163,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMComponentFlags.js":165,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\escapeTextContentForBrowser.js":186,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js":228,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactMultiChild.js":247,"fbjs/lib/emptyFunction":406,"fbjs/lib/invariant":414,"fbjs/lib/keyOf":418,"fbjs/lib/shallowEqual":423,"fbjs/lib/warning":424,"object-assign":425}],165:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponentFlags
 */

'use strict';

var ReactDOMComponentFlags = { 
  hasCachedChildNodes: 1 << 0 };


module.exports = ReactDOMComponentFlags;
},{}],166:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMContainerInfo
 */

'use strict';

var validateDOMNesting = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\validateDOMNesting.js');

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = { 
    _topLevelWrapper: topLevelWrapper, 
    _idCounter: 1, 
    _ownerDocument: node ? 
    node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : 
    null, 
    _node: node, 
    _tag: node ? node.nodeName.toLowerCase() : null, 
    _namespaceURI: node ? node.namespaceURI : null };

  if (__DEV__) {
    info._ancestorInfo = node ? 
    validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;}

  return info;}


module.exports = ReactDOMContainerInfo;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\validateDOMNesting.js":136}],167:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMDebugTool
 */

'use strict';

var ReactDOMUnknownPropertyDevtool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\devtools\\ReactDOMUnknownPropertyDevtool.js');
var ReactDebugTool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactDebugTool.js');

var warning = require('fbjs/lib/warning');

var eventHandlers = [];
var handlerDoesThrowForEvent = {};

function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
  if (__DEV__) {
    eventHandlers.forEach(function (handler) {
      try {
        if (handler[handlerFunctionName]) {
          handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);}} 

      catch (e) {
        warning(
        handlerDoesThrowForEvent[handlerFunctionName], 
        'exception thrown by devtool while handling %s: %s', 
        handlerFunctionName, 
        e + '\n' + e.stack);

        handlerDoesThrowForEvent[handlerFunctionName] = true;}});}}





var ReactDOMDebugTool = { 
  addDevtool: function (devtool) {
    ReactDebugTool.addDevtool(devtool);
    eventHandlers.push(devtool);}, 

  removeDevtool: function (devtool) {
    ReactDebugTool.removeDevtool(devtool);
    for (var i = 0; i < eventHandlers.length; i++) {
      if (eventHandlers[i] === devtool) {
        eventHandlers.splice(i, 1);
        i--;}}}, 



  onCreateMarkupForProperty: function (name, value) {
    emitEvent('onCreateMarkupForProperty', name, value);}, 

  onSetValueForProperty: function (node, name, value) {
    emitEvent('onSetValueForProperty', node, name, value);}, 

  onDeleteValueForProperty: function (node, name) {
    emitEvent('onDeleteValueForProperty', node, name);}, 

  onTestEvent: function () {
    emitEvent('onTestEvent');} };



ReactDOMDebugTool.addDevtool(ReactDOMUnknownPropertyDevtool);

module.exports = ReactDOMDebugTool;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\devtools\\ReactDOMUnknownPropertyDevtool.js":185,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactDebugTool.js":206,"fbjs/lib/warning":424}],168:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMEmptyComponent
 */

'use strict';var _assign = require('object-assign');

var DOMLazyTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMLazyTree.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');


var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = null;};

_assign(ReactDOMEmptyComponent.prototype, { 
  mountComponent: function (
  transaction, 
  hostParent, 
  hostContainerInfo, 
  context) 
  {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);} else 
    {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';}

      return '<!--' + nodeValue + '-->';}}, 


  receiveComponent: function () {}, 

  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);}, 

  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);} });



module.exports = ReactDOMEmptyComponent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMLazyTree.js":120,"object-assign":425}],169:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFeatureFlags
 */

'use strict';

var ReactDOMFeatureFlags = { 
  useCreateElement: true };


module.exports = ReactDOMFeatureFlags;
},{}],170:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInstrumentation
 */

'use strict';

var ReactDOMDebugTool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMDebugTool.js');

module.exports = { debugTool: ReactDOMDebugTool };
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMDebugTool.js":167}],171:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 */

'use strict';var _assign = require('object-assign');

var DOMChildrenOperations = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMChildrenOperations.js');
var DOMLazyTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMLazyTree.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');

var escapeTextContentForBrowser = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\escapeTextContentForBrowser.js');
var invariant = require('fbjs/lib/invariant');
var validateDOMNesting = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\validateDOMNesting.js');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = null;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;};


_assign(ReactDOMTextComponent.prototype, { 

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (
  transaction, 
  hostParent, 
  hostContainerInfo, 
  context) 
  {
    if (__DEV__) {
      ReactInstrumentation.debugTool.onSetText(this._debugID, this._stringText);

      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;} else 
      if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;}

      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting('#text', this, parentInfo);}}



    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(
        lazyTree, 
        DOMLazyTree(ownerDocument.createTextNode(this._stringText)));}


      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;} else 
    {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;}


      return (
        '<!--' + openingValue + '-->' + escapedText + 
        '<!--' + closingValue + '-->');}}, 




  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(
        commentNodes[0], 
        commentNodes[1], 
        nextStringText);


        if (__DEV__) {
          ReactInstrumentation.debugTool.onSetText(
          this._debugID, 
          nextStringText);}}}}, 






  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;}

    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        invariant(
        node != null, 
        'Missing closing comment for text component %s', 
        this._domID);

        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;}

        node = node.nextSibling;}}


    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;}, 


  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);} });




module.exports = ReactDOMTextComponent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMChildrenOperations.js":119,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\DOMLazyTree.js":120,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\validateDOMNesting.js":136,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\escapeTextContentForBrowser.js":186,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"fbjs/lib/invariant":414,"object-assign":425}],172:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\BeforeInputEventPlugin.js');
var ChangeEventPlugin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\ChangeEventPlugin.js');
var DefaultEventPluginOrder = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\DefaultEventPluginOrder.js');
var EnterLeaveEventPlugin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\EnterLeaveEventPlugin.js');
var HTMLDOMPropertyConfig = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\HTMLDOMPropertyConfig.js');
var ReactComponentBrowserEnvironment = 
require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactComponentBrowserEnvironment.js');
var ReactDOMComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMComponent.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactDOMEmptyComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMEmptyComponent.js');
var ReactDOMTreeTraversal = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMTreeTraversal.js');
var ReactDOMTextComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMTextComponent.js');
var ReactDefaultBatchingStrategy = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactDefaultBatchingStrategy.js');
var ReactEventListener = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactEventListener.js');
var ReactInjection = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactInjection.js');
var ReactReconcileTransaction = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactReconcileTransaction.js');
var SVGDOMPropertyConfig = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\SVGDOMPropertyConfig.js');
var SelectEventPlugin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\SelectEventPlugin.js');
var SimpleEventPlugin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\SimpleEventPlugin.js');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;}

  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(
  ReactEventListener);


  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({ 
    SimpleEventPlugin: SimpleEventPlugin, 
    EnterLeaveEventPlugin: EnterLeaveEventPlugin, 
    ChangeEventPlugin: ChangeEventPlugin, 
    SelectEventPlugin: SelectEventPlugin, 
    BeforeInputEventPlugin: BeforeInputEventPlugin });


  ReactInjection.HostComponent.injectGenericComponentClass(
  ReactDOMComponent);


  ReactInjection.HostComponent.injectTextComponentClass(
  ReactDOMTextComponent);


  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(
  function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);});



  ReactInjection.Updates.injectReconcileTransaction(
  ReactReconcileTransaction);

  ReactInjection.Updates.injectBatchingStrategy(
  ReactDefaultBatchingStrategy);


  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);}


module.exports = { 
  inject: inject };
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMTreeTraversal.js":69,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactEventListener.js":70,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactReconcileTransaction.js":73,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\BeforeInputEventPlugin.js":88,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\ChangeEventPlugin.js":89,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\DefaultEventPluginOrder.js":90,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\EnterLeaveEventPlugin.js":91,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\SelectEventPlugin.js":93,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\SimpleEventPlugin.js":94,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\HTMLDOMPropertyConfig.js":162,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactComponentBrowserEnvironment.js":163,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMComponent.js":164,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMEmptyComponent.js":168,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMTextComponent.js":171,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactInjection.js":173,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\SVGDOMPropertyConfig.js":174,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactDefaultBatchingStrategy.js":241}],173:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js');
var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
var EventPluginUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js');
var ReactComponentEnvironment = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactComponentEnvironment.js');
var ReactClass = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\class\\ReactClass.js');
var ReactEmptyComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactEmptyComponent.js');
var ReactBrowserEventEmitter = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactBrowserEventEmitter.js');
var ReactHostComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactHostComponent.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');

var ReactInjection = { 
  Component: ReactComponentEnvironment.injection, 
  Class: ReactClass.injection, 
  DOMProperty: DOMProperty.injection, 
  EmptyComponent: ReactEmptyComponent.injection, 
  EventPluginHub: EventPluginHub.injection, 
  EventPluginUtils: EventPluginUtils.injection, 
  EventEmitter: ReactBrowserEventEmitter.injection, 
  HostComponent: ReactHostComponent.injection, 
  Updates: ReactUpdates.injection };


module.exports = ReactInjection;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\class\\ReactClass.js":33,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactBrowserEventEmitter.js":65,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js":159,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js":229,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactComponentEnvironment.js":239,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactEmptyComponent.js":242,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactHostComponent.js":244,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255}],174:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

'use strict';

var NS = { 
  xlink: 'http://www.w3.org/1999/xlink', 
  xml: 'http://www.w3.org/XML/1998/namespace' };


// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = { 
  accentHeight: 'accent-height', 
  accumulate: 0, 
  additive: 0, 
  alignmentBaseline: 'alignment-baseline', 
  allowReorder: 'allowReorder', 
  alphabetic: 0, 
  amplitude: 0, 
  arabicForm: 'arabic-form', 
  ascent: 0, 
  attributeName: 'attributeName', 
  attributeType: 'attributeType', 
  autoReverse: 'autoReverse', 
  azimuth: 0, 
  baseFrequency: 'baseFrequency', 
  baseProfile: 'baseProfile', 
  baselineShift: 'baseline-shift', 
  bbox: 0, 
  begin: 0, 
  bias: 0, 
  by: 0, 
  calcMode: 'calcMode', 
  capHeight: 'cap-height', 
  clip: 0, 
  clipPath: 'clip-path', 
  clipRule: 'clip-rule', 
  clipPathUnits: 'clipPathUnits', 
  colorInterpolation: 'color-interpolation', 
  colorInterpolationFilters: 'color-interpolation-filters', 
  colorProfile: 'color-profile', 
  colorRendering: 'color-rendering', 
  contentScriptType: 'contentScriptType', 
  contentStyleType: 'contentStyleType', 
  cursor: 0, 
  cx: 0, 
  cy: 0, 
  d: 0, 
  decelerate: 0, 
  descent: 0, 
  diffuseConstant: 'diffuseConstant', 
  direction: 0, 
  display: 0, 
  divisor: 0, 
  dominantBaseline: 'dominant-baseline', 
  dur: 0, 
  dx: 0, 
  dy: 0, 
  edgeMode: 'edgeMode', 
  elevation: 0, 
  enableBackground: 'enable-background', 
  end: 0, 
  exponent: 0, 
  externalResourcesRequired: 'externalResourcesRequired', 
  fill: 0, 
  fillOpacity: 'fill-opacity', 
  fillRule: 'fill-rule', 
  filter: 0, 
  filterRes: 'filterRes', 
  filterUnits: 'filterUnits', 
  floodColor: 'flood-color', 
  floodOpacity: 'flood-opacity', 
  focusable: 0, 
  fontFamily: 'font-family', 
  fontSize: 'font-size', 
  fontSizeAdjust: 'font-size-adjust', 
  fontStretch: 'font-stretch', 
  fontStyle: 'font-style', 
  fontVariant: 'font-variant', 
  fontWeight: 'font-weight', 
  format: 0, 
  from: 0, 
  fx: 0, 
  fy: 0, 
  g1: 0, 
  g2: 0, 
  glyphName: 'glyph-name', 
  glyphOrientationHorizontal: 'glyph-orientation-horizontal', 
  glyphOrientationVertical: 'glyph-orientation-vertical', 
  glyphRef: 'glyphRef', 
  gradientTransform: 'gradientTransform', 
  gradientUnits: 'gradientUnits', 
  hanging: 0, 
  horizAdvX: 'horiz-adv-x', 
  horizOriginX: 'horiz-origin-x', 
  ideographic: 0, 
  imageRendering: 'image-rendering', 
  'in': 0, 
  in2: 0, 
  intercept: 0, 
  k: 0, 
  k1: 0, 
  k2: 0, 
  k3: 0, 
  k4: 0, 
  kernelMatrix: 'kernelMatrix', 
  kernelUnitLength: 'kernelUnitLength', 
  kerning: 0, 
  keyPoints: 'keyPoints', 
  keySplines: 'keySplines', 
  keyTimes: 'keyTimes', 
  lengthAdjust: 'lengthAdjust', 
  letterSpacing: 'letter-spacing', 
  lightingColor: 'lighting-color', 
  limitingConeAngle: 'limitingConeAngle', 
  local: 0, 
  markerEnd: 'marker-end', 
  markerMid: 'marker-mid', 
  markerStart: 'marker-start', 
  markerHeight: 'markerHeight', 
  markerUnits: 'markerUnits', 
  markerWidth: 'markerWidth', 
  mask: 0, 
  maskContentUnits: 'maskContentUnits', 
  maskUnits: 'maskUnits', 
  mathematical: 0, 
  mode: 0, 
  numOctaves: 'numOctaves', 
  offset: 0, 
  opacity: 0, 
  operator: 0, 
  order: 0, 
  orient: 0, 
  orientation: 0, 
  origin: 0, 
  overflow: 0, 
  overlinePosition: 'overline-position', 
  overlineThickness: 'overline-thickness', 
  paintOrder: 'paint-order', 
  panose1: 'panose-1', 
  pathLength: 'pathLength', 
  patternContentUnits: 'patternContentUnits', 
  patternTransform: 'patternTransform', 
  patternUnits: 'patternUnits', 
  pointerEvents: 'pointer-events', 
  points: 0, 
  pointsAtX: 'pointsAtX', 
  pointsAtY: 'pointsAtY', 
  pointsAtZ: 'pointsAtZ', 
  preserveAlpha: 'preserveAlpha', 
  preserveAspectRatio: 'preserveAspectRatio', 
  primitiveUnits: 'primitiveUnits', 
  r: 0, 
  radius: 0, 
  refX: 'refX', 
  refY: 'refY', 
  renderingIntent: 'rendering-intent', 
  repeatCount: 'repeatCount', 
  repeatDur: 'repeatDur', 
  requiredExtensions: 'requiredExtensions', 
  requiredFeatures: 'requiredFeatures', 
  restart: 0, 
  result: 0, 
  rotate: 0, 
  rx: 0, 
  ry: 0, 
  scale: 0, 
  seed: 0, 
  shapeRendering: 'shape-rendering', 
  slope: 0, 
  spacing: 0, 
  specularConstant: 'specularConstant', 
  specularExponent: 'specularExponent', 
  speed: 0, 
  spreadMethod: 'spreadMethod', 
  startOffset: 'startOffset', 
  stdDeviation: 'stdDeviation', 
  stemh: 0, 
  stemv: 0, 
  stitchTiles: 'stitchTiles', 
  stopColor: 'stop-color', 
  stopOpacity: 'stop-opacity', 
  strikethroughPosition: 'strikethrough-position', 
  strikethroughThickness: 'strikethrough-thickness', 
  string: 0, 
  stroke: 0, 
  strokeDasharray: 'stroke-dasharray', 
  strokeDashoffset: 'stroke-dashoffset', 
  strokeLinecap: 'stroke-linecap', 
  strokeLinejoin: 'stroke-linejoin', 
  strokeMiterlimit: 'stroke-miterlimit', 
  strokeOpacity: 'stroke-opacity', 
  strokeWidth: 'stroke-width', 
  surfaceScale: 'surfaceScale', 
  systemLanguage: 'systemLanguage', 
  tableValues: 'tableValues', 
  targetX: 'targetX', 
  targetY: 'targetY', 
  textAnchor: 'text-anchor', 
  textDecoration: 'text-decoration', 
  textRendering: 'text-rendering', 
  textLength: 'textLength', 
  to: 0, 
  transform: 0, 
  u1: 0, 
  u2: 0, 
  underlinePosition: 'underline-position', 
  underlineThickness: 'underline-thickness', 
  unicode: 0, 
  unicodeBidi: 'unicode-bidi', 
  unicodeRange: 'unicode-range', 
  unitsPerEm: 'units-per-em', 
  vAlphabetic: 'v-alphabetic', 
  vHanging: 'v-hanging', 
  vIdeographic: 'v-ideographic', 
  vMathematical: 'v-mathematical', 
  values: 0, 
  vectorEffect: 'vector-effect', 
  version: 0, 
  vertAdvY: 'vert-adv-y', 
  vertOriginX: 'vert-origin-x', 
  vertOriginY: 'vert-origin-y', 
  viewBox: 'viewBox', 
  viewTarget: 'viewTarget', 
  visibility: 0, 
  widths: 0, 
  wordSpacing: 'word-spacing', 
  writingMode: 'writing-mode', 
  x: 0, 
  xHeight: 'x-height', 
  x1: 0, 
  x2: 0, 
  xChannelSelector: 'xChannelSelector', 
  xlinkActuate: 'xlink:actuate', 
  xlinkArcrole: 'xlink:arcrole', 
  xlinkHref: 'xlink:href', 
  xlinkRole: 'xlink:role', 
  xlinkShow: 'xlink:show', 
  xlinkTitle: 'xlink:title', 
  xlinkType: 'xlink:type', 
  xmlBase: 'xml:base', 
  xmlLang: 'xml:lang', 
  xmlSpace: 'xml:space', 
  y: 0, 
  y1: 0, 
  y2: 0, 
  yChannelSelector: 'yChannelSelector', 
  z: 0, 
  zoomAndPan: 'zoomAndPan' };


var SVGDOMPropertyConfig = { 
  Properties: {}, 
  DOMAttributeNamespaces: { 
    xlinkActuate: NS.xlink, 
    xlinkArcrole: NS.xlink, 
    xlinkHref: NS.xlink, 
    xlinkRole: NS.xlink, 
    xlinkShow: NS.xlink, 
    xlinkTitle: NS.xlink, 
    xlinkType: NS.xlink, 
    xmlBase: NS.xml, 
    xmlLang: NS.xml, 
    xmlSpace: NS.xml }, 

  DOMAttributeNames: {} };


Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];}});



module.exports = SVGDOMPropertyConfig;
},{}],175:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

describe('CSSProperty', function () {
  var CSSProperty;

  beforeEach(function () {
    jest.resetModuleRegistry();
    CSSProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\CSSProperty.js');});


  it('should generate browser prefixes for its `isUnitlessNumber`', function () {
    expect(CSSProperty.isUnitlessNumber.lineClamp).toBeTruthy();
    expect(CSSProperty.isUnitlessNumber.WebkitLineClamp).toBeTruthy();
    expect(CSSProperty.isUnitlessNumber.msFlexGrow).toBeTruthy();
    expect(CSSProperty.isUnitlessNumber.MozFlexGrow).toBeTruthy();
    expect(CSSProperty.isUnitlessNumber.msGridRow).toBeTruthy();
    expect(CSSProperty.isUnitlessNumber.msGridColumn).toBeTruthy();});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\CSSProperty.js":156}],176:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\shared\\__tests__\\CSSPropertyOperations-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
var ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');

describe('CSSPropertyOperations', function () {
  var CSSPropertyOperations;

  beforeEach(function () {
    jest.resetModuleRegistry();
    CSSPropertyOperations = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\CSSPropertyOperations.js');});


  it('should create markup for simple styles', function () {
    expect(CSSPropertyOperations.createMarkupForStyles({ 
      backgroundColor: '#3b5998', 
      display: 'none' })).
    toBe('background-color:#3b5998;display:none;');});


  it('should ignore undefined styles', function () {
    expect(CSSPropertyOperations.createMarkupForStyles({ 
      backgroundColor: undefined, 
      display: 'none' })).
    toBe('display:none;');});


  it('should ignore null styles', function () {
    expect(CSSPropertyOperations.createMarkupForStyles({ 
      backgroundColor: null, 
      display: 'none' })).
    toBe('display:none;');});


  it('should return null for no styles', function () {
    expect(CSSPropertyOperations.createMarkupForStyles({ 
      backgroundColor: null, 
      display: null })).
    toBe(null);});


  it('should automatically append `px` to relevant styles', function () {
    expect(CSSPropertyOperations.createMarkupForStyles({ 
      left: 0, 
      margin: 16, 
      opacity: 0.5, 
      padding: '4px' })).
    toBe('left:0;margin:16px;opacity:0.5;padding:4px;');});


  it('should trim values so `px` will be appended correctly', function () {
    expect(CSSPropertyOperations.createMarkupForStyles({ 
      margin: '16 ', 
      opacity: 0.5, 
      padding: ' 4 ' })).
    toBe('margin:16px;opacity:0.5;padding:4px;');});


  it('should not append `px` to styles that might need a number', function () {
    var CSSProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\CSSProperty.js');
    var unitlessProperties = Object.keys(CSSProperty.isUnitlessNumber);
    unitlessProperties.forEach(function (property) {
      var styles = {};
      styles[property] = 1;
      expect(CSSPropertyOperations.createMarkupForStyles(styles)).
      toMatch(/:1;$/);});});



  it('should create vendor-prefixed markup correctly', function () {
    expect(CSSPropertyOperations.createMarkupForStyles({ 
      msTransition: 'none', 
      MozTransition: 'none' })).
    toBe('-ms-transition:none;-moz-transition:none;');});


  it('should set style attribute when styles exist', function () {
    var styles = { 
      backgroundColor: '#000', 
      display: 'none' };

    var div = React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 94 } });
    var root = document.createElement('div');
    div = ReactDOM.render(div, root);
    expect(/style=".*"/.test(root.innerHTML)).toBe(true);});


  it('should not set style attribute when no styles exist', function () {
    var styles = { 
      backgroundColor: null, 
      display: null };

    var div = React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 105 } });
    var html = ReactDOMServer.renderToString(div);
    expect(/style=/.test(html)).toBe(false);});


  it('should warn when using hyphenated style names', function () {
    var Comp = React.createClass({ 
      displayName: 'Comp', 
      render: function () {
        return React.createElement('div', { style: { 'background-color': 'crimson' }, __source: { fileName: _jsxFileName, lineNumber: 114 } });} });


    spyOn(console, 'error');
    var root = document.createElement('div');
    ReactDOM.render(React.createElement(Comp, { __source: { fileName: _jsxFileName, lineNumber: 119 } }), root);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toEqual(
    'Warning: Unsupported style property background-color. Did you mean backgroundColor? ' + 
    'Check the render method of `Comp`.');});



  it('should warn when updating hyphenated style names', function () {
    var Comp = React.createClass({ 
      displayName: 'Comp', 
      render: function () {
        return React.createElement('div', { style: this.props.style, __source: { fileName: _jsxFileName, lineNumber: 131 } });} });


    spyOn(console, 'error');
    var styles = { 
      '-ms-transform': 'translate3d(0, 0, 0)', 
      '-webkit-transform': 'translate3d(0, 0, 0)' };

    var root = document.createElement('div');
    ReactDOM.render(React.createElement(Comp, { __source: { fileName: _jsxFileName, lineNumber: 140 } }), root);
    ReactDOM.render(React.createElement(Comp, { style: styles, __source: { fileName: _jsxFileName, lineNumber: 141 } }), root);

    expect(console.error.calls.count()).toBe(2);
    expect(console.error.calls.argsFor(0)[0]).toEqual(
    'Warning: Unsupported style property -ms-transform. Did you mean msTransform? ' + 
    'Check the render method of `Comp`.');

    expect(console.error.calls.argsFor(1)[0]).toEqual(
    'Warning: Unsupported style property -webkit-transform. Did you mean WebkitTransform? ' + 
    'Check the render method of `Comp`.');});



  it('warns when miscapitalizing vendored style names', function () {
    var Comp = React.createClass({ 
      displayName: 'Comp', 
      render: function () {
        return React.createElement('div', { style: { 
            msTransform: 'translate3d(0, 0, 0)', 
            oTransform: 'translate3d(0, 0, 0)', 
            webkitTransform: 'translate3d(0, 0, 0)' }, __source: { fileName: _jsxFileName, lineNumber: 158 } });} });



    spyOn(console, 'error');
    var root = document.createElement('div');
    ReactDOM.render(React.createElement(Comp, { __source: { fileName: _jsxFileName, lineNumber: 167 } }), root);
    // msTransform is correct already and shouldn't warn
    expect(console.error.calls.count()).toBe(2);
    expect(console.error.calls.argsFor(0)[0]).toEqual(
    'Warning: Unsupported vendor-prefixed style property oTransform. ' + 
    'Did you mean OTransform? Check the render method of `Comp`.');

    expect(console.error.calls.argsFor(1)[0]).toEqual(
    'Warning: Unsupported vendor-prefixed style property webkitTransform. ' + 
    'Did you mean WebkitTransform? Check the render method of `Comp`.');});



  it('should warn about style having a trailing semicolon', function () {
    var Comp = React.createClass({ 
      displayName: 'Comp', 
      render: function () {
        return React.createElement('div', { style: { 
            fontFamily: 'Helvetica, arial', 
            backgroundImage: 'url(foo;bar)', 
            backgroundColor: 'blue;', 
            color: 'red;   ' }, __source: { fileName: _jsxFileName, lineNumber: 184 } });} });



    spyOn(console, 'error');
    var root = document.createElement('div');
    ReactDOM.render(React.createElement(Comp, { __source: { fileName: _jsxFileName, lineNumber: 194 } }), root);
    expect(console.error.calls.count()).toBe(2);
    expect(console.error.calls.argsFor(0)[0]).toEqual(
    'Warning: Style property values shouldn\'t contain a semicolon. ' + 
    'Check the render method of `Comp`. Try "backgroundColor: blue" instead.');

    expect(console.error.calls.argsFor(1)[0]).toEqual(
    'Warning: Style property values shouldn\'t contain a semicolon. ' + 
    'Check the render method of `Comp`. Try "color: red" instead.');});



  it('should warn about style containing a NaN value', function () {
    var Comp = React.createClass({ 
      displayName: 'Comp', 
      render: function () {
        return React.createElement('div', { style: { fontSize: NaN }, __source: { fileName: _jsxFileName, lineNumber: 210 } });} });


    spyOn(console, 'error');
    var root = document.createElement('div');
    ReactDOM.render(React.createElement(Comp, { __source: { fileName: _jsxFileName, lineNumber: 215 } }), root);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toEqual(
    'Warning: `NaN` is an invalid value for the `fontSize` css style property. ' + 
    'Check the render method of `Comp`.');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\CSSProperty.js":156,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\CSSPropertyOperations.js":157}],177:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

describe('DOMPropertyOperations', function () {
  var DOMPropertyOperations;
  var DOMProperty;
  var ReactDOMComponentTree;

  beforeEach(function () {
    jest.resetModuleRegistry();
    var ReactDefaultInjection = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDefaultInjection.js');
    ReactDefaultInjection.inject();

    DOMPropertyOperations = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMPropertyOperations.js');
    DOMProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js');
    ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');});


  describe('createMarkupForProperty', function () {

    it('should create markup for simple properties', function () {
      expect(DOMPropertyOperations.createMarkupForProperty(
      'name', 
      'simple')).
      toBe('name="simple"');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'name', 
      false)).
      toBe('name="false"');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'name', 
      null)).
      toBe('');});


    it('should work with the id attribute', function () {
      expect(DOMPropertyOperations.createMarkupForProperty(
      'id', 
      'simple')).
      toBe('id="simple"');});


    it('should create markup for boolean properties', function () {
      expect(DOMPropertyOperations.createMarkupForProperty(
      'checked', 
      'simple')).
      toBe('checked=""');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'checked', 
      true)).
      toBe('checked=""');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'checked', 
      false)).
      toBe('');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'scoped', 
      true)).
      toBe('scoped=""');});


    it('should create markup for booleanish properties', function () {
      expect(DOMPropertyOperations.createMarkupForProperty(
      'download', 
      'simple')).
      toBe('download="simple"');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'download', 
      true)).
      toBe('download=""');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'download', 
      'true')).
      toBe('download="true"');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'download', 
      false)).
      toBe('');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'download', 
      'false')).
      toBe('download="false"');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'download', 
      undefined)).
      toBe('');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'download', 
      null)).
      toBe('');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'download', 
      0)).
      toBe('download="0"');});


    it('should create markup for custom attributes', function () {
      expect(DOMPropertyOperations.createMarkupForProperty(
      'aria-label', 
      'simple')).
      toBe('aria-label="simple"');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'aria-label', 
      false)).
      toBe('aria-label="false"');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'aria-label', 
      null)).
      toBe('');});


    it('should create markup for numeric properties', function () {
      expect(DOMPropertyOperations.createMarkupForProperty(
      'start', 
      5)).
      toBe('start="5"');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'start', 
      0)).
      toBe('start="0"');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'size', 
      0)).
      toBe('');

      expect(DOMPropertyOperations.createMarkupForProperty(
      'size', 
      1)).
      toBe('size="1"');});});




  describe('createMarkupForProperty', function () {

    it('should allow custom properties on web components', function () {
      expect(DOMPropertyOperations.createMarkupForCustomAttribute(
      'awesomeness', 
      5)).
      toBe('awesomeness="5"');

      expect(DOMPropertyOperations.createMarkupForCustomAttribute(
      'dev', 
      'jim')).
      toBe('dev="jim"');});});



  describe('setValueForProperty', function () {
    var stubNode;
    var stubInstance;

    beforeEach(function () {
      stubNode = document.createElement('div');
      stubInstance = { _debugID: 1 };
      ReactDOMComponentTree.precacheNode(stubInstance, stubNode);});


    it('should set values as properties by default', function () {
      DOMPropertyOperations.setValueForProperty(stubNode, 'title', 'Tip!');
      expect(stubNode.title).toBe('Tip!');});


    it('should set values as attributes if necessary', function () {
      DOMPropertyOperations.setValueForProperty(stubNode, 'role', '#');
      expect(stubNode.getAttribute('role')).toBe('#');
      expect(stubNode.role).toBeUndefined();});


    it('should set values as namespace attributes if necessary', function () {
      spyOn(stubNode, 'setAttributeNS');
      DOMPropertyOperations.setValueForProperty(
      stubNode, 
      'xlinkHref', 
      'about:blank');

      expect(stubNode.setAttributeNS.calls.count()).toBe(1);
      expect(stubNode.setAttributeNS.calls.argsFor(0)).
      toEqual(['http://www.w3.org/1999/xlink', 'xlink:href', 'about:blank']);});


    it('should set values as boolean properties', function () {
      DOMPropertyOperations.setValueForProperty(stubNode, 'disabled', 'disabled');
      expect(stubNode.getAttribute('disabled')).toBe('');
      DOMPropertyOperations.setValueForProperty(stubNode, 'disabled', true);
      expect(stubNode.getAttribute('disabled')).toBe('');
      DOMPropertyOperations.setValueForProperty(stubNode, 'disabled', false);
      expect(stubNode.getAttribute('disabled')).toBe(null);});


    it('should convert attribute values to string first', function () {
      // Browsers default to this behavior, but some test environments do not.
      // This ensures that we have consistent behavior.
      var obj = { 
        toString: function () {
          return '<html>';} };


      DOMPropertyOperations.setValueForProperty(stubNode, 'role', obj);
      expect(stubNode.getAttribute('role')).toBe('<html>');});


    it('should not remove empty attributes for special properties', function () {
      stubNode = document.createElement('input');
      ReactDOMComponentTree.precacheNode(stubInstance, stubNode);

      DOMPropertyOperations.setValueForProperty(stubNode, 'value', '');
      // JSDOM does not behave correctly for attributes/properties
      //expect(stubNode.getAttribute('value')).toBe('');
      expect(stubNode.value).toBe('');});


    it('should remove for falsey boolean properties', function () {
      DOMPropertyOperations.setValueForProperty(
      stubNode, 
      'allowFullScreen', 
      false);

      expect(stubNode.hasAttribute('allowFullScreen')).toBe(false);});


    it('should remove when setting custom attr to null', function () {
      DOMPropertyOperations.setValueForProperty(
      stubNode, 
      'data-foo', 
      'bar');

      expect(stubNode.hasAttribute('data-foo')).toBe(true);
      DOMPropertyOperations.setValueForProperty(
      stubNode, 
      'data-foo', 
      null);

      expect(stubNode.hasAttribute('data-foo')).toBe(false);});


    it('should use mutation method where applicable', function () {
      var foobarSetter = jest.fn();
      // inject foobar DOM property
      DOMProperty.injection.injectDOMPropertyConfig({ 
        Properties: { foobar: null }, 
        DOMMutationMethods: { 
          foobar: foobarSetter } });



      DOMPropertyOperations.setValueForProperty(
      stubNode, 
      'foobar', 
      'cows say moo');


      expect(foobarSetter.mock.calls.length).toBe(1);
      expect(foobarSetter.mock.calls[0][0]).toBe(stubNode);
      expect(foobarSetter.mock.calls[0][1]).toBe('cows say moo');});


    it('should set className to empty string instead of null', function () {
      DOMPropertyOperations.setValueForProperty(
      stubNode, 
      'className', 
      'selected');

      expect(stubNode.className).toBe('selected');

      DOMPropertyOperations.setValueForProperty(
      stubNode, 
      'className', 
      null);

      // className should be '', not 'null' or null (which becomes 'null' in
      // some browsers)
      expect(stubNode.className).toBe('');
      expect(stubNode.getAttribute('class')).toBe(null);});


    it('should remove property properly for boolean properties', function () {
      DOMPropertyOperations.setValueForProperty(
      stubNode, 
      'hidden', 
      true);

      expect(stubNode.hasAttribute('hidden')).toBe(true);

      DOMPropertyOperations.setValueForProperty(
      stubNode, 
      'hidden', 
      false);

      expect(stubNode.hasAttribute('hidden')).toBe(false);});


    it('should remove property properly even with different name', function () {
      // Suppose 'foobar' is a property that corresponds to the underlying
      // 'className' property:
      DOMProperty.injection.injectDOMPropertyConfig({ 
        Properties: { foobar: DOMProperty.injection.MUST_USE_PROPERTY }, 
        DOMPropertyNames: { 
          foobar: 'className' }, 

        DOMAttributeNames: { 
          foobar: 'class' } });



      DOMPropertyOperations.setValueForProperty(
      stubNode, 
      'foobar', 
      'selected');

      expect(stubNode.className).toBe('selected');

      DOMPropertyOperations.setValueForProperty(
      stubNode, 
      'foobar', 
      null);

      // className should be '', not 'null' or null (which becomes 'null' in
      // some browsers)
      expect(stubNode.className).toBe('');});});




  describe('deleteValueForProperty', function () {
    var stubNode;
    var stubInstance;

    beforeEach(function () {
      stubNode = document.createElement('div');
      stubInstance = { _debugID: 1 };
      ReactDOMComponentTree.precacheNode(stubInstance, stubNode);});


    it('should remove attributes for normal properties', function () {
      DOMPropertyOperations.setValueForProperty(stubNode, 'title', 'foo');
      expect(stubNode.getAttribute('title')).toBe('foo');
      expect(stubNode.title).toBe('foo');

      DOMPropertyOperations.deleteValueForProperty(stubNode, 'title');
      expect(stubNode.getAttribute('title')).toBe(null);
      // JSDOM does not behave correctly for attributes/properties
      //expect(stubNode.title).toBe('');
    });

    it('should not remove attributes for special properties', function () {
      stubNode = document.createElement('input');
      ReactDOMComponentTree.precacheNode(stubInstance, stubNode);

      stubNode.setAttribute('value', 'foo');

      DOMPropertyOperations.deleteValueForProperty(stubNode, 'value');
      // JSDOM does not behave correctly for attributes/properties
      //expect(stubNode.getAttribute('value')).toBe('foo');
      expect(stubNode.value).toBe('');});


    it('should not leave all options selected when deleting multiple', function () {
      stubNode = document.createElement('select');
      ReactDOMComponentTree.precacheNode(stubInstance, stubNode);

      stubNode.multiple = true;
      stubNode.appendChild(document.createElement('option'));
      stubNode.appendChild(document.createElement('option'));
      stubNode.options[0].selected = true;
      stubNode.options[1].selected = true;

      DOMPropertyOperations.deleteValueForProperty(stubNode, 'multiple');
      expect(stubNode.getAttribute('multiple')).toBe(null);
      expect(stubNode.multiple).toBe(false);

      expect(
      stubNode.options[0].selected && 
      stubNode.options[1].selected).
      toBe(false);});});



  describe('injectDOMPropertyConfig', function () {
    it('should support custom attributes', function () {
      // foobar does not exist yet
      expect(DOMPropertyOperations.createMarkupForProperty(
      'foobar', 
      'simple')).
      toBe(null);

      // foo-* does not exist yet
      expect(DOMPropertyOperations.createMarkupForProperty(
      'foo-xyz', 
      'simple')).
      toBe(null);

      // inject foobar DOM property
      DOMProperty.injection.injectDOMPropertyConfig({ 
        isCustomAttribute: function (name) {
          return name.indexOf('foo-') === 0;}, 

        Properties: { foobar: null } });


      // Ensure old attributes still work
      expect(DOMPropertyOperations.createMarkupForProperty(
      'name', 
      'simple')).
      toBe('name="simple"');
      expect(DOMPropertyOperations.createMarkupForProperty(
      'data-name', 
      'simple')).
      toBe('data-name="simple"');

      // foobar should work
      expect(DOMPropertyOperations.createMarkupForProperty(
      'foobar', 
      'simple')).
      toBe('foobar="simple"');

      // foo-* should work
      expect(DOMPropertyOperations.createMarkupForProperty(
      'foo-xyz', 
      'simple')).
      toBe('foo-xyz="simple"');

      // It should complain about double injections.
      expect(function () {
        DOMProperty.injection.injectDOMPropertyConfig(
        { Properties: { foobar: null } });}).

      toThrow();});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js":159,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMPropertyOperations.js":160,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDefaultInjection.js":172}],178:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

describe('Danger', function () {

      describe('dangerouslyRenderMarkup', function () {
            var Danger;

            beforeEach(function () {
                  jest.resetModuleRegistry();
                  Danger = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\Danger.js');});


            it('should render markup', function () {
                  var markup = '<div data-reactid=".rX"></div>';
                  var output = Danger.dangerouslyRenderMarkup([markup])[0];

                  expect(output.nodeName).toBe('DIV');});


            it('should render markup with props', function () {
                  var markup = '<div class="foo" data-reactid=".rX"></div>';
                  var output = Danger.dangerouslyRenderMarkup([markup])[0];

                  expect(output.nodeName).toBe('DIV');
                  expect(output.className).toBe('foo');});


            it('should render wrapped markup', function () {
                  var markup = '<th data-reactid=".rX"></th>';
                  var output = Danger.dangerouslyRenderMarkup([markup])[0];

                  expect(output.nodeName).toBe('TH');});


            it('should render lists of markup with similar `nodeName`', function () {
                  var renderedMarkup = Danger.dangerouslyRenderMarkup(
                  ['<p id="A">1</p>', '<p id="B">2</p>', '<p id="C">3</p>']);


                  expect(renderedMarkup.length).toBe(3);

                  expect(renderedMarkup[0].nodeName).toBe('P');
                  expect(renderedMarkup[1].nodeName).toBe('P');
                  expect(renderedMarkup[2].nodeName).toBe('P');

                  expect(renderedMarkup[0].innerHTML).toBe('1');
                  expect(renderedMarkup[1].innerHTML).toBe('2');
                  expect(renderedMarkup[2].innerHTML).toBe('3');});


            it('should render lists of markup with different `nodeName`', function () {
                  var renderedMarkup = Danger.dangerouslyRenderMarkup(
                  ['<p id="A">1</p>', '<td id="B">2</td>', '<p id="C">3</p>']);


                  expect(renderedMarkup.length).toBe(3);

                  expect(renderedMarkup[0].nodeName).toBe('P');
                  expect(renderedMarkup[1].nodeName).toBe('TD');
                  expect(renderedMarkup[2].nodeName).toBe('P');

                  expect(renderedMarkup[0].innerHTML).toBe('1');
                  expect(renderedMarkup[1].innerHTML).toBe('2');
                  expect(renderedMarkup[2].innerHTML).toBe('3');});


            it('should throw when rendering invalid markup', function () {
                  expect(function () {
                        Danger.dangerouslyRenderMarkup(['']);}).
                  toThrowError(
                  'dangerouslyRenderMarkup(...): Missing markup.');


                  spyOn(console, 'error');

                  var renderedMarkup = Danger.dangerouslyRenderMarkup(['<p></p><p></p>']);
                  var args = console.error.calls.argsFor(0);

                  expect(renderedMarkup.length).toBe(1);
                  expect(renderedMarkup[0].nodeName).toBe('P');

                  expect(console.error.calls.count()).toBe(1);

                  expect(args.length).toBe(2);
                  expect(args[0]).toBe('Danger: Discarding unexpected node:');
                  expect(args[1].nodeName).toBe('P');});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\Danger.js":161}],179:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\shared\\__tests__\\ReactDOMComponent-test.js', _assign = require('object-assign');


describe('ReactDOMComponent', function () {
  var React;
  var ReactDOM;
  var ReactDOMFeatureFlags;
  var ReactDOMServer;
  var inputValueTracking;

  function normalizeCodeLocInfo(str) {
    return str.replace(/\(at .+?:\d+\)/g, '(at **)');}


  beforeEach(function () {
    jest.resetModuleRegistry();
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMFeatureFlags = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMFeatureFlags.js');
    ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');
    inputValueTracking = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\inputValueTracking.js');});


  describe('updateDOM', function () {
    var ReactTestUtils;

    beforeEach(function () {
      ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


    it('should handle className', function () {
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { style: {}, __source: { fileName: _jsxFileName, lineNumber: 44 } }), container);

      ReactDOM.render(React.createElement('div', { className: 'foo', __source: { fileName: _jsxFileName, lineNumber: 46 } }), container);
      expect(container.firstChild.className).toEqual('foo');
      ReactDOM.render(React.createElement('div', { className: 'bar', __source: { fileName: _jsxFileName, lineNumber: 48 } }), container);
      expect(container.firstChild.className).toEqual('bar');
      ReactDOM.render(React.createElement('div', { className: null, __source: { fileName: _jsxFileName, lineNumber: 50 } }), container);
      expect(container.firstChild.className).toEqual('');});


    it('should gracefully handle various style value types', function () {
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { style: {}, __source: { fileName: _jsxFileName, lineNumber: 56 } }), container);
      var stubStyle = container.firstChild.style;

      // set initial style
      var setup = { display: 'block', left: '1px', top: 2, fontFamily: 'Arial' };
      ReactDOM.render(React.createElement('div', { style: setup, __source: { fileName: _jsxFileName, lineNumber: 61 } }), container);
      expect(stubStyle.display).toEqual('block');
      expect(stubStyle.left).toEqual('1px');
      expect(stubStyle.fontFamily).toEqual('Arial');

      // reset the style to their default state
      var reset = { display: '', left: null, top: false, fontFamily: true };
      ReactDOM.render(React.createElement('div', { style: reset, __source: { fileName: _jsxFileName, lineNumber: 68 } }), container);
      expect(stubStyle.display).toEqual('');
      expect(stubStyle.left).toEqual('');
      expect(stubStyle.top).toEqual('');
      expect(stubStyle.fontFamily).toEqual('');});


    // TODO: (poshannessy) deprecate this pattern.
    it('should update styles when mutating style object', function () {
      // not actually used. Just to suppress the style mutation warning
      spyOn(console, 'error');

      var styles = { display: 'none', fontFamily: 'Arial', lineHeight: 1.2 };
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 82 } }), container);

      var stubStyle = container.firstChild.style;
      stubStyle.display = styles.display;
      stubStyle.fontFamily = styles.fontFamily;

      styles.display = 'block';

      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 90 } }), container);
      expect(stubStyle.display).toEqual('block');
      expect(stubStyle.fontFamily).toEqual('Arial');
      expect(stubStyle.lineHeight).toEqual('1.2');

      styles.fontFamily = 'Helvetica';

      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 97 } }), container);
      expect(stubStyle.display).toEqual('block');
      expect(stubStyle.fontFamily).toEqual('Helvetica');
      expect(stubStyle.lineHeight).toEqual('1.2');

      styles.lineHeight = 0.5;

      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 104 } }), container);
      expect(stubStyle.display).toEqual('block');
      expect(stubStyle.fontFamily).toEqual('Helvetica');
      expect(stubStyle.lineHeight).toEqual('0.5');

      ReactDOM.render(React.createElement('div', { style: undefined, __source: { fileName: _jsxFileName, lineNumber: 109 } }), container);
      expect(stubStyle.display).toBe('');
      expect(stubStyle.fontFamily).toBe('');
      expect(stubStyle.lineHeight).toBe('');});


    it('should warn when mutating style', function () {
      spyOn(console, 'error');

      var style = { border: '1px solid black' };
      var App = React.createClass({ displayName: 'App', 
        getInitialState: function () {
          return { style: style };}, 

        render: function () {
          return React.createElement('div', { style: this.state.style, __source: { fileName: _jsxFileName, lineNumber: 124 } }, 'asd');} });



      var stub = ReactTestUtils.renderIntoDocument(React.createElement(App, { __source: { fileName: _jsxFileName, lineNumber: 128 } }));
      style.position = 'absolute';
      stub.setState({ style: style });
      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toEqual(
      'Warning: `div` was passed a style object that has previously been ' + 
      'mutated. Mutating `style` is deprecated. Consider cloning it ' + 
      'beforehand. Check the `render` of `App`. Previous style: ' + 
      '{border: "1px solid black"}. Mutated style: ' + 
      '{border: "1px solid black", position: "absolute"}.');


      style = { background: 'red' };
      stub = ReactTestUtils.renderIntoDocument(React.createElement(App, { __source: { fileName: _jsxFileName, lineNumber: 141 } }));
      style.background = 'green';
      stub.setState({ style: { background: 'green' } });
      // already warned once for the same component and owner
      expect(console.error.calls.count()).toBe(1);

      style = { background: 'red' };
      var div = document.createElement('div');
      ReactDOM.render(React.createElement('span', { style: style, __source: { fileName: _jsxFileName, lineNumber: 149 } }), div);
      style.background = 'blue';
      ReactDOM.render(React.createElement('span', { style: style, __source: { fileName: _jsxFileName, lineNumber: 151 } }), div);
      expect(console.error.calls.count()).toBe(2);});


    it('should warn for unknown prop', function () {
      spyOn(console, 'error');
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { foo: 'bar', __source: { fileName: _jsxFileName, lineNumber: 158 } }), container);
      expect(console.error.calls.count(0)).toBe(1);
      expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
      'Warning: Unknown prop `foo` on <div> tag. Remove this prop from the element. ' + 
      'For details, see https://fb.me/react-unknown-prop\n    in div (at **)');});



    it('should warn for onDblClick prop', function () {
      spyOn(console, 'error');
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { onDblClick: function () {}, __source: { fileName: _jsxFileName, lineNumber: 169 } }), container);
      expect(console.error.calls.count(0)).toBe(1);
      expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
      'Warning: Unknown event handler property onDblClick. Did you mean `onDoubleClick`?\n    in div (at **)');});




    it('should warn about styles with numeric string values for non-unitless properties', function () {
      spyOn(console, 'error');

      var div = document.createElement('div');
      var One = React.createClass({ displayName: 'One', 
        render: function () {
          return this.props.inline ? 
          React.createElement('span', { style: { fontSize: '1' }, __source: { fileName: _jsxFileName, lineNumber: 184 } }) : 
          React.createElement('div', { style: { fontSize: '1' }, __source: { fileName: _jsxFileName, lineNumber: 185 } });} });


      var Two = React.createClass({ displayName: 'Two', 
        render: function () {
          return React.createElement('div', { style: { fontSize: '1' }, __source: { fileName: _jsxFileName, lineNumber: 190 } });} });


      ReactDOM.render(React.createElement(One, { inline: false, __source: { fileName: _jsxFileName, lineNumber: 193 } }), div);
      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toBe(
      'Warning: a `div` tag (owner: `One`) was passed a numeric string value ' + 
      'for CSS property `fontSize` (value: `1`) which will be treated ' + 
      'as a unitless number in a future version of React.');


      // Don't warn again for the same component
      ReactDOM.render(React.createElement(One, { inline: true, __source: { fileName: _jsxFileName, lineNumber: 202 } }), div);
      expect(console.error.calls.count()).toBe(1);

      // Do warn for different components
      ReactDOM.render(React.createElement(Two, { __source: { fileName: _jsxFileName, lineNumber: 206 } }), div);
      expect(console.error.calls.count()).toBe(2);
      expect(console.error.calls.argsFor(1)[0]).toBe(
      'Warning: a `div` tag (owner: `Two`) was passed a numeric string value ' + 
      'for CSS property `fontSize` (value: `1`) which will be treated ' + 
      'as a unitless number in a future version of React.');


      // Really don't warn again for the same component
      ReactDOM.render(React.createElement(One, { inline: true, __source: { fileName: _jsxFileName, lineNumber: 215 } }), div);
      expect(console.error.calls.count()).toBe(2);});


    it('should not warn for "0" as a unitless style value', function () {
      spyOn(console, 'error');
      var Component = React.createClass({ displayName: 'Component', 
        render: function () {
          return React.createElement('div', { style: { margin: '0' }, __source: { fileName: _jsxFileName, lineNumber: 223 } });} });



      ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 227 } }));
      expect(console.error.calls.length).toBe(0);});


    it('should warn nicely about NaN in style', function () {
      spyOn(console, 'error');

      var style = { fontSize: NaN };
      var div = document.createElement('div');
      ReactDOM.render(React.createElement('span', { style: style, __source: { fileName: _jsxFileName, lineNumber: 236 } }), div);
      ReactDOM.render(React.createElement('span', { style: style, __source: { fileName: _jsxFileName, lineNumber: 237 } }), div);

      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toEqual(
      'Warning: `NaN` is an invalid value for the `fontSize` css style property.');});



    it('should update styles if initially null', function () {
      var styles = null;
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 248 } }), container);

      var stubStyle = container.firstChild.style;

      styles = { display: 'block' };

      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 254 } }), container);
      expect(stubStyle.display).toEqual('block');});


    it('should update styles if updated to null multiple times', function () {
      var styles = null;
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 261 } }), container);

      styles = { display: 'block' };
      var stubStyle = container.firstChild.style;

      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 266 } }), container);
      expect(stubStyle.display).toEqual('block');

      ReactDOM.render(React.createElement('div', { style: null, __source: { fileName: _jsxFileName, lineNumber: 269 } }), container);
      expect(stubStyle.display).toEqual('');

      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 272 } }), container);
      expect(stubStyle.display).toEqual('block');

      ReactDOM.render(React.createElement('div', { style: null, __source: { fileName: _jsxFileName, lineNumber: 275 } }), container);
      expect(stubStyle.display).toEqual('');});


    it('should skip reserved props on web components', function () {
      var container = document.createElement('div');

      ReactDOM.render(
      React.createElement('my-component', { 
        children: ['foo'], 
        suppressContentEditableWarning: true, __source: { fileName: _jsxFileName, lineNumber: 283 } }), 

      container);

      expect(container.firstChild.hasAttribute('children')).toBe(false);
      expect(
      container.firstChild.hasAttribute('suppressContentEditableWarning')).
      toBe(false);

      ReactDOM.render(
      React.createElement('my-component', { 
        children: ['bar'], 
        suppressContentEditableWarning: false, __source: { fileName: _jsxFileName, lineNumber: 295 } }), 

      container);

      expect(container.firstChild.hasAttribute('children')).toBe(false);
      expect(
      container.firstChild.hasAttribute('suppressContentEditableWarning')).
      toBe(false);});


    it('should skip dangerouslySetInnerHTML on web components', function () {
      var container = document.createElement('div');

      ReactDOM.render(
      React.createElement('my-component', { dangerouslySetInnerHTML: { __html: 'hi' }, __source: { fileName: _jsxFileName, lineNumber: 311 } }), 
      container);

      expect(
      container.firstChild.hasAttribute('dangerouslySetInnerHTML')).
      toBe(false);

      ReactDOM.render(
      React.createElement('my-component', { dangerouslySetInnerHTML: { __html: 'bye' }, __source: { fileName: _jsxFileName, lineNumber: 319 } }), 
      container);

      expect(
      container.firstChild.hasAttribute('dangerouslySetInnerHTML')).
      toBe(false);});


    it('should remove attributes', function () {
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('img', { height: '17', __source: { fileName: _jsxFileName, lineNumber: 329 } }), container);

      expect(container.firstChild.hasAttribute('height')).toBe(true);
      ReactDOM.render(React.createElement('img', { __source: { fileName: _jsxFileName, lineNumber: 332 } }), container);
      expect(container.firstChild.hasAttribute('height')).toBe(false);});


    it('should remove properties', function () {
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { className: 'monkey', __source: { fileName: _jsxFileName, lineNumber: 338 } }), container);

      expect(container.firstChild.className).toEqual('monkey');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 341 } }), container);
      expect(container.firstChild.className).toEqual('');});


    it('should properly update custom attributes on custom elements', function () {
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('some-custom-element', { foo: 'bar', __source: { fileName: _jsxFileName, lineNumber: 347 } }), container);
      ReactDOM.render(React.createElement('some-custom-element', { bar: 'buzz', __source: { fileName: _jsxFileName, lineNumber: 348 } }), container);
      var node = container.firstChild;
      expect(node.hasAttribute('foo')).toBe(false);
      expect(node.getAttribute('bar')).toBe('buzz');});


    it('should clear a single style prop when changing `style`', function () {
      var styles = { display: 'none', color: 'red' };
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 357 } }), container);

      var stubStyle = container.firstChild.style;

      styles = { color: 'green' };
      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 362 } }), container);
      expect(stubStyle.display).toEqual('');
      expect(stubStyle.color).toEqual('green');});


    it('should reject attribute key injection attack on markup', function () {
      spyOn(console, 'error');
      for (var i = 0; i < 3; i++) {
        var container = document.createElement('div');
        var element = React.createElement(
        'x-foo-component', 
        { 'blah" onclick="beevil" noise="hi': 'selected' }, 
        null);

        ReactDOM.render(element, container);}

      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toEqual(
      'Warning: Invalid attribute name: `blah" onclick="beevil" noise="hi`');});



    it('should reject attribute key injection attack on update', function () {
      spyOn(console, 'error');
      for (var i = 0; i < 3; i++) {
        var container = document.createElement('div');
        var beforeUpdate = React.createElement('x-foo-component', {}, null);
        ReactDOM.render(beforeUpdate, container);

        var afterUpdate = React.createElement(
        'x-foo-component', 
        { 'blah" onclick="beevil" noise="hi': 'selected' }, 
        null);

        ReactDOM.render(afterUpdate, container);}

      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toEqual(
      'Warning: Invalid attribute name: `blah" onclick="beevil" noise="hi`');});



    it('should update arbitrary attributes for tags containing dashes', function () {
      var container = document.createElement('div');

      var beforeUpdate = React.createElement('x-foo-component', {}, null);
      ReactDOM.render(beforeUpdate, container);

      var afterUpdate = React.createElement('x-foo-component', { myattr: 'myval', __source: { fileName: _jsxFileName, lineNumber: 410 } });
      ReactDOM.render(afterUpdate, container);

      expect(container.childNodes[0].getAttribute('myattr')).toBe('myval');});


    it('should clear all the styles when removing `style`', function () {
      var styles = { display: 'none', color: 'red' };
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 419 } }), container);

      var stubStyle = container.firstChild.style;

      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 423 } }), container);
      expect(stubStyle.display).toEqual('');
      expect(stubStyle.color).toEqual('');});


    it('should update styles when `style` changes from null to object', function () {
      var container = document.createElement('div');
      var styles = { color: 'red' };
      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 431 } }), container);
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 432 } }), container);
      ReactDOM.render(React.createElement('div', { style: styles, __source: { fileName: _jsxFileName, lineNumber: 433 } }), container);

      var stubStyle = container.firstChild.style;
      expect(stubStyle.color).toEqual('red');});


    it('should empty element when removing innerHTML', function () {
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { dangerouslySetInnerHTML: { __html: ':)' }, __source: { fileName: _jsxFileName, lineNumber: 441 } }), container);

      expect(container.firstChild.innerHTML).toEqual(':)');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 444 } }), container);
      expect(container.firstChild.innerHTML).toEqual('');});


    it('should transition from string content to innerHTML', function () {
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 450 } }, 'hello'), container);

      expect(container.firstChild.innerHTML).toEqual('hello');
      ReactDOM.render(
      React.createElement('div', { dangerouslySetInnerHTML: { __html: 'goodbye' }, __source: { fileName: _jsxFileName, lineNumber: 454 } }), 
      container);

      expect(container.firstChild.innerHTML).toEqual('goodbye');});


    it('should transition from innerHTML to string content', function () {
      var container = document.createElement('div');
      ReactDOM.render(
      React.createElement('div', { dangerouslySetInnerHTML: { __html: 'bonjour' }, __source: { fileName: _jsxFileName, lineNumber: 463 } }), 
      container);


      expect(container.firstChild.innerHTML).toEqual('bonjour');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 468 } }, 'adieu'), container);
      expect(container.firstChild.innerHTML).toEqual('adieu');});


    it('should transition from innerHTML to children in nested el', function () {
      var container = document.createElement('div');
      ReactDOM.render(
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 475 } }, React.createElement('div', { dangerouslySetInnerHTML: { __html: 'bonjour' }, __source: { fileName: _jsxFileName, lineNumber: 475 } })), 
      container);


      expect(container.textContent).toEqual('bonjour');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 480 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 480 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 480 } }, 'adieu'))), container);
      expect(container.textContent).toEqual('adieu');});


    it('should transition from children to innerHTML in nested el', function () {
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 486 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 486 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 486 } }, 'adieu'))), container);

      expect(container.textContent).toEqual('adieu');
      ReactDOM.render(
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 490 } }, React.createElement('div', { dangerouslySetInnerHTML: { __html: 'bonjour' }, __source: { fileName: _jsxFileName, lineNumber: 490 } })), 
      container);

      expect(container.textContent).toEqual('bonjour');});


    it('should not incur unnecessary DOM mutations for attributes', function () {
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { id: '', __source: { fileName: _jsxFileName, lineNumber: 498 } }), container);

      var node = container.firstChild;
      var nodeSetAttribute = node.setAttribute;
      node.setAttribute = jest.fn();
      node.setAttribute.mockImpl(nodeSetAttribute);

      var nodeRemoveAttribute = node.removeAttribute;
      node.removeAttribute = jest.fn();
      node.removeAttribute.mockImpl(nodeRemoveAttribute);

      ReactDOM.render(React.createElement('div', { id: '', __source: { fileName: _jsxFileName, lineNumber: 509 } }), container);
      expect(node.setAttribute.mock.calls.length).toBe(0);
      expect(node.removeAttribute.mock.calls.length).toBe(0);

      ReactDOM.render(React.createElement('div', { id: 'foo', __source: { fileName: _jsxFileName, lineNumber: 513 } }), container);
      expect(node.setAttribute.mock.calls.length).toBe(1);
      expect(node.removeAttribute.mock.calls.length).toBe(0);

      ReactDOM.render(React.createElement('div', { id: 'foo', __source: { fileName: _jsxFileName, lineNumber: 517 } }), container);
      expect(node.setAttribute.mock.calls.length).toBe(1);
      expect(node.removeAttribute.mock.calls.length).toBe(0);

      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 521 } }), container);
      expect(node.setAttribute.mock.calls.length).toBe(1);
      expect(node.removeAttribute.mock.calls.length).toBe(1);

      ReactDOM.render(React.createElement('div', { id: '', __source: { fileName: _jsxFileName, lineNumber: 525 } }), container);
      expect(node.setAttribute.mock.calls.length).toBe(2);
      expect(node.removeAttribute.mock.calls.length).toBe(1);

      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 529 } }), container);
      expect(node.setAttribute.mock.calls.length).toBe(2);
      expect(node.removeAttribute.mock.calls.length).toBe(2);});


    it('should not incur unnecessary DOM mutations for string properties', function () {
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { value: '', __source: { fileName: _jsxFileName, lineNumber: 536 } }), container);

      var node = container.firstChild;

      var nodeValueSetter = jest.genMockFn();

      var oldSetAttribute = node.setAttribute.bind(node);
      node.setAttribute = function (key, value) {
        oldSetAttribute(key, value);
        nodeValueSetter(key, value);};


      ReactDOM.render(React.createElement('div', { value: 'foo', __source: { fileName: _jsxFileName, lineNumber: 548 } }), container);
      expect(nodeValueSetter.mock.calls.length).toBe(1);

      ReactDOM.render(React.createElement('div', { value: 'foo', __source: { fileName: _jsxFileName, lineNumber: 551 } }), container);
      expect(nodeValueSetter.mock.calls.length).toBe(1);

      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 554 } }), container);
      expect(nodeValueSetter.mock.calls.length).toBe(1);

      ReactDOM.render(React.createElement('div', { value: null, __source: { fileName: _jsxFileName, lineNumber: 557 } }), container);
      expect(nodeValueSetter.mock.calls.length).toBe(1);

      ReactDOM.render(React.createElement('div', { value: '', __source: { fileName: _jsxFileName, lineNumber: 560 } }), container);
      expect(nodeValueSetter.mock.calls.length).toBe(2);

      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 563 } }), container);
      expect(nodeValueSetter.mock.calls.length).toBe(2);});


    it('should not incur unnecessary DOM mutations for boolean properties', function () {
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { checked: true, __source: { fileName: _jsxFileName, lineNumber: 569 } }), container);

      var node = container.firstChild;
      var nodeValue = true;
      var nodeValueSetter = jest.fn();
      Object.defineProperty(node, 'checked', { 
        get: function () {
          return nodeValue;}, 

        set: nodeValueSetter.mockImplementation(function (newValue) {
          nodeValue = newValue;}) });



      ReactDOM.render(React.createElement('div', { checked: true, __source: { fileName: _jsxFileName, lineNumber: 583 } }), container);
      expect(nodeValueSetter.mock.calls.length).toBe(0);

      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 586 } }), container);
      expect(nodeValueSetter.mock.calls.length).toBe(1);

      ReactDOM.render(React.createElement('div', { checked: false, __source: { fileName: _jsxFileName, lineNumber: 589 } }), container);
      expect(nodeValueSetter.mock.calls.length).toBe(2);

      ReactDOM.render(React.createElement('div', { checked: true, __source: { fileName: _jsxFileName, lineNumber: 592 } }), container);
      expect(nodeValueSetter.mock.calls.length).toBe(3);});


    it('should ignore attribute whitelist for elements with the "is: attribute', function () {
      var container = document.createElement('div');
      ReactDOM.render(React.createElement('button', { is: 'test', cowabunga: 'chevynova', __source: { fileName: _jsxFileName, lineNumber: 598 } }), container);
      expect(container.firstChild.hasAttribute('cowabunga')).toBe(true);});


    it('should not update when switching between null/undefined', function () {
      var container = document.createElement('div');
      var node = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 604 } }), container);

      var setter = jest.fn();
      node.setAttribute = setter;

      ReactDOM.render(React.createElement('div', { dir: null, __source: { fileName: _jsxFileName, lineNumber: 609 } }), container);
      ReactDOM.render(React.createElement('div', { dir: undefined, __source: { fileName: _jsxFileName, lineNumber: 610 } }), container);
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 611 } }), container);
      expect(setter.mock.calls.length).toBe(0);
      ReactDOM.render(React.createElement('div', { dir: 'ltr', __source: { fileName: _jsxFileName, lineNumber: 613 } }), container);
      expect(setter.mock.calls.length).toBe(1);});


    it('handles multiple child updates without interference', function () {
      // This test might look like it's just testing ReactMultiChild but the
      // last bug in this was actually in DOMChildrenOperations so this test
      // needs to be in some DOM-specific test file.
      var container = document.createElement('div');

      // ABCD
      ReactDOM.render(
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 625 } }, 
      React.createElement('div', { key: 'one', __source: { fileName: _jsxFileName, lineNumber: 626 } }, 
      React.createElement('div', { key: 'A', __source: { fileName: _jsxFileName, lineNumber: 627 } }, 'A'), React.createElement('div', { key: 'B', __source: { fileName: _jsxFileName, lineNumber: 627 } }, 'B')), 

      React.createElement('div', { key: 'two', __source: { fileName: _jsxFileName, lineNumber: 629 } }, 
      React.createElement('div', { key: 'C', __source: { fileName: _jsxFileName, lineNumber: 630 } }, 'C'), React.createElement('div', { key: 'D', __source: { fileName: _jsxFileName, lineNumber: 630 } }, 'D'))), 


      container);

      // BADC
      ReactDOM.render(
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 637 } }, 
      React.createElement('div', { key: 'one', __source: { fileName: _jsxFileName, lineNumber: 638 } }, 
      React.createElement('div', { key: 'B', __source: { fileName: _jsxFileName, lineNumber: 639 } }, 'B'), React.createElement('div', { key: 'A', __source: { fileName: _jsxFileName, lineNumber: 639 } }, 'A')), 

      React.createElement('div', { key: 'two', __source: { fileName: _jsxFileName, lineNumber: 641 } }, 
      React.createElement('div', { key: 'D', __source: { fileName: _jsxFileName, lineNumber: 642 } }, 'D'), React.createElement('div', { key: 'C', __source: { fileName: _jsxFileName, lineNumber: 642 } }, 'C'))), 


      container);


      expect(container.textContent).toBe('BADC');});});



  describe('createOpenTagMarkup', function () {
    var genMarkup;

    function quoteRegexp(str) {
      return (str + '').replace(/([.?*+\^$\[\]\\(){}|-])/g, '\\$1');}


    beforeEach(function () {
      var ReactDefaultInjection = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDefaultInjection.js');
      ReactDefaultInjection.inject();

      var ReactDOMComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMComponent.js');
      var ReactReconcileTransaction = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactReconcileTransaction.js');

      var NodeStub = function (initialProps) {
        this._currentElement = { props: initialProps };
        this._rootNodeID = 'test';};

_assign(NodeStub.prototype, ReactDOMComponent.Mixin);

      genMarkup = function (props) {
        var transaction = new ReactReconcileTransaction();
        return new NodeStub(props)._createOpenTagMarkupAndPutListeners(
        transaction, 
        props);};



      jasmine.addMatchers({ 
        toHaveAttribute: function () {
          return { 
            compare: function (actual, expected) {var 
              attr = expected[0];var value = expected[1];
              var re = '(?:^|\\s)' + attr + '=[\\\'"]';
              if (typeof value !== 'undefined') {
                re += quoteRegexp(value) + '[\\\'"]';}

              return { 
                pass: new RegExp(re).test(actual) };} };} });});







    it('should generate the correct markup with className', function () {
      expect(genMarkup({ className: 'a' })).toHaveAttribute(['class', 'a']);
      expect(genMarkup({ className: 'a b' })).toHaveAttribute(['class', 'a b']);
      expect(genMarkup({ className: '' })).toHaveAttribute(['class', '']);});


    it('should escape style names and values', function () {
      expect(genMarkup({ 
        style: { 'b&ckground': '<3' } })).
      toHaveAttribute(['style', 'b&amp;ckground:&lt;3;']);});});



  describe('createContentMarkup', function () {
    var genMarkup;

    function quoteRegexp(str) {
      return (str + '').replace(/([.?*+\^$\[\]\\(){}|-])/g, '\\$1');}


    beforeEach(function () {
      var ReactDOMComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMComponent.js');
      var ReactReconcileTransaction = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactReconcileTransaction.js');

      var NodeStub = function (initialProps) {
        this._currentElement = { props: initialProps };
        this._rootNodeID = 'test';};

_assign(NodeStub.prototype, ReactDOMComponent.Mixin);

      genMarkup = function (props) {
        var transaction = new ReactReconcileTransaction();
        return new NodeStub(props)._createContentMarkup(
        transaction, 
        props, 
        {});};



      jasmine.addMatchers({ 
        toHaveInnerhtml: function () {
          return { 
            compare: function (actual, expected) {
              var re = '^' + quoteRegexp(expected) + '$';
              return { 
                pass: new RegExp(re).test(actual) };} };} });});







    it('should handle dangerouslySetInnerHTML', function () {
      var innerHTML = { __html: 'testContent' };
      expect(
      genMarkup({ dangerouslySetInnerHTML: innerHTML })).
      toHaveInnerhtml('testContent');});});



  describe('mountComponent', function () {
    var mountComponent;

    beforeEach(function () {
      mountComponent = function (props) {
        var container = document.createElement('div');
        ReactDOM.render(React.createElement('div', _extends({}, props, { __source: { fileName: _jsxFileName, lineNumber: 765 } })), container);};});



    it('should not duplicate uppercased selfclosing tags', function () {
      var Container = React.createClass({ displayName: 'Container', 
        render: function () {
          return React.createElement('BR', null);} });


      var returnedValue = ReactDOMServer.renderToString(React.createElement(Container, { __source: { fileName: _jsxFileName, lineNumber: 775 } }));
      expect(returnedValue).not.toContain('</BR>');});


    it('should warn against children for void elements', function () {
      var container = document.createElement('div');

      expect(function () {
        ReactDOM.render(React.createElement('input', { __source: { fileName: _jsxFileName, lineNumber: 783 } }, 'children'), container);}).
      toThrowError(
      'input is a void element tag and must not have `children` or ' + 
      'use `props.dangerouslySetInnerHTML`.');});



    it('should warn against dangerouslySetInnerHTML for void elements', function () {
      var container = document.createElement('div');

      expect(function () {
        ReactDOM.render(
        React.createElement('input', { dangerouslySetInnerHTML: { __html: 'content' }, __source: { fileName: _jsxFileName, lineNumber: 795 } }), 
        container);}).

      toThrowError(
      'input is a void element tag and must not have `children` or use ' + 
      '`props.dangerouslySetInnerHTML`.');});



    it('should treat menuitem as a void element but still create the closing tag', function () {
      var container = document.createElement('div');

      var returnedValue = ReactDOMServer.renderToString(React.createElement('menu', { __source: { fileName: _jsxFileName, lineNumber: 807 } }, React.createElement('menuitem', { __source: { fileName: _jsxFileName, lineNumber: 807 } })));

      expect(returnedValue).toContain('</menuitem>');

      expect(function () {
        ReactDOM.render(React.createElement('menu', { __source: { fileName: _jsxFileName, lineNumber: 812 } }, React.createElement('menuitem', { __source: { fileName: _jsxFileName, lineNumber: 812 } }, 'children')), container);}).
      toThrowError(
      'menuitem is a void element tag and must not have `children` or use ' + 
      '`props.dangerouslySetInnerHTML`.');});




    it('should validate against multiple children props', function () {
      expect(function () {
        mountComponent({ children: '', dangerouslySetInnerHTML: '' });}).
      toThrowError(
      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.');});



    it('should validate against use of innerHTML', function () {

      spyOn(console, 'error');
      mountComponent({ innerHTML: '<span>Hi Jim!</span>' });
      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toContain(
      'Directly setting property `innerHTML` is not permitted. ');});



    it('should validate use of dangerouslySetInnerHTML', function () {
      expect(function () {
        mountComponent({ dangerouslySetInnerHTML: '<span>Hi Jim!</span>' });}).
      toThrowError(
      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 
      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.');});



    it('should validate use of dangerouslySetInnerHTML', function () {
      expect(function () {
        mountComponent({ dangerouslySetInnerHTML: { foo: 'bar' } });}).
      toThrowError(
      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 
      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.');});



    it('should allow {__html: null}', function () {
      expect(function () {
        mountComponent({ dangerouslySetInnerHTML: { __html: null } });}).
      not.toThrow();});


    it('should warn about contentEditable and children', function () {
      spyOn(console, 'error');
      mountComponent({ contentEditable: true, children: '' });
      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toContain('contentEditable');});


    it('should respect suppressContentEditableWarning', function () {
      spyOn(console, 'error');
      mountComponent({ contentEditable: true, children: '', suppressContentEditableWarning: true });
      expect(console.error.calls.count()).toBe(0);});


    it('should validate against invalid styles', function () {
      expect(function () {
        mountComponent({ style: 'display: none' });}).
      toThrowError(
      'The `style` prop expects a mapping from style properties to values, ' + 
      'not a string. For example, style={{marginRight: spacing + \'em\'}} ' + 
      'when using JSX.');});



    it('should track input values', function () {
      var container = document.createElement('div');
      var inst = ReactDOM.render(React.createElement('input', { type: 'text', defaultValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 887 } }), container);

      var tracker = inputValueTracking._getTrackerFromNode(inst);

      expect(tracker.getValue()).toEqual('foo');});


    it('should track textarea values', function () {
      var container = document.createElement('div');
      var inst = ReactDOM.render(React.createElement('textarea', { defaultValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 896 } }), container);

      var tracker = inputValueTracking._getTrackerFromNode(inst);

      expect(tracker.getValue()).toEqual('foo');});


    it('should execute custom event plugin listening behavior', function () {
      var SimpleEventPlugin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\SimpleEventPlugin.js');

      SimpleEventPlugin.didPutListener = jest.fn();
      SimpleEventPlugin.willDeleteListener = jest.fn();

      var container = document.createElement('div');
      ReactDOM.render(
      React.createElement('div', { onClick: function () {return true;}, __source: { fileName: _jsxFileName, lineNumber: 911 } }), 
      container);


      expect(SimpleEventPlugin.didPutListener.mock.calls.length).toBe(1);

      ReactDOM.unmountComponentAtNode(container);

      expect(SimpleEventPlugin.willDeleteListener.mock.calls.length).toBe(1);});


    it('should handle null and missing properly with event hooks', function () {
      var SimpleEventPlugin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\SimpleEventPlugin.js');

      SimpleEventPlugin.didPutListener = jest.fn();
      SimpleEventPlugin.willDeleteListener = jest.fn();
      var container = document.createElement('div');

      ReactDOM.render(React.createElement('div', { onClick: false, __source: { fileName: _jsxFileName, lineNumber: 929 } }), container);
      expect(SimpleEventPlugin.didPutListener.mock.calls.length).toBe(0);
      expect(SimpleEventPlugin.willDeleteListener.mock.calls.length).toBe(0);

      ReactDOM.render(React.createElement('div', { onClick: null, __source: { fileName: _jsxFileName, lineNumber: 933 } }), container);
      expect(SimpleEventPlugin.didPutListener.mock.calls.length).toBe(0);
      expect(SimpleEventPlugin.willDeleteListener.mock.calls.length).toBe(0);

      ReactDOM.render(React.createElement('div', { onClick: function () {return 'apple';}, __source: { fileName: _jsxFileName, lineNumber: 937 } }), container);
      expect(SimpleEventPlugin.didPutListener.mock.calls.length).toBe(1);
      expect(SimpleEventPlugin.willDeleteListener.mock.calls.length).toBe(0);

      ReactDOM.render(React.createElement('div', { onClick: function () {return 'banana';}, __source: { fileName: _jsxFileName, lineNumber: 941 } }), container);
      expect(SimpleEventPlugin.didPutListener.mock.calls.length).toBe(2);
      expect(SimpleEventPlugin.willDeleteListener.mock.calls.length).toBe(0);

      ReactDOM.render(React.createElement('div', { onClick: null, __source: { fileName: _jsxFileName, lineNumber: 945 } }), container);
      expect(SimpleEventPlugin.didPutListener.mock.calls.length).toBe(2);
      expect(SimpleEventPlugin.willDeleteListener.mock.calls.length).toBe(1);

      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 949 } }), container);
      expect(SimpleEventPlugin.didPutListener.mock.calls.length).toBe(2);
      expect(SimpleEventPlugin.willDeleteListener.mock.calls.length).toBe(1);

      ReactDOM.unmountComponentAtNode(container);
      expect(SimpleEventPlugin.didPutListener.mock.calls.length).toBe(2);
      expect(SimpleEventPlugin.willDeleteListener.mock.calls.length).toBe(1);});


    it('should warn for children on void elements', function () {
      var X = React.createClass({ displayName: 'X', 
        render: function () {
          return React.createElement('input', { __source: { fileName: _jsxFileName, lineNumber: 961 } }, 'moo');} });



      var container = document.createElement('div');
      expect(function () {
        ReactDOM.render(React.createElement(X, { __source: { fileName: _jsxFileName, lineNumber: 967 } }), container);}).
      toThrowError(
      'input is a void element tag and must not have `children` ' + 
      'or use `props.dangerouslySetInnerHTML`. Check the render method of X.');});



    it('should support custom elements which extend native elements', function () {
      if (ReactDOMFeatureFlags.useCreateElement) {
        var container = document.createElement('div');
        spyOn(document, 'createElement').and.callThrough();
        ReactDOM.render(React.createElement('div', { is: 'custom-div', __source: { fileName: _jsxFileName, lineNumber: 978 } }), container);
        expect(document.createElement).toHaveBeenCalledWith('div', 'custom-div');} else 
      {
        expect(ReactDOMServer.renderToString(React.createElement('div', { is: 'custom-div', __source: { fileName: _jsxFileName, lineNumber: 981 } }))).toContain('is="custom-div"');}});});




  describe('updateComponent', function () {
    var container;

    beforeEach(function () {
      container = document.createElement('div');});


    it('should warn against children for void elements', function () {
      ReactDOM.render(React.createElement('input', { __source: { fileName: _jsxFileName, lineNumber: 994 } }), container);

      expect(function () {
        ReactDOM.render(React.createElement('input', { __source: { fileName: _jsxFileName, lineNumber: 997 } }, 'children'), container);}).
      toThrowError(
      'input is a void element tag and must not have `children` or use ' + 
      '`props.dangerouslySetInnerHTML`.');});



    it('should warn against dangerouslySetInnerHTML for void elements', function () {
      ReactDOM.render(React.createElement('input', { __source: { fileName: _jsxFileName, lineNumber: 1005 } }), container);

      expect(function () {
        ReactDOM.render(
        React.createElement('input', { dangerouslySetInnerHTML: { __html: 'content' }, __source: { fileName: _jsxFileName, lineNumber: 1009 } }), 
        container);}).

      toThrowError(
      'input is a void element tag and must not have `children` or use ' + 
      '`props.dangerouslySetInnerHTML`.');});



    it('should validate against multiple children props', function () {
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1019 } }), container);

      expect(function () {
        ReactDOM.render(
        React.createElement('div', { children: '', dangerouslySetInnerHTML: { __html: '' }, __source: { fileName: _jsxFileName, lineNumber: 1023 } }), 
        container);}).

      toThrowError(
      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.');});



    it('should warn about contentEditable and children', function () {
      spyOn(console, 'error');
      ReactDOM.render(
      React.createElement('div', { contentEditable: true, __source: { fileName: _jsxFileName, lineNumber: 1034 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1034 } })), 
      container);

      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toContain('contentEditable');});


    it('should validate against invalid styles', function () {
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1042 } }), container);

      expect(function () {
        ReactDOM.render(React.createElement('div', { style: 1, __source: { fileName: _jsxFileName, lineNumber: 1045 } }), container);}).
      toThrowError(
      'The `style` prop expects a mapping from style properties to values, ' + 
      'not a string. For example, style={{marginRight: spacing + \'em\'}} ' + 
      'when using JSX.');});



    it('should report component containing invalid styles', function () {
      var Animal = React.createClass({ displayName: 'Animal', 
        render: function () {
          return React.createElement('div', { style: 1, __source: { fileName: _jsxFileName, lineNumber: 1056 } });} });



      expect(function () {
        ReactDOM.render(React.createElement(Animal, { __source: { fileName: _jsxFileName, lineNumber: 1061 } }), container);}).
      toThrowError(
      'The `style` prop expects a mapping from style properties to values, ' + 
      'not a string. For example, style={{marginRight: spacing + \'em\'}} ' + 
      'when using JSX. This DOM node was rendered by `Animal`.');});



    it('should properly escape text content and attributes values', function () {
      expect(
      ReactDOMServer.renderToStaticMarkup(
      React.DOM.div({ 
        title: '\'"<>&', 
        style: { 
          textAlign: '\'"<>&' } }, 

      '\'"<>&'))).

      toBe(
      '<div title="&#x27;&quot;&lt;&gt;&amp;" style="text-align:&#x27;&quot;&lt;&gt;&amp;;">' + 
      '&#x27;&quot;&lt;&gt;&amp;' + 
      '</div>');});});




  describe('unmountComponent', function () {
    it('should clean up listeners', function () {
      var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
      var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');

      var container = document.createElement('div');
      document.body.appendChild(container);

      var callback = function () {};
      var instance = React.createElement('div', { onClick: callback, __source: { fileName: _jsxFileName, lineNumber: 1096 } });
      instance = ReactDOM.render(instance, container);

      var rootNode = ReactDOM.findDOMNode(instance);
      var inst = ReactDOMComponentTree.getInstanceFromNode(rootNode);
      expect(
      EventPluginHub.getListener(inst, 'onClick')).
      toBe(callback);
      expect(rootNode).toBe(ReactDOM.findDOMNode(instance));

      ReactDOM.unmountComponentAtNode(container);

      expect(
      EventPluginHub.getListener(inst, 'onClick')).
      toBe(undefined);});


    it('should clean up input value tracking', function () {
      var container = document.createElement('div');
      var node = ReactDOM.render(React.createElement('input', { type: 'text', defaultValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 1115 } }), container);
      var tracker = inputValueTracking._getTrackerFromNode(node);

      spyOn(tracker, 'stopTracking');

      ReactDOM.unmountComponentAtNode(container);

      expect(tracker.stopTracking.calls.count()).toBe(1);});


    it('should clean up input textarea tracking', function () {
      var container = document.createElement('div');
      var node = ReactDOM.render(React.createElement('textarea', { defaultValue: 'foo', __source: { fileName: _jsxFileName, lineNumber: 1127 } }), container);
      var tracker = inputValueTracking._getTrackerFromNode(node);

      spyOn(tracker, 'stopTracking');

      ReactDOM.unmountComponentAtNode(container);

      expect(tracker.stopTracking.calls.count()).toBe(1);});


    it('unmounts children before unsetting DOM node info', function () {
      var Inner = React.createClass({ displayName: 'Inner', 
        render: function () {
          return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 1140 } });}, 

        componentWillUnmount: function () {
          // Should not throw
          expect(ReactDOM.findDOMNode(this).nodeName).toBe('SPAN');} });



      var container = document.createElement('div');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1149 } }, React.createElement(Inner, { __source: { fileName: _jsxFileName, lineNumber: 1149 } })), container);
      ReactDOM.unmountComponentAtNode(container);});});



  describe('onScroll warning', function () {
    it('should warn about the `onScroll` issue when unsupported (IE8)', function () {
      // Mock this here so we can mimic IE8 support. We require isEventSupported
      // before React so it's pre-mocked before React would require it.
      jest.resetModuleRegistry().
      mock('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\isEventSupported.js');
      var isEventSupported = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\isEventSupported.js');
      isEventSupported.mockReturnValueOnce(false);

      var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

      spyOn(console, 'error');
      ReactTestUtils.renderIntoDocument(React.createElement('div', { onScroll: function () {}, __source: { fileName: _jsxFileName, lineNumber: 1166 } }));
      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toBe(
      'Warning: This browser doesn\'t support the `onScroll` event');});



    it('should not warn when server-side rendering `onScroll`', function () {
      spyOn(console, 'error');
      ReactDOMServer.renderToString(React.createElement('div', { onScroll: function () {}, __source: { fileName: _jsxFileName, lineNumber: 1175 } }));
      expect(console.error).not.toHaveBeenCalled();});});



  describe('tag sanitization', function () {
    it('should throw when an invalid tag name is used', function () {
      var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
      var hackzor = React.createElement('script tag');
      expect(
      function () {return ReactTestUtils.renderIntoDocument(hackzor);}).
      toThrowError(
      'Invalid tag: script tag');});



    it('should throw when an attack vector is used', function () {
      var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
      var hackzor = React.createElement('div><img /><div');
      expect(
      function () {return ReactTestUtils.renderIntoDocument(hackzor);}).
      toThrowError(
      'Invalid tag: div><img /><div');});});




  describe('nesting validation', function () {
    var ReactTestUtils;

    beforeEach(function () {
      ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


    it('warns on invalid nesting', function () {
      spyOn(console, 'error');
      ReactTestUtils.renderIntoDocument(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1211 } }, React.createElement('tr', { __source: { fileName: _jsxFileName, lineNumber: 1211 } }), React.createElement('tr', { __source: { fileName: _jsxFileName, lineNumber: 1211 } })));

      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toBe(
      'Warning: validateDOMNesting(...): <tr> cannot appear as a child of ' + 
      '<div>. See div > tr.');});



    it('warns on invalid nesting at root', function () {
      spyOn(console, 'error');
      var p = document.createElement('p');
      ReactDOM.render(React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 1223 } }, React.createElement('p', { __source: { fileName: _jsxFileName, lineNumber: 1223 } })), p);

      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toBe(
      'Warning: validateDOMNesting(...): <p> cannot appear as a descendant ' + 
      'of <p>. See p > ... > p.');});



    it('warns nicely for table rows', function () {
      spyOn(console, 'error');
      var Row = React.createClass({ displayName: 'Row', 
        render: function () {
          return React.createElement('tr', { __source: { fileName: _jsxFileName, lineNumber: 1236 } });} });


      var Foo = React.createClass({ displayName: 'Foo', 
        render: function () {
          return React.createElement('table', { __source: { fileName: _jsxFileName, lineNumber: 1241 } }, React.createElement(Row, { __source: { fileName: _jsxFileName, lineNumber: 1241 } }), ' ');} });


      ReactTestUtils.renderIntoDocument(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1244 } }));

      expect(console.error.calls.count()).toBe(2);
      expect(console.error.calls.argsFor(0)[0]).toBe(
      'Warning: validateDOMNesting(...): <tr> cannot appear as a child of ' + 
      '<table>. See Foo > table > Row > tr. Add a <tbody> to your code to ' + 
      'match the DOM tree generated by the browser.');

      expect(console.error.calls.argsFor(1)[0]).toBe(
      'Warning: validateDOMNesting(...): #text cannot appear as a child ' + 
      'of <table>. See Foo > table > #text.');});



    it('gives useful context in warnings', function () {
      spyOn(console, 'error');
      var Row = React.createClass({ displayName: 'Row', 
        render: function () {return React.createElement('tr', { __source: { fileName: _jsxFileName, lineNumber: 1261 } });} });

      var FancyRow = React.createClass({ displayName: 'FancyRow', 
        render: function () {return React.createElement(Row, { __source: { fileName: _jsxFileName, lineNumber: 1264 } });} });

      var Table = React.createClass({ displayName: 'Table', 
        render: function () {
          return React.createElement('table', { __source: { fileName: _jsxFileName, lineNumber: 1268 } }, this.props.children);} });


      var FancyTable = React.createClass({ displayName: 'FancyTable', 
        render: function () {
          return React.createElement(Table, { __source: { fileName: _jsxFileName, lineNumber: 1273 } }, this.props.children);} });



      var Viz1 = React.createClass({ displayName: 'Viz1', 
        render: function () {return React.createElement('table', { __source: { fileName: _jsxFileName, lineNumber: 1278 } }, React.createElement(FancyRow, { __source: { fileName: _jsxFileName, lineNumber: 1278 } }));} });

      var App1 = React.createClass({ displayName: 'App1', 
        render: function () {return React.createElement(Viz1, { __source: { fileName: _jsxFileName, lineNumber: 1281 } });} });

      ReactTestUtils.renderIntoDocument(React.createElement(App1, { __source: { fileName: _jsxFileName, lineNumber: 1283 } }));
      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toContain(
      'See Viz1 > table > FancyRow > Row > tr.');


      var Viz2 = React.createClass({ displayName: 'Viz2', 
        render: function () {return React.createElement(FancyTable, { __source: { fileName: _jsxFileName, lineNumber: 1290 } }, React.createElement(FancyRow, { __source: { fileName: _jsxFileName, lineNumber: 1290 } }));} });

      var App2 = React.createClass({ displayName: 'App2', 
        render: function () {return React.createElement(Viz2, { __source: { fileName: _jsxFileName, lineNumber: 1293 } });} });

      ReactTestUtils.renderIntoDocument(React.createElement(App2, { __source: { fileName: _jsxFileName, lineNumber: 1295 } }));
      expect(console.error.calls.count()).toBe(2);
      expect(console.error.calls.argsFor(1)[0]).toContain(
      'See Viz2 > FancyTable > Table > table > FancyRow > Row > tr.');


      ReactTestUtils.renderIntoDocument(React.createElement(FancyTable, { __source: { fileName: _jsxFileName, lineNumber: 1301 } }, React.createElement(FancyRow, { __source: { fileName: _jsxFileName, lineNumber: 1301 } })));
      expect(console.error.calls.count()).toBe(3);
      expect(console.error.calls.argsFor(2)[0]).toContain(
      'See FancyTable > Table > table > FancyRow > Row > tr.');


      ReactTestUtils.renderIntoDocument(React.createElement('table', { __source: { fileName: _jsxFileName, lineNumber: 1307 } }, React.createElement(FancyRow, { __source: { fileName: _jsxFileName, lineNumber: 1307 } })));
      expect(console.error.calls.count()).toBe(4);
      expect(console.error.calls.argsFor(3)[0]).toContain(
      'See table > FancyRow > Row > tr.');


      ReactTestUtils.renderIntoDocument(React.createElement(FancyTable, { __source: { fileName: _jsxFileName, lineNumber: 1313 } }, React.createElement('tr', { __source: { fileName: _jsxFileName, lineNumber: 1313 } })));
      expect(console.error.calls.count()).toBe(5);
      expect(console.error.calls.argsFor(4)[0]).toContain(
      'See FancyTable > Table > table > tr.');


      var Link = React.createClass({ displayName: 'Link', 
        render: function () {
          return React.createElement('a', { __source: { fileName: _jsxFileName, lineNumber: 1321 } }, this.props.children);} });


      ReactTestUtils.renderIntoDocument(React.createElement(Link, { __source: { fileName: _jsxFileName, lineNumber: 1324 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1324 } }, React.createElement(Link, { __source: { fileName: _jsxFileName, lineNumber: 1324 } }))));
      expect(console.error.calls.count()).toBe(6);
      expect(console.error.calls.argsFor(5)[0]).toContain(
      'See Link > a > ... > Link > a.');});



    it('should warn about incorrect casing on properties (ssr)', function () {
      spyOn(console, 'error');
      ReactDOMServer.renderToString(React.createElement('input', { type: 'text', tabindex: '1' }));
      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toContain('tabIndex');});


    it('should warn about incorrect casing on event handlers (ssr)', function () {
      spyOn(console, 'error');
      ReactDOMServer.renderToString(React.createElement('input', { type: 'text', onclick: '1' }));
      ReactDOMServer.renderToString(React.createElement('input', { type: 'text', onKeydown: '1' }));
      expect(console.error.calls.count()).toBe(2);
      expect(console.error.calls.argsFor(0)[0]).toContain('onClick');
      expect(console.error.calls.argsFor(1)[0]).toContain('onKeyDown');});


    it('should warn about incorrect casing on properties', function () {
      spyOn(console, 'error');
      ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'text', tabindex: '1' }));
      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toContain('tabIndex');});


    it('should warn about incorrect casing on event handlers', function () {
      spyOn(console, 'error');
      ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'text', onclick: '1' }));
      ReactTestUtils.renderIntoDocument(React.createElement('input', { type: 'text', onKeydown: '1' }));
      expect(console.error.calls.count()).toBe(2);
      expect(console.error.calls.argsFor(0)[0]).toContain('onClick');
      expect(console.error.calls.argsFor(1)[0]).toContain('onKeyDown');});


    it('should warn about class', function () {
      spyOn(console, 'error');
      ReactDOMServer.renderToString(React.createElement('div', { 'class': 'muffins' }));
      expect(console.error.calls.count()).toBe(1);
      expect(console.error.calls.argsFor(0)[0]).toContain('className');});


    it('should warn about props that are no longer supported', function () {
      spyOn(console, 'error');
      ReactTestUtils.renderIntoDocument(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1372 } }));
      expect(console.error.calls.count()).toBe(0);

      ReactTestUtils.renderIntoDocument(React.createElement('div', { onFocusIn: function () {}, __source: { fileName: _jsxFileName, lineNumber: 1375 } }));
      expect(console.error.calls.count()).toBe(1);

      ReactTestUtils.renderIntoDocument(React.createElement('div', { onFocusOut: function () {}, __source: { fileName: _jsxFileName, lineNumber: 1378 } }));
      expect(console.error.calls.count()).toBe(2);});


    it('gives source code refs for unknown prop warning', function () {
      spyOn(console, 'error');
      ReactDOMServer.renderToString(React.createElement('div', { 'class': 'paladin', __source: { fileName: _jsxFileName, lineNumber: 1384 } }));
      ReactDOMServer.renderToString(React.createElement('input', { type: 'text', onclick: '1', __source: { fileName: _jsxFileName, lineNumber: 1385 } }));
      expect(console.error.calls.count()).toBe(2);
      expect(
      normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).
      toBe(
      'Warning: Unknown DOM property class. Did you mean className?\n    in div (at **)');

      expect(
      normalizeCodeLocInfo(console.error.calls.argsFor(1)[0])).
      toBe(
      'Warning: Unknown event handler property onclick. Did you mean ' + 
      '`onClick`?\n    in input (at **)');});



    it('gives source code refs for unknown prop warning for update render', function () {
      spyOn(console, 'error');
      var container = document.createElement('div');

      ReactDOMServer.renderToString(React.createElement('div', { className: 'paladin', __source: { fileName: _jsxFileName, lineNumber: 1404 } }), container);
      expect(console.error.calls.count()).toBe(0);

      ReactDOMServer.renderToString(React.createElement('div', { 'class': 'paladin', __source: { fileName: _jsxFileName, lineNumber: 1407 } }), container);
      expect(console.error.calls.count()).toBe(1);
      expect(
      normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).
      toBe(
      'Warning: Unknown DOM property class. Did you mean className?\n    in div (at **)');});




    it('gives source code refs for unknown prop warning for exact elements ', function () {
      spyOn(console, 'error');

      ReactDOMServer.renderToString(
      React.createElement('div', { className: 'foo1', __source: { fileName: _jsxFileName, lineNumber: 1421 } }, 
      React.createElement('div', { 'class': 'foo2', __source: { fileName: _jsxFileName, lineNumber: 1422 } }), 
      React.createElement('div', { onClick: 'foo3', __source: { fileName: _jsxFileName, lineNumber: 1423 } }), 
      React.createElement('div', { onclick: 'foo4', __source: { fileName: _jsxFileName, lineNumber: 1424 } }), 
      React.createElement('div', { className: 'foo5', __source: { fileName: _jsxFileName, lineNumber: 1425 } }), 
      React.createElement('div', { className: 'foo6', __source: { fileName: _jsxFileName, lineNumber: 1426 } })));



      expect(console.error.calls.count()).toBe(2);

      expect(console.error.calls.argsFor(0)[0]).toContain('className');
      var matches = console.error.calls.argsFor(0)[0].match(/.*\(.*:(\d+)\).*/);
      var previousLine = matches[1];

      expect(console.error.calls.argsFor(1)[0]).toContain('onClick');
      matches = console.error.calls.argsFor(1)[0].match(/.*\(.*:(\d+)\).*/);
      var currentLine = matches[1];

      //verify line number has a proper relative difference,
      //since hard coding the line number would make test too brittle
      expect(parseInt(previousLine, 10) + 2).toBe(parseInt(currentLine, 10));});


    it('gives source code refs for unknown prop warning for exact elements in composition ', function () {
      spyOn(console, 'error');
      var container = document.createElement('div');

      var Parent = React.createClass({ displayName: 'Parent', 
        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1451 } }, React.createElement(Child1, { __source: { fileName: _jsxFileName, lineNumber: 1451 } }), React.createElement(Child2, { __source: { fileName: _jsxFileName, lineNumber: 1451 } }), React.createElement(Child3, { __source: { fileName: _jsxFileName, lineNumber: 1451 } }), React.createElement(Child4, { __source: { fileName: _jsxFileName, lineNumber: 1451 } }));} });



      var Child1 = React.createClass({ displayName: 'Child1', 
        render: function () {
          return React.createElement('div', { 'class': 'paladin', __source: { fileName: _jsxFileName, lineNumber: 1457 } }, 'Child1');} });



      var Child2 = React.createClass({ displayName: 'Child2', 
        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1463 } }, 'Child2');} });



      var Child3 = React.createClass({ displayName: 'Child3', 
        render: function () {
          return React.createElement('div', { onclick: '1', __source: { fileName: _jsxFileName, lineNumber: 1469 } }, 'Child3');} });



      var Child4 = React.createClass({ displayName: 'Child4', 
        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1475 } }, 'Child4');} });



      ReactDOMServer.renderToString(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 1479 } }), container);

      expect(console.error.calls.count()).toBe(2);

      expect(console.error.calls.argsFor(0)[0]).toContain('className');
      var matches = console.error.calls.argsFor(0)[0].match(/.*\(.*:(\d+)\).*/);
      var previousLine = matches[1];

      expect(console.error.calls.argsFor(1)[0]).toContain('onClick');
      matches = console.error.calls.argsFor(1)[0].match(/.*\(.*:(\d+)\).*/);
      var currentLine = matches[1];

      //verify line number has a proper relative difference,
      //since hard coding the line number would make test too brittle
      expect(parseInt(previousLine, 10) + 12).toBe(parseInt(currentLine, 10));});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactReconcileTransaction.js":73,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\eventPlugins\\SimpleEventPlugin.js":94,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\inputValueTracking.js":101,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\isEventSupported.js":133,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMComponent.js":164,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMFeatureFlags.js":169,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDefaultInjection.js":172,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"object-assign":425}],180:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

describe('ReactDOMDebugTool', function () {
  var ReactDOMDebugTool;

  beforeEach(function () {
    jest.resetModuleRegistry();
    ReactDOMDebugTool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMDebugTool.js');});


  it('should add and remove devtools', function () {
    var handler1 = jasmine.createSpy('spy');
    var handler2 = jasmine.createSpy('spy');
    var devtool1 = { onTestEvent: handler1 };
    var devtool2 = { onTestEvent: handler2 };

    ReactDOMDebugTool.addDevtool(devtool1);
    ReactDOMDebugTool.onTestEvent();
    expect(handler1.calls.count()).toBe(1);
    expect(handler2.calls.count()).toBe(0);

    ReactDOMDebugTool.onTestEvent();
    expect(handler1.calls.count()).toBe(2);
    expect(handler2.calls.count()).toBe(0);

    ReactDOMDebugTool.addDevtool(devtool2);
    ReactDOMDebugTool.onTestEvent();
    expect(handler1.calls.count()).toBe(3);
    expect(handler2.calls.count()).toBe(1);

    ReactDOMDebugTool.onTestEvent();
    expect(handler1.calls.count()).toBe(4);
    expect(handler2.calls.count()).toBe(2);

    ReactDOMDebugTool.removeDevtool(devtool1);
    ReactDOMDebugTool.onTestEvent();
    expect(handler1.calls.count()).toBe(4);
    expect(handler2.calls.count()).toBe(3);

    ReactDOMDebugTool.removeDevtool(devtool2);
    ReactDOMDebugTool.onTestEvent();
    expect(handler1.calls.count()).toBe(4);
    expect(handler2.calls.count()).toBe(3);});


  it('warns once when an error is thrown in devtool', function () {
    spyOn(console, 'error');
    ReactDOMDebugTool.addDevtool({ 
      onTestEvent: function () {
        throw new Error('Hi.');} });



    ReactDOMDebugTool.onTestEvent();
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'exception thrown by devtool while handling ' + 
    'onTestEvent: Error: Hi.');


    ReactDOMDebugTool.onTestEvent();
    expect(console.error.calls.count()).toBe(1);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMDebugTool.js":167}],181:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\dom\\shared\\__tests__\\ReactDOMTextComponent-test.js';

var React;
var ReactDOM;
var ReactDOMServer;

describe('ReactDOMTextComponent', function () {
  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');});


  it('updates a mounted text component in place', function () {
    var el = document.createElement('div');
    var inst = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 27 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 27 } }), 'foo', 'bar'), el);

    var foo = ReactDOM.findDOMNode(inst).childNodes[2];
    var bar = ReactDOM.findDOMNode(inst).childNodes[5];
    expect(foo.data).toBe('foo');
    expect(bar.data).toBe('bar');

    inst = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 34 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 34 } }), 'baz', 'qux'), el);
    // After the update, the text nodes should have stayed in place (as opposed
    // to getting unmounted and remounted)
    expect(ReactDOM.findDOMNode(inst).childNodes[2]).toBe(foo);
    expect(ReactDOM.findDOMNode(inst).childNodes[5]).toBe(bar);
    expect(foo.data).toBe('baz');
    expect(bar.data).toBe('qux');});


  it('can be toggled in and out of the markup', function () {
    var el = document.createElement('div');
    var inst = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 45 } }, 'foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 45 } }), 'bar'), el);

    var container = ReactDOM.findDOMNode(inst);
    var childDiv = container.childNodes[3];
    var childNodes;

    inst = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 51 } }, null, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 51 } }), null), el);
    container = ReactDOM.findDOMNode(inst);
    childNodes = container.childNodes;
    expect(childNodes.length).toBe(1);
    expect(childNodes[0]).toBe(childDiv);

    inst = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 57 } }, 'foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 57 } }), 'bar'), el);
    container = ReactDOM.findDOMNode(inst);
    childNodes = container.childNodes;
    expect(childNodes.length).toBe(7);
    expect(childNodes[1].data).toBe('foo');
    expect(childNodes[3]).toBe(childDiv);
    expect(childNodes[5].data).toBe('bar');});


  it('can reconcile text merged by Node.normalize()', function () {
    var el = document.createElement('div');
    var inst = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 68 } }, 'foo', 'bar', 'baz'), el);

    var container = ReactDOM.findDOMNode(inst);
    container.normalize();

    inst = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 73 } }, 'bar', 'baz', 'qux'), el);
    container = ReactDOM.findDOMNode(inst);
    expect(container.textContent).toBe('barbazqux');});


  it('can reconcile text from pre-rendered markup', function () {
    var el = document.createElement('div');
    var reactEl = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 80 } }, 'foo', 'bar', 'baz');
    el.innerHTML = ReactDOMServer.renderToString(reactEl);

    ReactDOM.render(reactEl, el);
    expect(el.textContent).toBe('foobarbaz');

    reactEl = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 86 } }, '', '', '');
    el.innerHTML = ReactDOMServer.renderToString(reactEl);

    ReactDOM.render(reactEl, el);
    expect(el.textContent).toBe('');});


  it('can reconcile text arbitrarily split into multiple nodes', function () {
    var el = document.createElement('div');
    var inst = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 95 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 95 } }), 'foobarbaz'), el);

    var container = ReactDOM.findDOMNode(inst);
    var childNodes = container.childNodes;
    var textNode = childNodes[2];
    textNode.textContent = 'foo';
    container.insertBefore(document.createTextNode('bar'), childNodes[3]);
    container.insertBefore(document.createTextNode('baz'), childNodes[3]);

    inst = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 104 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 104 } }), 'barbazqux'), el);
    container = ReactDOM.findDOMNode(inst);
    expect(container.textContent).toBe('barbazqux');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63}],182:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

describe('escapeTextContentForBrowser', function () {

  var escapeTextContentForBrowser = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\escapeTextContentForBrowser.js');

  it('should escape boolean to string', function () {
    expect(escapeTextContentForBrowser(true)).toBe('true');
    expect(escapeTextContentForBrowser(false)).toBe('false');});


  it('should escape object to string', function () {
    var escaped = escapeTextContentForBrowser({ 
      toString: function () {
        return 'ponys';} });



    expect(escaped).toBe('ponys');});


  it('should escape number to string', function () {
    expect(escapeTextContentForBrowser(42)).toBe('42');});


  it('should escape string', function () {
    var escaped = escapeTextContentForBrowser('<script type=\'\' src=""></script>');
    expect(escaped).not.toContain('<');
    expect(escaped).not.toContain('>');
    expect(escaped).not.toContain('\'');
    expect(escaped).not.toContain('\"');

    escaped = escapeTextContentForBrowser('&');
    expect(escaped).toBe('&amp;');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\escapeTextContentForBrowser.js":186}],183:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

describe('quoteAttributeValueForBrowser', function () {

  var quoteAttributeValueForBrowser = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\quoteAttributeValueForBrowser.js');

  it('should escape boolean to string', function () {
    expect(quoteAttributeValueForBrowser(true)).toBe('"true"');
    expect(quoteAttributeValueForBrowser(false)).toBe('"false"');});


  it('should escape object to string', function () {
    var escaped = quoteAttributeValueForBrowser({ 
      toString: function () {
        return 'ponys';} });



    expect(escaped).toBe('"ponys"');});


  it('should escape number to string', function () {
    expect(quoteAttributeValueForBrowser(42)).toBe('"42"');});


  it('should escape string', function () {
    var escaped = quoteAttributeValueForBrowser('<script type=\'\' src=""></script>');
    expect(escaped).not.toContain('<');
    expect(escaped).not.toContain('>');
    expect(escaped).not.toContain('\'');
    expect(escaped.substr(1, -1)).not.toContain('\"');

    escaped = quoteAttributeValueForBrowser('&');
    expect(escaped).toBe('"&amp;"');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\quoteAttributeValueForBrowser.js":187}],184:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 */

'use strict';

var CSSProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\CSSProperty.js');
var warning = require('fbjs/lib/warning');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';}


  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || 
  isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (__DEV__) {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};}

        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;}}


        if (!warned) {
          warning(
          false, 
          'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 
          'for CSS property `%s` (value: `%s`) which will be treated ' + 
          'as a unitless number in a future version of React.', 
          component._currentElement.type, 
          ownerName || 'unknown', 
          name, 
          value);}}}




    value = value.trim();}

  return value + 'px';}


module.exports = dangerousStyleValue;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\CSSProperty.js":156,"fbjs/lib/warning":424}],185:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMUnknownPropertyDevtool
 */

'use strict';

var DOMProperty = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js');
var EventPluginRegistry = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js');
var ReactComponentTreeDevtool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js');

var warning = require('fbjs/lib/warning');

if (__DEV__) {
  var reactProps = { 
    children: true, 
    dangerouslySetInnerHTML: true, 
    key: true, 
    ref: true, 

    defaultValue: true, 
    valueLink: true, 
    defaultChecked: true, 
    checkedLink: true, 
    innerHTML: true, 
    suppressContentEditableWarning: true, 
    onFocusIn: true, 
    onFocusOut: true };

  var warnedProperties = {};

  var warnUnknownProperty = function (tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return;}

    if (reactProps.hasOwnProperty(name) && reactProps[name] || 
    warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;}

    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return;}

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = 
    DOMProperty.isCustomAttribute(lowerCasedName) ? 
    lowerCasedName : 
    DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? 
    DOMProperty.getPossibleStandardName[lowerCasedName] : 
    null;


    var registrationName = 
    EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(
    lowerCasedName) ? 

    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : 
    null;


    if (standardName != null) {
      warning(
      standardName == null, 
      'Unknown DOM property %s. Did you mean %s?%s', 
      name, 
      standardName, 
      ReactComponentTreeDevtool.getStackAddendumByID(debugID));} else 

    if (registrationName != null) {
      warning(
      registrationName == null, 
      'Unknown event handler property %s. Did you mean `%s`?%s', 
      name, 
      registrationName, 
      ReactComponentTreeDevtool.getStackAddendumByID(debugID));} else 

    {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      warning(
      false, 
      'Unknown prop `%s` on <%s> tag. Remove this prop from the element. ' + 
      'For details, see https://fb.me/react-unknown-prop%s', 
      name, 
      tagName, 
      ReactComponentTreeDevtool.getStackAddendumByID(debugID));}};}





function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;}

  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;}

  for (var key in element.props) {
    warnUnknownProperty(element.type, key, debugID);}}



var ReactDOMUnknownPropertyDevtool = { 
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);}, 

  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);} };



module.exports = ReactDOMUnknownPropertyDevtool;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\DOMProperty.js":159,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js":211,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js":228,"fbjs/lib/warning":424}],186:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = { 
  '&': '&amp;', 
  '>': '&gt;', 
  '<': '&lt;', 
  '"': '&quot;', 
  '\'': '&#x27;' };


var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];}


/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);}


module.exports = escapeTextContentForBrowser;
},{}],187:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\escapeTextContentForBrowser.js');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';}


module.exports = quoteAttributeValueForBrowser;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\escapeTextContentForBrowser.js":186}],188:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponentTree
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

var instanceCache = {};

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;}

  return component;}


/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, tag) {
  var nativeInst = getRenderedHostOrTextFromComponent(inst);
  instanceCache[tag] = nativeInst;}


function uncacheNode(inst) {
  var tag = inst._rootNodeID;
  if (tag) {
    delete instanceCache[tag];}}



function getInstanceFromTag(tag) {
  return instanceCache[tag] || null;}


function getTagFromInstance(inst) {
  invariant(inst._rootNodeID, 'All native instances should have a tag.');
  return inst._rootNodeID;}


var ReactNativeComponentTree = { 
  getClosestInstanceFromNode: getInstanceFromTag, 
  getInstanceFromNode: getInstanceFromTag, 
  getNodeFromInstance: getTagFromInstance, 
  precacheNode: precacheNode, 
  uncacheNode: uncacheNode };


module.exports = ReactNativeComponentTree;
},{"fbjs/lib/invariant":414}],189:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeContainerInfo
 * 
 */
'use strict';

function ReactNativeContainerInfo(tag) {
  var info = { 
    _tag: tag };

  return info;}


module.exports = ReactNativeContainerInfo;
},{}],190:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeEventEmitter
 * 
 */
'use strict';var _assign = require('object-assign');var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
var EventPluginRegistry = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js');
var ReactEventEmitterMixin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactEventEmitterMixin.js');
var ReactNativeComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\native\\ReactNativeComponentTree.js');
var ReactNativeTagHandles = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\native\\ReactNativeTagHandles.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');

var warning = require('fbjs/lib/warning');

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Version of `ReactBrowserEventEmitter` that works on the receiving side of a
 * serialized worker boundary.
 */

// Shared default empty native event - conserve memory.
var EMPTY_NATIVE_EVENT = {};

/**
 * Selects a subsequence of `Touch`es, without destroying `touches`.
 *
 * @param {Array<Touch>} touches Deserialized touch objects.
 * @param {Array<number>} indices Indices by which to pull subsequence.
 * @return {Array<Touch>} Subsequence of touch objects.
 */
var touchSubsequence = function (touches, indices) {
  var ret = [];
  for (var i = 0; i < indices.length; i++) {
    ret.push(touches[indices[i]]);}

  return ret;};


/**
 * TODO: Pool all of this.
 *
 * Destroys `touches` by removing touch objects at indices `indices`. This is
 * to maintain compatibility with W3C touch "end" events, where the active
 * touches don't include the set that has just been "ended".
 *
 * @param {Array<Touch>} touches Deserialized touch objects.
 * @param {Array<number>} indices Indices to remove from `touches`.
 * @return {Array<Touch>} Subsequence of removed touch objects.
 */
var removeTouchesAtIndices = function (
touches, 
indices) 
{
  var rippedOut = [];
  // use an unsafe downcast to alias to nullable elements,
  // so we can delete and then compact.
  var temp = touches;
  for (var i = 0; i < indices.length; i++) {
    var index = indices[i];
    rippedOut.push(touches[index]);
    temp[index] = null;}

  var fillAt = 0;
  for (var j = 0; j < temp.length; j++) {
    var cur = temp[j];
    if (cur !== null) {
      temp[fillAt++] = cur;}}


  temp.length = fillAt;
  return rippedOut;};


/**
 * `ReactNativeEventEmitter` is used to attach top-level event listeners. For example:
 *
 *   ReactNativeEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactNativeEventEmitter = _extends({}, 

ReactEventEmitterMixin, { 

  registrationNames: EventPluginRegistry.registrationNameModules, 

  putListener: EventPluginHub.putListener, 

  getListener: EventPluginHub.getListener, 

  deleteListener: EventPluginHub.deleteListener, 

  deleteAllListeners: EventPluginHub.deleteAllListeners, 

  /**
   * Internal version of `receiveEvent` in terms of normalized (non-tag)
   * `rootNodeID`.
   *
   * @see receiveEvent.
   *
   * @param {rootNodeID} rootNodeID React root node ID that event occurred on.
   * @param {TopLevelType} topLevelType Top level type of event.
   * @param {object} nativeEventParam Object passed from native.
   */
  _receiveRootNodeIDEvent: function (
  rootNodeID, 
  topLevelType, 
  nativeEventParam) 
  {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;
    var inst = ReactNativeComponentTree.getInstanceFromNode(rootNodeID);
    if (!inst) {
      // If the original instance is already gone, we don't have to dispatch
      // any events.
      return;}

    ReactUpdates.batchedUpdates(function () {
      ReactNativeEventEmitter.handleTopLevel(
      topLevelType, 
      inst, 
      nativeEvent, 
      nativeEvent.target);});}, 




  /**
   * Publicly exposed method on module for native objc to invoke when a top
   * level event is extracted.
   * @param {rootNodeID} rootNodeID React root node ID that event occurred on.
   * @param {TopLevelType} topLevelType Top level type of event.
   * @param {object} nativeEventParam Object passed from native.
   */
  receiveEvent: function (
  tag, 
  topLevelType, 
  nativeEventParam) 
  {
    var rootNodeID = tag;
    ReactNativeEventEmitter._receiveRootNodeIDEvent(
    rootNodeID, 
    topLevelType, 
    nativeEventParam);}, 



  /**
   * Simple multi-wrapper around `receiveEvent` that is intended to receive an
   * efficient representation of `Touch` objects, and other information that
   * can be used to construct W3C compliant `Event` and `Touch` lists.
   *
   * This may create dispatch behavior that differs than web touch handling. We
   * loop through each of the changed touches and receive it as a single event.
   * So two `touchStart`/`touchMove`s that occur simultaneously are received as
   * two separate touch event dispatches - when they arguably should be one.
   *
   * This implementation reuses the `Touch` objects themselves as the `Event`s
   * since we dispatch an event for each touch (though that might not be spec
   * compliant). The main purpose of reusing them is to save allocations.
   *
   * TODO: Dispatch multiple changed touches in one event. The bubble path
   * could be the first common ancestor of all the `changedTouches`.
   *
   * One difference between this behavior and W3C spec: cancelled touches will
   * not appear in `.touches`, or in any future `.touches`, though they may
   * still be "actively touching the surface".
   *
   * Web desktop polyfills only need to construct a fake touch event with
   * identifier 0, also abandoning traditional click handlers.
   */
  receiveTouches: function (
  eventTopLevelType, 
  touches, 
  changedIndices) 
  {
    var changedTouches = 
    eventTopLevelType === topLevelTypes.topTouchEnd || 
    eventTopLevelType === topLevelTypes.topTouchCancel ? 
    removeTouchesAtIndices(touches, changedIndices) : 
    touchSubsequence(touches, changedIndices);

    for (var jj = 0; jj < changedTouches.length; jj++) {
      var touch = changedTouches[jj];
      // Touch objects can fulfill the role of `DOM` `Event` objects if we set
      // the `changedTouches`/`touches`. This saves allocations.
      touch.changedTouches = changedTouches;
      touch.touches = touches;
      var nativeEvent = touch;
      var rootNodeID = null;
      var target = nativeEvent.target;
      if (target !== null && target !== undefined) {
        if (target < ReactNativeTagHandles.tagsStartAt) {
          if (__DEV__) {
            warning(
            false, 
            'A view is reporting that a touch occured on tag zero.');}} else 


        {
          rootNodeID = target;}}


      ReactNativeEventEmitter._receiveRootNodeIDEvent(
      rootNodeID, 
      eventTopLevelType, 
      nativeEvent);}} });





module.exports = ReactNativeEventEmitter;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\native\\ReactNativeComponentTree.js":188,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\native\\ReactNativeTagHandles.js":194,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js":228,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactEventEmitterMixin.js":243,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"fbjs/lib/warning":424,"object-assign":425}],191:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeEventPluginOrder
 * 
 */
'use strict';

var ReactNativeEventPluginOrder = [
'ResponderEventPlugin', 
'ReactNativeBridgeEventPlugin'];


module.exports = ReactNativeEventPluginOrder;
},{}],192:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativePropRegistry
 * 
 */
'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

var objects = {};
var uniqueID = 1;
var emptyObject = {};var 

ReactNativePropRegistry = function () {function ReactNativePropRegistry() {_classCallCheck(this, ReactNativePropRegistry);}ReactNativePropRegistry.
  register = function register(object) {
    var id = ++uniqueID;
    if (__DEV__) {
      Object.freeze(object);}

    objects[id] = object;
    return id;};ReactNativePropRegistry.


  getByID = function getByID(id) {
    if (!id) {
      // Used in the style={[condition && id]} pattern,
      // we want it to be a no-op when the value is false or null
      return emptyObject;}


    var object = objects[id];
    if (!object) {
      console.warn('Invalid style with id `' + id + '`. Skipping ...');
      return emptyObject;}

    return object;};return ReactNativePropRegistry;}();



module.exports = ReactNativePropRegistry;
},{}],193:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeReconcileTransaction
 * 
 */
'use strict';var _assign = require('object-assign');

var CallbackQueue = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\CallbackQueue.js');
var PooledClass = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js');
var Transaction = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\Transaction.js');

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks during
 * the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = { 
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();}, 


  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();} };



/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactNativeReconcileTransaction
 */
function ReactNativeReconcileTransaction() {
  this.reinitializeTransaction();
  this.reactMountReady = CallbackQueue.getPooled(null);}


var Mixin = { 
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;}, 


  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   *   TODO: convert to ReactMountReady
   */
  getReactMountReady: function () {
    return this.reactMountReady;}, 


  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;} };



_assign(
ReactNativeReconcileTransaction.prototype, 
Transaction.Mixin, 
ReactNativeReconcileTransaction, 
Mixin);


PooledClass.addPoolingTo(ReactNativeReconcileTransaction);

module.exports = ReactNativeReconcileTransaction;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\CallbackQueue.js":275,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js":277,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\Transaction.js":281,"object-assign":425}],194:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeTagHandles
 * 
 */
'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Keeps track of allocating and associating native "tags" which are numeric,
 * unique view IDs. All the native tags are negative numbers, to avoid
 * collisions, but in the JS we keep track of them as positive integers to store
 * them effectively in Arrays. So we must refer to them as "inverses" of the
 * native tags (that are * normally negative).
 *
 * It *must* be the case that every `rootNodeID` always maps to the exact same
 * `tag` forever. The easiest way to accomplish this is to never delete
 * anything from this table.
 * Why: Because `dangerouslyReplaceNodeWithMarkupByID` relies on being able to
 * unmount a component with a `rootNodeID`, then mount a new one in its place,
 */
var INITIAL_TAG_COUNT = 1;
var ReactNativeTagHandles = { 
  tagsStartAt: INITIAL_TAG_COUNT, 
  tagCount: INITIAL_TAG_COUNT, 

  allocateTag: function () {
    // Skip over root IDs as those are reserved for native
    while (this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount)) {
      ReactNativeTagHandles.tagCount++;}

    var tag = ReactNativeTagHandles.tagCount;
    ReactNativeTagHandles.tagCount++;
    return tag;}, 


  assertRootTag: function (tag) {
    invariant(
    this.reactTagIsNativeTopRootID(tag), 
    'Expect a native root tag, instead got %s', tag);}, 



  reactTagIsNativeTopRootID: function (reactTag) {
    // We reserve all tags that are 1 mod 10 for native root views
    return reactTag % 10 === 1;} };



module.exports = ReactNativeTagHandles;
},{"fbjs/lib/invariant":414}],195:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeTreeTraversal
 */

'use strict';

// Same as ReactDOMTreeTraversal without the invariants.

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;}

  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;}


  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;}


  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;}


  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;}

    instA = instA._hostParent;
    instB = instB._hostParent;}

  return null;}


/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  while (instB) {
    if (instB === instA) {
      return true;}

    instB = instB._hostParent;}

  return false;}


/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  return inst._hostParent;}


/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;}

  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], false, arg);}

  for (i = 0; i < path.length; i++) {
    fn(path[i], true, arg);}}



/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;}

  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;}

  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], true, argFrom);}

  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], false, argTo);}}



module.exports = { 
  isAncestor: isAncestor, 
  getLowestCommonAncestor: getLowestCommonAncestor, 
  getParentInstance: getParentInstance, 
  traverseTwoPhase: traverseTwoPhase, 
  traverseEnterLeave: traverseEnterLeave };
},{}],196:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

// Noop

// TODO #10932517: Move all initialization callers back into react-native
},{}],197:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var RCTEventEmitter = { 
  register: jest.fn() };


module.exports = RCTEventEmitter;
},{}],198:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

// Mock of the Native Hooks
// TODO: Should this move into the components themselves? E.g. focusable

var TextInputState = {};

module.exports = TextInputState;
},{}],199:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

// Mock of the Native Hooks

var RCTUIManager = { 
  createView: jest.fn(), 
  setChildren: jest.fn(), 
  manageChildren: jest.fn(), 
  updateView: jest.fn(), 
  removeSubviewsFromContainerWithID: jest.fn(), 
  replaceExistingNonRootView: jest.fn() };


module.exports = RCTUIManager;
},{}],200:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

// TODO: Move deepDiffer into react

var deepDiffer = function (one, two) {
  if (one === two) {
    // Short circuit on identical object references instead of traversing them.
    return false;}

  if (typeof one === 'function' && typeof two === 'function') {
    // We consider all functions equal
    return false;}

  if (typeof one !== 'object' || one === null) {
    // Primitives can be directly compared
    return one !== two;}

  if (typeof two !== 'object' || two === null) {
    // We know they are different because the previous case would have triggered
    // otherwise.
    return true;}

  if (one.constructor !== two.constructor) {
    return true;}

  if (Array.isArray(one)) {
    // We know two is also an array because the constructors are equal
    var len = one.length;
    if (two.length !== len) {
      return true;}

    for (var ii = 0; ii < len; ii++) {
      if (deepDiffer(one[ii], two[ii])) {
        return true;}}} else 


  {
    for (var key in one) {
      if (deepDiffer(one[key], two[key])) {
        return true;}}


    for (var twoKey in two) {
      // The only case we haven't checked yet is keys that are in two but aren't
      // in one, which means they are different.
      if (one[twoKey] === undefined && two[twoKey] !== undefined) {
        return true;}}}



  return false;};


module.exports = deepDiffer;
},{}],201:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

// TODO: move into react or fbjs

var deepFreezeAndThrowOnMutationInDev = function () {};

module.exports = deepFreezeAndThrowOnMutationInDev;
},{}],202:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

// TODO: Move flattenStyle into react

var flattenStyle = function () {};

module.exports = flattenStyle;
},{}],203:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findNodeHandle
 * 
 */

'use strict';

var ReactCurrentOwner = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js');
var ReactInstanceMap = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * ReactNative vs ReactWeb
 * -----------------------
 * React treats some pieces of data opaquely. This means that the information
 * is first class (it can be passed around), but cannot be inspected. This
 * allows us to build infrastructure that reasons about resources, without
 * making assumptions about the nature of those resources, and this allows that
 * infra to be shared across multiple platforms, where the resources are very
 * different. General infra (such as `ReactMultiChild`) reasons opaquely about
 * the data, but platform specific code (such as `ReactNativeBaseComponent`) can
 * make assumptions about the data.
 *
 *
 * `rootNodeID`, uniquely identifies a position in the generated native view
 * tree. Many layers of composite components (created with `React.createClass`)
 * can all share the same `rootNodeID`.
 *
 * `nodeHandle`: A sufficiently unambiguous way to refer to a lower level
 * resource (dom node, native view etc). The `rootNodeID` is sufficient for web
 * `nodeHandle`s, because the position in a tree is always enough to uniquely
 * identify a DOM node (we never have nodes in some bank outside of the
 * document). The same would be true for `ReactNative`, but we must maintain a
 * mapping that we can send efficiently serializable
 * strings across native boundaries.
 *
 * Opaque name      TodaysWebReact   FutureWebWorkerReact   ReactNative
 * ----------------------------------------------------------------------------
 * nodeHandle       N/A              rootNodeID             tag
 */

function findNodeHandle(componentOrHandle) {
  if (__DEV__) {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      warning(
      owner._warnedAboutRefsInRender, 
      '%s is accessing findNodeHandle inside its render(). ' + 
      'render() should be a pure function of props and state. It should ' + 
      'never access something that requires stale data from the previous ' + 
      'render, such as refs. Move this logic to componentDidMount and ' + 
      'componentDidUpdate instead.', 
      owner.getName() || 'A component');

      owner._warnedAboutRefsInRender = true;}}


  if (componentOrHandle == null) {
    return null;}

  if (typeof componentOrHandle === 'number') {
    // Already a node handle
    return componentOrHandle;}


  var component = componentOrHandle;

  // TODO (balpert): Wrap iOS native components in a composite wrapper, then
  // ReactInstanceMap.get here will always succeed for mounted components
  var internalInstance = ReactInstanceMap.get(component);
  if (internalInstance) {
    return internalInstance.getHostNode();} else 
  {
    var rootNodeID = component._rootNodeID;
    if (rootNodeID) {
      return rootNodeID;} else 
    {
      invariant(

      // Native
      typeof component === 'object' && 
      '_rootNodeID' in component || 

      // Composite
      component.render != null && 
      typeof component.render === 'function', 

      'findNodeHandle(...): Argument is not a component ' + 
      '(type: %s, keys: %s)', 
      typeof component, 
      Object.keys(component));

      invariant(
      false, 
      'findNodeHandle(...): Unable to find node handle for unmounted ' + 
      'component.');}}}





module.exports = findNodeHandle;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js":38,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js":246,"fbjs/lib/invariant":414,"fbjs/lib/warning":424}],204:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNoop
 * 
 */

/**
 * This is a renderer of React that doesn't have a render target output.
 * It is useful to demonstrate the internals of the reconciler in isolation
 * and for testing semantics of reconciliation separate from the host
 * environment.
 */

'use strict';

var ReactFiberReconciler = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactFiberReconciler.js');

var scheduledHighPriCallback = null;
var scheduledLowPriCallback = null;

var NoopRenderer = ReactFiberReconciler({ 

  createHostInstance: function () {}, 


  scheduleHighPriCallback: function (callback) {
    scheduledHighPriCallback = callback;}, 

  scheduleLowPriCallback: function (callback) {
    scheduledLowPriCallback = callback;} });




var ReactNoop = { 

  render: function (element) {

    NoopRenderer.mountNewRoot(element);}, 



  flushHighPri: function () {
    var cb = scheduledHighPriCallback;
    if (cb === null) {
      return;}

    scheduledHighPriCallback = null;
    cb();}, 


  flushLowPri: function () {var timeout = arguments.length <= 0 || arguments[0] === undefined ? Infinity : arguments[0];
    var cb = scheduledLowPriCallback;
    if (cb === null) {
      return;}

    scheduledLowPriCallback = null;
    var timeRemaining = timeout;
    cb({ 
      timeRemaining: function () {
        // Simulate a fix amount of time progressing between each call.
        timeRemaining -= 5;
        if (timeRemaining < 0) {
          timeRemaining = 0;}

        return timeRemaining;} });}, 




  flush: function () {
    ReactNoop.flushHighPri();
    ReactNoop.flushLowPri();} };




module.exports = ReactNoop;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactFiberReconciler.js":220}],205:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\noop\\__tests__\\ReactNoop-test.js';

var React;
var ReactNoop;
var ReactCoroutine;

describe('ReactComponent', function () {
  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactNoop = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\noop\\ReactNoop.js');
    ReactCoroutine = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\isomorphic\\ReactCoroutine.js');
    spyOn(console, 'log');});


  it('should render a simple component', function () {

    function Bar() {
      return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 29 } }, 'Hello World');}


    function Foo() {
      return React.createElement(Bar, { isBar: true, __source: { fileName: _jsxFileName, lineNumber: 33 } });}


    ReactNoop.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 36 } }));
    ReactNoop.flush();});



  it('should render a simple component, in steps if needed', function () {

    function Bar() {
      return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 44 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 44 } }, 'Hello World'));}


    function Foo() {
      return [
      React.createElement(Bar, { isBar: true, __source: { fileName: _jsxFileName, lineNumber: 49 } }), 
      React.createElement(Bar, { isBar: true, __source: { fileName: _jsxFileName, lineNumber: 50 } })];}



    ReactNoop.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 54 } }));
    // console.log('Nothing done');
    ReactNoop.flushLowPri(7);
    // console.log('Yield');
    ReactNoop.flushLowPri(50);
    // console.log('Done');
  });

  it('should render a coroutine', function () {

    function Continuation(_ref) {var isSame = _ref.isSame;
      return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 65 } }, isSame ? 'foo==bar' : 'foo!=bar');}


    // An alternative API could mark Continuation as something that needs
    // yielding. E.g. Continuation.yieldType = 123;
    function Child(_ref2) {var bar = _ref2.bar;
      return ReactCoroutine.createYield({ 
        bar: bar }, 
      Continuation, null);}


    function Indirection() {
      return [React.createElement(Child, { bar: true, __source: { fileName: _jsxFileName, lineNumber: 77 } }), React.createElement(Child, { bar: false, __source: { fileName: _jsxFileName, lineNumber: 77 } })];}


    function HandleYields(props, yields) {
      return yields.map(function (y) {return (
          React.createElement(y.continuation, { isSame: props.foo === y.props.bar, __source: { fileName: _jsxFileName, lineNumber: 82 } }));});}



    // An alternative API could mark Parent as something that needs
    // yielding. E.g. Parent.handler = HandleYields;
    function Parent(props) {
      return ReactCoroutine.createCoroutine(
      props.children, 
      HandleYields, 
      props);}



    function App() {
      return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 97 } }, React.createElement(Parent, { foo: true, __source: { fileName: _jsxFileName, lineNumber: 97 } }, React.createElement(Indirection, { __source: { fileName: _jsxFileName, lineNumber: 97 } })));}


    ReactNoop.render(React.createElement(App, { __source: { fileName: _jsxFileName, lineNumber: 100 } }));
    ReactNoop.flush();});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\noop\\ReactNoop.js":204,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\isomorphic\\ReactCoroutine.js":223}],206:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDebugTool
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var performanceNow = require('fbjs/lib/performanceNow');
var warning = require('fbjs/lib/warning');

var eventHandlers = [];
var handlerDoesThrowForEvent = {};

function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
  if (__DEV__) {
    eventHandlers.forEach(function (handler) {
      try {
        if (handler[handlerFunctionName]) {
          handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);}} 

      catch (e) {
        warning(
        handlerDoesThrowForEvent[handlerFunctionName], 
        'exception thrown by devtool while handling %s: %s', 
        handlerFunctionName, 
        e + '\n' + e.stack);

        handlerDoesThrowForEvent[handlerFunctionName] = true;}});}}





var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = null;
var currentFlushStartTime = null;
var currentTimerDebugID = null;
var currentTimerStartTime = null;
var currentTimerNestedFlushDuration = null;
var currentTimerType = null;

function clearHistory() {
  ReactComponentTreeDevtool.purgeUnmountedComponents();
  ReactHostOperationHistoryDevtool.clearHistory();}


function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeDevtool.getOwnerID(id);
    var parentID = ReactComponentTreeDevtool.getParentID(id);
    tree[id] = { 
      displayName: ReactComponentTreeDevtool.getDisplayName(id), 
      text: ReactComponentTreeDevtool.getText(id), 
      updateCount: ReactComponentTreeDevtool.getUpdateCount(id), 
      childIDs: ReactComponentTreeDevtool.getChildIDs(id), 
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || ReactComponentTreeDevtool.getOwnerID(parentID), 
      parentID: parentID };

    return tree;}, 
  {});}


function resetMeasurements() {
  if (__DEV__) {
    var previousStartTime = currentFlushStartTime;
    var previousMeasurements = currentFlushMeasurements || [];
    var previousOperations = ReactHostOperationHistoryDevtool.getHistory();

    if (!isProfiling || currentFlushNesting === 0) {
      currentFlushStartTime = null;
      currentFlushMeasurements = null;
      clearHistory();
      return;}


    if (previousMeasurements.length || previousOperations.length) {
      var registeredIDs = ReactComponentTreeDevtool.getRegisteredIDs();
      flushHistory.push({ 
        duration: performanceNow() - previousStartTime, 
        measurements: previousMeasurements || [], 
        operations: previousOperations || [], 
        treeSnapshot: getTreeSnapshot(registeredIDs) });}



    clearHistory();
    currentFlushStartTime = performanceNow();
    currentFlushMeasurements = [];}}



function checkDebugID(debugID) {
  warning(debugID, 'ReactDebugTool: debugID may not be empty.');}


function beginLifeCycleTimer(debugID, timerType) {
  if (!isProfiling || currentFlushNesting === 0) {
    return;}

  warning(
  !currentTimerType, 
  'There is an internal error in the React performance measurement code. ' + 
  'Did not expect %s timer to start while %s timer is still in ' + 
  'progress for %s instance.', 
  timerType, 
  currentTimerType || 'no', 
  debugID === currentTimerDebugID ? 'the same' : 'another');

  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;}


function endLifeCycleTimer(debugID, timerType) {
  if (!isProfiling || currentFlushNesting === 0) {
    return;}

  warning(
  currentTimerType === timerType, 
  'There is an internal error in the React performance measurement code. ' + 
  'We did not expect %s timer to stop while %s timer is still in ' + 
  'progress for %s instance. Please report this as a bug in React.', 
  timerType, 
  currentTimerType || 'no', 
  debugID === currentTimerDebugID ? 'the same' : 'another');

  currentFlushMeasurements.push({ 
    timerType: timerType, 
    instanceID: debugID, 
    duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration });

  currentTimerStartTime = null;
  currentTimerNestedFlushDuration = null;
  currentTimerDebugID = null;
  currentTimerType = null;}


function pauseCurrentLifeCycleTimer() {
  var currentTimer = { 
    startTime: currentTimerStartTime, 
    nestedFlushStartTime: performanceNow(), 
    debugID: currentTimerDebugID, 
    timerType: currentTimerType };

  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = null;
  currentTimerNestedFlushDuration = null;
  currentTimerDebugID = null;
  currentTimerType = null;}


function resumeCurrentLifeCycleTimer() {var _lifeCycleTimerStack$ = 
  lifeCycleTimerStack.pop();var startTime = _lifeCycleTimerStack$.startTime;var nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime;var debugID = _lifeCycleTimerStack$.debugID;var timerType = _lifeCycleTimerStack$.timerType;
  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;}


var ReactDebugTool = { 
  addDevtool: function (devtool) {
    eventHandlers.push(devtool);}, 

  removeDevtool: function (devtool) {
    for (var i = 0; i < eventHandlers.length; i++) {
      if (eventHandlers[i] === devtool) {
        eventHandlers.splice(i, 1);
        i--;}}}, 



  isProfiling: function () {
    return isProfiling;}, 

  beginProfiling: function () {
    if (__DEV__) {
      if (isProfiling) {
        return;}


      isProfiling = true;
      flushHistory.length = 0;
      resetMeasurements();}}, 


  endProfiling: function () {
    if (__DEV__) {
      if (!isProfiling) {
        return;}


      isProfiling = false;
      resetMeasurements();}}, 


  getFlushHistory: function () {
    if (__DEV__) {
      return flushHistory;}}, 


  onBeginFlush: function () {
    if (__DEV__) {
      currentFlushNesting++;
      resetMeasurements();
      pauseCurrentLifeCycleTimer();}

    emitEvent('onBeginFlush');}, 

  onEndFlush: function () {
    if (__DEV__) {
      resetMeasurements();
      currentFlushNesting--;
      resumeCurrentLifeCycleTimer();}

    emitEvent('onEndFlush');}, 

  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    if (__DEV__) {
      beginLifeCycleTimer(debugID, timerType);}}, 


  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    if (__DEV__) {
      endLifeCycleTimer(debugID, timerType);}

    emitEvent('onEndLifeCycleTimer', debugID, timerType);}, 

  onBeginReconcilerTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginReconcilerTimer', debugID, timerType);}, 

  onEndReconcilerTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onEndReconcilerTimer', debugID, timerType);}, 

  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');}, 

  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');}, 

  onHostOperation: function (debugID, type, payload) {
    checkDebugID(debugID);
    emitEvent('onHostOperation', debugID, type, payload);}, 

  onSetState: function () {
    emitEvent('onSetState');}, 

  onSetDisplayName: function (debugID, displayName) {
    checkDebugID(debugID);
    emitEvent('onSetDisplayName', debugID, displayName);}, 

  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);}, 

  onSetOwner: function (debugID, ownerDebugID) {
    checkDebugID(debugID);
    emitEvent('onSetOwner', debugID, ownerDebugID);}, 

  onSetParent: function (debugID, parentDebugID) {
    checkDebugID(debugID);
    emitEvent('onSetParent', debugID, parentDebugID);}, 

  onSetText: function (debugID, text) {
    checkDebugID(debugID);
    emitEvent('onSetText', debugID, text);}, 

  onMountRootComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onMountRootComponent', debugID);}, 

  onBeforeMountComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeMountComponent', debugID, element);}, 

  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onMountComponent', debugID);}, 

  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);}, 

  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onUpdateComponent', debugID);}, 

  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onUnmountComponent', debugID);}, 

  onTestEvent: function () {
    emitEvent('onTestEvent');} };



if (__DEV__) {
  var ReactInvalidSetStateWarningDevTool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactInvalidSetStateWarningDevTool.js');
  var ReactHostOperationHistoryDevtool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactHostOperationHistoryDevtool.js');
  var ReactComponentTreeDevtool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js');
  ReactDebugTool.addDevtool(ReactInvalidSetStateWarningDevTool);
  ReactDebugTool.addDevtool(ReactComponentTreeDevtool);
  ReactDebugTool.addDevtool(ReactHostOperationHistoryDevtool);
  var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
  if (/[?&]react_perf\b/.test(url)) {
    ReactDebugTool.beginProfiling();}}



module.exports = ReactDebugTool;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js":211,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactHostOperationHistoryDevtool.js":212,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactInvalidSetStateWarningDevTool.js":213,"fbjs/lib/ExecutionEnvironment":399,"fbjs/lib/performanceNow":422,"fbjs/lib/warning":424}],207:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstrumentation
 */

'use strict';

var ReactDebugTool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactDebugTool.js');

module.exports = { debugTool: ReactDebugTool };
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactDebugTool.js":206}],208:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 */

'use strict';var _assign = require('object-assign');var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

var ReactDebugTool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactDebugTool.js');
var warning = require('fbjs/lib/warning');

function roundFloat(val) {var base = arguments.length <= 1 || arguments[1] === undefined ? 2 : arguments[1];
  var n = Math.pow(10, base);
  return Math.floor(val * n) / n;}


function getFlushHistory() {
  return ReactDebugTool.getFlushHistory();}


function getExclusive() {var flushHistory = arguments.length <= 0 || arguments[0] === undefined ? getFlushHistory() : arguments[0];
  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, timerType, applyUpdate) {var 
    displayName = treeSnapshot[instanceID].displayName;
    var key = displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = { 
        key: key, 
        instanceCount: 0, 
        counts: {}, 
        durations: {}, 
        totalDuration: 0 };}


    if (!stats.durations[timerType]) {
      stats.durations[timerType] = 0;}

    if (!stats.counts[timerType]) {
      stats.counts[timerType] = 0;}

    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);}


  flushHistory.forEach(function (flush) {var 
    measurements = flush.measurements;var treeSnapshot = flush.treeSnapshot;
    measurements.forEach(function (measurement) {var 
      duration = measurement.duration;var instanceID = measurement.instanceID;var timerType = measurement.timerType;
      updateAggregatedStats(treeSnapshot, instanceID, timerType, function (stats) {
        stats.totalDuration += duration;
        stats.durations[timerType] += duration;
        stats.counts[timerType]++;});});});




  return Object.keys(aggregatedStats).
  map(function (key) {return _extends({}, 
    aggregatedStats[key], { 
      instanceCount: Object.keys(affectedIDs[key]).length });}).

  sort(function (a, b) {return (
      b.totalDuration - a.totalDuration);});}



function getInclusive() {var flushHistory = arguments.length <= 0 || arguments[0] === undefined ? getFlushHistory() : arguments[0];
  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {var _treeSnapshot$instanc = 
    treeSnapshot[instanceID];var displayName = _treeSnapshot$instanc.displayName;var ownerID = _treeSnapshot$instanc.ownerID;
    var owner = treeSnapshot[ownerID];
    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = { 
        key: key, 
        instanceCount: 0, 
        inclusiveRenderDuration: 0, 
        renderCount: 0 };}


    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);}


  var isCompositeByID = {};
  flushHistory.forEach(function (flush) {var 
    measurements = flush.measurements;
    measurements.forEach(function (measurement) {var 
      instanceID = measurement.instanceID;var timerType = measurement.timerType;
      if (timerType !== 'render') {
        return;}

      isCompositeByID[instanceID] = true;});});



  flushHistory.forEach(function (flush) {var 
    measurements = flush.measurements;var treeSnapshot = flush.treeSnapshot;
    measurements.forEach(function (measurement) {var 
      duration = measurement.duration;var instanceID = measurement.instanceID;var timerType = measurement.timerType;
      if (timerType !== 'render') {
        return;}

      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
        stats.renderCount++;});

      var nextParentID = instanceID;
      while (nextParentID) {
        // As we traverse parents, only count inclusive time towards composites.
        // We know something is a composite if its render() was called.
        if (isCompositeByID[nextParentID]) {
          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
            stats.inclusiveRenderDuration += duration;});}


        nextParentID = treeSnapshot[nextParentID].parentID;}});});




  return Object.keys(aggregatedStats).
  map(function (key) {return _extends({}, 
    aggregatedStats[key], { 
      instanceCount: Object.keys(affectedIDs[key]).length });}).

  sort(function (a, b) {return (
      b.inclusiveRenderDuration - a.inclusiveRenderDuration);});}



function getWasted() {var flushHistory = arguments.length <= 0 || arguments[0] === undefined ? getFlushHistory() : arguments[0];
  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {var _treeSnapshot$instanc2 = 
    treeSnapshot[instanceID];var displayName = _treeSnapshot$instanc2.displayName;var ownerID = _treeSnapshot$instanc2.ownerID;
    var owner = treeSnapshot[ownerID];
    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = { 
        key: key, 
        instanceCount: 0, 
        inclusiveRenderDuration: 0, 
        renderCount: 0 };}


    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);}


  flushHistory.forEach(function (flush) {var 
    measurements = flush.measurements;var treeSnapshot = flush.treeSnapshot;var operations = flush.operations;
    var isDefinitelyNotWastedByID = {};

    // Find host components associated with an operation in this batch.
    // Mark all components in their parent tree as definitely not wasted.
    operations.forEach(function (operation) {var 
      instanceID = operation.instanceID;
      var nextParentID = instanceID;
      while (nextParentID) {
        isDefinitelyNotWastedByID[nextParentID] = true;
        nextParentID = treeSnapshot[nextParentID].parentID;}});



    // Find composite components that rendered in this batch.
    // These are potential candidates for being wasted renders.
    var renderedCompositeIDs = {};
    measurements.forEach(function (measurement) {var 
      instanceID = measurement.instanceID;var timerType = measurement.timerType;
      if (timerType !== 'render') {
        return;}

      renderedCompositeIDs[instanceID] = true;});


    measurements.forEach(function (measurement) {var 
      duration = measurement.duration;var instanceID = measurement.instanceID;var timerType = measurement.timerType;
      if (timerType !== 'render') {
        return;}


      // If there was a DOM update below this component, or it has just been
      // mounted, its render() is not considered wasted.
      var updateCount = treeSnapshot[instanceID].updateCount;
      if (isDefinitelyNotWastedByID[instanceID] || updateCount === 0) {
        return;}


      // We consider this render() wasted.
      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
        stats.renderCount++;});


      var nextParentID = instanceID;
      while (nextParentID) {
        // Any parents rendered during this batch are considered wasted
        // unless we previously marked them as dirty.
        var isWasted = 
        renderedCompositeIDs[nextParentID] && 
        !isDefinitelyNotWastedByID[nextParentID];
        if (isWasted) {
          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
            stats.inclusiveRenderDuration += duration;});}


        nextParentID = treeSnapshot[nextParentID].parentID;}});});




  return Object.keys(aggregatedStats).
  map(function (key) {return _extends({}, 
    aggregatedStats[key], { 
      instanceCount: Object.keys(affectedIDs[key]).length });}).

  sort(function (a, b) {return (
      b.inclusiveRenderDuration - a.inclusiveRenderDuration);});}



function getOperations() {var flushHistory = arguments.length <= 0 || arguments[0] === undefined ? getFlushHistory() : arguments[0];
  var stats = [];
  flushHistory.forEach(function (flush, flushIndex) {var 
    operations = flush.operations;var treeSnapshot = flush.treeSnapshot;
    operations.forEach(function (operation) {var 
      instanceID = operation.instanceID;var type = operation.type;var payload = operation.payload;var _treeSnapshot$instanc3 = 
      treeSnapshot[instanceID];var displayName = _treeSnapshot$instanc3.displayName;var ownerID = _treeSnapshot$instanc3.ownerID;
      var owner = treeSnapshot[ownerID];
      var key = (owner ? owner.displayName + ' > ' : '') + displayName;

      stats.push({ 
        flushIndex: flushIndex, 
        instanceID: instanceID, 
        key: key, 
        type: type, 
        ownerID: ownerID, 
        payload: payload });});});



  return stats;}


function printExclusive(flushHistory) {
  var stats = getExclusive(flushHistory);
  var table = stats.map(function (item) {var 
    key = item.key;var instanceCount = item.instanceCount;var totalDuration = item.totalDuration;
    var renderCount = item.counts.render || 0;
    var renderDuration = item.durations.render || 0;
    return { 
      'Component': key, 
      'Total time (ms)': roundFloat(totalDuration), 
      'Instance count': instanceCount, 
      'Total render time (ms)': roundFloat(renderDuration), 
      'Average render time (ms)': renderCount ? 
      roundFloat(renderDuration / renderCount) : 
      undefined, 
      'Render count': renderCount, 
      'Total lifecycle time (ms)': roundFloat(totalDuration - renderDuration) };});


  console.table(table);}


function printInclusive(flushHistory) {
  var stats = getInclusive(flushHistory);
  var table = stats.map(function (item) {var 
    key = item.key;var instanceCount = item.instanceCount;var inclusiveRenderDuration = item.inclusiveRenderDuration;var renderCount = item.renderCount;
    return { 
      'Owner > Component': key, 
      'Inclusive render time (ms)': roundFloat(inclusiveRenderDuration), 
      'Instance count': instanceCount, 
      'Render count': renderCount };});


  console.table(table);}


function printWasted(flushHistory) {
  var stats = getWasted(flushHistory);
  var table = stats.map(function (item) {var 
    key = item.key;var instanceCount = item.instanceCount;var inclusiveRenderDuration = item.inclusiveRenderDuration;var renderCount = item.renderCount;
    return { 
      'Owner > Component': key, 
      'Inclusive wasted time (ms)': roundFloat(inclusiveRenderDuration), 
      'Instance count': instanceCount, 
      'Render count': renderCount };});


  console.table(table);}


function printOperations(flushHistory) {
  var stats = getOperations(flushHistory);
  var table = stats.map(function (stat) {return { 
      'Owner > Node': stat.key, 
      'Operation': stat.type, 
      'Payload': typeof stat.payload === 'object' ? 
      JSON.stringify(stat.payload) : 
      stat.payload, 
      'Flush index': stat.flushIndex, 
      'Owner Component ID': stat.ownerID, 
      'DOM Component ID': stat.instanceID };});

  console.table(table);}


var warnedAboutPrintDOM = false;
function printDOM(measurements) {
  warning(
  warnedAboutPrintDOM, 
  '`ReactPerf.printDOM(...)` is deprecated. Use ' + 
  '`ReactPerf.printOperations(...)` instead.');

  warnedAboutPrintDOM = true;
  return printOperations(measurements);}


var warnedAboutGetMeasurementsSummaryMap = false;
function getMeasurementsSummaryMap(measurements) {
  warning(
  warnedAboutGetMeasurementsSummaryMap, 
  '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' + 
  '`ReactPerf.getWasted(...)` instead.');

  warnedAboutGetMeasurementsSummaryMap = true;
  return getWasted(measurements);}


function start() {
  ReactDebugTool.beginProfiling();}


function stop() {
  ReactDebugTool.endProfiling();}


function isRunning() {
  return ReactDebugTool.isProfiling();}


var ReactPerfAnalysis = { 
  getLastMeasurements: getFlushHistory, 
  getExclusive: getExclusive, 
  getInclusive: getInclusive, 
  getWasted: getWasted, 
  getOperations: getOperations, 
  printExclusive: printExclusive, 
  printInclusive: printInclusive, 
  printWasted: printWasted, 
  printOperations: printOperations, 
  start: start, 
  stop: stop, 
  isRunning: isRunning, 
  // Deprecated:
  printDOM: printDOM, 
  getMeasurementsSummaryMap: getMeasurementsSummaryMap };


module.exports = ReactPerfAnalysis;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactDebugTool.js":206,"fbjs/lib/warning":424,"object-assign":425}],209:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

describe('ReactDebugTool', function () {
  var ReactDebugTool;

  beforeEach(function () {
    jest.resetModuleRegistry();
    ReactDebugTool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactDebugTool.js');});


  it('should add and remove devtools', function () {
    var handler1 = jasmine.createSpy('spy');
    var handler2 = jasmine.createSpy('spy');
    var devtool1 = { onTestEvent: handler1 };
    var devtool2 = { onTestEvent: handler2 };

    ReactDebugTool.addDevtool(devtool1);
    ReactDebugTool.onTestEvent();
    expect(handler1.calls.count()).toBe(1);
    expect(handler2.calls.count()).toBe(0);

    ReactDebugTool.onTestEvent();
    expect(handler1.calls.count()).toBe(2);
    expect(handler2.calls.count()).toBe(0);

    ReactDebugTool.addDevtool(devtool2);
    ReactDebugTool.onTestEvent();
    expect(handler1.calls.count()).toBe(3);
    expect(handler2.calls.count()).toBe(1);

    ReactDebugTool.onTestEvent();
    expect(handler1.calls.count()).toBe(4);
    expect(handler2.calls.count()).toBe(2);

    ReactDebugTool.removeDevtool(devtool1);
    ReactDebugTool.onTestEvent();
    expect(handler1.calls.count()).toBe(4);
    expect(handler2.calls.count()).toBe(3);

    ReactDebugTool.removeDevtool(devtool2);
    ReactDebugTool.onTestEvent();
    expect(handler1.calls.count()).toBe(4);
    expect(handler2.calls.count()).toBe(3);});


  it('warns once when an error is thrown in devtool', function () {
    spyOn(console, 'error');
    ReactDebugTool.addDevtool({ 
      onTestEvent: function () {
        throw new Error('Hi.');} });



    ReactDebugTool.onTestEvent();
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'exception thrown by devtool while handling ' + 
    'onTestEvent: Error: Hi.');


    ReactDebugTool.onTestEvent();
    expect(console.error.calls.count()).toBe(1);});


  it('returns isProfiling state', function () {
    expect(ReactDebugTool.isProfiling()).toBe(false);

    ReactDebugTool.beginProfiling();
    expect(ReactDebugTool.isProfiling()).toBe(true);

    ReactDebugTool.endProfiling();
    expect(ReactDebugTool.isProfiling()).toBe(false);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactDebugTool.js":206}],210:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\__tests__\\ReactPerf-test.js', _assign = require('object-assign');function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

describe('ReactPerf', function () {
  var React;
  var ReactDOM;
  var ReactPerf;
  var ReactTestUtils;
  var emptyFunction;

  var App;
  var Box;
  var Div;
  var LifeCycle;

  beforeEach(function () {
    var now = 0;
    jest.setMock('fbjs/lib/performanceNow', function () {
      return now++;});


    if (typeof console.table !== 'function') {
      console.table = function () {};
      console.table.isFake = true;}


    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactPerf = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactPerf.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    emptyFunction = require('fbjs/lib/emptyFunction');

    App = React.createClass({ displayName: 'App', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 45 } }, React.createElement(Box, { __source: { fileName: _jsxFileName, lineNumber: 45 } }), React.createElement(Box, { flip: this.props.flipSecond, __source: { fileName: _jsxFileName, lineNumber: 45 } }));} });



    Box = React.createClass({ displayName: 'Box', 
      render: function () {
        return React.createElement('div', { key: !!this.props.flip, __source: { fileName: _jsxFileName, lineNumber: 51 } }, React.createElement('input', { __source: { fileName: _jsxFileName, lineNumber: 51 } }));} });



    // ReactPerf only measures composites, so we put everything in one.
    Div = React.createClass({ displayName: 'Div', 
      render: function () {
        return React.createElement('div', _extends({}, this.props, { __source: { fileName: _jsxFileName, lineNumber: 58 } }));} });



    LifeCycle = React.createClass({ displayName: 'LifeCycle', 
      shouldComponentUpdate: emptyFunction.thatReturnsTrue, 
      componentWillMount: emptyFunction, 
      componentDidMount: emptyFunction, 
      componentWillReceiveProps: emptyFunction, 
      componentWillUpdate: emptyFunction, 
      componentDidUpdate: emptyFunction, 
      componentWillUnmount: emptyFunction, 
      render: emptyFunction.thatReturnsNull });});



  afterEach(function () {
    if (console.table.isFake) {
      delete console.table;}});



  function measure(fn) {
    ReactPerf.start();
    fn();
    ReactPerf.stop();

    // Make sure none of the methods crash.
    ReactPerf.getWasted();
    ReactPerf.getInclusive();
    ReactPerf.getExclusive();
    ReactPerf.getOperations();

    return ReactPerf.getLastMeasurements();}


  it('should count no-op update as waste', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement(App, { __source: { fileName: _jsxFileName, lineNumber: 96 } }), container);
    var measurements = measure(function () {
      ReactDOM.render(React.createElement(App, { __source: { fileName: _jsxFileName, lineNumber: 98 } }), container);});


    var summary = ReactPerf.getWasted(measurements);
    expect(summary).toEqual([{ 
      key: 'App', 
      instanceCount: 1, 
      inclusiveRenderDuration: 3, 
      renderCount: 1 }, 
    { 
      key: 'App > Box', 
      instanceCount: 2, 
      inclusiveRenderDuration: 2, 
      renderCount: 2 }]);});



  it('should count no-op update in child as waste', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement(App, { __source: { fileName: _jsxFileName, lineNumber: 117 } }), container);

    // Here, we add a Box -- two of the <Box /> updates are wasted time (but the
    // addition of the third is not)
    var measurements = measure(function () {
      ReactDOM.render(React.createElement(App, { flipSecond: true, __source: { fileName: _jsxFileName, lineNumber: 122 } }), container);});


    var summary = ReactPerf.getWasted(measurements);
    expect(summary).toEqual([{ 
      key: 'App > Box', 
      instanceCount: 1, 
      inclusiveRenderDuration: 1, 
      renderCount: 1 }]);});



  function expectNoWaste(fn) {
    var measurements = measure(fn);
    var summary = ReactPerf.getWasted(measurements);
    expect(summary).toEqual([]);}


  it('should not count initial render as waste', function () {
    expectNoWaste(function () {
      ReactTestUtils.renderIntoDocument(React.createElement(App, { __source: { fileName: _jsxFileName, lineNumber: 142 } }));});});



  it('should not count unmount as waste', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 148 } }, 'hello'), container);
    expectNoWaste(function () {
      ReactDOM.unmountComponentAtNode(container);});});



  it('should not count content update as waste', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 156 } }, 'hello'), container);
    expectNoWaste(function () {
      ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 158 } }, 'hello world'), container);});});



  it('should not count child addition as waste', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 164 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 164 } })), container);
    expectNoWaste(function () {
      ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 166 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 166 } }), React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 166 } })), container);});});



  it('should not count child removal as waste', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 172 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 172 } }), React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 172 } })), container);
    expectNoWaste(function () {
      ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 174 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 174 } })), container);});});



  it('should not count property update as waste', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Div, { className: 'yellow', __source: { fileName: _jsxFileName, lineNumber: 180 } }, 'hey'), container);
    expectNoWaste(function () {
      ReactDOM.render(React.createElement(Div, { className: 'blue', __source: { fileName: _jsxFileName, lineNumber: 182 } }, 'hey'), container);});});



  it('should not count style update as waste', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Div, { style: { color: 'yellow' }, __source: { fileName: _jsxFileName, lineNumber: 188 } }, 'hey'), container);
    expectNoWaste(function () {
      ReactDOM.render(React.createElement(Div, { style: { color: 'blue' }, __source: { fileName: _jsxFileName, lineNumber: 190 } }, 'hey'), container);});});



  it('should not count property removal as waste', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Div, { className: 'yellow', __source: { fileName: _jsxFileName, lineNumber: 196 } }, 'hey'), container);
    expectNoWaste(function () {
      ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 198 } }, 'hey'), container);});});



  it('should not count raw HTML update as waste', function () {
    var container = document.createElement('div');
    ReactDOM.render(
    React.createElement(Div, { dangerouslySetInnerHTML: { __html: 'me' }, __source: { fileName: _jsxFileName, lineNumber: 205 } }), 
    container);

    expectNoWaste(function () {
      ReactDOM.render(
      React.createElement(Div, { dangerouslySetInnerHTML: { __html: 'you' }, __source: { fileName: _jsxFileName, lineNumber: 210 } }), 
      container);});});




  it('should not count child reordering as waste', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 218 } }, React.createElement('div', { key: 'A', __source: { fileName: _jsxFileName, lineNumber: 218 } }), React.createElement('div', { key: 'B', __source: { fileName: _jsxFileName, lineNumber: 218 } })), container);
    expectNoWaste(function () {
      ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 220 } }, React.createElement('div', { key: 'B', __source: { fileName: _jsxFileName, lineNumber: 220 } }), React.createElement('div', { key: 'A', __source: { fileName: _jsxFileName, lineNumber: 220 } })), container);});});



  it('should not count text update as waste', function () {
    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 226 } }, 'hello', 'world'), container);
    expectNoWaste(function () {
      ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 228 } }, 'hello', 'friend'), container);});});



  it('should not count replacing null with a host as waste', function () {
    var element = null;
    function Foo() {
      return element;}

    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 238 } }), container);
    expectNoWaste(function () {
      element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 240 } });
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 241 } }), container);});});



  it('should not count replacing a host with null as waste', function () {
    var element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 246 } });
    function Foo() {
      return element;}

    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 251 } }), container);
    expectNoWaste(function () {
      element = null;
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 254 } }), container);});});



  it('should include stats for components unmounted during measurement', function () {
    var container = document.createElement('div');
    var measurements = measure(function () {
      ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 261 } }, React.createElement(Div, { key: 'a', __source: { fileName: _jsxFileName, lineNumber: 261 } })), container);
      ReactDOM.render(React.createElement(Div, { __source: { fileName: _jsxFileName, lineNumber: 262 } }, React.createElement(Div, { key: 'b', __source: { fileName: _jsxFileName, lineNumber: 262 } })), container);});

    expect(ReactPerf.getExclusive(measurements)).toEqual([{ 
      key: 'Div', 
      instanceCount: 3, 
      counts: { ctor: 3, render: 4 }, 
      durations: { ctor: 3, render: 4 }, 
      totalDuration: 7 }]);});



  it('should include lifecycle methods in measurements', function () {
    var container = document.createElement('div');
    var measurements = measure(function () {
      var instance = ReactDOM.render(React.createElement(LifeCycle, { __source: { fileName: _jsxFileName, lineNumber: 276 } }), container);
      ReactDOM.render(React.createElement(LifeCycle, { __source: { fileName: _jsxFileName, lineNumber: 277 } }), container);
      instance.setState({});
      ReactDOM.unmountComponentAtNode(container);});

    expect(ReactPerf.getExclusive(measurements)).toEqual([{ 
      key: 'LifeCycle', 
      instanceCount: 1, 
      totalDuration: 14, 
      counts: { 
        ctor: 1, 
        shouldComponentUpdate: 2, 
        componentWillMount: 1, 
        componentDidMount: 1, 
        componentWillReceiveProps: 1, 
        componentWillUpdate: 2, 
        componentDidUpdate: 2, 
        componentWillUnmount: 1, 
        render: 3 }, 

      durations: { 
        ctor: 1, 
        shouldComponentUpdate: 2, 
        componentWillMount: 1, 
        componentDidMount: 1, 
        componentWillReceiveProps: 1, 
        componentWillUpdate: 2, 
        componentDidUpdate: 2, 
        componentWillUnmount: 1, 
        render: 3 } }]);});




  it('should include render time of functional components', function () {
    function Foo() {
      return null;}


    var container = document.createElement('div');
    var measurements = measure(function () {
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 317 } }), container);});

    expect(ReactPerf.getExclusive(measurements)).toEqual([{ 
      key: 'Foo', 
      instanceCount: 1, 
      totalDuration: 1, 
      counts: { 
        render: 1 }, 

      durations: { 
        render: 1 } }]);});




  it('should not count time in a portal towards lifecycle method', function () {
    function Foo() {
      return null;}


    var portalContainer = document.createElement('div');var 
    Portal = function (_React$Component) {_inherits(Portal, _React$Component);function Portal() {_classCallCheck(this, Portal);return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));}Portal.prototype.
      componentDidMount = function componentDidMount() {
        ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 340 } }), portalContainer);};Portal.prototype.

      render = function render() {
        return null;};return Portal;}(React.Component);



    var container = document.createElement('div');
    var measurements = measure(function () {
      ReactDOM.render(React.createElement(Portal, { __source: { fileName: _jsxFileName, lineNumber: 349 } }), container);});


    expect(ReactPerf.getExclusive(measurements)).toEqual([{ 
      key: 'Portal', 
      instanceCount: 1, 
      totalDuration: 6, 
      counts: { 
        ctor: 1, 
        componentDidMount: 1, 
        render: 1 }, 

      durations: { 
        ctor: 1, 
        // We want to exclude nested imperative ReactDOM.render() from lifecycle hook's own time.
        // Otherwise it would artificially float to the top even though its exclusive time is small.
        // This is how we get 4 as a number with the performanceNow() mock:
        // - we capture the time we enter componentDidMount (n = 0)
        // - we capture the time when we enter a nested flush (n = 1)
        // - in the nested flush, we call it twice: before and after <Foo /> rendering. (n = 3)
        // - we capture the time when we exit a nested flush (n = 4)
        // - we capture the time we exit componentDidMount (n = 5)
        // Time spent in componentDidMount = (5 - 0 - (4 - 3)) = 4.
        componentDidMount: 4, 
        render: 1 } }, 

    { 
      key: 'Foo', 
      instanceCount: 1, 
      totalDuration: 1, 
      counts: { 
        render: 1 }, 

      durations: { 
        render: 1 } }]);});




  it('warns once when using getMeasurementsSummaryMap', function () {
    var measurements = measure(function () {});
    spyOn(console, 'error');
    ReactPerf.getMeasurementsSummaryMap(measurements);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' + 
    '`ReactPerf.getWasted(...)` instead.');


    ReactPerf.getMeasurementsSummaryMap(measurements);
    expect(console.error.calls.count()).toBe(1);});


  it('warns once when using printDOM', function () {
    var measurements = measure(function () {});
    spyOn(console, 'error');
    ReactPerf.printDOM(measurements);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    '`ReactPerf.printDOM(...)` is deprecated. Use ' + 
    '`ReactPerf.printOperations(...)` instead.');


    ReactPerf.printDOM(measurements);
    expect(console.error.calls.count()).toBe(1);});


  it('returns isRunning state', function () {
    expect(ReactPerf.isRunning()).toBe(false);

    ReactPerf.start();
    expect(ReactPerf.isRunning()).toBe(true);

    ReactPerf.stop();
    expect(ReactPerf.isRunning()).toBe(false);});


  it('start has no effect when already running', function () {
    expect(ReactPerf.isRunning()).toBe(false);

    ReactPerf.start();
    expect(ReactPerf.isRunning()).toBe(true);

    ReactPerf.start();
    expect(ReactPerf.isRunning()).toBe(true);

    ReactPerf.stop();
    expect(ReactPerf.isRunning()).toBe(false);});


  it('stop has no effect when already stopped', function () {
    expect(ReactPerf.isRunning()).toBe(false);

    ReactPerf.stop();
    expect(ReactPerf.isRunning()).toBe(false);

    ReactPerf.stop();
    expect(ReactPerf.isRunning()).toBe(false);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactPerf.js":208,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"fbjs/lib/emptyFunction":406,"object-assign":425}],211:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentTreeDevtool
 */

'use strict';

var ReactCurrentOwner = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var tree = {};
var unmountedIDs = {};
var rootIDs = {};

function updateTree(id, update) {
  if (!tree[id]) {
    tree[id] = { 
      element: null, 
      parentID: null, 
      ownerID: null, 
      text: null, 
      childIDs: [], 
      displayName: 'Unknown', 
      isMounted: false, 
      updateCount: 0 };

    // TODO: We need to do this awkward dance because TopLevelWrapper "never
    // gets mounted" but its display name gets set in instantiateReactComponent
    // before its debug ID is set to 0.
    unmountedIDs[id] = true;}

  update(tree[id]);}


function purgeDeep(id) {
  var item = tree[id];
  if (item) {var 
    childIDs = item.childIDs;
    delete tree[id];
    childIDs.forEach(purgeDeep);}}



function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + name + (
  source ? 
  ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + 
  source.lineNumber + ')' : 
  ownerName ? 
  ' (created by ' + ownerName + ')' : 
  '');}



function describeID(id) {
  var name = ReactComponentTreeDevtool.getDisplayName(id);
  var element = ReactComponentTreeDevtool.getElement(id);
  var ownerID = ReactComponentTreeDevtool.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeDevtool.getDisplayName(ownerID);}

  warning(
  element, 
  'ReactComponentTreeDevtool: Missing React element for debugID %s when ' + 
  'building stack', 
  id);

  return describeComponentFrame(name, element && element._source, ownerName);}


var ReactComponentTreeDevtool = { 
  onSetDisplayName: function (id, displayName) {
    updateTree(id, function (item) {return item.displayName = displayName;});}, 


  onSetChildren: function (id, nextChildIDs) {
    updateTree(id, function (item) {
      item.childIDs = nextChildIDs;

      nextChildIDs.forEach(function (nextChildID) {
        var nextChild = tree[nextChildID];
        invariant(
        nextChild, 
        'Expected devtool events to fire for the child ' + 
        'before its parent includes it in onSetChildren().');

        invariant(
        nextChild.displayName != null, 
        'Expected onSetDisplayName() to fire for the child ' + 
        'before its parent includes it in onSetChildren().');

        invariant(
        nextChild.childIDs != null || nextChild.text != null, 
        'Expected onSetChildren() or onSetText() to fire for the child ' + 
        'before its parent includes it in onSetChildren().');

        invariant(
        nextChild.isMounted, 
        'Expected onMountComponent() to fire for the child ' + 
        'before its parent includes it in onSetChildren().');

        if (nextChild.parentID == null) {
          nextChild.parentID = id;
          // TODO: This shouldn't be necessary but mounting a new root during in
          // componentWillMount currently causes not-yet-mounted components to
          // be purged from our tree data so their parent ID is missing.
        }
        invariant(
        nextChild.parentID === id, 
        'Expected onSetParent() and onSetChildren() to be consistent (%s ' + 
        'has parents %s and %s).', 
        nextChildID, 
        nextChild.parentID, 
        id);});});}, 





  onSetOwner: function (id, ownerID) {
    updateTree(id, function (item) {return item.ownerID = ownerID;});}, 


  onSetParent: function (id, parentID) {
    updateTree(id, function (item) {return item.parentID = parentID;});}, 


  onSetText: function (id, text) {
    updateTree(id, function (item) {return item.text = text;});}, 


  onBeforeMountComponent: function (id, element) {
    updateTree(id, function (item) {return item.element = element;});}, 


  onBeforeUpdateComponent: function (id, element) {
    updateTree(id, function (item) {return item.element = element;});}, 


  onMountComponent: function (id) {
    updateTree(id, function (item) {return item.isMounted = true;});
    delete unmountedIDs[id];}, 


  onMountRootComponent: function (id) {
    rootIDs[id] = true;}, 


  onUpdateComponent: function (id) {
    updateTree(id, function (item) {return item.updateCount++;});}, 


  onUnmountComponent: function (id) {
    updateTree(id, function (item) {return item.isMounted = false;});
    unmountedIDs[id] = true;
    delete rootIDs[id];}, 


  purgeUnmountedComponents: function () {
    if (ReactComponentTreeDevtool._preventPurging) {
      // Should only be used for testing.
      return;}


    for (var id in unmountedIDs) {
      purgeDeep(id);}

    unmountedIDs = {};}, 


  isMounted: function (id) {
    var item = tree[id];
    return item ? item.isMounted : false;}, 


  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var type = topElement.type;
      var name = typeof type === 'function' ? 
      type.displayName || type.name : 
      type;
      var owner = topElement._owner;
      info += describeComponentFrame(
      name || 'Unknown', 
      topElement._source, 
      owner && owner.getName());}



    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeDevtool.getStackAddendumByID(id);
    return info;}, 


  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeDevtool.getParentID(id);}

    return info;}, 


  getChildIDs: function (id) {
    var item = tree[id];
    return item ? item.childIDs : [];}, 


  getDisplayName: function (id) {
    var item = tree[id];
    return item ? item.displayName : 'Unknown';}, 


  getElement: function (id) {
    var item = tree[id];
    return item ? item.element : null;}, 


  getOwnerID: function (id) {
    var item = tree[id];
    return item ? item.ownerID : null;}, 


  getParentID: function (id) {
    var item = tree[id];
    return item ? item.parentID : null;}, 


  getSource: function (id) {
    var item = tree[id];
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;}, 


  getText: function (id) {
    var item = tree[id];
    return item ? item.text : null;}, 


  getUpdateCount: function (id) {
    var item = tree[id];
    return item ? item.updateCount : 0;}, 


  getRootIDs: function () {
    return Object.keys(rootIDs);}, 


  getRegisteredIDs: function () {
    return Object.keys(tree);} };



module.exports = ReactComponentTreeDevtool;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js":38,"fbjs/lib/invariant":414,"fbjs/lib/warning":424}],212:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactHostOperationHistoryDevtool
 */

'use strict';

var history = [];

var ReactHostOperationHistoryDevtool = { 
  onHostOperation: function (debugID, type, payload) {
    history.push({ 
      instanceID: debugID, 
      type: type, 
      payload: payload });}, 



  clearHistory: function () {
    if (ReactHostOperationHistoryDevtool._preventClearing) {
      // Should only be used for tests.
      return;}


    history = [];}, 


  getHistory: function () {
    return history;} };



module.exports = ReactHostOperationHistoryDevtool;
},{}],213:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInvalidSetStateWarningDevTool
 */

'use strict';

var warning = require('fbjs/lib/warning');

if (__DEV__) {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
    warning(
    !processingChildContext, 
    'setState(...): Cannot call setState() inside getChildContext()');};}




var ReactInvalidSetStateWarningDevTool = { 
  onBeginProcessingChildContext: function () {
    processingChildContext = true;}, 

  onEndProcessingChildContext: function () {
    processingChildContext = false;}, 

  onSetState: function () {
    warnInvalidSetState();} };



module.exports = ReactInvalidSetStateWarningDevTool;
},{"fbjs/lib/warning":424}],214:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\devtools\\__tests__\\ReactComponentTreeDevtool-test.js';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

describe('ReactComponentTreeDevtool', function () {
  var React;
  var ReactDOM;
  var ReactDOMServer;
  var ReactInstanceMap;
  var ReactComponentTreeDevtool;
  var ReactComponentTreeTestUtils;

  beforeEach(function () {
    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');
    ReactInstanceMap = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js');
    ReactComponentTreeDevtool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js');
    ReactComponentTreeTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactComponentTreeTestUtils.js');});


  function assertTreeMatches(pairs) {
    if (!Array.isArray(pairs[0])) {
      pairs = [pairs];}


    var node = document.createElement('div');
    var currentElement;
    var rootInstance;var 

    Wrapper = function (_React$Component) {_inherits(Wrapper, _React$Component);function Wrapper() {_classCallCheck(this, Wrapper);return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));}Wrapper.prototype.
      render = function render() {
        rootInstance = ReactInstanceMap.get(this);
        return currentElement;};return Wrapper;}(React.Component);



    function expectWrapperTreeToEqual(expectedTree) {
      ReactComponentTreeTestUtils.expectTree(rootInstance._debugID, { 
        displayName: 'Wrapper', 
        children: expectedTree ? [expectedTree] : [] });

      if (!expectedTree) {
        expect(ReactComponentTreeTestUtils.getRootDisplayNames()).toEqual([]);
        expect(ReactComponentTreeTestUtils.getRegisteredDisplayNames()).toEqual([]);}}



    // Mount once, render updates, then unmount.
    // Ensure the tree is correct on every step.
    pairs.forEach(function (_ref) {var element = _ref[0];var expectedTree = _ref[1];
      currentElement = element;

      // Mount a new tree or update the existing tree.
      ReactDOM.render(React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 66 } }), node);
      expectWrapperTreeToEqual(expectedTree);

      // Purging should have no effect
      // on the tree we expect to see.
      ReactComponentTreeDevtool.purgeUnmountedComponents();
      expectWrapperTreeToEqual(expectedTree);});


    // Unmounting the root node should purge
    // the whole subtree automatically.
    ReactDOM.unmountComponentAtNode(node);
    expectWrapperTreeToEqual(null);

    // Server render every pair.
    // Ensure the tree is correct on every step.
    pairs.forEach(function (_ref2) {var element = _ref2[0];var expectedTree = _ref2[1];
      currentElement = element;

      // Rendering to string should not produce any entries
      // because ReactDebugTool purges it when the flush ends.
      ReactDOMServer.renderToString(React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 87 } }));
      expectWrapperTreeToEqual(null);

      // To test it, we tell the devtool to ignore next purge
      // so the cleanup request by ReactDebugTool is ignored.
      // This lets us make assertions on the actual tree.
      ReactComponentTreeDevtool._preventPurging = true;
      ReactDOMServer.renderToString(React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 94 } }));
      ReactComponentTreeDevtool._preventPurging = false;
      expectWrapperTreeToEqual(expectedTree);

      // Purge manually since we skipped the automatic purge.
      ReactComponentTreeDevtool.purgeUnmountedComponents();
      expectWrapperTreeToEqual(null);});}



  describe('mount', function () {
    it('uses displayName or Unknown for classic components', function () {
      var Foo = React.createClass({ displayName: 'Foo', 
        render: function () {
          return null;} });


      Foo.displayName = 'Bar';
      var Baz = React.createClass({ displayName: 'Baz', 
        render: function () {
          return null;} });


      var Qux = React.createClass({ displayName: 'Qux', 
        render: function () {
          return null;} });


      delete Qux.displayName;

      var element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 124 } }, React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 124 } }), React.createElement(Baz, { __source: { fileName: _jsxFileName, lineNumber: 124 } }), React.createElement(Qux, { __source: { fileName: _jsxFileName, lineNumber: 124 } }));
      var tree = { 
        displayName: 'div', 
        children: [{ 
          displayName: 'Bar', 
          children: [] }, 
        { 
          displayName: 'Baz', 
          children: [] }, 
        { 
          displayName: 'Unknown', 
          children: [] }] };


      assertTreeMatches([element, tree]);});


    it('uses displayName, name, or ReactComponent for modern components', function () {var 
      Foo = function (_React$Component2) {_inherits(Foo, _React$Component2);function Foo() {_classCallCheck(this, Foo);return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));}Foo.prototype.
        render = function render() {
          return null;};return Foo;}(React.Component);


      Foo.displayName = 'Bar';var 
      Baz = function (_React$Component3) {_inherits(Baz, _React$Component3);function Baz() {_classCallCheck(this, Baz);return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));}Baz.prototype.
        render = function render() {
          return null;};return Baz;}(React.Component);var 


      Qux = function (_React$Component4) {_inherits(Qux, _React$Component4);function Qux() {_classCallCheck(this, Qux);return _possibleConstructorReturn(this, _React$Component4.apply(this, arguments));}Qux.prototype.
        render = function render() {
          return null;};return Qux;}(React.Component);


      delete Qux.name;

      var element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 160 } }, React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 160 } }), React.createElement(Baz, { __source: { fileName: _jsxFileName, lineNumber: 160 } }), React.createElement(Qux, { __source: { fileName: _jsxFileName, lineNumber: 160 } }));
      var tree = { 
        displayName: 'div', 
        element: element, 
        children: [{ 
          displayName: 'Bar', 
          children: [] }, 
        { 
          displayName: 'Baz', 
          children: [] }, 
        { 
          // Note: Ideally fallback name should be consistent (e.g. "Unknown")
          displayName: 'ReactComponent', 
          children: [] }] };


      assertTreeMatches([element, tree]);});


    it('uses displayName, name, or Object for factory components', function () {
      function Foo() {
        return { 
          render: function () {
            return null;} };}



      Foo.displayName = 'Bar';
      function Baz() {
        return { 
          render: function () {
            return null;} };}



      function Qux() {
        return { 
          render: function () {
            return null;} };}



      delete Qux.name;

      var element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 204 } }, React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 204 } }), React.createElement(Baz, { __source: { fileName: _jsxFileName, lineNumber: 204 } }), React.createElement(Qux, { __source: { fileName: _jsxFileName, lineNumber: 204 } }));
      var tree = { 
        displayName: 'div', 
        element: element, 
        children: [{ 
          displayName: 'Bar', 
          children: [] }, 
        { 
          displayName: 'Baz', 
          children: [] }, 
        { 
          displayName: 'Unknown', 
          children: [] }] };


      assertTreeMatches([element, tree]);});


    it('uses displayName, name, or StatelessComponent for functional components', function () {
      function Foo() {
        return null;}

      Foo.displayName = 'Bar';
      function Baz() {
        return null;}

      function Qux() {
        return null;}

      delete Qux.name;

      var element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 235 } }, React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 235 } }), React.createElement(Baz, { __source: { fileName: _jsxFileName, lineNumber: 235 } }), React.createElement(Qux, { __source: { fileName: _jsxFileName, lineNumber: 235 } }));
      var tree = { 
        displayName: 'div', 
        element: element, 
        children: [{ 
          displayName: 'Bar', 
          children: [] }, 
        { 
          displayName: 'Baz', 
          children: [] }, 
        { 
          displayName: 'Unknown', 
          children: [] }] };


      assertTreeMatches([element, tree]);});


    it('reports a host tree correctly', function () {
      var element = 
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 255 } }, 
      React.createElement('p', { __source: { fileName: _jsxFileName, lineNumber: 256 } }, 
      React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 257 } }, 'Hi!'), 'Wow.'), 




      React.createElement('hr', { __source: { fileName: _jsxFileName, lineNumber: 262 } }));


      var tree = { 
        displayName: 'div', 
        children: [{ 
          displayName: 'p', 
          children: [{ 
            displayName: 'span', 
            children: [{ 
              displayName: '#text', 
              text: 'Hi!' }] }, 

          { 
            displayName: '#text', 
            text: 'Wow.' }] }, 

        { 
          displayName: 'hr', 
          element: React.createElement('hr', { __source: { fileName: _jsxFileName, lineNumber: 281 } }), 
          children: [] }] };


      assertTreeMatches([element, tree]);});


    it('reports a simple tree with composites correctly', function () {var 
      Foo = function (_React$Component5) {_inherits(Foo, _React$Component5);function Foo() {_classCallCheck(this, Foo);return _possibleConstructorReturn(this, _React$Component5.apply(this, arguments));}Foo.prototype.
        render = function render() {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 291 } });};return Foo;}(React.Component);



      var element = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 295 } });
      var tree = { 
        displayName: 'Foo', 
        element: element, 
        children: [{ 
          displayName: 'div', 
          element: React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 301 } }), 
          children: [] }] };


      assertTreeMatches([element, tree]);});


    it('reports a tree with composites correctly', function () {
      var Qux = React.createClass({ displayName: 'Qux', 
        render: function () {
          return null;} });


      function Foo() {
        return { 
          render: function () {
            return React.createElement(Qux, { __source: { fileName: _jsxFileName, lineNumber: 317 } });} };}



      function Bar(_ref3) {var children = _ref3.children;
        return React.createElement('h1', { __source: { fileName: _jsxFileName, lineNumber: 322 } }, children);}var 

      Baz = function (_React$Component6) {_inherits(Baz, _React$Component6);function Baz() {_classCallCheck(this, Baz);return _possibleConstructorReturn(this, _React$Component6.apply(this, arguments));}Baz.prototype.
        render = function render() {
          return (
            React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 327 } }, 
            React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 328 } }), 
            React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 329 } }, 
            React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 330 } }, 'Hi,'), 'Mom'), 


            React.createElement('a', { href: '#', __source: { fileName: _jsxFileName, lineNumber: 333 } }, 'Click me.')));};return Baz;}(React.Component);





      var element = React.createElement(Baz, { __source: { fileName: _jsxFileName, lineNumber: 339 } });
      var tree = { 
        displayName: 'Baz', 
        element: element, 
        children: [{ 
          displayName: 'div', 
          children: [{ 
            displayName: 'Foo', 
            element: React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 347 } }), 
            children: [{ 
              displayName: 'Qux', 
              element: React.createElement(Qux, { __source: { fileName: _jsxFileName, lineNumber: 350 } }), 
              children: [] }] }, 

          { 
            displayName: 'Bar', 
            children: [{ 
              displayName: 'h1', 
              children: [{ 
                displayName: 'span', 
                children: [{ 
                  displayName: '#text', 
                  element: 'Hi,', 
                  text: 'Hi,' }] }, 

              { 
                displayName: '#text', 
                text: 'Mom', 
                element: 'Mom' }] }] }, 


          { 
            displayName: 'a', 
            children: [{ 
              displayName: '#text', 
              text: 'Click me.', 
              element: 'Click me.' }] }] }] };




      assertTreeMatches([element, tree]);});


    it('ignores null children', function () {var 
      Foo = function (_React$Component7) {_inherits(Foo, _React$Component7);function Foo() {_classCallCheck(this, Foo);return _possibleConstructorReturn(this, _React$Component7.apply(this, arguments));}Foo.prototype.
        render = function render() {
          return null;};return Foo;}(React.Component);


      var element = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 389 } });
      var tree = { 
        displayName: 'Foo', 
        children: [] };

      assertTreeMatches([element, tree]);});


    it('ignores false children', function () {var 
      Foo = function (_React$Component8) {_inherits(Foo, _React$Component8);function Foo() {_classCallCheck(this, Foo);return _possibleConstructorReturn(this, _React$Component8.apply(this, arguments));}Foo.prototype.
        render = function render() {
          return false;};return Foo;}(React.Component);


      var element = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 403 } });
      var tree = { 
        displayName: 'Foo', 
        children: [] };

      assertTreeMatches([element, tree]);});


    it('reports text nodes as children', function () {
      var element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 412 } }, '1', 2);
      var tree = { 
        displayName: 'div', 
        element: element, 
        children: [{ 
          displayName: '#text', 
          text: '1' }, 
        { 
          displayName: '#text', 
          text: '2' }] };


      assertTreeMatches([element, tree]);});


    it('reports a single text node as a child', function () {
      var element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 428 } }, '1');
      var tree = { 
        displayName: 'div', 
        element: element, 
        children: [{ 
          displayName: '#text', 
          text: '1' }] };


      assertTreeMatches([element, tree]);});


    it('reports a single number node as a child', function () {
      var element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 441 } }, 42);
      var tree = { 
        displayName: 'div', 
        element: element, 
        children: [{ 
          displayName: '#text', 
          text: '42' }] };


      assertTreeMatches([element, tree]);});


    it('reports a zero as a child', function () {
      var element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 454 } }, 0);
      var tree = { 
        displayName: 'div', 
        element: element, 
        children: [{ 
          displayName: '#text', 
          text: '0' }] };


      assertTreeMatches([element, tree]);});


    it('skips empty nodes for multiple children', function () {
      function Foo() {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 468 } });}

      var element = 
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 471 } }, 
      'hi', 
      false, 
      42, 
      null, 
      React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 476 } }));


      var tree = { 
        displayName: 'div', 
        element: element, 
        children: [{ 
          displayName: '#text', 
          text: 'hi', 
          element: 'hi' }, 
        { 
          displayName: '#text', 
          text: '42', 
          element: 42 }, 
        { 
          displayName: 'Foo', 
          element: React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 492 } }), 
          children: [{ 
            displayName: 'div', 
            element: React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 495 } }), 
            children: [] }] }] };



      assertTreeMatches([element, tree]);});


    it('reports html content as no children', function () {
      var element = React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Bye.' }, __source: { fileName: _jsxFileName, lineNumber: 504 } });
      var tree = { 
        displayName: 'div', 
        children: [] };

      assertTreeMatches([element, tree]);});});



  describe('update', function () {
    describe('host component', function () {
      it('updates text of a single text child', function () {
        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 516 } }, 'Hi.');
        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }] };



        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 525 } }, 'Bye.');
        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Bye.' }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from no children to a single text child', function () {
        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 541 } });
        var treeBefore = { 
          displayName: 'div', 
          children: [] };


        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 547 } }, 'Hi.');
        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from a single text child to no children', function () {
        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 563 } }, 'Hi.');
        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }] };



        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 572 } });
        var treeAfter = { 
          displayName: 'div', 
          children: [] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from html content to a single text child', function () {
        var elementBefore = React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Hi.' }, __source: { fileName: _jsxFileName, lineNumber: 585 } });
        var treeBefore = { 
          displayName: 'div', 
          children: [] };


        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 591 } }, 'Hi.');
        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from a single text child to html content', function () {
        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 607 } }, 'Hi.');
        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }] };



        var elementAfter = React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Hi.' }, __source: { fileName: _jsxFileName, lineNumber: 616 } });
        var treeAfter = { 
          displayName: 'div', 
          children: [] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from no children to multiple text children', function () {
        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 629 } });
        var treeBefore = { 
          displayName: 'div', 
          children: [] };


        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 635 } }, 'Hi.', 'Bye.');
        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }, 
          { 
            displayName: '#text', 
            text: 'Bye.' }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from multiple text children to no children', function () {
        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 654 } }, 'Hi.', 'Bye.');
        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }, 
          { 
            displayName: '#text', 
            text: 'Bye.' }] };



        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 666 } });
        var treeAfter = { 
          displayName: 'div', 
          children: [] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from html content to multiple text children', function () {
        var elementBefore = React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Hi.' }, __source: { fileName: _jsxFileName, lineNumber: 679 } });
        var treeBefore = { 
          displayName: 'div', 
          children: [] };


        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 685 } }, 'Hi.', 'Bye.');
        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }, 
          { 
            displayName: '#text', 
            text: 'Bye.' }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from multiple text children to html content', function () {
        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 704 } }, 'Hi.', 'Bye.');
        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }, 
          { 
            displayName: '#text', 
            text: 'Bye.' }] };



        var elementAfter = React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Hi.' }, __source: { fileName: _jsxFileName, lineNumber: 716 } });
        var treeAfter = { 
          displayName: 'div', 
          children: [] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from html content to no children', function () {
        var elementBefore = React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Hi.' }, __source: { fileName: _jsxFileName, lineNumber: 729 } });
        var treeBefore = { 
          displayName: 'div', 
          children: [] };


        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 735 } });
        var treeAfter = { 
          displayName: 'div', 
          children: [] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from no children to html content', function () {
        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 748 } });
        var treeBefore = { 
          displayName: 'div', 
          children: [] };


        var elementAfter = React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Hi.' }, __source: { fileName: _jsxFileName, lineNumber: 754 } });
        var treeAfter = { 
          displayName: 'div', 
          children: [] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from one text child to multiple text children', function () {
        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 767 } }, 'Hi.');
        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }] };



        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 776 } }, 'Hi.', 'Bye.');
        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }, 
          { 
            displayName: '#text', 
            text: 'Bye.' }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from multiple text children to one text child', function () {
        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 795 } }, 'Hi.', 'Bye.');
        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }, 
          { 
            displayName: '#text', 
            text: 'Bye.' }] };



        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 807 } }, 'Hi.');
        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates text nodes when reordering', function () {
        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 822 } }, 'Hi.', 'Bye.');
        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Hi.' }, 
          { 
            displayName: '#text', 
            text: 'Bye.' }] };



        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 834 } }, 'Bye.', 'Hi.');
        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'Bye.' }, 
          { 
            displayName: '#text', 
            text: 'Hi.' }] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates host nodes when reordering with keys', function () {
        var elementBefore = 
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 853 } }, 
        React.createElement('div', { key: 'a', __source: { fileName: _jsxFileName, lineNumber: 854 } }, 'Hi.'), 
        React.createElement('div', { key: 'b', __source: { fileName: _jsxFileName, lineNumber: 855 } }, 'Bye.'));


        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: 'div', 
            children: [{ 
              displayName: '#text', 
              text: 'Hi.' }] }, 

          { 
            displayName: 'div', 
            children: [{ 
              displayName: '#text', 
              text: 'Bye.' }] }] };




        var elementAfter = 
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 876 } }, 
        React.createElement('div', { key: 'b', __source: { fileName: _jsxFileName, lineNumber: 877 } }, 'Bye.'), 
        React.createElement('div', { key: 'a', __source: { fileName: _jsxFileName, lineNumber: 878 } }, 'Hi.'));


        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: 'div', 
            children: [{ 
              displayName: '#text', 
              text: 'Bye.' }] }, 

          { 
            displayName: 'div', 
            children: [{ 
              displayName: '#text', 
              text: 'Hi.' }] }] };




        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates host nodes when reordering without keys', function () {
        var elementBefore = 
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 906 } }, 
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 907 } }, 'Hi.'), 
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 908 } }, 'Bye.'));


        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: 'div', 
            children: [{ 
              displayName: '#text', 
              text: 'Hi.' }] }, 

          { 
            displayName: 'div', 
            children: [{ 
              displayName: '#text', 
              text: 'Bye.' }] }] };




        var elementAfter = 
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 929 } }, 
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 930 } }, 'Bye.'), 
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 931 } }, 'Hi.'));


        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: 'div', 
            children: [{ 
              displayName: '#text', 
              text: 'Bye.' }] }, 

          { 
            displayName: 'div', 
            children: [{ 
              displayName: '#text', 
              text: 'Hi.' }] }] };




        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates a single composite child of a different type', function () {
        function Foo() {
          return null;}


        function Bar() {
          return null;}


        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 966 } }, React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 966 } }));
        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: 'Foo', 
            children: [] }] };



        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 975 } }, React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 975 } }));
        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: 'Bar', 
            children: [] }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates a single composite child of the same type', function () {
        function Foo(_ref4) {var children = _ref4.children;
          return children;}


        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 995 } }, React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 995 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 995 } })));
        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: 'Foo', 
            children: [{ 
              displayName: 'div', 
              children: [] }] }] };




        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1007 } }, React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1007 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 1007 } })));
        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: 'Foo', 
            children: [{ 
              displayName: 'span', 
              children: [] }] }] };




        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from no children to a single composite child', function () {
        function Foo() {
          return null;}


        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1030 } });
        var treeBefore = { 
          displayName: 'div', 
          children: [] };


        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1036 } }, React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1036 } }));
        var treeAfter = { 
          displayName: 'div', 
          children: [{ 
            displayName: 'Foo', 
            children: [] }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from a single composite child to no children', function () {
        function Foo() {
          return null;}


        var elementBefore = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1056 } }, React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1056 } }));
        var treeBefore = { 
          displayName: 'div', 
          children: [{ 
            displayName: 'Foo', 
            children: [] }] };



        var elementAfter = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1065 } });
        var treeAfter = { 
          displayName: 'div', 
          children: [] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates mixed children', function () {
        function Foo() {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1079 } });}

        var element1 = 
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1082 } }, 
        'hi', 
        false, 
        42, 
        null, 
        React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1087 } }));


        var tree1 = { 
          displayName: 'div', 
          children: [{ 
            displayName: '#text', 
            text: 'hi' }, 
          { 
            displayName: '#text', 
            text: '42' }, 
          { 
            displayName: 'Foo', 
            children: [{ 
              displayName: 'div', 
              children: [] }] }] };




        var element2 = 
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1108 } }, 
        React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1109 } }), 
        false, 
        'hi', 
        null);


        var tree2 = { 
          displayName: 'div', 
          children: [{ 
            displayName: 'Foo', 
            children: [{ 
              displayName: 'div', 
              children: [] }] }, 

          { 
            displayName: '#text', 
            text: 'hi' }] };



        var element3 = 
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1130 } }, 
        React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1131 } }));


        var tree3 = { 
          displayName: 'div', 
          children: [{ 
            displayName: 'Foo', 
            children: [{ 
              displayName: 'div', 
              children: [] }] }] };




        assertTreeMatches([
        [element1, tree1], 
        [element2, tree2], 
        [element3, tree3]]);});});




    describe('functional component', function () {
      it('updates with a host child', function () {
        function Foo(_ref5) {var children = _ref5.children;
          return children;}


        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1159 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1159 } }));
        var treeBefore = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'div', 
            children: [] }] };



        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1168 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 1168 } }));
        var treeAfter = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'span', 
            children: [] }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from null to a host child', function () {
        function Foo(_ref6) {var children = _ref6.children;
          return children;}


        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1188 } }, null);
        var treeBefore = { 
          displayName: 'Foo', 
          children: [] };


        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1194 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1194 } }));
        var treeAfter = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'div', 
            children: [] }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from a host child to null', function () {
        function Foo(_ref7) {var children = _ref7.children;
          return children;}


        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1214 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1214 } }));
        var treeBefore = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'div', 
            children: [] }] };



        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1223 } }, null);
        var treeAfter = { 
          displayName: 'Foo', 
          children: [] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from a host child to a composite child', function () {
        function Bar() {
          return null;}


        function Foo(_ref8) {var children = _ref8.children;
          return children;}


        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1244 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1244 } }));
        var treeBefore = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'div', 
            children: [] }] };



        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1253 } }, React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 1253 } }));
        var treeAfter = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'Bar', 
            children: [] }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from a composite child to a host child', function () {
        function Bar() {
          return null;}


        function Foo(_ref9) {var children = _ref9.children;
          return children;}


        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1277 } }, React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 1277 } }));
        var treeBefore = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'Bar', 
            children: [] }] };



        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1286 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1286 } }));
        var treeAfter = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'div', 
            children: [] }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from null to a composite child', function () {
        function Bar() {
          return null;}


        function Foo(_ref10) {var children = _ref10.children;
          return children;}


        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1310 } }, null);
        var treeBefore = { 
          displayName: 'Foo', 
          children: [] };


        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1316 } }, React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 1316 } }));
        var treeAfter = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'Bar', 
            children: [] }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from a composite child to null', function () {
        function Bar() {
          return null;}


        function Foo(_ref11) {var children = _ref11.children;
          return children;}


        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1340 } }, React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 1340 } }));
        var treeBefore = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'Bar', 
            children: [] }] };



        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1349 } }, null);
        var treeAfter = { 
          displayName: 'Foo', 
          children: [] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});});




    describe('class component', function () {
      it('updates with a host child', function () {
        var Foo = React.createClass({ displayName: 'Foo', 
          render: function () {
            return this.props.children;} });



        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1370 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1370 } }));
        var treeBefore = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'div', 
            children: [] }] };



        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1379 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 1379 } }));
        var treeAfter = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'span', 
            children: [] }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from null to a host child', function () {
        var Foo = React.createClass({ displayName: 'Foo', 
          render: function () {
            return this.props.children;} });



        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1401 } }, null);
        var treeBefore = { 
          displayName: 'Foo', 
          children: [] };


        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1407 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1407 } }));
        var treeAfter = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'div', 
            children: [] }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from a host child to null', function () {
        var Foo = React.createClass({ displayName: 'Foo', 
          render: function () {
            return this.props.children;} });



        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1429 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1429 } }));
        var treeBefore = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'div', 
            children: [] }] };



        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1438 } }, null);
        var treeAfter = { 
          displayName: 'Foo', 
          children: [] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from a host child to a composite child', function () {
        var Bar = React.createClass({ displayName: 'Bar', 
          render: function () {
            return null;} });



        var Foo = React.createClass({ displayName: 'Foo', 
          render: function () {
            return this.props.children;} });



        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1463 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1463 } }));
        var treeBefore = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'div', 
            children: [] }] };



        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1472 } }, React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 1472 } }));
        var treeAfter = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'Bar', 
            children: [] }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from a composite child to a host child', function () {
        var Bar = React.createClass({ displayName: 'Bar', 
          render: function () {
            return null;} });



        var Foo = React.createClass({ displayName: 'Foo', 
          render: function () {
            return this.props.children;} });



        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1500 } }, React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 1500 } }));
        var treeBefore = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'Bar', 
            children: [] }] };



        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1509 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1509 } }));
        var treeAfter = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'div', 
            children: [] }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from null to a composite child', function () {
        var Bar = React.createClass({ displayName: 'Bar', 
          render: function () {
            return null;} });



        var Foo = React.createClass({ displayName: 'Foo', 
          render: function () {
            return this.props.children;} });



        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1537 } }, null);
        var treeBefore = { 
          displayName: 'Foo', 
          children: [] };


        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1543 } }, React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 1543 } }));
        var treeAfter = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'Bar', 
            children: [] }] };



        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});



      it('updates from a composite child to null', function () {
        var Bar = React.createClass({ displayName: 'Bar', 
          render: function () {
            return null;} });



        var Foo = React.createClass({ displayName: 'Foo', 
          render: function () {
            return this.props.children;} });



        var elementBefore = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1571 } }, React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 1571 } }));
        var treeBefore = { 
          displayName: 'Foo', 
          children: [{ 
            displayName: 'Bar', 
            children: [] }] };



        var elementAfter = React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1580 } }, null);
        var treeAfter = { 
          displayName: 'Foo', 
          children: [] };


        assertTreeMatches([
        [elementBefore, treeBefore], 
        [elementAfter, treeAfter]]);});});});





  it('tracks owner correctly', function () {var 
    Foo = function (_React$Component9) {_inherits(Foo, _React$Component9);function Foo() {_classCallCheck(this, Foo);return _possibleConstructorReturn(this, _React$Component9.apply(this, arguments));}Foo.prototype.
      render = function render() {
        return React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 1597 } }, React.createElement('h1', { __source: { fileName: _jsxFileName, lineNumber: 1597 } }, 'Hi.'));};return Foo;}(React.Component);


    function Bar(_ref12) {var children = _ref12.children;
      return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1601 } }, children, ' Mom');}


    // Note that owner is not calculated for text nodes
    // because they are not created from real elements.
    var element = React.createElement('article', { __source: { fileName: _jsxFileName, lineNumber: 1606 } }, React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1606 } }));
    var tree = { 
      displayName: 'article', 
      children: [{ 
        displayName: 'Foo', 
        children: [{ 
          displayName: 'Bar', 
          ownerDisplayName: 'Foo', 
          children: [{ 
            displayName: 'div', 
            ownerDisplayName: 'Bar', 
            children: [{ 
              displayName: 'h1', 
              ownerDisplayName: 'Foo', 
              children: [{ 
                displayName: '#text', 
                text: 'Hi.' }] }, 

            { 
              displayName: '#text', 
              text: ' Mom' }] }] }] }] };





    assertTreeMatches([element, tree]);});


  it('purges unmounted components automatically', function () {
    var node = document.createElement('div');
    var renderBar = true;
    var fooInstance;
    var barInstance;var 

    Foo = function (_React$Component10) {_inherits(Foo, _React$Component10);function Foo() {_classCallCheck(this, Foo);return _possibleConstructorReturn(this, _React$Component10.apply(this, arguments));}Foo.prototype.
      render = function render() {
        fooInstance = ReactInstanceMap.get(this);
        return renderBar ? React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 1644 } }) : null;};return Foo;}(React.Component);var 



    Bar = function (_React$Component11) {_inherits(Bar, _React$Component11);function Bar() {_classCallCheck(this, Bar);return _possibleConstructorReturn(this, _React$Component11.apply(this, arguments));}Bar.prototype.
      render = function render() {
        barInstance = ReactInstanceMap.get(this);
        return null;};return Bar;}(React.Component);



    ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1655 } }), node);
    ReactComponentTreeTestUtils.expectTree(barInstance._debugID, { 
      displayName: 'Bar', 
      parentDisplayName: 'Foo', 
      parentID: fooInstance._debugID, 
      children: [] }, 
    'Foo');

    renderBar = false;
    ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1664 } }), node);
    ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 1665 } }), node);
    ReactComponentTreeTestUtils.expectTree(barInstance._debugID, { 
      displayName: 'Unknown', 
      children: [], 
      parentID: null }, 
    'Foo');

    ReactDOM.unmountComponentAtNode(node);
    ReactComponentTreeTestUtils.expectTree(barInstance._debugID, { 
      displayName: 'Unknown', 
      children: [], 
      parentID: null }, 
    'Foo');});


  it('reports update counts', function () {
    var node = document.createElement('div');

    ReactDOM.render(React.createElement('div', { className: 'a', __source: { fileName: _jsxFileName, lineNumber: 1683 } }), node);
    var divID = ReactComponentTreeDevtool.getRootIDs()[0];
    expect(ReactComponentTreeDevtool.getUpdateCount(divID)).toEqual(0);

    ReactDOM.render(React.createElement('span', { className: 'a', __source: { fileName: _jsxFileName, lineNumber: 1687 } }), node);
    var spanID = ReactComponentTreeDevtool.getRootIDs()[0];
    expect(ReactComponentTreeDevtool.getUpdateCount(divID)).toEqual(0);
    expect(ReactComponentTreeDevtool.getUpdateCount(spanID)).toEqual(0);

    ReactDOM.render(React.createElement('span', { className: 'b', __source: { fileName: _jsxFileName, lineNumber: 1692 } }), node);
    expect(ReactComponentTreeDevtool.getUpdateCount(divID)).toEqual(0);
    expect(ReactComponentTreeDevtool.getUpdateCount(spanID)).toEqual(1);

    ReactDOM.render(React.createElement('span', { className: 'c', __source: { fileName: _jsxFileName, lineNumber: 1696 } }), node);
    expect(ReactComponentTreeDevtool.getUpdateCount(divID)).toEqual(0);
    expect(ReactComponentTreeDevtool.getUpdateCount(spanID)).toEqual(2);

    ReactDOM.unmountComponentAtNode(node);
    expect(ReactComponentTreeDevtool.getUpdateCount(divID)).toEqual(0);
    expect(ReactComponentTreeDevtool.getUpdateCount(spanID)).toEqual(0);});


  it('does not report top-level wrapper as a root', function () {
    var node = document.createElement('div');

    ReactDOM.render(React.createElement('div', { className: 'a', __source: { fileName: _jsxFileName, lineNumber: 1708 } }), node);
    expect(ReactComponentTreeTestUtils.getRootDisplayNames()).toEqual(['div']);

    ReactDOM.render(React.createElement('div', { className: 'b', __source: { fileName: _jsxFileName, lineNumber: 1711 } }), node);
    expect(ReactComponentTreeTestUtils.getRootDisplayNames()).toEqual(['div']);

    ReactDOM.unmountComponentAtNode(node);
    expect(ReactComponentTreeTestUtils.getRootDisplayNames()).toEqual([]);
    expect(ReactComponentTreeTestUtils.getRegisteredDisplayNames()).toEqual([]);});


  it('creates current stack addenda', function () {
    function getAddendum(element) {
      var addendum = ReactComponentTreeDevtool.getCurrentStackAddendum(element);
      return addendum.replace(/\(at .+?:\d+\)/g, '(at **)');}


    var Anon = React.createClass({ displayName: null, render: function () {return null;} });
    var Orange = React.createClass({ displayName: 'Orange', render: function () {return null;} });

    expect(getAddendum()).toBe(
    '');

    expect(getAddendum(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1731 } }))).toBe(
    '\n    in div (at **)');

    expect(getAddendum(React.createElement(Anon, { __source: { fileName: _jsxFileName, lineNumber: 1734 } }))).toBe(
    '\n    in Unknown (at **)');

    expect(getAddendum(React.createElement(Orange, { __source: { fileName: _jsxFileName, lineNumber: 1737 } }))).toBe(
    '\n    in Orange (at **)');

    expect(getAddendum(React.createElement(Orange))).toBe(
    '\n    in Orange');


    var renders = 0;
    var rOwnedByQ;

    function Q() {
      return rOwnedByQ = React.createElement(R);}

    function R() {
      return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1751 } }, React.createElement(S, { __source: { fileName: _jsxFileName, lineNumber: 1751 } }));}var 

    S = function (_React$Component12) {_inherits(S, _React$Component12);function S() {_classCallCheck(this, S);return _possibleConstructorReturn(this, _React$Component12.apply(this, arguments));}S.prototype.
      componentDidMount = function componentDidMount() {
        // Check that the parent path is still fetched when only S itself is on
        // the stack.
        this.forceUpdate();};S.prototype.

      render = function render() {
        expect(getAddendum()).toBe(
        '\n    in S (at **)' + 
        '\n    in div (at **)' + 
        '\n    in R (created by Q)' + 
        '\n    in Q (at **)');

        expect(getAddendum(React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 1766 } }))).toBe(
        '\n    in span (at **)' + 
        '\n    in S (at **)' + 
        '\n    in div (at **)' + 
        '\n    in R (created by Q)' + 
        '\n    in Q (at **)');

        expect(getAddendum(React.createElement('span'))).toBe(
        '\n    in span (created by S)' + 
        '\n    in S (at **)' + 
        '\n    in div (at **)' + 
        '\n    in R (created by Q)' + 
        '\n    in Q (at **)');

        renders++;
        return null;};return S;}(React.Component);


    ReactDOM.render(React.createElement(Q, { __source: { fileName: _jsxFileName, lineNumber: 1784 } }), document.createElement('div'));
    expect(renders).toBe(2);

    // Make sure owner is fetched for the top element too.
    expect(getAddendum(rOwnedByQ)).toBe(
    '\n    in R (created by Q)');});



  it('creates stack addenda by ID', function () {
    function getAddendum(id) {
      var addendum = ReactComponentTreeDevtool.getStackAddendumByID(id);
      return addendum.replace(/\(at .+?:\d+\)/g, '(at **)');}var 


    Q = function (_React$Component13) {_inherits(Q, _React$Component13);function Q() {_classCallCheck(this, Q);return _possibleConstructorReturn(this, _React$Component13.apply(this, arguments));}Q.prototype.
      render = function render() {
        return null;};return Q;}(React.Component);



    var q = ReactDOM.render(React.createElement(Q, { __source: { fileName: _jsxFileName, lineNumber: 1805 } }), document.createElement('div'));
    expect(getAddendum(ReactInstanceMap.get(q)._debugID)).toBe(
    '\n    in Q (at **)');


    spyOn(console, 'error');
    getAddendum(-17);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: ReactComponentTreeDevtool: Missing React element for debugID ' + 
    '-17 when building stack');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js":211,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js":246,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactComponentTreeTestUtils.js":300}],215:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\devtools\\__tests__\\ReactHostOperationHistoryDevtool-test.js';

describe('ReactHostOperationHistoryDevtool', function () {
  var React;
  var ReactDOM;
  var ReactDOMComponentTree;
  var ReactDOMFeatureFlags;
  var ReactHostOperationHistoryDevtool;

  beforeEach(function () {
    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
    ReactDOMFeatureFlags = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMFeatureFlags.js');
    ReactHostOperationHistoryDevtool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactHostOperationHistoryDevtool.js');});


  function assertHistoryMatches(expectedHistory) {
    var actualHistory = ReactHostOperationHistoryDevtool.getHistory();
    expect(actualHistory).toEqual(expectedHistory);}


  describe('mount', function () {
    it('gets recorded for host roots', function () {
      var node = document.createElement('div');
      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 40 } }, React.createElement('p', { __source: { fileName: _jsxFileName, lineNumber: 40 } }, 'Hi.')), node);

      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'mount', 
        payload: ReactDOMFeatureFlags.useCreateElement ? 
        'DIV' : 
        '<div data-reactroot="" data-reactid="1"><p data-reactid="2">Hi.</p></div>' }]);});



    it('gets recorded for composite roots', function () {
      function Foo() {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 54 } }, React.createElement('p', { __source: { fileName: _jsxFileName, lineNumber: 54 } }, 'Hi.'));}

      var node = document.createElement('div');

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 59 } }), node);

      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'mount', 
        payload: ReactDOMFeatureFlags.useCreateElement ? 
        'DIV' : 
        '<div data-reactroot="" data-reactid="1">' + 
        '<p data-reactid="2">Hi.</p></div>' }]);});



    it('gets ignored for composite roots that return null', function () {
      function Foo() {
        return null;}

      var node = document.createElement('div');

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 79 } }), node);

      // Empty DOM components should be invisible to devtools.
      assertHistoryMatches([]);});


    it('gets recorded when a native is mounted deeply instead of null', function () {
      var element;
      function Foo() {
        return element;}


      ReactHostOperationHistoryDevtool._preventClearing = true;

      var node = document.createElement('div');
      element = null;
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 95 } }), node);

      element = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 97 } });
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 98 } }), node);
      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

      // Since empty components should be invisible to devtools,
      // we record a "mount" event rather than a "replace with".
      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'mount', 
        payload: 'SPAN' }]);});});




  describe('update styles', function () {
    it('gets recorded during mount', function () {
      var node = document.createElement('div');

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(React.createElement('div', { style: { 
          color: 'red', 
          backgroundColor: 'yellow' }, __source: { fileName: _jsxFileName, lineNumber: 116 } }), 
      node);

      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
      if (ReactDOMFeatureFlags.useCreateElement) {
        assertHistoryMatches([{ 
          instanceID: inst._debugID, 
          type: 'update styles', 
          payload: { 
            color: 'red', 
            backgroundColor: 'yellow' } }, 

        { 
          instanceID: inst._debugID, 
          type: 'mount', 
          payload: 'DIV' }]);} else 

      {
        assertHistoryMatches([{ 
          instanceID: inst._debugID, 
          type: 'mount', 
          payload: '<div style="color:red;background-color:yellow;" ' + 
          'data-reactroot="" data-reactid="1"></div>' }]);}});




    it('gets recorded during an update', function () {
      var node = document.createElement('div');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 147 } }), node);
      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(React.createElement('div', { style: { color: 'red' }, __source: { fileName: _jsxFileName, lineNumber: 151 } }), node);
      ReactDOM.render(React.createElement('div', { style: { 
          color: 'blue', 
          backgroundColor: 'yellow' }, __source: { fileName: _jsxFileName, lineNumber: 152 } }), 
      node);
      ReactDOM.render(React.createElement('div', { style: { backgroundColor: 'green' }, __source: { fileName: _jsxFileName, lineNumber: 156 } }), node);
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 157 } }), node);

      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'update styles', 
        payload: { color: 'red' } }, 
      { 
        instanceID: inst._debugID, 
        type: 'update styles', 
        payload: { color: 'blue', backgroundColor: 'yellow' } }, 
      { 
        instanceID: inst._debugID, 
        type: 'update styles', 
        payload: { color: '', backgroundColor: 'green' } }, 
      { 
        instanceID: inst._debugID, 
        type: 'update styles', 
        payload: { backgroundColor: '' } }]);});



    it('gets ignored if the styles are shallowly equal', function () {
      var node = document.createElement('div');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 180 } }), node);
      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(React.createElement('div', { style: { 
          color: 'red', 
          backgroundColor: 'yellow' }, __source: { fileName: _jsxFileName, lineNumber: 184 } }), 
      node);
      ReactDOM.render(React.createElement('div', { style: { 
          color: 'red', 
          backgroundColor: 'yellow' }, __source: { fileName: _jsxFileName, lineNumber: 188 } }), 
      node);

      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'update styles', 
        payload: { 
          color: 'red', 
          backgroundColor: 'yellow' } }]);});});





  describe('update attribute', function () {
    describe('simple attribute', function () {
      it('gets recorded during mount', function () {
        var node = document.createElement('div');

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('div', { className: 'rad', tabIndex: 42, __source: { fileName: _jsxFileName, lineNumber: 210 } }), node);

        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
        if (ReactDOMFeatureFlags.useCreateElement) {
          assertHistoryMatches([{ 
            instanceID: inst._debugID, 
            type: 'update attribute', 
            payload: { className: 'rad' } }, 
          { 
            instanceID: inst._debugID, 
            type: 'update attribute', 
            payload: { tabIndex: 42 } }, 
          { 
            instanceID: inst._debugID, 
            type: 'mount', 
            payload: 'DIV' }]);} else 

        {
          assertHistoryMatches([{ 
            instanceID: inst._debugID, 
            type: 'mount', 
            payload: '<div class="rad" tabindex="42" data-reactroot="" ' + 
            'data-reactid="1"></div>' }]);}});




      it('gets recorded during an update', function () {
        var node = document.createElement('div');
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 239 } }), node);
        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('div', { className: 'rad', __source: { fileName: _jsxFileName, lineNumber: 243 } }), node);
        ReactDOM.render(React.createElement('div', { className: 'mad', tabIndex: 42, __source: { fileName: _jsxFileName, lineNumber: 244 } }), node);
        ReactDOM.render(React.createElement('div', { tabIndex: 43, __source: { fileName: _jsxFileName, lineNumber: 245 } }), node);

        assertHistoryMatches([{ 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { className: 'rad' } }, 
        { 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { className: 'mad' } }, 
        { 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { tabIndex: 42 } }, 
        { 
          instanceID: inst._debugID, 
          type: 'remove attribute', 
          payload: 'className' }, 
        { 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { tabIndex: 43 } }]);});});




    describe('attribute that gets removed with certain values', function () {
      it('gets recorded as a removal during an update', function () {
        var node = document.createElement('div');
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 274 } }), node);
        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('div', { disabled: true, __source: { fileName: _jsxFileName, lineNumber: 278 } }), node);
        ReactDOM.render(React.createElement('div', { disabled: false, __source: { fileName: _jsxFileName, lineNumber: 279 } }), node);

        assertHistoryMatches([{ 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { disabled: true } }, 
        { 
          instanceID: inst._debugID, 
          type: 'remove attribute', 
          payload: 'disabled' }]);});});




    describe('custom attribute', function () {
      it('gets recorded during mount', function () {
        var node = document.createElement('div');

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('div', { 'data-x': 'rad', 'data-y': 42, __source: { fileName: _jsxFileName, lineNumber: 298 } }), node);

        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
        if (ReactDOMFeatureFlags.useCreateElement) {
          assertHistoryMatches([{ 
            instanceID: inst._debugID, 
            type: 'update attribute', 
            payload: { 'data-x': 'rad' } }, 
          { 
            instanceID: inst._debugID, 
            type: 'update attribute', 
            payload: { 'data-y': 42 } }, 
          { 
            instanceID: inst._debugID, 
            type: 'mount', 
            payload: 'DIV' }]);} else 

        {
          assertHistoryMatches([{ 
            instanceID: inst._debugID, 
            type: 'mount', 
            payload: '<div data-x="rad" data-y="42" data-reactroot="" ' + 
            'data-reactid="1"></div>' }]);}});




      it('gets recorded during an update', function () {
        var node = document.createElement('div');
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 327 } }), node);
        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('div', { 'data-x': 'rad', __source: { fileName: _jsxFileName, lineNumber: 331 } }), node);
        ReactDOM.render(React.createElement('div', { 'data-x': 'mad', 'data-y': 42, __source: { fileName: _jsxFileName, lineNumber: 332 } }), node);
        ReactDOM.render(React.createElement('div', { 'data-y': 43, __source: { fileName: _jsxFileName, lineNumber: 333 } }), node);

        assertHistoryMatches([{ 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { 'data-x': 'rad' } }, 
        { 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { 'data-x': 'mad' } }, 
        { 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { 'data-y': 42 } }, 
        { 
          instanceID: inst._debugID, 
          type: 'remove attribute', 
          payload: 'data-x' }, 
        { 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { 'data-y': 43 } }]);});});




    describe('attribute on a web component', function () {
      it('gets recorded during mount', function () {
        var node = document.createElement('div');

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('my-component', { className: 'rad', tabIndex: 42, __source: { fileName: _jsxFileName, lineNumber: 364 } }), node);

        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
        if (ReactDOMFeatureFlags.useCreateElement) {
          assertHistoryMatches([{ 
            instanceID: inst._debugID, 
            type: 'update attribute', 
            payload: { className: 'rad' } }, 
          { 
            instanceID: inst._debugID, 
            type: 'update attribute', 
            payload: { tabIndex: 42 } }, 
          { 
            instanceID: inst._debugID, 
            type: 'mount', 
            payload: 'MY-COMPONENT' }]);} else 

        {
          assertHistoryMatches([{ 
            instanceID: inst._debugID, 
            type: 'mount', 
            payload: '<my-component className="rad" tabIndex="42" ' + 
            'data-reactroot="" data-reactid="1"></my-component>' }]);}});




      it('gets recorded during an update', function () {
        var node = document.createElement('div');
        ReactDOM.render(React.createElement('my-component', { __source: { fileName: _jsxFileName, lineNumber: 393 } }), node);
        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('my-component', { className: 'rad', __source: { fileName: _jsxFileName, lineNumber: 397 } }), node);
        ReactDOM.render(React.createElement('my-component', { className: 'mad', tabIndex: 42, __source: { fileName: _jsxFileName, lineNumber: 398 } }), node);
        ReactDOM.render(React.createElement('my-component', { tabIndex: 43, __source: { fileName: _jsxFileName, lineNumber: 399 } }), node);

        assertHistoryMatches([{ 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { className: 'rad' } }, 
        { 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { className: 'mad' } }, 
        { 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { tabIndex: 42 } }, 
        { 
          instanceID: inst._debugID, 
          type: 'remove attribute', 
          payload: 'className' }, 
        { 
          instanceID: inst._debugID, 
          type: 'update attribute', 
          payload: { tabIndex: 43 } }]);});});});





  describe('replace text', function () {
    describe('text content', function () {
      it('gets recorded during an update from text content', function () {
        var node = document.createElement('div');
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 430 } }, 'Hi.'), node);
        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 434 } }, 'Bye.'), node);

        assertHistoryMatches([{ 
          instanceID: inst._debugID, 
          type: 'replace text', 
          payload: 'Bye.' }]);});



      it('gets recorded during an update from html', function () {
        var node = document.createElement('div');
        ReactDOM.render(React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Hi.' }, __source: { fileName: _jsxFileName, lineNumber: 445 } }), node);
        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 449 } }, 'Bye.'), node);

        assertHistoryMatches([{ 
          instanceID: inst._debugID, 
          type: 'replace text', 
          payload: 'Bye.' }]);});



      it('gets recorded during an update from children', function () {
        var node = document.createElement('div');
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 460 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 460 } }), React.createElement('p', { __source: { fileName: _jsxFileName, lineNumber: 460 } })), node);
        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 464 } }, 'Bye.'), node);

        assertHistoryMatches([{ 
          instanceID: inst._debugID, 
          type: 'remove child', 
          payload: { fromIndex: 0 } }, 
        { 
          instanceID: inst._debugID, 
          type: 'remove child', 
          payload: { fromIndex: 1 } }, 
        { 
          instanceID: inst._debugID, 
          type: 'replace text', 
          payload: 'Bye.' }]);});



      it('gets ignored if new text is equal', function () {
        var node = document.createElement('div');
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 483 } }, 'Hi.'), node);

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 486 } }, 'Hi.'), node);

        assertHistoryMatches([]);});});



    describe('text node', function () {
      it('gets recorded during an update', function () {
        var node = document.createElement('div');
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 495 } }, 'Hi.', 42), node);
        var inst1 = ReactDOMComponentTree.getInstanceFromNode(node.firstChild.childNodes[0]);
        var inst2 = ReactDOMComponentTree.getInstanceFromNode(node.firstChild.childNodes[3]);

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 500 } }, 'Bye.', 43), node);

        assertHistoryMatches([{ 
          instanceID: inst1._debugID, 
          type: 'replace text', 
          payload: 'Bye.' }, 
        { 
          instanceID: inst2._debugID, 
          type: 'replace text', 
          payload: '43' }]);});



      it('gets ignored if new text is equal', function () {
        var node = document.createElement('div');
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 515 } }, 'Hi.', 42), node);

        ReactHostOperationHistoryDevtool._preventClearing = true;
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 518 } }, 'Hi.', 42), node);

        assertHistoryMatches([]);});});});




  describe('replace with', function () {
    it('gets recorded when composite renders to a different type', function () {
      var element;
      function Foo() {
        return element;}


      var node = document.createElement('div');
      element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 533 } });
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 534 } }), node);
      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

      element = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 537 } });

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 540 } }), node);

      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'replace with', 
        payload: 'SPAN' }]);});



    it('gets recorded when composite renders to null after a native', function () {
      var element;
      function Foo() {
        return element;}


      var node = document.createElement('div');
      element = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 556 } });
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 557 } }), node);

      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
      element = null;

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 563 } }), node);

      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'replace with', 
        payload: '#comment' }]);});



    it('gets ignored if the type has not changed', function () {
      var element;
      function Foo() {
        return element;}


      var node = document.createElement('div');
      element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 579 } });
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 580 } }), node);

      element = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 582 } });

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 585 } }), node);

      assertHistoryMatches([]);});});



  describe('replace children', function () {
    it('gets recorded during an update from text content', function () {
      var node = document.createElement('div');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 594 } }, 'Hi.'), node);
      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(
      React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Bye.' }, __source: { fileName: _jsxFileName, lineNumber: 599 } }), 
      node);


      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'replace children', 
        payload: 'Bye.' }]);});



    it('gets recorded during an update from html', function () {
      var node = document.createElement('div');
      ReactDOM.render(
      React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Hi.' }, __source: { fileName: _jsxFileName, lineNumber: 613 } }), 
      node);

      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(
      React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Bye.' }, __source: { fileName: _jsxFileName, lineNumber: 620 } }), 
      node);


      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'replace children', 
        payload: 'Bye.' }]);});



    it('gets recorded during an update from children', function () {
      var node = document.createElement('div');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 633 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 633 } }), React.createElement('p', { __source: { fileName: _jsxFileName, lineNumber: 633 } })), node);
      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(
      React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Hi.' }, __source: { fileName: _jsxFileName, lineNumber: 638 } }), 
      node);


      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'remove child', 
        payload: { fromIndex: 0 } }, 
      { 
        instanceID: inst._debugID, 
        type: 'remove child', 
        payload: { fromIndex: 1 } }, 
      { 
        instanceID: inst._debugID, 
        type: 'replace children', 
        payload: 'Hi.' }]);});



    it('gets ignored if new html is equal', function () {
      var node = document.createElement('div');
      ReactDOM.render(
      React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Hi.' }, __source: { fileName: _jsxFileName, lineNumber: 660 } }), 
      node);


      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(
      React.createElement('div', { dangerouslySetInnerHTML: { __html: 'Hi.' }, __source: { fileName: _jsxFileName, lineNumber: 666 } }), 
      node);


      assertHistoryMatches([]);});});



  describe('insert child', function () {
    it('gets reported when a child is inserted', function () {
      var node = document.createElement('div');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 677 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 677 } })), node);
      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 681 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 681 } }), React.createElement('p', { __source: { fileName: _jsxFileName, lineNumber: 681 } })), node);

      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'insert child', 
        payload: { toIndex: 1, content: 'P' } }]);});});




  describe('move child', function () {
    it('gets reported when a child is inserted', function () {
      var node = document.createElement('div');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 694 } }, React.createElement('span', { key: 'a', __source: { fileName: _jsxFileName, lineNumber: 694 } }), React.createElement('p', { key: 'b', __source: { fileName: _jsxFileName, lineNumber: 694 } })), node);
      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 698 } }, React.createElement('p', { key: 'b', __source: { fileName: _jsxFileName, lineNumber: 698 } }), React.createElement('span', { key: 'a', __source: { fileName: _jsxFileName, lineNumber: 698 } })), node);

      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'move child', 
        payload: { fromIndex: 0, toIndex: 1 } }]);});});




  describe('remove child', function () {
    it('gets reported when a child is removed', function () {
      var node = document.createElement('div');
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 711 } }, React.createElement('span', { key: 'a', __source: { fileName: _jsxFileName, lineNumber: 711 } }), React.createElement('p', { key: 'b', __source: { fileName: _jsxFileName, lineNumber: 711 } })), node);
      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);

      ReactHostOperationHistoryDevtool._preventClearing = true;
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 715 } }, React.createElement('span', { key: 'a', __source: { fileName: _jsxFileName, lineNumber: 715 } })), node);

      assertHistoryMatches([{ 
        instanceID: inst._debugID, 
        type: 'remove child', 
        payload: { fromIndex: 1 } }]);});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDOMFeatureFlags.js":169,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactHostOperationHistoryDevtool.js":212}],216:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildFiber
 * 
 */

'use strict';var _require = 








require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');var REACT_ELEMENT_TYPE = _require.REACT_ELEMENT_TYPE;var _require2 = 



require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\isomorphic\\ReactCoroutine.js');var REACT_COROUTINE_TYPE = _require2.REACT_COROUTINE_TYPE;var REACT_YIELD_TYPE = _require2.REACT_YIELD_TYPE;

var ReactFiber = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactFiber.js');
var ReactReifiedYield = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactReifiedYield.js');

function createSubsequentChild(parent, previousSibling, newChildren) {
  if (typeof newChildren !== 'object' || newChildren === null) {
    return previousSibling;}


  switch (newChildren.$$typeof) {
    case REACT_ELEMENT_TYPE:{
        var element = newChildren;
        var child = ReactFiber.createFiberFromElement(element);
        previousSibling.sibling = child;
        child.parent = parent;
        return child;}


    case REACT_COROUTINE_TYPE:{
        var coroutine = newChildren;
        var _child = ReactFiber.createFiberFromCoroutine(coroutine);
        previousSibling.sibling = _child;
        _child.parent = parent;
        return _child;}


    case REACT_YIELD_TYPE:{
        var yieldNode = newChildren;
        var reifiedYield = ReactReifiedYield.createReifiedYield(yieldNode);
        var _child2 = ReactFiber.createFiberFromYield(yieldNode);
        _child2.output = reifiedYield;
        previousSibling.sibling = _child2;
        _child2.parent = parent;
        return _child2;}}



  if (Array.isArray(newChildren)) {
    var prev = previousSibling;
    for (var i = 0; i < newChildren.length; i++) {
      prev = createSubsequentChild(parent, prev, newChildren[i]);}

    return prev;} else 
  {
    console.log('Unknown child', newChildren);
    return previousSibling;}}



function createFirstChild(parent, newChildren) {
  if (typeof newChildren !== 'object' || newChildren === null) {
    return null;}


  switch (newChildren.$$typeof) {
    case REACT_ELEMENT_TYPE:{
        var element = newChildren;
        var child = ReactFiber.createFiberFromElement(element);
        child.parent = parent;
        return child;}


    case REACT_COROUTINE_TYPE:{
        var coroutine = newChildren;
        var _child3 = ReactFiber.createFiberFromCoroutine(coroutine);
        _child3.parent = parent;
        return _child3;}


    case REACT_YIELD_TYPE:{
        // A yield results in a fragment fiber whose output is the continuation.
        // TODO: When there is only a single child, we can optimize this to avoid
        // the fragment.
        var yieldNode = newChildren;
        var reifiedYield = ReactReifiedYield.createReifiedYield(yieldNode);
        var _child4 = ReactFiber.createFiberFromYield(yieldNode);
        _child4.output = reifiedYield;
        _child4.parent = parent;
        return _child4;}}



  if (Array.isArray(newChildren)) {
    var first = null;
    var prev = null;
    for (var i = 0; i < newChildren.length; i++) {
      if (prev == null) {
        prev = createFirstChild(parent, newChildren[i]);
        first = prev;} else 
      {
        prev = createSubsequentChild(parent, prev, newChildren[i]);}}


    return first;} else 
  {
    console.log('Unknown child', newChildren);
    return null;}}



exports.reconcileChildFibers = function (parent, firstChild, newChildren) {
  return createFirstChild(parent, newChildren);};
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactFiber.js":217,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactReifiedYield.js":221,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\isomorphic\\ReactCoroutine.js":223}],217:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactFiber
 * 
 */

'use strict';

var ReactTypesOfWork = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactTypesOfWork.js');var 

IndeterminateComponent = 




ReactTypesOfWork.IndeterminateComponent;var ClassComponent = ReactTypesOfWork.ClassComponent;var HostComponent = ReactTypesOfWork.HostComponent;var CoroutineComponent = ReactTypesOfWork.CoroutineComponent;var YieldComponent = ReactTypesOfWork.YieldComponent;

var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');






























var createFiber = function (tag) {
  return { 

    tag: tag, 

    parent: null, 
    child: null, 
    sibling: null, 

    input: null, 
    output: null, 

    stage: 0, 

    hasPendingChanges: true, 

    stateNode: null };};




function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);}


exports.createFiberFromElement = function (element) {
  var fiber = exports.createFiberFromElementType(element.type);
  if (typeof element.type === 'object') {
    // Hacky McHack
    element = ReactElement(fiber.input, null, element.ref, null, null, null, element.props);}

  fiber.input = element;
  return fiber;};


exports.createFiberFromElementType = function (type) {
  var fiber = void 0;
  if (typeof type === 'function') {
    fiber = shouldConstruct(type) ? 
    createFiber(ClassComponent) : 
    createFiber(IndeterminateComponent);} else 
  if (typeof type === 'string') {
    fiber = createFiber(HostComponent);} else 
  if (typeof type === 'object' && type !== null) {
    // Currently assumed to be a continuation and therefore is a fiber already.
    fiber = type;} else 
  {
    throw new Error('Unknown component type: ' + typeof type);}

  return fiber;};


exports.createFiberFromCoroutine = function (coroutine) {
  var fiber = createFiber(CoroutineComponent);
  fiber.input = coroutine;
  return fiber;};


exports.createFiberFromYield = function (yieldNode) {
  var fiber = createFiber(YieldComponent);
  return fiber;};
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactTypesOfWork.js":222}],218:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactFiberBeginWork
 * 
 */

'use strict';




var ReactChildFiber = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactChildFiber.js');
var ReactTypesOfWork = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactTypesOfWork.js');var 

IndeterminateComponent = 





ReactTypesOfWork.IndeterminateComponent;var FunctionalComponent = ReactTypesOfWork.FunctionalComponent;var ClassComponent = ReactTypesOfWork.ClassComponent;var HostComponent = ReactTypesOfWork.HostComponent;var CoroutineComponent = ReactTypesOfWork.CoroutineComponent;var YieldComponent = ReactTypesOfWork.YieldComponent;

function getElement(unitOfWork) {
  var element = unitOfWork.input;
  if (!element) {
    throw new Error('Should be resolved by now');}

  return element;}


function updateFunctionalComponent(unitOfWork) {
  var element = getElement(unitOfWork);
  var fn = element.type;
  var props = element.props;
  console.log('perform work on:', fn.name);
  var nextChildren = fn(props);

  unitOfWork.child = ReactChildFiber.reconcileChildFibers(
  unitOfWork, 
  unitOfWork.child, 
  nextChildren);}



function updateHostComponent(unitOfWork) {
  var element = getElement(unitOfWork);
  console.log('host component', element.type, typeof element.props.children === 'string' ? element.props.children : '');

  var nextChildren = element.props.children;
  unitOfWork.child = ReactChildFiber.reconcileChildFibers(
  unitOfWork, 
  unitOfWork.child, 
  nextChildren);}



function mountIndeterminateComponent(unitOfWork) {
  var element = getElement(unitOfWork);
  var fn = element.type;
  var props = element.props;
  var value = fn(props);
  if (typeof value === 'object' && value && typeof value.render === 'function') {
    console.log('performed work on class:', fn.name);
    // Proceed under the assumption that this is a class instance
    unitOfWork.tag = ClassComponent;} else 
  {
    console.log('performed work on fn:', fn.name);
    // Proceed under the assumption that this is a functional component
    unitOfWork.tag = FunctionalComponent;}

  unitOfWork.child = ReactChildFiber.reconcileChildFibers(
  unitOfWork, 
  unitOfWork.child, 
  value);}



function updateCoroutineComponent(unitOfWork) {
  var coroutine = unitOfWork.input;
  if (!coroutine) {
    throw new Error('Should be resolved by now');}

  console.log('begin coroutine', coroutine.handler.name);
  unitOfWork.child = ReactChildFiber.reconcileChildFibers(
  unitOfWork, 
  unitOfWork.child, 
  coroutine.children);}



function beginWork(unitOfWork) {
  switch (unitOfWork.tag) {
    case IndeterminateComponent:
      mountIndeterminateComponent(unitOfWork);
      break;
    case FunctionalComponent:
      updateFunctionalComponent(unitOfWork);
      break;
    case ClassComponent:
      console.log('class component', unitOfWork.input.type.name);
      break;
    case HostComponent:
      updateHostComponent(unitOfWork);
      break;
    case CoroutineComponent:
      // Reset the stage to zero.
      unitOfWork.stage = 0;
      updateCoroutineComponent(unitOfWork);
      // This doesn't take arbitrary time so we could synchronously just begin
      // eagerly do the work of unitOfWork.child as an optimization.
      if (unitOfWork.child) {
        return beginWork(unitOfWork.child);}

      break;
    case YieldComponent:
      // A yield component is just a placeholder, we can just run through the
      // next one immediately.
      if (unitOfWork.sibling) {
        return beginWork(unitOfWork.sibling);}

      return null;
    default:
      throw new Error('Unknown unit of work tag');}

  return unitOfWork.child;}


exports.beginWork = beginWork;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactChildFiber.js":216,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactTypesOfWork.js":222}],219:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactFiberCompleteWork
 * 
 */

'use strict';






var ReactChildFiber = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactChildFiber.js');
var ReactTypesOfWork = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactTypesOfWork.js');var 

IndeterminateComponent = 





ReactTypesOfWork.IndeterminateComponent;var FunctionalComponent = ReactTypesOfWork.FunctionalComponent;var ClassComponent = ReactTypesOfWork.ClassComponent;var HostComponent = ReactTypesOfWork.HostComponent;var CoroutineComponent = ReactTypesOfWork.CoroutineComponent;var YieldComponent = ReactTypesOfWork.YieldComponent;

function transferOutput(child, parent) {
  // If we have a single result, we just pass that through as the output to
  // avoid unnecessary traversal. When we have multiple output, we just pass
  // the linked list of fibers that has the individual output values.
  parent.output = child && !child.sibling ? child.output : child;}


function recursivelyFillYields(yields, output) {
  if (!output) {
    // Ignore nulls etc.
  } else if (output.tag !== undefined) {// TODO: Fix this fragile duck test.
      // Detect if this is a fiber, if so it is a fragment result.
      // $FlowFixMe: Refinement issue.
      var item = output;
      do {
        recursivelyFillYields(yields, item.output);
        item = item.sibling;} while (
      item);} else 
    {
      // $FlowFixMe: Refinement issue. If it is not a Fiber or null, it is a yield
      yields.push(output);}}



function handleCoroutine(unitOfWork) {
  var coroutine = unitOfWork.input;
  if (!coroutine) {
    throw new Error('Should be resolved by now');}


  if (unitOfWork.stage === 0) {
    // First step of the coroutine has completed. Now we need to do the second.
    // TODO: It would be nice to have a multi stage coroutine represented by a
    // single component, or at least tail call optimize nested ones.
    // TODO: If we end up not using multi stage coroutines, we could also reuse
    // the tag field to switch between the two stages.
    unitOfWork.stage = 1;

    // Build up the yields.
    // TODO: Compare this to a generator or opaque helpers like Children.
    var yields = [];
    var child = unitOfWork.child;
    while (child) {
      recursivelyFillYields(yields, child.output);
      child = child.sibling;}

    var fn = coroutine.handler;
    var props = coroutine.props;
    var nextChildren = fn(props, yields);

    unitOfWork.stateNode = ReactChildFiber.reconcileChildFibers(
    unitOfWork, 
    unitOfWork.stateNode, 
    nextChildren);

    return unitOfWork.stateNode;} else 
  {
    // The coroutine is now complete.
    transferOutput(unitOfWork.stateNode, unitOfWork);
    return null;}}



exports.completeWork = function (unitOfWork) {
  switch (unitOfWork.tag) {
    case FunctionalComponent:
      console.log('/functional component', unitOfWork.input.type.name);
      transferOutput(unitOfWork.child, unitOfWork);
      break;
    case ClassComponent:
      console.log('/class component', unitOfWork.input.type.name);
      transferOutput(unitOfWork.child, unitOfWork);
      break;
    case HostComponent:
      console.log('/host component', unitOfWork.input.type);
      break;
    case CoroutineComponent:
      console.log('/coroutine component', unitOfWork.input.handler.name);
      return handleCoroutine(unitOfWork);
    case YieldComponent:
      // Does nothing.
      break;

    // Error cases
    case IndeterminateComponent:
      throw new Error('An indeterminate component should have become determinate before completing.');
    default:
      throw new Error('Unknown unit of work tag');}

  return null;};
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactChildFiber.js":216,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactTypesOfWork.js":222}],220:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactFiberReconciler
 * 
 */

'use strict';


var ReactFiber = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactFiber.js');var _require = 
require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactFiberBeginWork.js');var beginWork = _require.beginWork;var _require2 = 
require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactFiberCompleteWork.js');var completeWork = _require2.completeWork;










var timeHeuristicForUnitOfWork = 1;















module.exports = function (config) {

  // const scheduleHighPriCallback = config.scheduleHighPriCallback;
  var scheduleLowPriCallback = config.scheduleLowPriCallback;

  var nextUnitOfWork = null;

  function completeUnitOfWork(unitOfWork) {
    while (true) {
      var next = completeWork(unitOfWork);
      if (next) {
        // If completing this work spawned new work, do that next.
        return next;} else 
      if (unitOfWork.sibling) {
        // If there is more work to do in this parent, do that next.
        return unitOfWork.sibling;} else 
      if (unitOfWork.parent) {
        // If there's no more work in this parent. Complete the parent.
        unitOfWork = unitOfWork.parent;} else 
      {
        // If we're at the root, there's no more work to do.
        return null;}}}




  function performUnitOfWork(unitOfWork) {
    var next = beginWork(unitOfWork);
    if (next) {
      // If this spawns new work, do that next.
      return next;} else 
    {
      // Otherwise, complete the current work.
      return completeUnitOfWork(unitOfWork);}}



  function performLowPriWork(deadline) {
    while (nextUnitOfWork) {
      if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);} else 
      {
        scheduleLowPriCallback(performLowPriWork);
        break;}}}




  function ensureLowPriIsScheduled() {
    if (nextUnitOfWork) {
      return;}

    scheduleLowPriCallback(performLowPriWork);}


  /*
  function performHighPriWork() {
    // There is no such thing as high pri work yet.
  }
    function ensureHighPriIsScheduled() {
    scheduleHighPriCallback(performHighPriWork);
  }
  */


  return { 

    mountNewRoot: function (element) {

      ensureLowPriIsScheduled();

      nextUnitOfWork = ReactFiber.createFiberFromElement(element);

      return {};} };};
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactFiber.js":217,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactFiberBeginWork.js":218,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactFiberCompleteWork.js":219}],221:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReifiedYield
 * 
 */

'use strict';




var ReactFiber = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactFiber.js');



exports.createReifiedYield = function (yieldNode) {
  var fiber = ReactFiber.createFiberFromElementType(yieldNode.continuation);
  // Hacky way to store the continuation
  fiber.input = yieldNode.continuation;
  return { 
    continuation: fiber, 
    props: yieldNode.props };};



exports.createUpdatedReifiedYield = function (previousYield, yieldNode) {
  return { 
    continuation: previousYield.continuation, 
    props: yieldNode.props };};
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\fiber\\ReactFiber.js":217}],222:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTypesOfWork
 * 
 */

'use strict';

var TypesOfWork = { 
  IndeterminateComponent: 0, // Before we know whether it is functional or class
  FunctionalComponent: 1, 
  ClassComponent: 2, 
  HostComponent: 3, 
  CoroutineComponent: 4, 
  YieldComponent: 5 };


module.exports = TypesOfWork;
},{}],223:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCoroutine
 * 
 */

'use strict';



// The Symbol used to tag the special React types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_COROUTINE_TYPE = 
typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.coroutine') || 
0xeac8;

var REACT_YIELD_TYPE = 
typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.yield') || 
0xeac9;



















exports.createCoroutine = function (children, handler, props) {var key = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
  var coroutine = { 
    // This tag allow us to uniquely identify this as a React Coroutine
    $$typeof: REACT_COROUTINE_TYPE, 
    key: key == null ? null : '' + key, 
    children: children, 
    handler: handler, 
    props: props };


  if (__DEV__) {
    // TODO: Add _store property for marking this as validated.
    if (Object.freeze) {
      Object.freeze(coroutine.props);
      Object.freeze(coroutine);}}



  return coroutine;};


exports.createYield = function (props, continuation) {var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
  var yieldNode = { 
    // This tag allow us to uniquely identify this as a React Yield
    $$typeof: REACT_YIELD_TYPE, 
    key: key == null ? null : '' + key, 
    props: props, 
    continuation: continuation };


  if (__DEV__) {
    // TODO: Add _store property for marking this as validated.
    if (Object.freeze) {
      Object.freeze(yieldNode.props);
      Object.freeze(yieldNode);}}



  return yieldNode;};


/**
 * Verifies the object is a coroutine object.
 */
exports.isCoroutine = function (object) {
  return (
    typeof object === 'object' && 
    object !== null && 
    object.$$typeof === REACT_COROUTINE_TYPE);};



/**
 * Verifies the object is a yield object.
 */
exports.isYield = function (object) {
  return (
    typeof object === 'object' && 
    object !== null && 
    object.$$typeof === REACT_YIELD_TYPE);};



exports.REACT_YIELD_TYPE = REACT_YIELD_TYPE;
exports.REACT_COROUTINE_TYPE = REACT_COROUTINE_TYPE;
},{}],224:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTypes
 * 
 */

'use strict';
},{}],225:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;}


  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';} else 
  {
    return (
      nextType === 'object' && 
      prevElement.type === nextElement.type && 
      prevElement.key === nextElement.key);}}




module.exports = shouldUpdateReactComponent;
},{}],226:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var PropagationPhases = keyMirror({ bubbled: null, captured: null });

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({ 
  topAbort: null, 
  topAnimationEnd: null, 
  topAnimationIteration: null, 
  topAnimationStart: null, 
  topBlur: null, 
  topCanPlay: null, 
  topCanPlayThrough: null, 
  topChange: null, 
  topClick: null, 
  topCompositionEnd: null, 
  topCompositionStart: null, 
  topCompositionUpdate: null, 
  topContextMenu: null, 
  topCopy: null, 
  topCut: null, 
  topDoubleClick: null, 
  topDrag: null, 
  topDragEnd: null, 
  topDragEnter: null, 
  topDragExit: null, 
  topDragLeave: null, 
  topDragOver: null, 
  topDragStart: null, 
  topDrop: null, 
  topDurationChange: null, 
  topEmptied: null, 
  topEncrypted: null, 
  topEnded: null, 
  topError: null, 
  topFocus: null, 
  topInput: null, 
  topInvalid: null, 
  topKeyDown: null, 
  topKeyPress: null, 
  topKeyUp: null, 
  topLoad: null, 
  topLoadedData: null, 
  topLoadedMetadata: null, 
  topLoadStart: null, 
  topMouseDown: null, 
  topMouseMove: null, 
  topMouseOut: null, 
  topMouseOver: null, 
  topMouseUp: null, 
  topPaste: null, 
  topPause: null, 
  topPlay: null, 
  topPlaying: null, 
  topProgress: null, 
  topRateChange: null, 
  topReset: null, 
  topScroll: null, 
  topSeeked: null, 
  topSeeking: null, 
  topSelectionChange: null, 
  topStalled: null, 
  topSubmit: null, 
  topSuspend: null, 
  topTextInput: null, 
  topTimeUpdate: null, 
  topTouchCancel: null, 
  topTouchEnd: null, 
  topTouchMove: null, 
  topTouchStart: null, 
  topTransitionEnd: null, 
  topVolumeChange: null, 
  topWaiting: null, 
  topWheel: null });


var EventConstants = { 
  topLevelTypes: topLevelTypes, 
  PropagationPhases: PropagationPhases };


module.exports = EventConstants;
},{"fbjs/lib/keyMirror":417}],227:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js');
var EventPluginUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js');
var ReactErrorUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactErrorUtils.js');

var accumulateInto = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\accumulateInto.js');
var forEachAccumulated = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\forEachAccumulated.js');
var invariant = require('fbjs/lib/invariant');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);}}};



var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);};

var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);};


/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = { 

  /**
   * Methods for injecting dependencies.
   */
  injection: { 

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder, 

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName }, 



  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    invariant(
    typeof listener === 'function', 
    'Expected %s listener to be a function, instead got type %s', 
    registrationName, typeof listener);


    var bankForRegistrationName = 
    listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[inst._rootNodeID] = listener;

    var PluginModule = 
    EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);}}, 



  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[inst._rootNodeID];}, 


  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = 
    EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);}


    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      delete bankForRegistrationName[inst._rootNodeID];}}, 



  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;}


      if (!listenerBank[registrationName][inst._rootNodeID]) {
        continue;}


      var PluginModule = 
      EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);}


      delete listenerBank[registrationName][inst._rootNodeID];}}, 



  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (
  topLevelType, 
  targetInst, 
  nativeEvent, 
  nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
        topLevelType, 
        targetInst, 
        nativeEvent, 
        nativeEventTarget);

        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);}}}



    return events;}, 


  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);}}, 



  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(
      processingEventQueue, 
      executeDispatchesAndReleaseSimulated);} else 

    {
      forEachAccumulated(
      processingEventQueue, 
      executeDispatchesAndReleaseTopLevel);}


    invariant(
    !eventQueue, 
    'processEventQueue(): Additional events were enqueued while processing ' + 
    'an event queue. Support for this has not yet been implemented.');

    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();}, 


  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};}, 


  __getListenerBank: function () {
    return listenerBank;} };




module.exports = EventPluginHub;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js":228,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js":229,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactErrorUtils.js":278,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\accumulateInto.js":289,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\forEachAccumulated.js":294,"fbjs/lib/invariant":414}],228:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;}

  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    invariant(
    pluginIndex > -1, 
    'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 
    'the plugin ordering, `%s`.', 
    pluginName);

    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;}

    invariant(
    PluginModule.extractEvents, 
    'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 
    'method, but `%s` does not.', 
    pluginName);

    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      invariant(
      publishEventForPlugin(
      publishedEvents[eventName], 
      PluginModule, 
      eventName), 

      'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', 
      eventName, 
      pluginName);}}}





/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  invariant(
  !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), 
  'EventPluginHub: More than one plugin attempted to publish the same ' + 
  'event name, `%s`.', 
  eventName);

  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
        phasedRegistrationName, 
        PluginModule, 
        eventName);}}



    return true;} else 
  if (dispatchConfig.registrationName) {
    publishRegistrationName(
    dispatchConfig.registrationName, 
    PluginModule, 
    eventName);

    return true;}

  return false;}


/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  invariant(
  !EventPluginRegistry.registrationNameModules[registrationName], 
  'EventPluginHub: More than one plugin attempted to publish the same ' + 
  'registration name, `%s`.', 
  registrationName);

  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = 
  PluginModule.eventTypes[eventName].dependencies;

  if (__DEV__) {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = 
    registrationName;


    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;}}}




/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = { 

  /**
   * Ordered list of injected plugins.
   */
  plugins: [], 

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {}, 

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {}, 

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {}, 

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: __DEV__ ? {} : null, 

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (InjectedEventPluginOrder) {
    invariant(
    !EventPluginOrder, 
    'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 
    'once. You are likely trying to load more than one copy of React.');

    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();}, 


  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;}

      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || 
      namesToPlugins[pluginName] !== PluginModule) {
        invariant(
        !namesToPlugins[pluginName], 
        'EventPluginRegistry: Cannot inject two different event plugins ' + 
        'using the same name, `%s`.', 
        pluginName);

        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;}}


    if (isOrderingDirty) {
      recomputePluginOrdering();}}, 



  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
      dispatchConfig.registrationName] || 
      null;}

    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;}

      var PluginModule = EventPluginRegistry.registrationNameModules[
      dispatchConfig.phasedRegistrationNames[phase]];

      if (PluginModule) {
        return PluginModule;}}


    return null;}, 


  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];}}


    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];}}



    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];}}



    if (__DEV__) {
      var possibleRegistrationNames = 
      EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];}}}} };







module.exports = EventPluginRegistry;
},{"fbjs/lib/invariant":414}],229:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var ReactErrorUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactErrorUtils.js');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = { 
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if (__DEV__) {
      warning(
      Injected && 
      Injected.getNodeFromInstance && 
      Injected.getInstanceFromNode, 
      'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 
      'module is missing getNodeFromInstance or getInstanceFromNode.');}}, 



  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if (__DEV__) {
      warning(
      Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 
      'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 
      'module is missing isAncestor or getLowestCommonAncestor.');}} };





var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp || 
  topLevelType === topLevelTypes.topTouchEnd || 
  topLevelType === topLevelTypes.topTouchCancel;}


function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove || 
  topLevelType === topLevelTypes.topTouchMove;}

function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown || 
  topLevelType === topLevelTypes.topTouchStart;}



var validateEventDispatches;
if (__DEV__) {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? 
    dispatchListeners.length : 
    dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? 
    dispatchInstances.length : 
    dispatchInstances ? 1 : 0;

    warning(
    instancesIsArr === listenersIsArr && instancesLen === listenersLen, 
    'EventPluginUtils: Invalid `event`.');};}




/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(
    type, 
    listener, 
    event);} else 

  {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);}

  event.currentTarget = null;}


/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (__DEV__) {
    validateEventDispatches(event);}

  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;}

      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(
      event, 
      simulated, 
      dispatchListeners[i], 
      dispatchInstances[i]);}} else 


  if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);}

  event._dispatchListeners = null;
  event._dispatchInstances = null;}


/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (__DEV__) {
    validateEventDispatches(event);}

  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;}

      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];}}} else 


  if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;}}


  return null;}


/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;}


/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (__DEV__) {
    validateEventDispatches(event);}

  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  invariant(
  !Array.isArray(dispatchListener), 
  'executeDirectDispatch(...): Invalid `event`.');

  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;}


/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;}


/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = { 
  isEndish: isEndish, 
  isMoveish: isMoveish, 
  isStartish: isStartish, 

  executeDirectDispatch: executeDirectDispatch, 
  executeDispatchesInOrder: executeDispatchesInOrder, 
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue, 
  hasDispatches: hasDispatches, 

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);}, 

  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);}, 

  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);}, 

  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);}, 

  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);}, 

  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);}, 

  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);}, 


  injection: injection };


module.exports = EventPluginUtils;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactErrorUtils.js":278,"fbjs/lib/invariant":414,"fbjs/lib/warning":424}],230:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
var EventPluginUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js');

var accumulateInto = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\accumulateInto.js');
var forEachAccumulated = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\forEachAccumulated.js');
var warning = require('fbjs/lib/warning');

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = 
  event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);}


/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, upwards, event) {
  if (__DEV__) {
    warning(
    inst, 
    'Dispatching inst must not be null');}


  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = 
    accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);}}



/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(
    event._targetInst, 
    accumulateDirectionalDispatches, 
    event);}}




/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = 
    targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(
    parentInst, 
    accumulateDirectionalDispatches, 
    event);}}





/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = 
      accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);}}}




/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);}}



function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);}


function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);}


function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(
  from, 
  to, 
  accumulateDispatches, 
  leave, 
  enter);}




function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);}




/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = { 
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches, 
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget, 
  accumulateDirectDispatches: accumulateDirectDispatches, 
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches };


module.exports = EventPropagators;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js":229,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\accumulateInto.js":289,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\forEachAccumulated.js":294,"fbjs/lib/warning":424}],231:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

jest.
unmock('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js').
mock('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\isEventSupported.js');

describe('EventPluginHub', function () {
  var EventPluginHub;
  var isEventSupported;

  beforeEach(function () {
    jest.resetModuleRegistry();
    EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
    isEventSupported = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\isEventSupported.js');
    isEventSupported.mockReturnValueOnce(false);});


  it('should prevent non-function listeners', function () {
    expect(function () {
      EventPluginHub.putListener(1, 'onClick', 'not a function');}).
    toThrowError(
    'Expected onClick listener to be a function, instead got type string');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\utils\\isEventSupported.js":133,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227}],232:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _assign = require('object-assign');


describe('EventPluginRegistry', function () {
  var EventPluginRegistry;
  var createPlugin;

  beforeEach(function () {
    EventPluginRegistry = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js');
    EventPluginRegistry._resetEventPlugins();

    createPlugin = function (properties) {
      return _assign({ extractEvents: function () {} }, properties);};});



  it('should be able to inject ordering before plugins', function () {
    var OnePlugin = createPlugin();
    var TwoPlugin = createPlugin();
    var ThreePlugin = createPlugin();

    EventPluginRegistry.injectEventPluginOrder(['one', 'two', 'three']);
    EventPluginRegistry.injectEventPluginsByName({ 
      one: OnePlugin, 
      two: TwoPlugin });

    EventPluginRegistry.injectEventPluginsByName({ 
      three: ThreePlugin });


    expect(EventPluginRegistry.plugins.length).toBe(3);
    expect(EventPluginRegistry.plugins[0]).toBe(OnePlugin);
    expect(EventPluginRegistry.plugins[1]).toBe(TwoPlugin);
    expect(EventPluginRegistry.plugins[2]).toBe(ThreePlugin);});


  it('should be able to inject plugins before and after ordering', function () {
    var OnePlugin = createPlugin();
    var TwoPlugin = createPlugin();
    var ThreePlugin = createPlugin();

    EventPluginRegistry.injectEventPluginsByName({ 
      one: OnePlugin, 
      two: TwoPlugin });

    EventPluginRegistry.injectEventPluginOrder(['one', 'two', 'three']);
    EventPluginRegistry.injectEventPluginsByName({ 
      three: ThreePlugin });


    expect(EventPluginRegistry.plugins.length).toBe(3);
    expect(EventPluginRegistry.plugins[0]).toBe(OnePlugin);
    expect(EventPluginRegistry.plugins[1]).toBe(TwoPlugin);
    expect(EventPluginRegistry.plugins[2]).toBe(ThreePlugin);});


  it('should be able to inject repeated plugins and out-of-order', function () {
    var OnePlugin = createPlugin();
    var TwoPlugin = createPlugin();
    var ThreePlugin = createPlugin();

    EventPluginRegistry.injectEventPluginsByName({ 
      one: OnePlugin, 
      three: ThreePlugin });

    EventPluginRegistry.injectEventPluginOrder(['one', 'two', 'three']);
    EventPluginRegistry.injectEventPluginsByName({ 
      two: TwoPlugin, 
      three: ThreePlugin });


    expect(EventPluginRegistry.plugins.length).toBe(3);
    expect(EventPluginRegistry.plugins[0]).toBe(OnePlugin);
    expect(EventPluginRegistry.plugins[1]).toBe(TwoPlugin);
    expect(EventPluginRegistry.plugins[2]).toBe(ThreePlugin);});


  it('should throw if plugin does not implement `extractEvents`', function () {
    var BadPlugin = {};

    EventPluginRegistry.injectEventPluginOrder(['bad']);

    expect(function () {
      EventPluginRegistry.injectEventPluginsByName({ 
        bad: BadPlugin });}).

    toThrowError(
    'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 
    'method, but `bad` does not.');});



  it('should throw if plugin does not exist in ordering', function () {
    var OnePlugin = createPlugin();
    var RandomPlugin = createPlugin();

    EventPluginRegistry.injectEventPluginOrder(['one']);

    expect(function () {
      EventPluginRegistry.injectEventPluginsByName({ 
        one: OnePlugin, 
        random: RandomPlugin });}).

    toThrowError(
    'EventPluginRegistry: Cannot inject event plugins that do not exist ' + 
    'in the plugin ordering, `random`.');});



  it('should throw if ordering is injected more than once', function () {
    var pluginOrdering = [];

    EventPluginRegistry.injectEventPluginOrder(pluginOrdering);

    expect(function () {
      EventPluginRegistry.injectEventPluginOrder(pluginOrdering);}).
    toThrowError(
    'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 
    'once. You are likely trying to load more than one copy of React.');});



  it('should throw if different plugins injected using same name', function () {
    var OnePlugin = createPlugin();
    var TwoPlugin = createPlugin();

    EventPluginRegistry.injectEventPluginsByName({ same: OnePlugin });

    expect(function () {
      EventPluginRegistry.injectEventPluginsByName({ same: TwoPlugin });}).
    toThrowError(
    'EventPluginRegistry: Cannot inject two different event plugins using ' + 
    'the same name, `same`.');});



  it('should publish registration names of injected plugins', function () {
    var OnePlugin = createPlugin({ 
      eventTypes: { 
        click: { registrationName: 'onClick' }, 
        focus: { registrationName: 'onFocus' } } });


    var TwoPlugin = createPlugin({ 
      eventTypes: { 
        magic: { 
          phasedRegistrationNames: { 
            bubbled: 'onMagicBubble', 
            captured: 'onMagicCapture' } } } });





    EventPluginRegistry.injectEventPluginsByName({ one: OnePlugin });
    EventPluginRegistry.injectEventPluginOrder(['one', 'two']);

    expect(Object.keys(EventPluginRegistry.registrationNameModules).length).toBe(2);
    expect(EventPluginRegistry.registrationNameModules.onClick).toBe(OnePlugin);
    expect(EventPluginRegistry.registrationNameModules.onFocus).toBe(OnePlugin);

    EventPluginRegistry.injectEventPluginsByName({ two: TwoPlugin });

    expect(Object.keys(EventPluginRegistry.registrationNameModules).length).toBe(4);
    expect(EventPluginRegistry.registrationNameModules.onMagicBubble).toBe(TwoPlugin);
    expect(
    EventPluginRegistry.registrationNameModules.onMagicCapture).
    toBe(TwoPlugin);});


  it('should throw if multiple registration names collide', function () {
    var OnePlugin = createPlugin({ 
      eventTypes: { 
        photoCapture: { registrationName: 'onPhotoCapture' } } });


    var TwoPlugin = createPlugin({ 
      eventTypes: { 
        photo: { 
          phasedRegistrationNames: { 
            bubbled: 'onPhotoBubble', 
            captured: 'onPhotoCapture' } } } });





    EventPluginRegistry.injectEventPluginsByName({ 
      one: OnePlugin, 
      two: TwoPlugin });


    expect(function () {
      EventPluginRegistry.injectEventPluginOrder(['one', 'two']);}).
    toThrowError(
    'EventPluginHub: More than one plugin attempted to publish the same ' + 
    'registration name, `onPhotoCapture`.');});



  it('should throw if an invalid event is published', function () {
    var OnePlugin = createPlugin({ 
      eventTypes: { 
        badEvent: {/* missing configuration */} } });



    EventPluginRegistry.injectEventPluginsByName({ one: OnePlugin });

    expect(function () {
      EventPluginRegistry.injectEventPluginOrder(['one']);}).
    toThrowError(
    'EventPluginRegistry: Failed to publish event `badEvent` for plugin ' + 
    '`one`.');});



  it('should be able to get the plugin from synthetic events', function () {
    var clickDispatchConfig = { 
      registrationName: 'onClick' };

    var magicDispatchConfig = { 
      phasedRegistrationNames: { 
        bubbled: 'onMagicBubble', 
        captured: 'onMagicCapture' } };



    var OnePlugin = createPlugin({ 
      eventTypes: { 
        click: clickDispatchConfig, 
        magic: magicDispatchConfig } });



    var clickEvent = { dispatchConfig: clickDispatchConfig };
    var magicEvent = { dispatchConfig: magicDispatchConfig };

    expect(EventPluginRegistry.getPluginModuleForEvent(clickEvent)).toBe(null);
    expect(EventPluginRegistry.getPluginModuleForEvent(magicEvent)).toBe(null);

    EventPluginRegistry.injectEventPluginsByName({ one: OnePlugin });
    EventPluginRegistry.injectEventPluginOrder(['one']);

    expect(
    EventPluginRegistry.getPluginModuleForEvent(clickEvent)).
    toBe(OnePlugin);
    expect(
    EventPluginRegistry.getPluginModuleForEvent(magicEvent)).
    toBe(OnePlugin);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js":228,"object-assign":425}],233:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ResponderEventPlugin
 */

'use strict';

var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var EventPluginUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js');
var EventPropagators = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js');
var ResponderSyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\eventPlugins\\ResponderSyntheticEvent.js');
var ResponderTouchHistoryStore = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\eventPlugins\\ResponderTouchHistoryStore.js');

var accumulate = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\accumulate.js');
var invariant = require('fbjs/lib/invariant');
var keyOf = require('fbjs/lib/keyOf');

var isStartish = EventPluginUtils.isStartish;
var isMoveish = EventPluginUtils.isMoveish;
var isEndish = EventPluginUtils.isEndish;
var executeDirectDispatch = EventPluginUtils.executeDirectDispatch;
var hasDispatches = EventPluginUtils.hasDispatches;
var executeDispatchesInOrderStopAtTrue = 
EventPluginUtils.executeDispatchesInOrderStopAtTrue;

/**
 * Instance of element that should respond to touch/move types of interactions,
 * as indicated explicitly by relevant callbacks.
 */
var responderInst = null;

/**
 * Count of current touches. A textInput should become responder iff the
 * selection changes while there is a touch on the screen.
 */
var trackedTouchCount = 0;

/**
 * Last reported number of active touches.
 */
var previousActiveTouches = 0;

var changeResponder = function (nextResponderInst, blockHostResponder) {
  var oldResponderInst = responderInst;
  responderInst = nextResponderInst;
  if (ResponderEventPlugin.GlobalResponderHandler !== null) {
    ResponderEventPlugin.GlobalResponderHandler.onChange(
    oldResponderInst, 
    nextResponderInst, 
    blockHostResponder);}};




var eventTypes = { 
  /**
   * On a `touchStart`/`mouseDown`, is it desired that this element become the
   * responder?
   */
  startShouldSetResponder: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onStartShouldSetResponder: null }), 
      captured: keyOf({ onStartShouldSetResponderCapture: null }) } }, 



  /**
   * On a `scroll`, is it desired that this element become the responder? This
   * is usually not needed, but should be used to retroactively infer that a
   * `touchStart` had occurred during momentum scroll. During a momentum scroll,
   * a touch start will be immediately followed by a scroll event if the view is
   * currently scrolling.
   *
   * TODO: This shouldn't bubble.
   */
  scrollShouldSetResponder: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onScrollShouldSetResponder: null }), 
      captured: keyOf({ onScrollShouldSetResponderCapture: null }) } }, 



  /**
   * On text selection change, should this element become the responder? This
   * is needed for text inputs or other views with native selection, so the
   * JS view can claim the responder.
   *
   * TODO: This shouldn't bubble.
   */
  selectionChangeShouldSetResponder: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onSelectionChangeShouldSetResponder: null }), 
      captured: keyOf({ onSelectionChangeShouldSetResponderCapture: null }) } }, 



  /**
   * On a `touchMove`/`mouseMove`, is it desired that this element become the
   * responder?
   */
  moveShouldSetResponder: { 
    phasedRegistrationNames: { 
      bubbled: keyOf({ onMoveShouldSetResponder: null }), 
      captured: keyOf({ onMoveShouldSetResponderCapture: null }) } }, 



  /**
   * Direct responder events dispatched directly to responder. Do not bubble.
   */
  responderStart: { registrationName: keyOf({ onResponderStart: null }) }, 
  responderMove: { registrationName: keyOf({ onResponderMove: null }) }, 
  responderEnd: { registrationName: keyOf({ onResponderEnd: null }) }, 
  responderRelease: { registrationName: keyOf({ onResponderRelease: null }) }, 
  responderTerminationRequest: { 
    registrationName: keyOf({ onResponderTerminationRequest: null }) }, 

  responderGrant: { registrationName: keyOf({ onResponderGrant: null }) }, 
  responderReject: { registrationName: keyOf({ onResponderReject: null }) }, 
  responderTerminate: { registrationName: keyOf({ onResponderTerminate: null }) } };


/**
 *
 * Responder System:
 * ----------------
 *
 * - A global, solitary "interaction lock" on a view.
 * - If a node becomes the responder, it should convey visual feedback
 *   immediately to indicate so, either by highlighting or moving accordingly.
 * - To be the responder means, that touches are exclusively important to that
 *   responder view, and no other view.
 * - While touches are still occurring, the responder lock can be transferred to
 *   a new view, but only to increasingly "higher" views (meaning ancestors of
 *   the current responder).
 *
 * Responder being granted:
 * ------------------------
 *
 * - Touch starts, moves, and scrolls can cause an ID to become the responder.
 * - We capture/bubble `startShouldSetResponder`/`moveShouldSetResponder` to
 *   the "appropriate place".
 * - If nothing is currently the responder, the "appropriate place" is the
 *   initiating event's `targetID`.
 * - If something *is* already the responder, the "appropriate place" is the
 *   first common ancestor of the event target and the current `responderInst`.
 * - Some negotiation happens: See the timing diagram below.
 * - Scrolled views automatically become responder. The reasoning is that a
 *   platform scroll view that isn't built on top of the responder system has
 *   began scrolling, and the active responder must now be notified that the
 *   interaction is no longer locked to it - the system has taken over.
 *
 * - Responder being released:
 *   As soon as no more touches that *started* inside of descendants of the
 *   *current* responderInst, an `onResponderRelease` event is dispatched to the
 *   current responder, and the responder lock is released.
 *
 * TODO:
 * - on "end", a callback hook for `onResponderEndShouldRemainResponder` that
 *   determines if the responder lock should remain.
 * - If a view shouldn't "remain" the responder, any active touches should by
 *   default be considered "dead" and do not influence future negotiations or
 *   bubble paths. It should be as if those touches do not exist.
 * -- For multitouch: Usually a translate-z will choose to "remain" responder
 *  after one out of many touches ended. For translate-y, usually the view
 *  doesn't wish to "remain" responder after one of many touches end.
 * - Consider building this on top of a `stopPropagation` model similar to
 *   `W3C` events.
 * - Ensure that `onResponderTerminate` is called on touch cancels, whether or
 *   not `onResponderTerminationRequest` returns `true` or `false`.
 *
 */

/*                                             Negotiation Performed
                                             +-----------------------+
                                            /                         \
Process low level events to    +     Current Responder      +   wantsResponderID
determine who to perform negot-|   (if any exists at all)   |
iation/transition              | Otherwise just pass through|
-------------------------------+----------------------------+------------------+
Bubble to find first ID        |                            |
to return true:wantsResponderID|                            |
                               |                            |
     +-------------+           |                            |
     | onTouchStart|           |                            |
     +------+------+     none  |                            |
            |            return|                            |
+-----------v-------------+true| +------------------------+ |
|onStartShouldSetResponder|----->|onResponderStart (cur)  |<-----------+
+-----------+-------------+    | +------------------------+ |          |
            |                  |                            | +--------+-------+
            | returned true for|       false:REJECT +-------->|onResponderReject
            | wantsResponderID |                    |       | +----------------+
            | (now attempt     | +------------------+-----+ |
            |  handoff)        | |   onResponder          | |
            +------------------->|      TerminationRequest| |
                               | +------------------+-----+ |
                               |                    |       | +----------------+
                               |         true:GRANT +-------->|onResponderGrant|
                               |                            | +--------+-------+
                               | +------------------------+ |          |
                               | |   onResponderTerminate |<-----------+
                               | +------------------+-----+ |
                               |                    |       | +----------------+
                               |                    +-------->|onResponderStart|
                               |                            | +----------------+
Bubble to find first ID        |                            |
to return true:wantsResponderID|                            |
                               |                            |
     +-------------+           |                            |
     | onTouchMove |           |                            |
     +------+------+     none  |                            |
            |            return|                            |
+-----------v-------------+true| +------------------------+ |
|onMoveShouldSetResponder |----->|onResponderMove (cur)   |<-----------+
+-----------+-------------+    | +------------------------+ |          |
            |                  |                            | +--------+-------+
            | returned true for|       false:REJECT +-------->|onResponderRejec|
            | wantsResponderID |                    |       | +----------------+
            | (now attempt     | +------------------+-----+ |
            |  handoff)        | |   onResponder          | |
            +------------------->|      TerminationRequest| |
                               | +------------------+-----+ |
                               |                    |       | +----------------+
                               |         true:GRANT +-------->|onResponderGrant|
                               |                            | +--------+-------+
                               | +------------------------+ |          |
                               | |   onResponderTerminate |<-----------+
                               | +------------------+-----+ |
                               |                    |       | +----------------+
                               |                    +-------->|onResponderMove |
                               |                            | +----------------+
                               |                            |
                               |                            |
      Some active touch started|                            |
      inside current responder | +------------------------+ |
      +------------------------->|      onResponderEnd    | |
      |                        | +------------------------+ |
  +---+---------+              |                            |
  | onTouchEnd  |              |                            |
  +---+---------+              |                            |
      |                        | +------------------------+ |
      +------------------------->|     onResponderEnd     | |
      No active touches started| +-----------+------------+ |
      inside current responder |             |              |
                               |             v              |
                               | +------------------------+ |
                               | |    onResponderRelease  | |
                               | +------------------------+ |
                               |                            |
                               +                            + */



/**
 * A note about event ordering in the `EventPluginHub`.
 *
 * Suppose plugins are injected in the following order:
 *
 * `[R, S, C]`
 *
 * To help illustrate the example, assume `S` is `SimpleEventPlugin` (for
 * `onClick` etc) and `R` is `ResponderEventPlugin`.
 *
 * "Deferred-Dispatched Events":
 *
 * - The current event plugin system will traverse the list of injected plugins,
 *   in order, and extract events by collecting the plugin's return value of
 *   `extractEvents()`.
 * - These events that are returned from `extractEvents` are "deferred
 *   dispatched events".
 * - When returned from `extractEvents`, deferred-dispatched events contain an
 *   "accumulation" of deferred dispatches.
 * - These deferred dispatches are accumulated/collected before they are
 *   returned, but processed at a later time by the `EventPluginHub` (hence the
 *   name deferred).
 *
 * In the process of returning their deferred-dispatched events, event plugins
 * themselves can dispatch events on-demand without returning them from
 * `extractEvents`. Plugins might want to do this, so that they can use event
 * dispatching as a tool that helps them decide which events should be extracted
 * in the first place.
 *
 * "On-Demand-Dispatched Events":
 *
 * - On-demand-dispatched events are not returned from `extractEvents`.
 * - On-demand-dispatched events are dispatched during the process of returning
 *   the deferred-dispatched events.
 * - They should not have side effects.
 * - They should be avoided, and/or eventually be replaced with another
 *   abstraction that allows event plugins to perform multiple "rounds" of event
 *   extraction.
 *
 * Therefore, the sequence of event dispatches becomes:
 *
 * - `R`s on-demand events (if any)   (dispatched by `R` on-demand)
 * - `S`s on-demand events (if any)   (dispatched by `S` on-demand)
 * - `C`s on-demand events (if any)   (dispatched by `C` on-demand)
 * - `R`s extracted events (if any)   (dispatched by `EventPluginHub`)
 * - `S`s extracted events (if any)   (dispatched by `EventPluginHub`)
 * - `C`s extracted events (if any)   (dispatched by `EventPluginHub`)
 *
 * In the case of `ResponderEventPlugin`: If the `startShouldSetResponder`
 * on-demand dispatch returns `true` (and some other details are satisfied) the
 * `onResponderGrant` deferred dispatched event is returned from
 * `extractEvents`. The sequence of dispatch executions in this case
 * will appear as follows:
 *
 * - `startShouldSetResponder` (`ResponderEventPlugin` dispatches on-demand)
 * - `touchStartCapture`       (`EventPluginHub` dispatches as usual)
 * - `touchStart`              (`EventPluginHub` dispatches as usual)
 * - `responderGrant/Reject`   (`EventPluginHub` dispatches as usual)
 */

function setResponderAndExtractTransfer(
topLevelType, 
targetInst, 
nativeEvent, 
nativeEventTarget) 
{
  var shouldSetEventType = 
  isStartish(topLevelType) ? eventTypes.startShouldSetResponder : 
  isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : 
  topLevelType === EventConstants.topLevelTypes.topSelectionChange ? 
  eventTypes.selectionChangeShouldSetResponder : 
  eventTypes.scrollShouldSetResponder;

  // TODO: stop one short of the current responder.
  var bubbleShouldSetFrom = !responderInst ? 
  targetInst : 
  EventPluginUtils.getLowestCommonAncestor(responderInst, targetInst);

  // When capturing/bubbling the "shouldSet" event, we want to skip the target
  // (deepest ID) if it happens to be the current responder. The reasoning:
  // It's strange to get an `onMoveShouldSetResponder` when you're *already*
  // the responder.
  var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
  var shouldSetEvent = ResponderSyntheticEvent.getPooled(
  shouldSetEventType, 
  bubbleShouldSetFrom, 
  nativeEvent, 
  nativeEventTarget);

  shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
  if (skipOverBubbleShouldSetFrom) {
    EventPropagators.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);} else 
  {
    EventPropagators.accumulateTwoPhaseDispatches(shouldSetEvent);}

  var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);
  if (!shouldSetEvent.isPersistent()) {
    shouldSetEvent.constructor.release(shouldSetEvent);}


  if (!wantsResponderInst || wantsResponderInst === responderInst) {
    return null;}

  var extracted;
  var grantEvent = ResponderSyntheticEvent.getPooled(
  eventTypes.responderGrant, 
  wantsResponderInst, 
  nativeEvent, 
  nativeEventTarget);

  grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

  EventPropagators.accumulateDirectDispatches(grantEvent);
  var blockHostResponder = executeDirectDispatch(grantEvent) === true;
  if (responderInst) {

    var terminationRequestEvent = ResponderSyntheticEvent.getPooled(
    eventTypes.responderTerminationRequest, 
    responderInst, 
    nativeEvent, 
    nativeEventTarget);

    terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
    EventPropagators.accumulateDirectDispatches(terminationRequestEvent);
    var shouldSwitch = !hasDispatches(terminationRequestEvent) || 
    executeDirectDispatch(terminationRequestEvent);
    if (!terminationRequestEvent.isPersistent()) {
      terminationRequestEvent.constructor.release(terminationRequestEvent);}


    if (shouldSwitch) {
      var terminateEvent = ResponderSyntheticEvent.getPooled(
      eventTypes.responderTerminate, 
      responderInst, 
      nativeEvent, 
      nativeEventTarget);

      terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
      EventPropagators.accumulateDirectDispatches(terminateEvent);
      extracted = accumulate(extracted, [grantEvent, terminateEvent]);
      changeResponder(wantsResponderInst, blockHostResponder);} else 
    {
      var rejectEvent = ResponderSyntheticEvent.getPooled(
      eventTypes.responderReject, 
      wantsResponderInst, 
      nativeEvent, 
      nativeEventTarget);

      rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
      EventPropagators.accumulateDirectDispatches(rejectEvent);
      extracted = accumulate(extracted, rejectEvent);}} else 

  {
    extracted = accumulate(extracted, grantEvent);
    changeResponder(wantsResponderInst, blockHostResponder);}

  return extracted;}


/**
 * A transfer is a negotiation between a currently set responder and the next
 * element to claim responder status. Any start event could trigger a transfer
 * of responderInst. Any move event could trigger a transfer.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @return {boolean} True if a transfer of responder could possibly occur.
 */
function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
  return topLevelInst && (
  // responderIgnoreScroll: We are trying to migrate away from specifically
  // tracking native scroll events here and responderIgnoreScroll indicates we
  // will send topTouchCancel to handle canceling touch events instead
  topLevelType === EventConstants.topLevelTypes.topScroll && 
  !nativeEvent.responderIgnoreScroll || 
  trackedTouchCount > 0 && 
  topLevelType === EventConstants.topLevelTypes.topSelectionChange || 
  isStartish(topLevelType) || 
  isMoveish(topLevelType));}



/**
 * Returns whether or not this touch end event makes it such that there are no
 * longer any touches that started inside of the current `responderInst`.
 *
 * @param {NativeEvent} nativeEvent Native touch end event.
 * @return {boolean} Whether or not this touch end event ends the responder.
 */
function noResponderTouches(nativeEvent) {
  var touches = nativeEvent.touches;
  if (!touches || touches.length === 0) {
    return true;}

  for (var i = 0; i < touches.length; i++) {
    var activeTouch = touches[i];
    var target = activeTouch.target;
    if (target !== null && target !== undefined && target !== 0) {
      // Is the original touch location inside of the current responder?
      var targetInst = EventPluginUtils.getInstanceFromNode(target);
      if (EventPluginUtils.isAncestor(responderInst, targetInst)) {
        return false;}}}



  return true;}



var ResponderEventPlugin = { 

  /* For unit testing only */
  _getResponderID: function () {
    return responderInst ? responderInst._rootNodeID : null;}, 


  eventTypes: eventTypes, 

  /**
   * We must be resilient to `targetInst` being `null` on `touchMove` or
   * `touchEnd`. On certain platforms, this means that a native scroll has
   * assumed control and the original touch targets are destroyed.
   */
  extractEvents: function (
  topLevelType, 
  targetInst, 
  nativeEvent, 
  nativeEventTarget) 
  {
    if (isStartish(topLevelType)) {
      trackedTouchCount += 1;} else 
    if (isEndish(topLevelType)) {
      trackedTouchCount -= 1;
      invariant(
      trackedTouchCount >= 0, 
      'Ended a touch event which was not counted in trackedTouchCount.');}



    ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent, nativeEventTarget);

    var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? 
    setResponderAndExtractTransfer(
    topLevelType, 
    targetInst, 
    nativeEvent, 
    nativeEventTarget) : 
    null;
    // Responder may or may not have transferred on a new touch start/move.
    // Regardless, whoever is the responder after any potential transfer, we
    // direct all touch start/move/ends to them in the form of
    // `onResponderMove/Start/End`. These will be called for *every* additional
    // finger that move/start/end, dispatched directly to whoever is the
    // current responder at that moment, until the responder is "released".
    //
    // These multiple individual change touch events are are always bookended
    // by `onResponderGrant`, and one of
    // (`onResponderRelease/onResponderTerminate`).
    var isResponderTouchStart = responderInst && isStartish(topLevelType);
    var isResponderTouchMove = responderInst && isMoveish(topLevelType);
    var isResponderTouchEnd = responderInst && isEndish(topLevelType);
    var incrementalTouch = 
    isResponderTouchStart ? eventTypes.responderStart : 
    isResponderTouchMove ? eventTypes.responderMove : 
    isResponderTouchEnd ? eventTypes.responderEnd : 
    null;

    if (incrementalTouch) {
      var gesture = 
      ResponderSyntheticEvent.getPooled(
      incrementalTouch, 
      responderInst, 
      nativeEvent, 
      nativeEventTarget);

      gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
      EventPropagators.accumulateDirectDispatches(gesture);
      extracted = accumulate(extracted, gesture);}


    var isResponderTerminate = 
    responderInst && 
    topLevelType === EventConstants.topLevelTypes.topTouchCancel;
    var isResponderRelease = 
    responderInst && 
    !isResponderTerminate && 
    isEndish(topLevelType) && 
    noResponderTouches(nativeEvent);
    var finalTouch = 
    isResponderTerminate ? eventTypes.responderTerminate : 
    isResponderRelease ? eventTypes.responderRelease : 
    null;
    if (finalTouch) {
      var finalEvent = ResponderSyntheticEvent.getPooled(
      finalTouch, responderInst, nativeEvent, nativeEventTarget);

      finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
      EventPropagators.accumulateDirectDispatches(finalEvent);
      extracted = accumulate(extracted, finalEvent);
      changeResponder(null);}


    var numberActiveTouches = 
    ResponderTouchHistoryStore.touchHistory.numberActiveTouches;
    if (ResponderEventPlugin.GlobalInteractionHandler && 
    numberActiveTouches !== previousActiveTouches) {
      ResponderEventPlugin.GlobalInteractionHandler.onChange(
      numberActiveTouches);}


    previousActiveTouches = numberActiveTouches;

    return extracted;}, 


  GlobalResponderHandler: null, 
  GlobalInteractionHandler: null, 

  injection: { 
    /**
     * @param {{onChange: (ReactID, ReactID) => void} GlobalResponderHandler
     * Object that handles any change in responder. Use this to inject
     * integration with an existing touch handling system etc.
     */
    injectGlobalResponderHandler: function (GlobalResponderHandler) {
      ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;}, 


    /**
     * @param {{onChange: (numberActiveTouches) => void} GlobalInteractionHandler
     * Object that handles any change in the number of active touches.
     */
    injectGlobalInteractionHandler: function (GlobalInteractionHandler) {
      ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;} } };




module.exports = ResponderEventPlugin;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js":229,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js":230,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\eventPlugins\\ResponderSyntheticEvent.js":234,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\eventPlugins\\ResponderTouchHistoryStore.js":235,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\accumulate.js":288,"fbjs/lib/invariant":414,"fbjs/lib/keyOf":418}],234:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ResponderSyntheticEvent
 */

'use strict';

var SyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js');

/**
 * `touchHistory` isn't actually on the native event, but putting it in the
 * interface will ensure that it is cleaned up when pooled/destroyed. The
 * `ResponderEventPlugin` will populate it appropriately.
 */
var ResponderEventInterface = { 
  touchHistory: function (nativeEvent) {
    return null; // Actually doesn't even look at the native event.
  } };


/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native event.
 * @extends {SyntheticEvent}
 */
function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);}


SyntheticEvent.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);

module.exports = ResponderSyntheticEvent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js":106}],235:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ResponderTouchHistoryStore
 */

'use strict';

var EventPluginUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js');

var invariant = require('fbjs/lib/invariant');

var isMoveish = EventPluginUtils.isMoveish;
var isStartish = EventPluginUtils.isStartish;
var isEndish = EventPluginUtils.isEndish;

var MAX_TOUCH_BANK = 20;

/**
 * Touch position/time tracking information by touchID. Typically, we'll only
 * see IDs with a range of 1-20 (they are recycled when touches end and then
 * start again). This data is commonly needed by many different interaction
 * logic modules so precomputing it is very helpful to do once.
 * Each touch object in `touchBank` is of the following form:
 * { touchActive: boolean,
 *   startTimeStamp: number,
 *   startPageX: number,
 *   startPageY: number,
 *   currentPageX: number,
 *   currentPageY: number,
 *   currentTimeStamp: number
 * }
 */
var touchHistory = { 
  touchBank: [], 
  numberActiveTouches: 0, 
  // If there is only one active touch, we remember its location. This prevents
  // us having to loop through all of the touches all the time in the most
  // common case.
  indexOfSingleActiveTouch: -1, 
  mostRecentTimeStamp: 0 };


var timestampForTouch = function (touch) {
  // The legacy internal implementation provides "timeStamp", which has been
  // renamed to "timestamp". Let both work for now while we iron it out
  // TODO (evv): rename timeStamp to timestamp in internal code
  return touch.timeStamp || touch.timestamp;};


/**
 * TODO: Instead of making gestures recompute filtered velocity, we could
 * include a built in velocity computation that can be reused globally.
 * @param {Touch} touch Native touch object.
 */
var initializeTouchData = function (touch) {
  return { 
    touchActive: true, 
    startTimeStamp: timestampForTouch(touch), 
    startPageX: touch.pageX, 
    startPageY: touch.pageY, 
    currentPageX: touch.pageX, 
    currentPageY: touch.pageY, 
    currentTimeStamp: timestampForTouch(touch), 
    previousPageX: touch.pageX, 
    previousPageY: touch.pageY, 
    previousTimeStamp: timestampForTouch(touch) };};



var reinitializeTouchTrack = function (touchTrack, touch) {
  touchTrack.touchActive = true;
  touchTrack.startTimeStamp = timestampForTouch(touch);
  touchTrack.startPageX = touch.pageX;
  touchTrack.startPageY = touch.pageY;
  touchTrack.currentPageX = touch.pageX;
  touchTrack.currentPageY = touch.pageY;
  touchTrack.currentTimeStamp = timestampForTouch(touch);
  touchTrack.previousPageX = touch.pageX;
  touchTrack.previousPageY = touch.pageY;
  touchTrack.previousTimeStamp = timestampForTouch(touch);};


var validateTouch = function (touch) {
  var identifier = touch.identifier;
  invariant(identifier != null, 'Touch object is missing identifier');
  if (identifier > MAX_TOUCH_BANK) {
    console.warn(
    'Touch identifier ' + identifier + ' is greater than maximum ' + 
    'supported ' + MAX_TOUCH_BANK + ' which causes performance issues ' + 
    'backfilling array locations for all of the indices.');}};




var recordStartTouchData = function (touch) {
  var touchBank = touchHistory.touchBank;
  var identifier = touch.identifier;
  var touchTrack = touchBank[identifier];
  if (__DEV__) {
    validateTouch(touch);}

  if (touchTrack) {
    reinitializeTouchTrack(touchTrack, touch);} else 
  {
    touchBank[touch.identifier] = initializeTouchData(touch);}

  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);};


var recordMoveTouchData = function (touch) {
  var touchBank = touchHistory.touchBank;
  var touchTrack = touchBank[touch.identifier];
  if (__DEV__) {
    validateTouch(touch);
    invariant(touchTrack, 'Touch data should have been recorded on start');}

  touchTrack.touchActive = true;
  touchTrack.previousPageX = touchTrack.currentPageX;
  touchTrack.previousPageY = touchTrack.currentPageY;
  touchTrack.previousTimeStamp = touchTrack.currentTimeStamp;
  touchTrack.currentPageX = touch.pageX;
  touchTrack.currentPageY = touch.pageY;
  touchTrack.currentTimeStamp = timestampForTouch(touch);
  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);};


var recordEndTouchData = function (touch) {
  var touchBank = touchHistory.touchBank;
  var touchTrack = touchBank[touch.identifier];
  if (__DEV__) {
    validateTouch(touch);
    invariant(touchTrack, 'Touch data should have been recorded on start');}

  touchTrack.previousPageX = touchTrack.currentPageX;
  touchTrack.previousPageY = touchTrack.currentPageY;
  touchTrack.previousTimeStamp = touchTrack.currentTimeStamp;
  touchTrack.currentPageX = touch.pageX;
  touchTrack.currentPageY = touch.pageY;
  touchTrack.currentTimeStamp = timestampForTouch(touch);
  touchTrack.touchActive = false;
  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);};


var ResponderTouchHistoryStore = { 
  recordTouchTrack: function (topLevelType, nativeEvent) {
    var touchBank = touchHistory.touchBank;
    if (isMoveish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordMoveTouchData);} else 
    if (isStartish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordStartTouchData);
      touchHistory.numberActiveTouches = nativeEvent.touches.length;
      if (touchHistory.numberActiveTouches === 1) {
        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;}} else 

    if (isEndish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordEndTouchData);
      touchHistory.numberActiveTouches = nativeEvent.touches.length;
      if (touchHistory.numberActiveTouches === 1) {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrackToCheck = touchBank[i];
          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
            touchHistory.indexOfSingleActiveTouch = i;
            break;}}


        if (__DEV__) {
          var activeTouchData = touchBank[touchHistory.indexOfSingleActiveTouch];
          var foundActive = activeTouchData != null && !!activeTouchData.touchActive;
          invariant(foundActive, 'Cannot find single active touch');}}}}, 





  touchHistory: touchHistory };



module.exports = ResponderTouchHistoryStore;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js":229,"fbjs/lib/invariant":414}],236:[function(require,module,exports){
/**
 * @providesModule TouchHistoryMath
 */

'use strict';

var TouchHistoryMath = { 
  /**
   * This code is optimized and not intended to look beautiful. This allows
   * computing of touch centroids that have moved after `touchesChangedAfter`
   * timeStamp. You can compute the current centroid involving all touches
   * moves after `touchesChangedAfter`, or you can compute the previous
   * centroid of all touches that were moved after `touchesChangedAfter`.
   *
   * @param {TouchHistoryMath} touchHistory Standard Responder touch track
   * data.
   * @param {number} touchesChangedAfter timeStamp after which moved touches
   * are considered "actively moving" - not just "active".
   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.
   * @param {boolean} ofCurrent Compute current centroid for actively moving
   * touches vs. previous centroid of now actively moving touches.
   * @return {number} value of centroid in specified dimension.
   */
  centroidDimension: function (touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
    var touchBank = touchHistory.touchBank;
    var total = 0;
    var count = 0;

    var oneTouchData = touchHistory.numberActiveTouches === 1 ? 
    touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

    if (oneTouchData !== null) {
      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : 
        ofCurrent && !isXAxis ? oneTouchData.currentPageY : 
        !ofCurrent && isXAxis ? oneTouchData.previousPageX : 
        oneTouchData.previousPageY;
        count = 1;}} else 

    {
      for (var i = 0; i < touchBank.length; i++) {
        var touchTrack = touchBank[i];
        if (touchTrack !== null && 
        touchTrack !== undefined && 
        touchTrack.touchActive && 
        touchTrack.currentTimeStamp >= touchesChangedAfter) {
          var toAdd; // Yuck, program temporarily in invalid state.
          if (ofCurrent && isXAxis) {
            toAdd = touchTrack.currentPageX;} else 
          if (ofCurrent && !isXAxis) {
            toAdd = touchTrack.currentPageY;} else 
          if (!ofCurrent && isXAxis) {
            toAdd = touchTrack.previousPageX;} else 
          {
            toAdd = touchTrack.previousPageY;}

          total += toAdd;
          count++;}}}



    return count > 0 ? total / count : TouchHistoryMath.noCentroid;}, 


  currentCentroidXOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {
    return TouchHistoryMath.centroidDimension(
    touchHistory, 
    touchesChangedAfter, 
    true, // isXAxis
    true // ofCurrent
    );}, 


  currentCentroidYOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {
    return TouchHistoryMath.centroidDimension(
    touchHistory, 
    touchesChangedAfter, 
    false, // isXAxis
    true // ofCurrent
    );}, 


  previousCentroidXOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {
    return TouchHistoryMath.centroidDimension(
    touchHistory, 
    touchesChangedAfter, 
    true, // isXAxis
    false // ofCurrent
    );}, 


  previousCentroidYOfTouchesChangedAfter: function (touchHistory, touchesChangedAfter) {
    return TouchHistoryMath.centroidDimension(
    touchHistory, 
    touchesChangedAfter, 
    false, // isXAxis
    false // ofCurrent
    );}, 


  currentCentroidX: function (touchHistory) {
    return TouchHistoryMath.centroidDimension(
    touchHistory, 
    0, // touchesChangedAfter
    true, // isXAxis
    true // ofCurrent
    );}, 


  currentCentroidY: function (touchHistory) {
    return TouchHistoryMath.centroidDimension(
    touchHistory, 
    0, // touchesChangedAfter
    false, // isXAxis
    true // ofCurrent
    );}, 


  noCentroid: -1 };


module.exports = TouchHistoryMath;
},{}],237:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var EventPluginHub;
var EventConstants;
var ReactInstanceHandles;
var ResponderEventPlugin;
var EventPluginUtils;

var topLevelTypes;

var touch = function (nodeHandle, i) {
  return { target: nodeHandle, identifier: i };};


/**
 * @param {NodeHandle} nodeHandle @see NodeHandle. Handle of target.
 * @param {Array<Touch>} touches All active touches.
 * @param {Array<Touch>} changedTouches Only the touches that have changed.
 * @return {TouchEvent} Model of a touch event that is compliant with responder
 * system plugin.
 */
var touchEvent = function (nodeHandle, touches, changedTouches) {
  return { 
    target: nodeHandle, 
    changedTouches: changedTouches, 
    touches: touches };};



var subsequence = function (arr, indices) {
  var ret = [];
  for (var i = 0; i < indices.length; i++) {
    var index = indices[i];
    ret.push(arr[index]);}

  return ret;};


var antiSubsequence = function (arr, indices) {
  var ret = [];
  for (var i = 0; i < arr.length; i++) {
    if (indices.indexOf(i) === -1) {
      ret.push(arr[i]);}}


  return ret;};


/**
 * Helper for creating touch test config data.
 * @param allTouchHandles
 */
var _touchConfig = function (
topType, 
targetNodeHandle, 
allTouchHandles, 
changedIndices, 
eventTarget) 
{
  var allTouchObjects = allTouchHandles.map(touch);
  var changedTouchObjects = subsequence(allTouchObjects, changedIndices);
  var activeTouchObjects = 
  topType === 'topTouchStart' ? allTouchObjects : 
  topType === 'topTouchMove' ? allTouchObjects : 
  topType === 'topTouchEnd' ? antiSubsequence(allTouchObjects, changedIndices) : 
  topType === 'topTouchCancel' ? antiSubsequence(allTouchObjects, changedIndices) : 
  null;

  return { 
    nativeEvent: touchEvent(
    targetNodeHandle, 
    activeTouchObjects, 
    changedTouchObjects), 

    topLevelType: topType, 
    targetInst: idToInstance[targetNodeHandle] };};



/**
 * Creates test data for touch events using environment agnostic "node
 * handles".
 *
 * @param {NodeHandle} nodeHandle Environment agnostic handle to DOM node.
 * @param {Array<NodeHandle>} allTouchHandles Encoding of all "touches" in the
 * form of a mapping from integer (touch `identifier`) to touch target. This is
 * encoded in array form. Because of this, it is possible for two separate
 * touches (meaning two separate indices) to have the same touch target ID -
 * this corresponds to real world cases where two separate unique touches have
 * the same target. These touches don't just represent all active touches,
 * rather it also includes any touches that are not active, but are in the
 * process of being removed.
 * @param {Array<NodeHandle>} changedIndices Indices of `allTouchHandles` that
 * have changed.
 * @return {object} Config data used by test cases for extracting responder
 * events.
 */
var startConfig = function (nodeHandle, allTouchHandles, changedIndices) {
  return _touchConfig(
  topLevelTypes.topTouchStart, 
  nodeHandle, 
  allTouchHandles, 
  changedIndices, 
  nodeHandle);};



/**
 * @see `startConfig`
 */
var moveConfig = function (nodeHandle, allTouchHandles, changedIndices) {
  return _touchConfig(
  topLevelTypes.topTouchMove, 
  nodeHandle, 
  allTouchHandles, 
  changedIndices, 
  nodeHandle);};



/**
 * @see `startConfig`
 */
var endConfig = function (nodeHandle, allTouchHandles, changedIndices) {
  return _touchConfig(
  topLevelTypes.topTouchEnd, 
  nodeHandle, 
  allTouchHandles, 
  changedIndices, 
  nodeHandle);};



/**
 * Test config for events that aren't negotiation related, but rather result of
 * a negotiation.
 *
 * Returns object of the form:
 *
 *     {
 *       responderReject: {
 *         // Whatever "readableIDToID" was passed in.
 *         grandParent: {order: NA, assertEvent: null, returnVal: blah},
 *         ...
 *         child: {order: NA, assertEvent: null, returnVal: blah},
 *       }
 *       responderGrant: {
 *         grandParent: {order: NA, assertEvent: null, returnVal: blah},
 *         ...
 *         child: {order: NA, assertEvent: null, returnVal: blah}
 *       }
 *       ...
 *     }
 *
 * After this is created, a test case would configure specific event orderings
 * and optional assertions. Anything left with an `order` of `NA` will be
 * required to never be invoked (the test runner will make sure it throws if
 * ever invoked).
 *
 */
var NA = -1;
var oneEventLoopTestConfig = function (readableIDToID) {
  var ret = { 
    // Negotiation
    scrollShouldSetResponder: { bubbled: {}, captured: {} }, 
    startShouldSetResponder: { bubbled: {}, captured: {} }, 
    moveShouldSetResponder: { bubbled: {}, captured: {} }, 
    responderTerminationRequest: {}, 

    // Non-negotiation
    responderReject: {}, // These do not bubble capture.
    responderGrant: {}, 
    responderStart: {}, 
    responderMove: {}, 
    responderTerminate: {}, 
    responderEnd: {}, 
    responderRelease: {} };

  for (var eventName in ret) {
    for (var readableNodeName in readableIDToID) {
      if (ret[eventName].bubbled) {
        // Two phase
        ret[eventName].bubbled[readableNodeName] = 
        { order: NA, assertEvent: null, returnVal: undefined };
        ret[eventName].captured[readableNodeName] = 
        { order: NA, assertEvent: null, returnVal: undefined };} else 
      {
        ret[eventName][readableNodeName] = 
        { order: NA, assertEvent: null, returnVal: undefined };}}}



  return ret;};


/**
 * @param {object} eventTestConfig
 * @param {object} readableIDToID
 */
var registerTestHandlers = function (eventTestConfig, readableIDToID) {
  var runs = { dispatchCount: 0 };
  var neverFire = function (readableID, registrationName) {
    runs.dispatchCount++;
    expect('').toBe(
    'Event type: ' + registrationName + 
    '\nShould never occur on:' + readableID + 
    '\nFor event test config:\n' + JSON.stringify(eventTestConfig) + '\n');};



  var registerOneEventType = function (registrationName, eventTypeTestConfig) {
    for (var readableID in eventTypeTestConfig) {
      var nodeConfig = eventTypeTestConfig[readableID];
      var id = readableIDToID[readableID];
      var handler = nodeConfig.order === NA ? neverFire.bind(null, readableID, registrationName) : 
      // We partially apply readableID and nodeConfig, as they change in the
      // parent closure across iterations.
      function (rID, config, e) {
        expect(
        rID + '->' + registrationName + ' index:' + runs.dispatchCount++).
        toBe(
        rID + '->' + registrationName + ' index:' + config.order);

        if (config.assertEvent) {
          config.assertEvent(e);}

        return config.returnVal;}.
      bind(null, readableID, nodeConfig);
      EventPluginHub.putListener(idToInstance[id], registrationName, handler);}};


  for (var eventName in eventTestConfig) {
    var oneEventTypeTestConfig = eventTestConfig[eventName];
    var hasTwoPhase = !!oneEventTypeTestConfig.bubbled;
    if (hasTwoPhase) {
      registerOneEventType(
      ResponderEventPlugin.eventTypes[eventName].phasedRegistrationNames.bubbled, 
      oneEventTypeTestConfig.bubbled);

      registerOneEventType(
      ResponderEventPlugin.eventTypes[eventName].phasedRegistrationNames.captured, 
      oneEventTypeTestConfig.captured);} else 

    {
      registerOneEventType(
      ResponderEventPlugin.eventTypes[eventName].registrationName, 
      oneEventTypeTestConfig);}}



  return runs;};





var run = function (config, hierarchyConfig, nativeEventConfig) {
  var max = NA;
  var searchForMax = function (nodeConfig) {
    for (var readableID in nodeConfig) {
      var order = nodeConfig[readableID].order;
      max = order > max ? order : max;}};


  for (var eventName in config) {
    var eventConfig = config[eventName];
    if (eventConfig.bubbled) {
      searchForMax(eventConfig.bubbled);
      searchForMax(eventConfig.captured);} else 
    {
      searchForMax(eventConfig);}}



  // Register the handlers
  var runData = registerTestHandlers(config, hierarchyConfig);

  // Trigger the event
  var extractedEvents = ResponderEventPlugin.extractEvents(
  nativeEventConfig.topLevelType, 
  nativeEventConfig.targetInst, 
  nativeEventConfig.nativeEvent, 
  nativeEventConfig.target);


  // At this point the negotiation events have been dispatched as part of the
  // extraction process, but not the side effectful events. Below, we dispatch
  // side effectful events.
  EventPluginHub.enqueueEvents(extractedEvents);
  EventPluginHub.processEventQueue(true);

  // Ensure that every event that declared an `order`, was actually dispatched.
  expect(
  'number of events dispatched:' + runData.dispatchCount).
  toBe(
  'number of events dispatched:' + (max + 1));
  // +1 for extra ++
};

var GRANDPARENT_ID = '.0';
var PARENT_ID = '.0.0';
var CHILD_ID = '.0.0.0';
var CHILD_ID2 = '.0.0.1';

var idToInstance = {};
[GRANDPARENT_ID, PARENT_ID, CHILD_ID, CHILD_ID2].forEach(function (id) {
  idToInstance[id] = { _rootNodeID: id };});


var three = { 
  grandParent: GRANDPARENT_ID, 
  parent: PARENT_ID, 
  child: CHILD_ID };


var siblings = { 
  parent: PARENT_ID, 
  childOne: CHILD_ID, 
  childTwo: CHILD_ID2 };


describe('ResponderEventPlugin', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();

    EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
    EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
    EventPluginUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js');
    ReactInstanceHandles = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceHandles.js');
    ResponderEventPlugin = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\eventPlugins\\ResponderEventPlugin.js');

    EventPluginUtils.injection.injectComponentTree({ 
      getInstanceFromNode: function (id) {
        return idToInstance[id];}, 

      getNodeFromInstance: function (inst) {
        return inst._rootNodeID;} });



    EventPluginUtils.injection.injectTreeTraversal({ 
      isAncestor: function (a, b) {
        return ReactInstanceHandles.isAncestorIDOf(
        a._rootNodeID, 
        b._rootNodeID);}, 


      getLowestCommonAncestor: function (a, b) {
        if (!a || !b) {
          return null;}

        var commonID = ReactInstanceHandles.getFirstCommonAncestorID(
        a._rootNodeID, 
        b._rootNodeID);

        return idToInstance[commonID] || null;}, 

      getParentInstance: function (inst) {
        var id = inst._rootNodeID;
        var parentID = id.substr(0, id.lastIndexOf('.'));
        return idToInstance[parentID] || null;}, 

      traverseTwoPhase: function (target, fn, arg) {
        ReactInstanceHandles.traverseTwoPhase(
        target._rootNodeID, 
        function (id, upwards) {
          fn(idToInstance[id], upwards, arg);});} });





    topLevelTypes = EventConstants.topLevelTypes;});


  it('should do nothing when no one wants to respond', function () {
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.startShouldSetResponder.captured.child = { order: 2, returnVal: false };
    config.startShouldSetResponder.bubbled.child = { order: 3, returnVal: false };
    config.startShouldSetResponder.bubbled.parent = { order: 4, returnVal: false };
    config.startShouldSetResponder.bubbled.grandParent = { order: 5, returnVal: false };
    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);

    // Now no handlers should be called on `touchEnd`.
    config = oneEventLoopTestConfig(three);
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});



  /**
   * Simple Start Granting
   * --------------------
   */


  it('should grant responder grandParent while capturing', function () {
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: true };
    config.responderGrant.grandParent = { order: 1 };
    config.responderStart.grandParent = { order: 2 };
    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.grandParent);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.grandParent = { order: 0 };
    config.responderRelease.grandParent = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});


  it('should grant responder parent while capturing', function () {
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: true };
    config.responderGrant.parent = { order: 2 };
    config.responderStart.parent = { order: 3 };
    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.parent);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.parent = { order: 0 };
    config.responderRelease.parent = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});


  it('should grant responder child while capturing', function () {
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.startShouldSetResponder.captured.child = { order: 2, returnVal: true };
    config.responderGrant.child = { order: 3 };
    config.responderStart.child = { order: 4 };
    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.child = { order: 0 };
    config.responderRelease.child = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});


  it('should grant responder child while bubbling', function () {
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.startShouldSetResponder.captured.child = { order: 2, returnVal: false };
    config.startShouldSetResponder.bubbled.child = { order: 3, returnVal: true };
    config.responderGrant.child = { order: 4 };
    config.responderStart.child = { order: 5 };
    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.child = { order: 0 };
    config.responderRelease.child = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});


  it('should grant responder parent while bubbling', function () {
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.startShouldSetResponder.captured.child = { order: 2, returnVal: false };
    config.startShouldSetResponder.bubbled.child = { order: 3, returnVal: false };
    config.startShouldSetResponder.bubbled.parent = { order: 4, returnVal: true };
    config.responderGrant.parent = { order: 5 };
    config.responderStart.parent = { order: 6 };
    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.parent);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.parent = { order: 0 };
    config.responderRelease.parent = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});


  it('should grant responder grandParent while bubbling', function () {
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.startShouldSetResponder.captured.child = { order: 2, returnVal: false };
    config.startShouldSetResponder.bubbled.child = { order: 3, returnVal: false };
    config.startShouldSetResponder.bubbled.parent = { order: 4, returnVal: false };
    config.startShouldSetResponder.bubbled.grandParent = { order: 5, returnVal: true };
    config.responderGrant.grandParent = { order: 6 };
    config.responderStart.grandParent = { order: 7 };
    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.grandParent);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.grandParent = { order: 0 };
    config.responderRelease.grandParent = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});




  /**
   * Simple Move Granting
   * --------------------
   */

  it('should grant responder grandParent while capturing move', function () {
    var config = oneEventLoopTestConfig(three);

    config.startShouldSetResponder.captured.grandParent = { order: 0 };
    config.startShouldSetResponder.captured.parent = { order: 1 };
    config.startShouldSetResponder.captured.child = { order: 2 };
    config.startShouldSetResponder.bubbled.child = { order: 3 };
    config.startShouldSetResponder.bubbled.parent = { order: 4 };
    config.startShouldSetResponder.bubbled.grandParent = { order: 5 };
    run(config, three, startConfig(three.child, [three.child], [0]));

    config = oneEventLoopTestConfig(three);
    config.moveShouldSetResponder.captured.grandParent = { order: 0, returnVal: true };
    config.responderGrant.grandParent = { order: 1 };
    config.responderMove.grandParent = { order: 2 };
    run(config, three, moveConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.grandParent);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.grandParent = { order: 0 };
    config.responderRelease.grandParent = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});


  it('should grant responder parent while capturing move', function () {
    var config = oneEventLoopTestConfig(three);

    config.startShouldSetResponder.captured.grandParent = { order: 0 };
    config.startShouldSetResponder.captured.parent = { order: 1 };
    config.startShouldSetResponder.captured.child = { order: 2 };
    config.startShouldSetResponder.bubbled.child = { order: 3 };
    config.startShouldSetResponder.bubbled.parent = { order: 4 };
    config.startShouldSetResponder.bubbled.grandParent = { order: 5 };
    run(config, three, startConfig(three.child, [three.child], [0]));

    config = oneEventLoopTestConfig(three);
    config.moveShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.moveShouldSetResponder.captured.parent = { order: 1, returnVal: true };
    config.responderGrant.parent = { order: 2 };
    config.responderMove.parent = { order: 3 };
    run(config, three, moveConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.parent);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.parent = { order: 0 };
    config.responderRelease.parent = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});


  it('should grant responder child while capturing move', function () {
    var config = oneEventLoopTestConfig(three);

    config.startShouldSetResponder.captured.grandParent = { order: 0 };
    config.startShouldSetResponder.captured.parent = { order: 1 };
    config.startShouldSetResponder.captured.child = { order: 2 };
    config.startShouldSetResponder.bubbled.child = { order: 3 };
    config.startShouldSetResponder.bubbled.parent = { order: 4 };
    config.startShouldSetResponder.bubbled.grandParent = { order: 5 };
    run(config, three, startConfig(three.child, [three.child], [0]));

    config = oneEventLoopTestConfig(three);
    config.moveShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.moveShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.moveShouldSetResponder.captured.child = { order: 2, returnVal: true };
    config.responderGrant.child = { order: 3 };
    config.responderMove.child = { order: 4 };
    run(config, three, moveConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.child = { order: 0 };
    config.responderRelease.child = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});


  it('should grant responder child while bubbling move', function () {
    var config = oneEventLoopTestConfig(three);

    config.startShouldSetResponder.captured.grandParent = { order: 0 };
    config.startShouldSetResponder.captured.parent = { order: 1 };
    config.startShouldSetResponder.captured.child = { order: 2 };
    config.startShouldSetResponder.bubbled.child = { order: 3 };
    config.startShouldSetResponder.bubbled.parent = { order: 4 };
    config.startShouldSetResponder.bubbled.grandParent = { order: 5 };
    run(config, three, startConfig(three.child, [three.child], [0]));

    config = oneEventLoopTestConfig(three);
    config.moveShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.moveShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.moveShouldSetResponder.captured.child = { order: 2, returnVal: false };
    config.moveShouldSetResponder.bubbled.child = { order: 3, returnVal: true };
    config.responderGrant.child = { order: 4 };
    config.responderMove.child = { order: 5 };
    run(config, three, moveConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.child = { order: 0 };
    config.responderRelease.child = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});


  it('should grant responder parent while bubbling move', function () {
    var config = oneEventLoopTestConfig(three);

    config.startShouldSetResponder.captured.grandParent = { order: 0 };
    config.startShouldSetResponder.captured.parent = { order: 1 };
    config.startShouldSetResponder.captured.child = { order: 2 };
    config.startShouldSetResponder.bubbled.child = { order: 3 };
    config.startShouldSetResponder.bubbled.parent = { order: 4 };
    config.startShouldSetResponder.bubbled.grandParent = { order: 5 };
    run(config, three, startConfig(three.child, [three.child], [0]));

    config = oneEventLoopTestConfig(three);
    config.moveShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.moveShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.moveShouldSetResponder.captured.child = { order: 2, returnVal: false };
    config.moveShouldSetResponder.bubbled.child = { order: 3, returnVal: false };
    config.moveShouldSetResponder.bubbled.parent = { order: 4, returnVal: true };
    config.responderGrant.parent = { order: 5 };
    config.responderMove.parent = { order: 6 };
    run(config, three, moveConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.parent);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.parent = { order: 0 };
    config.responderRelease.parent = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});


  it('should grant responder grandParent while bubbling move', function () {
    var config = oneEventLoopTestConfig(three);

    config.startShouldSetResponder.captured.grandParent = { order: 0 };
    config.startShouldSetResponder.captured.parent = { order: 1 };
    config.startShouldSetResponder.captured.child = { order: 2 };
    config.startShouldSetResponder.bubbled.child = { order: 3 };
    config.startShouldSetResponder.bubbled.parent = { order: 4 };
    config.startShouldSetResponder.bubbled.grandParent = { order: 5 };
    run(config, three, startConfig(three.child, [three.child], [0]));

    config = oneEventLoopTestConfig(three);
    config.moveShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.moveShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.moveShouldSetResponder.captured.child = { order: 2, returnVal: false };
    config.moveShouldSetResponder.bubbled.child = { order: 3, returnVal: false };
    config.moveShouldSetResponder.bubbled.parent = { order: 4, returnVal: false };
    config.moveShouldSetResponder.bubbled.grandParent = { order: 5, returnVal: true };
    config.responderGrant.grandParent = { order: 6 };
    config.responderMove.grandParent = { order: 7 };
    run(config, three, moveConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.grandParent);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.grandParent = { order: 0 };
    config.responderRelease.grandParent = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});



  /**
   * Common ancestor tests
   * ---------------------
   */

  it('should bubble negotiation to first common ancestor of responder', function () {
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: true };
    config.responderGrant.parent = { order: 2 };
    config.responderStart.parent = { order: 3 };
    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.parent);

    // While `parent` is still responder, we create new handlers that verify
    // the ordering of propagation, restarting the count at `0`.
    config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };

    config.startShouldSetResponder.bubbled.grandParent = { order: 1, returnVal: false };
    config.responderStart.parent = { order: 2 };
    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.parent);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.parent = { order: 0 };
    config.responderRelease.parent = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});


  it('should bubble negotiation to first common ancestor of responder then transfer', function () {
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: true };
    config.responderGrant.parent = { order: 2 };
    config.responderStart.parent = { order: 3 };
    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.parent);

    config = oneEventLoopTestConfig(three);

    // Parent is responder, and responder is transferred by a second touch start
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: true };
    config.responderGrant.grandParent = { order: 1 };
    config.responderTerminationRequest.parent = { order: 2, returnVal: true };
    config.responderTerminate.parent = { order: 3 };
    config.responderStart.grandParent = { order: 4 };
    run(config, three, startConfig(three.child, [three.child, three.child], [1]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.grandParent);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.grandParent = { order: 0 };
    // one remains\ /one ended \
    run(config, three, endConfig(three.child, [three.child, three.child], [1]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.grandParent);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.grandParent = { order: 0 };
    config.responderRelease.grandParent = { order: 1 };
    run(config, three, endConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});


  /**
   * If nothing is responder, then the negotiation should propagate directly to
   * the deepest target in the second touch.
   */
  it('should negotiate with deepest target on second touch if nothing is responder', function () {
    // Initially nothing wants to become the responder
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.startShouldSetResponder.bubbled.parent = { order: 2, returnVal: false };
    config.startShouldSetResponder.bubbled.grandParent = { order: 3, returnVal: false };

    run(config, three, startConfig(three.parent, [three.parent], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);

    config = oneEventLoopTestConfig(three);

    // Now child wants to become responder. Negotiation should bubble as deep
    // as the target is because we don't find first common ancestor (with
    // current responder) because there is no current responder.
    // (Even if this is the second active touch).
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.startShouldSetResponder.captured.child = { order: 2, returnVal: false };
    config.startShouldSetResponder.bubbled.child = { order: 3, returnVal: true };
    config.responderGrant.child = { order: 4 };
    config.responderStart.child = { order: 5 };
    //                                     /  Two active touches  \  /one of them new\
    run(config, three, startConfig(three.child, [three.parent, three.child], [1]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);


    // Now we remove the original first touch, keeping the second touch that
    // started within the current responder (child). Nothing changes because
    // there's still touches that started inside of the current responder.
    config = oneEventLoopTestConfig(three);
    config.responderEnd.child = { order: 0 };
    //                                      / one ended\  /one remains \
    run(config, three, endConfig(three.child, [three.parent, three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);

    // Okay, now let's add back that first touch (nothing should change) and
    // then we'll try peeling back the touches in the opposite order to make
    // sure that first removing the second touch instantly causes responder to
    // be released.
    config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.startShouldSetResponder.bubbled.parent = { order: 2, returnVal: false };
    config.startShouldSetResponder.bubbled.grandParent = { order: 3, returnVal: false };
    // Interesting: child still gets moves even though touch target is parent!
    // Current responder gets a `responderStart` for any touch while responder.
    config.responderStart.child = { order: 4 };
    //                                           /  Two active touches  \  /one of them new\
    run(config, three, startConfig(three.parent, [three.child, three.parent], [1]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);


    // Now, move that new touch that had no effect, and did not start within
    // the current responder.
    config = oneEventLoopTestConfig(three);
    config.moveShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.moveShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.moveShouldSetResponder.bubbled.parent = { order: 2, returnVal: false };
    config.moveShouldSetResponder.bubbled.grandParent = { order: 3, returnVal: false };
    // Interesting: child still gets moves even though touch target is parent!
    // Current responder gets a `responderMove` for any touch while responder.
    config.responderMove.child = { order: 4 };
    //                                     /  Two active touches  \  /one of them moved\
    run(config, three, moveConfig(three.parent, [three.child, three.parent], [1]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);


    config = oneEventLoopTestConfig(three);
    config.responderEnd.child = { order: 0 };
    config.responderRelease.child = { order: 1 };
    //                                        /child end \ /parent remain\
    run(config, three, endConfig(three.child, [three.child, three.parent], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});



  /**
   * If nothing is responder, then the negotiation should propagate directly to
   * the deepest target in the second touch.
   */
  it('should negotiate until first common ancestor when there are siblings', function () {
    // Initially nothing wants to become the responder
    var config = oneEventLoopTestConfig(siblings);
    config.startShouldSetResponder.captured.parent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.childOne = { order: 1, returnVal: false };
    config.startShouldSetResponder.bubbled.childOne = { order: 2, returnVal: true };
    config.responderGrant.childOne = { order: 3 };
    config.responderStart.childOne = { order: 4 };

    run(config, siblings, startConfig(siblings.childOne, [siblings.childOne], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(siblings.childOne);

    // If the touch target is the sibling item, the negotiation should only
    // propagate to first common ancestor of current responder and sibling (so
    // the parent).
    config = oneEventLoopTestConfig(siblings);
    config.startShouldSetResponder.captured.parent = { order: 0, returnVal: false };
    config.startShouldSetResponder.bubbled.parent = { order: 1, returnVal: false };
    config.responderStart.childOne = { order: 2 };

    var touchConfig = 
    startConfig(siblings.childTwo, [siblings.childOne, siblings.childTwo], [1]);
    run(config, siblings, touchConfig);
    expect(ResponderEventPlugin._getResponderID()).toBe(siblings.childOne);


    // move childOne
    config = oneEventLoopTestConfig(siblings);
    config.moveShouldSetResponder.captured.parent = { order: 0, returnVal: false };
    config.moveShouldSetResponder.bubbled.parent = { order: 1, returnVal: false };
    config.responderMove.childOne = { order: 2 };
    run(config, siblings, moveConfig(siblings.childOne, [siblings.childOne, siblings.childTwo], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(siblings.childOne);

    // move childTwo: Only negotiates to `parent`.
    config = oneEventLoopTestConfig(siblings);
    config.moveShouldSetResponder.captured.parent = { order: 0, returnVal: false };
    config.moveShouldSetResponder.bubbled.parent = { order: 1, returnVal: false };
    config.responderMove.childOne = { order: 2 };
    run(config, siblings, moveConfig(siblings.childTwo, [siblings.childOne, siblings.childTwo], [1]));
    expect(ResponderEventPlugin._getResponderID()).toBe(siblings.childOne);});




  it('should notify of being rejected. responderStart/Move happens on current responder', function () {
    // Initially nothing wants to become the responder
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.startShouldSetResponder.captured.child = { order: 2, returnVal: false };
    config.startShouldSetResponder.bubbled.child = { order: 3, returnVal: true };
    config.responderGrant.child = { order: 4 };
    config.responderStart.child = { order: 5 };

    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);

    // Suppose parent wants to become responder on move, and is rejected
    config = oneEventLoopTestConfig(three);
    config.moveShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.moveShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.moveShouldSetResponder.bubbled.parent = { order: 2, returnVal: true };
    config.responderGrant.parent = { order: 3 };
    config.responderTerminationRequest.child = { order: 4, returnVal: false };
    config.responderReject.parent = { order: 5 };
    // The start/move should occur on the original responder if new one is rejected
    config.responderMove.child = { order: 6 };

    var touchConfig = 
    moveConfig(three.child, [three.child], [0]);
    run(config, three, touchConfig);
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);

    config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.startShouldSetResponder.bubbled.parent = { order: 2, returnVal: true };
    config.responderGrant.parent = { order: 3 };
    config.responderTerminationRequest.child = { order: 4, returnVal: false };
    config.responderReject.parent = { order: 5 };
    // The start/move should occur on the original responder if new one is rejected
    config.responderStart.child = { order: 6 };

    touchConfig = 
    startConfig(three.child, [three.child, three.child], [1]);
    run(config, three, touchConfig);
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);});




  it('should negotiate scroll', function () {
    // Initially nothing wants to become the responder
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.startShouldSetResponder.captured.child = { order: 2, returnVal: false };
    config.startShouldSetResponder.bubbled.child = { order: 3, returnVal: true };
    config.responderGrant.child = { order: 4 };
    config.responderStart.child = { order: 5 };

    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);

    // If the touch target is the sibling item, the negotiation should only
    // propagate to first common ancestor of current responder and sibling (so
    // the parent).
    config = oneEventLoopTestConfig(three);
    config.scrollShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.scrollShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.scrollShouldSetResponder.bubbled.parent = { order: 2, returnVal: true };
    config.responderGrant.parent = { order: 3 };
    config.responderTerminationRequest.child = { order: 4, returnVal: false };
    config.responderReject.parent = { order: 5 };

    run(config, three, { 
      topLevelType: topLevelTypes.topScroll, 
      targetInst: idToInstance[three.parent], 
      nativeEvent: {} });

    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);


    // Now lets let the scroll take control this time.
    config = oneEventLoopTestConfig(three);
    config.scrollShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.scrollShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.scrollShouldSetResponder.bubbled.parent = { order: 2, returnVal: true };
    config.responderGrant.parent = { order: 3 };
    config.responderTerminationRequest.child = { order: 4, returnVal: true };
    config.responderTerminate.child = { order: 5 };

    run(config, three, { 
      topLevelType: topLevelTypes.topScroll, 
      targetInst: idToInstance[three.parent], 
      nativeEvent: {} });

    expect(ResponderEventPlugin._getResponderID()).toBe(three.parent);});




  it('should cancel correctly', function () {
    // Initially our child becomes responder
    var config = oneEventLoopTestConfig(three);
    config.startShouldSetResponder.captured.grandParent = { order: 0, returnVal: false };
    config.startShouldSetResponder.captured.parent = { order: 1, returnVal: false };
    config.startShouldSetResponder.captured.child = { order: 2, returnVal: false };
    config.startShouldSetResponder.bubbled.child = { order: 3, returnVal: true };
    config.responderGrant.child = { order: 4 };
    config.responderStart.child = { order: 5 };

    run(config, three, startConfig(three.child, [three.child], [0]));
    expect(ResponderEventPlugin._getResponderID()).toBe(three.child);

    config = oneEventLoopTestConfig(three);
    config.responderEnd.child = { order: 0 };
    config.responderTerminate.child = { order: 1 };

    var nativeEvent = _touchConfig(
    topLevelTypes.topTouchCancel, 
    three.child, 
    [three.child], 
    [0]);

    run(config, three, nativeEvent);
    expect(ResponderEventPlugin._getResponderID()).toBe(null);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginUtils.js":229,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\eventPlugins\\ResponderEventPlugin.js":233,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceHandles.js":245}],238:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 */

'use strict';

var ReactReconciler = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js');

var ReactComponentTreeDevtool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js');
var instantiateReactComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\instantiateReactComponent.js');
var KeyEscapeUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\KeyEscapeUtils.js');
var shouldUpdateReactComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\shared\\shouldUpdateReactComponent.js');
var traverseAllChildren = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\traverseAllChildren.js');
var warning = require('fbjs/lib/warning');

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (__DEV__) {
    warning(
    keyUnique, 
    'flattenChildren(...): Encountered two children with the same key, ' + 
    '`%s`. Child keys must be unique; when two children share a key, only ' + 
    'the first child will be used.%s', 
    KeyEscapeUtils.unescape(name), 
    ReactComponentTreeDevtool.getStackAddendumByID(selfDebugID));}


  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child);}}



/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = { 
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (
  nestedChildNodes, 
  transaction, 
  context, 
  selfDebugID // __DEV__ only
  ) {
    if (nestedChildNodes == null) {
      return null;}

    var childInstances = {};

    if (__DEV__) {
      traverseAllChildren(
      nestedChildNodes, 
      function (childInsts, child, name) {return instantiateChild(
        childInsts, 
        child, 
        name, 
        selfDebugID);}, 

      childInstances);} else 

    {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);}

    return childInstances;}, 


  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (
  prevChildren, 
  nextChildren, 
  removedNodes, 
  transaction, 
  context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;}

    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;}

      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && 
      shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(
        prevChild, nextElement, transaction, context);

        nextChildren[name] = prevChild;} else 
      {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);}

        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement);
        nextChildren[name] = nextChildInstance;}}


    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && 
      !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);}}}, 




  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);}}} };






module.exports = ReactChildReconciler;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js":211,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\shared\\shouldUpdateReactComponent.js":225,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js":250,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\instantiateReactComponent.js":274,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\KeyEscapeUtils.js":276,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\traverseAllChildren.js":298,"fbjs/lib/warning":424}],239:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = { 

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null, 

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null, 

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null, 

  injection: { 
    injectEnvironment: function (environment) {
      invariant(
      !injected, 
      'ReactCompositeComponent: injectEnvironment() can only be called once.');

      ReactComponentEnvironment.unmountIDFromEnvironment = 
      environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkup = 
      environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = 
      environment.processChildrenUpdates;
      injected = true;} } };





module.exports = ReactComponentEnvironment;
},{"fbjs/lib/invariant":414}],240:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';var _assign = require('object-assign');

var ReactComponentEnvironment = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactComponentEnvironment.js');
var ReactCurrentOwner = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js');
var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');
var ReactErrorUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactErrorUtils.js');
var ReactInstanceMap = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');
var ReactNodeTypes = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactNodeTypes.js');
var ReactPropTypeLocations = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocations.js');
var ReactReconciler = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js');
var ReactUpdateQueue = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdateQueue.js');

var checkReactTypeSpec = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\checkReactTypeSpec.js');

var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shouldUpdateReactComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\shared\\shouldUpdateReactComponent.js');
var warning = require('fbjs/lib/warning');

function StatelessComponent(Component) {}

StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;};


function warnIfInvalidElement(Component, element) {
  if (__DEV__) {
    warning(
    element === null || element === false || ReactElement.isValidElement(element), 
    '%s(...): A valid React element (or null) must be returned. You may have ' + 
    'returned undefined, an array or some other invalid object.', 
    Component.displayName || Component.name || 'Component');}}




function invokeComponentDidMountWithTimer() {
  var publicInstance = this._instance;
  if (this._debugID !== 0) {
    ReactInstrumentation.debugTool.onBeginLifeCycleTimer(
    this._debugID, 
    'componentDidMount');}


  publicInstance.componentDidMount();
  if (this._debugID !== 0) {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(
    this._debugID, 
    'componentDidMount');}}




function invokeComponentDidUpdateWithTimer(prevProps, prevState, prevContext) {
  var publicInstance = this._instance;
  if (this._debugID !== 0) {
    ReactInstrumentation.debugTool.onBeginLifeCycleTimer(
    this._debugID, 
    'componentDidUpdate');}


  publicInstance.componentDidUpdate(prevProps, prevState, prevContext);
  if (this._debugID !== 0) {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(
    this._debugID, 
    'componentDidUpdate');}}




function shouldConstruct(Component) {
  return Component.prototype && Component.prototype.isReactComponent;}


/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = { 

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (__DEV__) {
      this._warnedAboutRefsInRender = false;}}, 



  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (
  transaction, 
  hostParent, 
  hostContainerInfo, 
  context) 
  {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    // Initialize the public class
    var inst = this._constructComponent(publicProps, publicContext);
    var renderedElement;

    // Support functional components
    if (!shouldConstruct(Component) && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      invariant(
      inst === null || 
      inst === false || 
      ReactElement.isValidElement(inst), 
      '%s(...): A valid React element (or null) must be returned. You may have ' + 
      'returned undefined, an array or some other invalid object.', 
      Component.displayName || Component.name || 'Component');

      inst = new StatelessComponent(Component);}


    if (__DEV__) {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        warning(
        false, 
        '%s(...): No `render` method found on the returned component ' + 
        'instance: you may have forgotten to define `render`.', 
        Component.displayName || Component.name || 'Component');}



      var propsMutated = inst.props !== publicProps;
      var componentName = 
      Component.displayName || Component.name || 'Component';

      warning(
      inst.props === undefined || !propsMutated, 
      '%s(...): When calling super() in `%s`, make sure to pass ' + 
      'up the same props that your component\'s constructor was passed.', 
      componentName, componentName);}



    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = ReactUpdateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (__DEV__) {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      warning(
      !inst.getInitialState || 
      inst.getInitialState.isReactClassApproved, 
      'getInitialState was defined on %s, a plain JavaScript class. ' + 
      'This is only supported for classes created using React.createClass. ' + 
      'Did you mean to define a state property instead?', 
      this.getName() || 'a component');

      warning(
      !inst.getDefaultProps || 
      inst.getDefaultProps.isReactClassApproved, 
      'getDefaultProps was defined on %s, a plain JavaScript class. ' + 
      'This is only supported for classes created using React.createClass. ' + 
      'Use a static property to define defaultProps instead.', 
      this.getName() || 'a component');

      warning(
      !inst.propTypes, 
      'propTypes was defined as an instance property on %s. Use a static ' + 
      'property to define propTypes instead.', 
      this.getName() || 'a component');

      warning(
      !inst.contextTypes, 
      'contextTypes was defined as an instance property on %s. Use a ' + 
      'static property to define contextTypes instead.', 
      this.getName() || 'a component');

      warning(
      typeof inst.componentShouldUpdate !== 'function', 
      '%s has a method called ' + 
      'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 
      'The name is phrased as a question because the function is ' + 
      'expected to return a value.', 
      this.getName() || 'A component');

      warning(
      typeof inst.componentDidUnmount !== 'function', 
      '%s has a method called ' + 
      'componentDidUnmount(). But there is no such lifecycle method. ' + 
      'Did you mean componentWillUnmount()?', 
      this.getName() || 'A component');

      warning(
      typeof inst.componentWillRecieveProps !== 'function', 
      '%s has a method called ' + 
      'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', 
      this.getName() || 'A component');}



    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;}

    invariant(
    typeof initialState === 'object' && !Array.isArray(initialState), 
    '%s.state: must be set to an object or null', 
    this.getName() || 'ReactCompositeComponent');


    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(
      renderedElement, 
      hostParent, 
      hostContainerInfo, 
      transaction, 
      context);} else 

    {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);}


    if (inst.componentDidMount) {
      if (__DEV__) {
        transaction.getReactMountReady().enqueue(invokeComponentDidMountWithTimer, this);} else 
      {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);}}



    return markup;}, 


  _constructComponent: function (publicProps, publicContext) {
    if (__DEV__) {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(publicProps, publicContext);} finally 
      {
        ReactCurrentOwner.current = null;}} else 

    {
      return this._constructComponentWithoutOwner(publicProps, publicContext);}}, 



  _constructComponentWithoutOwner: function (publicProps, publicContext) {
    var Component = this._currentElement.type;
    var instanceOrElement;
    if (shouldConstruct(Component)) {
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(
          this._debugID, 
          'ctor');}}



      instanceOrElement = new Component(publicProps, publicContext, ReactUpdateQueue);
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onEndLifeCycleTimer(
          this._debugID, 
          'ctor');}}} else 



    {
      // This can still be an instance in case of factory components
      // but we'll count this as time spent rendering as the more common case.
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(
          this._debugID, 
          'render');}}



      instanceOrElement = Component(publicProps, publicContext, ReactUpdateQueue);
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onEndLifeCycleTimer(
          this._debugID, 
          'render');}}}




    return instanceOrElement;}, 


  performInitialMountWithErrorHandling: function (
  renderedElement, 
  hostParent, 
  hostContainerInfo, 
  transaction, 
  context) 
  {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);} 
    catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);}

      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);}

    return markup;}, 


  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;
    if (inst.componentWillMount) {
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(
          this._debugID, 
          'componentWillMount');}}



      inst.componentWillMount();
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onEndLifeCycleTimer(
          this._debugID, 
          'componentWillMount');}}



      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);}}



    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();}


    this._renderedNodeType = ReactNodeTypes.getType(renderedElement);
    var child = this._instantiateReactComponent(
    renderedElement);

    this._renderedComponent = child;
    if (__DEV__) {
      if (child._debugID !== 0 && this._debugID !== 0) {
        ReactInstrumentation.debugTool.onSetParent(
        child._debugID, 
        this._debugID);}}




    var markup = ReactReconciler.mountComponent(
    child, 
    transaction, 
    hostParent, 
    hostContainerInfo, 
    this._processChildContext(context));


    if (__DEV__) {
      if (this._debugID !== 0) {
        ReactInstrumentation.debugTool.onSetChildren(
        this._debugID, 
        child._debugID !== 0 ? [child._debugID] : []);}}




    return markup;}, 


  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);}, 


  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;}

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(
          this._debugID, 
          'componentWillUnmount');}}



      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));} else 
      {
        inst.componentWillUnmount();}

      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onEndLifeCycleTimer(
          this._debugID, 
          'componentWillUnmount');}}}





    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;}


    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  }, 

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;}

    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];}

    return maskedContext;}, 


  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (__DEV__) {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(
        Component.contextTypes, 
        maskedContext, 
        ReactPropTypeLocations.context);}}



    return maskedContext;}, 


  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    if (__DEV__) {
      ReactInstrumentation.debugTool.onBeginProcessingChildContext();}

    var childContext = inst.getChildContext && inst.getChildContext();
    if (__DEV__) {
      ReactInstrumentation.debugTool.onEndProcessingChildContext();}

    if (childContext) {
      invariant(
      typeof Component.childContextTypes === 'object', 
      '%s.getChildContext(): childContextTypes must be defined in order to ' + 
      'use getChildContext().', 
      this.getName() || 'ReactCompositeComponent');

      if (__DEV__) {
        this._checkContextTypes(
        Component.childContextTypes, 
        childContext, 
        ReactPropTypeLocations.childContext);}


      for (var name in childContext) {
        invariant(
        name in Component.childContextTypes, 
        '%s.getChildContext(): key "%s" is not defined in childContextTypes.', 
        this.getName() || 'ReactCompositeComponent', 
        name);}


      return _assign({}, currentContext, childContext);}

    return currentContext;}, 


  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    checkReactTypeSpec(
    typeSpecs, 
    values, 
    location, 
    this.getName(), 
    null, 
    this._debugID);}, 



  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(
    transaction, 
    prevElement, 
    nextElement, 
    prevContext, 
    nextContext);}, 



  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(
      this, 
      this._pendingElement, 
      transaction, 
      this._context);} else 

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(
      transaction, 
      this._currentElement, 
      this._currentElement, 
      this._context, 
      this._context);} else 

    {
      this._updateBatchNumber = null;}}, 



  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (
  transaction, 
  prevParentElement, 
  nextParentElement, 
  prevUnmaskedContext, 
  nextUnmaskedContext) 
  {
    var inst = this._instance;
    var willReceive = false;
    var nextContext;
    var nextProps;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;} else 
    {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;}


    nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;}


    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(
          this._debugID, 
          'componentWillReceiveProps');}}



      inst.componentWillReceiveProps(nextProps, nextContext);
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onEndLifeCycleTimer(
          this._debugID, 
          'componentWillReceiveProps');}}}





    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate && inst.shouldComponentUpdate) {
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(
          this._debugID, 
          'shouldComponentUpdate');}}



      shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onEndLifeCycleTimer(
          this._debugID, 
          'shouldComponentUpdate');}}}





    if (__DEV__) {
      warning(
      shouldUpdate !== undefined, 
      '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 
      'boolean value. Make sure to return true or false.', 
      this.getName() || 'ReactCompositeComponent');}



    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
      nextParentElement, 
      nextProps, 
      nextState, 
      nextContext, 
      transaction, 
      nextUnmaskedContext);} else 

    {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;}}, 



  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;}


    if (replace && queue.length === 1) {
      return queue[0];}


    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(
      nextState, 
      typeof partial === 'function' ? 
      partial.call(inst, nextState, props, context) : 
      partial);}



    return nextState;}, 


  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (
  nextElement, 
  nextProps, 
  nextState, 
  nextContext, 
  transaction, 
  unmaskedContext) 
  {
    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;}


    if (inst.componentWillUpdate) {
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onBeginLifeCycleTimer(
          this._debugID, 
          'componentWillUpdate');}}



      inst.componentWillUpdate(nextProps, nextState, nextContext);
      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onEndLifeCycleTimer(
          this._debugID, 
          'componentWillUpdate');}}}





    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (__DEV__) {
        transaction.getReactMountReady().enqueue(
        invokeComponentDidUpdateWithTimer.bind(this, prevProps, prevState, prevContext), 
        this);} else 

      {
        transaction.getReactMountReady().enqueue(
        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), 
        inst);}}}, 





  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(
      prevComponentInstance, 
      nextRenderedElement, 
      transaction, 
      this._processChildContext(context));} else 

    {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      this._renderedNodeType = ReactNodeTypes.getType(nextRenderedElement);
      var child = this._instantiateReactComponent(
      nextRenderedElement);

      this._renderedComponent = child;
      if (__DEV__) {
        if (child._debugID !== 0 && this._debugID !== 0) {
          ReactInstrumentation.debugTool.onSetParent(
          child._debugID, 
          this._debugID);}}




      var nextMarkup = ReactReconciler.mountComponent(
      child, 
      transaction, 
      this._hostParent, 
      this._hostContainerInfo, 
      this._processChildContext(context));


      if (__DEV__) {
        if (this._debugID !== 0) {
          ReactInstrumentation.debugTool.onSetChildren(
          this._debugID, 
          child._debugID !== 0 ? [child._debugID] : []);}}




      this._replaceNodeWithMarkup(
      oldHostNode, 
      nextMarkup, 
      prevComponentInstance);}}, 




  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(
    oldHostNode, 
    nextMarkup, 
    prevInstance);}, 



  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;

    if (__DEV__) {
      if (this._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeginLifeCycleTimer(
        this._debugID, 
        'render');}}



    var renderedComponent = inst.render();
    if (__DEV__) {
      if (this._debugID !== 0) {
        ReactInstrumentation.debugTool.onEndLifeCycleTimer(
        this._debugID, 
        'render');}}




    if (__DEV__) {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedComponent === undefined && 
      inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;}}



    return renderedComponent;}, 


  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedComponent;
    if (__DEV__ || !(this._instance instanceof StatelessComponent)) {
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = 
        this._renderValidatedComponentWithoutOwnerOrContext();} finally 
      {
        ReactCurrentOwner.current = null;}} else 

    {
      renderedComponent = 
      this._renderValidatedComponentWithoutOwnerOrContext();}

    invariant(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false || 
    ReactElement.isValidElement(renderedComponent), 
    '%s.render(): A valid React element (or null) must be returned. You may have ' + 
    'returned undefined, an array or some other invalid object.', 
    this.getName() || 'ReactCompositeComponent');


    return renderedComponent;}, 


  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    invariant(inst != null, 'Stateless function components cannot have refs.');
    var publicComponentInstance = component.getPublicInstance();
    if (__DEV__) {
      var componentName = component && component.getName ? 
      component.getName() : 'a component';
      warning(publicComponentInstance != null, 
      'Stateless function components cannot be given refs ' + 
      '(See ref "%s" in %s created by %s). ' + 
      'Attempts to access this ref will fail.', 
      ref, 
      componentName, 
      this.getName());}


    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;}, 


  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];}, 


  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return (
      type.displayName || constructor && constructor.displayName || 
      type.name || constructor && constructor.name || 
      null);}, 



  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (inst instanceof StatelessComponent) {
      return null;}

    return inst;}, 


  // Stub
  _instantiateReactComponent: null };



var ReactCompositeComponent = { 

  Mixin: ReactCompositeComponentMixin };



module.exports = ReactCompositeComponent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js":38,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypeLocations.js":46,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\checkReactTypeSpec.js":49,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\shared\\shouldUpdateReactComponent.js":225,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactComponentEnvironment.js":239,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js":246,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js":250,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdateQueue.js":254,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactErrorUtils.js":278,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactNodeTypes.js":280,"fbjs/lib/emptyObject":407,"fbjs/lib/invariant":414,"fbjs/lib/warning":424,"object-assign":425}],241:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';var _assign = require('object-assign');

var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');
var Transaction = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\Transaction.js');

var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = { 
  initialize: emptyFunction, 
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;} };



var FLUSH_BATCHED_UPDATES = { 
  initialize: emptyFunction, 
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates) };


var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();}


_assign(
ReactDefaultBatchingStrategyTransaction.prototype, 
Transaction.Mixin, 
{ 
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;} });




var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = { 
  isBatchingUpdates: false, 

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d, e);} else 
    {
      transaction.perform(callback, null, a, b, c, d, e);}} };




module.exports = ReactDefaultBatchingStrategy;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\Transaction.js":281,"fbjs/lib/emptyFunction":406,"object-assign":425}],242:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var emptyComponentFactory;

var ReactEmptyComponentInjection = { 
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;} };



var ReactEmptyComponent = { 
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);} };



ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{}],243:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);}


var ReactEventEmitterMixin = { 

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (
  topLevelType, 
  targetInst, 
  nativeEvent, 
  nativeEventTarget) {
    var events = EventPluginHub.extractEvents(
    topLevelType, 
    targetInst, 
    nativeEvent, 
    nativeEventTarget);

    runEventQueueInBatch(events);} };



module.exports = ReactEventEmitterMixin;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227}],244:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactHostComponent
 */

'use strict';var _assign = require('object-assign');

var invariant = require('fbjs/lib/invariant');

var genericComponentClass = null;
// This registry keeps track of wrapper classes around host tags.
var tagToComponentClass = {};
var textComponentClass = null;

var ReactHostComponentInjection = { 
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;}, 

  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;}, 

  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function (componentClasses) {
    _assign(tagToComponentClass, componentClasses);} };



/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  invariant(
  genericComponentClass, 
  'There is no registered component for the tag %s', 
  element.type);

  return new genericComponentClass(element);}


/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);}


/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;}


var ReactHostComponent = { 
  createInternalComponent: createInternalComponent, 
  createInstanceForText: createInstanceForText, 
  isTextComponent: isTextComponent, 
  injection: ReactHostComponentInjection };


module.exports = ReactHostComponent;
},{"fbjs/lib/invariant":414,"object-assign":425}],245:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 10000;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);}


/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;}


/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || 
  id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;}



/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 && 
    isBoundary(descendantID, ancestorID.length));}



/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';}


/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  invariant(
  isValidID(ancestorID) && isValidID(destinationID), 
  'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', 
  ancestorID, 
  destinationID);

  invariant(
  isAncestorIDOf(ancestorID, destinationID), 
  'getNextDescendantID(...): React has made an invalid assumption about ' + 
  'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', 
  ancestorID, 
  destinationID);

  if (ancestorID === destinationID) {
    return ancestorID;}

  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;}}


  return destinationID.substr(0, i);}


/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';}

  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;} else 
    if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;}}


  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  invariant(
  isValidID(longestCommonID), 
  'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', 
  oneID, 
  twoID, 
  longestCommonID);

  return longestCommonID;}


/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {*} arg Argument to invoke the callback with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  invariant(
  start !== stop, 
  'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', 
  start);

  var traverseUp = isAncestorIDOf(stop, start);
  invariant(
  traverseUp || isAncestorIDOf(start, stop), 
  'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 
  'not have a parent path.', 
  start, 
  stop);

  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start;; /* until break */id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);}

    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;}

    invariant(
    depth++ < MAX_TREE_DEPTH, 
    'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 
    'traversing the React DOM ID tree. This may be due to malformed IDs: %s', 
    start, stop, id);}}




/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = { 

  /**
   * Constructs a React root ID
   * @param {number} index A unique integer
   * @return {string} A React root ID.
   */
  createReactRootID: function (index) {
    return getReactRootIDString(index);}, 


  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function (rootID, name) {
    return rootID + name;}, 


  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function (id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;}

    return null;}, 


  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);}

    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);}}, 



  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);}}, 



  /**
   * Same as `traverseTwoPhase` but skips the `targetID`.
   */
  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, true);
      traverseParentPath(targetID, '', cb, arg, true, true);}}, 



  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function (targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);}, 


  getFirstCommonAncestorID: getFirstCommonAncestorID, 

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID, 

  isAncestorIDOf: isAncestorIDOf, 

  SEPARATOR: SEPARATOR };



module.exports = ReactInstanceHandles;
},{"fbjs/lib/invariant":414}],246:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = { 

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;}, 


  get: function (key) {
    return key._reactInternalInstance;}, 


  has: function (key) {
    return key._reactInternalInstance !== undefined;}, 


  set: function (key, value) {
    key._reactInternalInstance = value;} };




module.exports = ReactInstanceMap;
},{}],247:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 */

'use strict';

var ReactComponentEnvironment = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactComponentEnvironment.js');
var ReactInstanceMap = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');
var ReactMultiChildUpdateTypes = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactMultiChildUpdateTypes.js');

var ReactCurrentOwner = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js');
var ReactReconciler = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js');
var ReactChildReconciler = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactChildReconciler.js');

var emptyFunction = require('fbjs/lib/emptyFunction');
var flattenChildren = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\flattenChildren.js');
var invariant = require('fbjs/lib/invariant');

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return { 
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP, 
    content: markup, 
    fromIndex: null, 
    fromNode: null, 
    toIndex: toIndex, 
    afterNode: afterNode };}



/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return { 
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING, 
    content: null, 
    fromIndex: child._mountIndex, 
    fromNode: ReactReconciler.getHostNode(child), 
    toIndex: toIndex, 
    afterNode: afterNode };}



/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return { 
    type: ReactMultiChildUpdateTypes.REMOVE_NODE, 
    content: null, 
    fromIndex: child._mountIndex, 
    fromNode: node, 
    toIndex: null, 
    afterNode: null };}



/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return { 
    type: ReactMultiChildUpdateTypes.SET_MARKUP, 
    content: markup, 
    fromIndex: null, 
    fromNode: null, 
    toIndex: null, 
    afterNode: null };}



/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return { 
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT, 
    content: textContent, 
    fromIndex: null, 
    fromNode: null, 
    toIndex: null, 
    afterNode: null };}



/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);}

  return queue;}


/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(
  inst, 
  updateQueue);}



var setParentForInstrumentation = emptyFunction;
var setChildrenForInstrumentation = emptyFunction;
if (__DEV__) {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;}}


    return inst._debugID;};

  setParentForInstrumentation = function (child) {
    if (child._debugID !== 0) {
      ReactInstrumentation.debugTool.onSetParent(
      child._debugID, 
      getDebugID(this));}};



  setChildrenForInstrumentation = function (children) {
    ReactInstrumentation.debugTool.onSetChildren(
    getDebugID(this), 
    children ? Object.keys(children).map(function (key) {return children[key]._debugID;}) : []);};}




/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = { 

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: { 

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (__DEV__) {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(
            nestedChildren, transaction, context, this._debugID);} finally 

          {
            ReactCurrentOwner.current = null;}}}



      return ReactChildReconciler.instantiateChildren(
      nestedChildren, transaction, context);}, 



    _reconcilerUpdateChildren: function (
    prevChildren, 
    nextNestedChildrenElements, 
    removedNodes, 
    transaction, 
    context) 
    {
      var nextChildren;
      if (__DEV__) {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, this._debugID);} finally 
          {
            ReactCurrentOwner.current = null;}

          ReactChildReconciler.updateChildren(
          prevChildren, nextChildren, removedNodes, transaction, context);

          return nextChildren;}}


      nextChildren = flattenChildren(nextNestedChildrenElements);
      ReactChildReconciler.updateChildren(
      prevChildren, nextChildren, removedNodes, transaction, context);

      return nextChildren;}, 


    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(
      nestedChildren, transaction, context);

      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          if (__DEV__) {
            setParentForInstrumentation.call(this, child);}

          var mountImage = ReactReconciler.mountComponent(
          child, 
          transaction, 
          this, 
          this._hostContainerInfo, 
          context);

          child._mountIndex = index++;
          mountImages.push(mountImage);}}



      if (__DEV__) {
        setChildrenForInstrumentation.call(this, children);}


      return mountImages;}, 


    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
          invariant(false, 'updateTextContent called on non-empty component.');}}


      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);}, 


    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
          invariant(false, 'updateTextContent called on non-empty component.');}}


      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);}, 


    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);}, 


    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var nextChildren = this._reconcilerUpdateChildren(
      prevChildren, 
      nextNestedChildrenElements, 
      removedNodes, 
      transaction, 
      context);

      if (!nextChildren && !prevChildren) {
        return;}

      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;}

        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(
          updates, 
          this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));

          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;} else 
        {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(
          updates, 
          this._mountChildAtIndex(
          nextChild, 
          lastPlacedNode, 
          nextIndex, 
          transaction, 
          context));}



        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);}

      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(
          updates, 
          this._unmountChild(prevChildren[name], removedNodes[name]));}}



      if (updates) {
        processQueue(this, updates);}

      this._renderedChildren = nextChildren;

      if (__DEV__) {
        setChildrenForInstrumentation.call(this, nextChildren);}}, 



    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;}, 


    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);}}, 



    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);}, 


    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);}, 


    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (
    child, 
    afterNode, 
    index, 
    transaction, 
    context) {
      var mountImage = ReactReconciler.mountComponent(
      child, 
      transaction, 
      this, 
      this._hostContainerInfo, 
      context);

      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);}, 


    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;} } };






module.exports = ReactMultiChild;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js":38,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactChildReconciler.js":238,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactComponentEnvironment.js":239,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js":246,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactMultiChildUpdateTypes.js":248,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js":250,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\flattenChildren.js":293,"fbjs/lib/emptyFunction":406,"fbjs/lib/invariant":414}],248:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({ 
  INSERT_MARKUP: null, 
  MOVE_EXISTING: null, 
  REMOVE_NODE: null, 
  SET_MARKUP: null, 
  TEXT_CONTENT: null });


module.exports = ReactMultiChildUpdateTypes;
},{"fbjs/lib/keyMirror":417}],249:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = { 

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function (object) {
    return !!(
    object && 
    typeof object.attachRef === 'function' && 
    typeof object.detachRef === 'function');}, 



  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    invariant(
    ReactOwner.isValidOwner(owner), 
    'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 
    'be adding a ref to a component that was not created inside a component\'s ' + 
    '`render` method, or you have multiple copies of React loaded ' + 
    '(details: https://fb.me/react-refs-must-have-owner).');

    owner.attachRef(ref, component);}, 


  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    invariant(
    ReactOwner.isValidOwner(owner), 
    'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 
    'be removing a ref to a component that was not created inside a component\'s ' + 
    '`render` method, or you have multiple copies of React loaded ' + 
    '(details: https://fb.me/react-refs-must-have-owner).');

    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);}} };





module.exports = ReactOwner;
},{"fbjs/lib/invariant":414}],250:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactRef.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');

var invariant = require('fbjs/lib/invariant');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);}


var ReactReconciler = { 

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (
  internalInstance, 
  transaction, 
  hostParent, 
  hostContainerInfo, 
  context) 
  {
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(
        internalInstance._debugID, 
        internalInstance._currentElement);

        ReactInstrumentation.debugTool.onBeginReconcilerTimer(
        internalInstance._debugID, 
        'mountComponent');}}



    var markup = internalInstance.mountComponent(
    transaction, 
    hostParent, 
    hostContainerInfo, 
    context);

    if (internalInstance._currentElement && 
    internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);}

    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onEndReconcilerTimer(
        internalInstance._debugID, 
        'mountComponent');

        ReactInstrumentation.debugTool.onMountComponent(
        internalInstance._debugID);}}



    return markup;}, 


  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();}, 


  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeginReconcilerTimer(
        internalInstance._debugID, 
        'unmountComponent');}}



    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onEndReconcilerTimer(
        internalInstance._debugID, 
        'unmountComponent');

        ReactInstrumentation.debugTool.onUnmountComponent(
        internalInstance._debugID);}}}, 





  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (
  internalInstance, nextElement, transaction, context) 
  {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && 
    context === internalInstance._context) 
    {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;}


    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(
        internalInstance._debugID, 
        nextElement);

        ReactInstrumentation.debugTool.onBeginReconcilerTimer(
        internalInstance._debugID, 
        'receiveComponent');}}




    var refsChanged = ReactRef.shouldUpdateRefs(
    prevElement, 
    nextElement);


    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);}


    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && 
    internalInstance._currentElement && 
    internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);}


    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onEndReconcilerTimer(
        internalInstance._debugID, 
        'receiveComponent');

        ReactInstrumentation.debugTool.onUpdateComponent(
        internalInstance._debugID);}}}, 





  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (
  internalInstance, 
  transaction, 
  updateBatchNumber) 
  {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      invariant(
      internalInstance._updateBatchNumber == null || 
      internalInstance._updateBatchNumber === updateBatchNumber + 1, 
      'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 
      'pending %s)', 
      updateBatchNumber, 
      internalInstance._updateBatchNumber);

      return;}

    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeginReconcilerTimer(
        internalInstance._debugID, 
        'performUpdateIfNecessary');

        ReactInstrumentation.debugTool.onBeforeUpdateComponent(
        internalInstance._debugID, 
        internalInstance._currentElement);}}



    internalInstance.performUpdateIfNecessary(transaction);
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onEndReconcilerTimer(
        internalInstance._debugID, 
        'performUpdateIfNecessary');

        ReactInstrumentation.debugTool.onUpdateComponent(
        internalInstance._debugID);}}} };







module.exports = ReactReconciler;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactRef.js":251,"fbjs/lib/invariant":414}],251:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactOwner.js');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());} else 
  {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);}}



function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);} else 
  {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);}}



ReactRef.attachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;}

  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);}};



ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;

  return (
    // This has a few false positives w/r/t empty components.
    prevEmpty || nextEmpty || 
    nextElement.ref !== prevElement.ref || 
    // If owner changes but we have an unchanged function ref, don't update refs
    typeof nextElement.ref === 'string' && 
    nextElement._owner !== prevElement._owner);};



ReactRef.detachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;}

  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);}};



module.exports = ReactRef;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactOwner.js":249}],252:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactSimpleEmptyComponent
 */

'use strict';var _assign = require('object-assign');

var ReactReconciler = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js');


var ReactSimpleEmptyComponent = function (placeholderElement, instantiate) {
  this._currentElement = null;
  this._renderedComponent = instantiate(placeholderElement);};

_assign(ReactSimpleEmptyComponent.prototype, { 
  mountComponent: function (
  transaction, 
  hostParent, 
  hostContainerInfo, 
  context) 
  {
    return ReactReconciler.mountComponent(
    this._renderedComponent, 
    transaction, 
    hostParent, 
    hostContainerInfo, 
    context);}, 


  receiveComponent: function () {}, 

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);}, 

  unmountComponent: function () {
    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;} });



module.exports = ReactSimpleEmptyComponent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js":250,"object-assign":425}],253:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactStateSetters
 */

'use strict';

var ReactStateSetters = { 
  /**
   * Returns a function that calls the provided function, and uses the result
   * of that to set the component's state.
   *
   * @param {ReactCompositeComponent} component
   * @param {function} funcReturningState Returned callback uses this to
   *                                      determine how to update state.
   * @return {function} callback that when invoked uses funcReturningState to
   *                    determined the object literal to setState.
   */
  createStateSetter: function (component, funcReturningState) {
    return function (a, b, c, d, e, f) {
      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
      if (partialState) {
        component.setState(partialState);}};}, 




  /**
   * Returns a single-argument callback that can be used to update a single
   * key in the component's state.
   *
   * Note: this is memoized function, which makes it inexpensive to call.
   *
   * @param {ReactCompositeComponent} component
   * @param {string} key The key in the state that you should update.
   * @return {function} callback of 1 argument which calls setState() with
   *                    the provided keyName and callback argument.
   */
  createStateKeySetter: function (component, key) {
    // Memoize the setters.
    var cache = component.__keySetters || (component.__keySetters = {});
    return cache[key] || (cache[key] = createStateKeySetter(component, key));} };



function createStateKeySetter(component, key) {
  // Partial state is allocated outside of the function closure so it can be
  // reused with every call, avoiding memory allocation when this function
  // is called.
  var partialState = {};
  return function stateKeySetter(value) {
    partialState[key] = value;
    component.setState(partialState);};}



ReactStateSetters.Mixin = { 
  /**
   * Returns a function that calls the provided function, and uses the result
   * of that to set the component's state.
   *
   * For example, these statements are equivalent:
   *
   *   this.setState({x: 1});
   *   this.createStateSetter(function(xValue) {
   *     return {x: xValue};
   *   })(1);
   *
   * @param {function} funcReturningState Returned callback uses this to
   *                                      determine how to update state.
   * @return {function} callback that when invoked uses funcReturningState to
   *                    determined the object literal to setState.
   */
  createStateSetter: function (funcReturningState) {
    return ReactStateSetters.createStateSetter(this, funcReturningState);}, 


  /**
   * Returns a single-argument callback that can be used to update a single
   * key in the component's state.
   *
   * For example, these statements are equivalent:
   *
   *   this.setState({x: 1});
   *   this.createStateKeySetter('x')(1);
   *
   * Note: this is memoized function, which makes it inexpensive to call.
   *
   * @param {string} key The key in the state that you should update.
   * @return {function} callback of 1 argument which calls setState() with
   *                    the provided keyName and callback argument.
   */
  createStateKeySetter: function (key) {
    return ReactStateSetters.createStateKeySetter(this, key);} };



module.exports = ReactStateSetters;
},{}],254:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactCurrentOwner = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js');
var ReactInstanceMap = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);}


function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;}

  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';}

  return displayName;}


function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (__DEV__) {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      warning(
      !callerName, 
      '%s(...): Can only update a mounted or mounting component. ' + 
      'This usually means you called %s() on an unmounted component. ' + 
      'This is a no-op. Please check the code for the %s component.', 
      callerName, 
      callerName, 
      publicInstance.constructor.displayName);}


    return null;}


  if (__DEV__) {
    warning(
    ReactCurrentOwner.current == null, 
    '%s(...): Cannot update during an existing state transition (such as ' + 
    'within `render` or another component\'s constructor). Render methods ' + 
    'should be a pure function of props and state; constructor ' + 
    'side-effects are an anti-pattern, but can be moved to ' + 
    '`componentWillMount`.', 
    callerName);}



  return internalInstance;}


/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = { 

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (__DEV__) {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        warning(
        owner._warnedAboutRefsInRender, 
        '%s is accessing isMounted inside its render() function. ' + 
        'render() should be a pure function of props and state. It should ' + 
        'never access something that requires stale data from the previous ' + 
        'render, such as refs. Move this logic to componentDidMount and ' + 
        'componentDidUpdate instead.', 
        owner.getName() || 'A component');

        owner._warnedAboutRefsInRender = true;}}


    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;} else 
    {
      return false;}}, 



  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;}


    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);} else 
    {
      internalInstance._pendingCallbacks = [callback];}

    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);}, 


  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);} else 
    {
      internalInstance._pendingCallbacks = [callback];}

    enqueueUpdate(internalInstance);}, 


  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(
    publicInstance, 
    'forceUpdate');


    if (!internalInstance) {
      return;}


    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);}, 


  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(
    publicInstance, 
    'replaceState');


    if (!internalInstance) {
      return;}


    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);}, 


  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if (__DEV__) {
      ReactInstrumentation.debugTool.onSetState();
      warning(
      partialState != null, 
      'setState(...): You passed an undefined or null state object; ' + 
      'instead, use forceUpdate().');}



    var internalInstance = getInternalInstanceReadyForUpdate(
    publicInstance, 
    'setState');


    if (!internalInstance) {
      return;}


    var queue = 
    internalInstance._pendingStateQueue || (
    internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);}, 


  enqueueElementInternal: function (internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);}, 


  validateCallback: function (callback, callerName) {
    invariant(
    !callback || typeof callback === 'function', 
    '%s(...): Expected the last optional `callback` argument to be a ' + 
    'function. Instead received: %s.', 
    callerName, 
    formatUnexpectedArgument(callback));} };





module.exports = ReactUpdateQueue;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js":38,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js":246,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"fbjs/lib/invariant":414,"fbjs/lib/warning":424}],255:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';var _assign = require('object-assign');

var CallbackQueue = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\CallbackQueue.js');
var PooledClass = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js');
var ReactFeatureFlags = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactFeatureFlags.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');
var ReactReconciler = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js');
var Transaction = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\Transaction.js');

var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  invariant(
  ReactUpdates.ReactReconcileTransaction && batchingStrategy, 
  'ReactUpdates: must inject a reconcile transaction class and batching ' + 
  'strategy');}



var NESTED_UPDATES = { 
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;}, 

  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();} else 
    {
      dirtyComponents.length = 0;}} };




var UPDATE_QUEUEING = { 
  initialize: function () {
    this.callbackQueue.reset();}, 

  close: function () {
    this.callbackQueue.notifyAll();} };



var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);}



_assign(
ReactUpdatesFlushTransaction.prototype, 
Transaction.Mixin, 
{ 
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;}, 


  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;}, 


  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
    this, 
    this.reconcileTransaction.perform, 
    this.reconcileTransaction, 
    method, 
    scope, 
    a);} });





PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);}


/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;}


function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  invariant(
  len === dirtyComponents.length, 
  'Expected flush transaction\'s stored dirty-components length (%s) to ' + 
  'match dirty-components array length (%s).', 
  len, 
  dirtyComponents.length);


  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (
      component._currentElement.props === 
      component._renderedComponent._currentElement) 
      {
        namedComponent = component._renderedComponent;}

      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);}


    ReactReconciler.performUpdateIfNecessary(
    component, 
    transaction.reconcileTransaction, 
    updateBatchNumber);


    if (markerName) {
      console.timeEnd(markerName);}


    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(
        callbacks[j], 
        component.getPublicInstance());}}}}






var flushBatchedUpdates = function () {
  if (__DEV__) {
    ReactInstrumentation.debugTool.onBeginFlush();}


  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);}


    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);}}



  if (__DEV__) {
    ReactInstrumentation.debugTool.onEndFlush();}};



/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;}


  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;}}



/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  invariant(
  batchingStrategy.isBatchingUpdates, 
  'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 
  'updates are not being batched.');

  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;}


var ReactUpdatesInjection = { 
  injectReconcileTransaction: function (ReconcileTransaction) {
    invariant(
    ReconcileTransaction, 
    'ReactUpdates: must provide a reconcile transaction class');

    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;}, 


  injectBatchingStrategy: function (_batchingStrategy) {
    invariant(
    _batchingStrategy, 
    'ReactUpdates: must provide a batching strategy');

    invariant(
    typeof _batchingStrategy.batchedUpdates === 'function', 
    'ReactUpdates: must provide a batchedUpdates() function');

    invariant(
    typeof _batchingStrategy.isBatchingUpdates === 'boolean', 
    'ReactUpdates: must provide an isBatchingUpdates boolean attribute');

    batchingStrategy = _batchingStrategy;} };



var ReactUpdates = { 
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null, 

  batchedUpdates: batchedUpdates, 
  enqueueUpdate: enqueueUpdate, 
  flushBatchedUpdates: flushBatchedUpdates, 
  injection: ReactUpdatesInjection, 
  asap: asap };


module.exports = ReactUpdates;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js":250,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\CallbackQueue.js":275,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js":277,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactFeatureFlags.js":279,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\Transaction.js":281,"fbjs/lib/invariant":414,"object-assign":425}],256:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

// NOTE: We're explicitly not using JSX here. This is intended to test
// the current stack addendum without having source location added by babel.

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactChildReconciler-test.js';

var React;
var ReactTestUtils;

describe('ReactChildReconciler', function () {
  function normalizeCodeLocInfo(str) {
    return str.replace(/\(at .+?:\d+\)/g, '(at **)');}


  beforeEach(function () {
    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  it('warns for duplicated keys', function () {
    spyOn(console, 'error');

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 37 } }, [React.createElement('div', { key: '1', __source: { fileName: _jsxFileName, lineNumber: 37 } }), React.createElement('div', { key: '1', __source: { fileName: _jsxFileName, lineNumber: 37 } })]);} });



    ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 41 } }));

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Child keys must be unique; when two children share a key, only the first child will be used.');});



  it('warns for duplicated keys with component stack info', function () {
    spyOn(console, 'error');

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 54 } }, [React.createElement('div', { key: '1', __source: { fileName: _jsxFileName, lineNumber: 54 } }), React.createElement('div', { key: '1', __source: { fileName: _jsxFileName, lineNumber: 54 } })]);} });



    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return React.cloneElement(this.props.child);} });



    var GrandParent = React.createClass({ displayName: 'GrandParent', 
      render: function () {
        return React.createElement(Parent, { child: React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 66 } }), __source: { fileName: _jsxFileName, lineNumber: 66 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(GrandParent, { __source: { fileName: _jsxFileName, lineNumber: 70 } }));

    expect(console.error.calls.count()).toBe(1);
    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
    'Warning: flattenChildren(...): ' + 
    'Encountered two children with the same key, `1`. ' + 
    'Child keys must be unique; when two children share a key, ' + 
    'only the first child will be used.\n' + 
    '    in div (at **)\n' + 
    '    in Component (at **)\n' + 
    '    in Parent (at **)\n' + 
    '    in GrandParent (at **)');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],257:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactComponent-test.js';

var React;
var ReactDOM;
var ReactTestUtils;

describe('ReactComponent', function () {
  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  it('should throw on invalid render targets', function () {
    var container = document.createElement('div');
    // jQuery objects are basically arrays; people often pass them in by mistake
    expect(function () {
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 29 } }), [container]);}).
    toThrowError(
    '_registerComponent(...): Target container is not a DOM element.');


    expect(function () {
      ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 35 } }), null);}).
    toThrowError(
    '_registerComponent(...): Target container is not a DOM element.');});



  it('should throw when supplying a ref outside of render method', function () {
    var instance = React.createElement('div', { ref: 'badDiv', __source: { fileName: _jsxFileName, lineNumber: 42 } });
    expect(function () {
      instance = ReactTestUtils.renderIntoDocument(instance);}).
    toThrow();});


  it('should support refs on owned components', function () {
    var innerObj = {};
    var outerObj = {};

    var Wrapper = React.createClass({ displayName: 'Wrapper', 

      getObject: function () {
        return this.props.object;}, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 59 } }, this.props.children);} });




    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        var inner = React.createElement(Wrapper, { object: innerObj, ref: 'inner', __source: { fileName: _jsxFileName, lineNumber: 66 } });
        var outer = React.createElement(Wrapper, { object: outerObj, ref: 'outer', __source: { fileName: _jsxFileName, lineNumber: 67 } }, inner);
        return outer;}, 

      componentDidMount: function () {
        expect(this.refs.inner.getObject()).toEqual(innerObj);
        expect(this.refs.outer.getObject()).toEqual(outerObj);} });



    var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 76 } });
    instance = ReactTestUtils.renderIntoDocument(instance);});


  it('should not have refs on unmounted components', function () {
    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 83 } }, React.createElement('div', { ref: 'test', __source: { fileName: _jsxFileName, lineNumber: 83 } }));}, 

      componentDidMount: function () {
        expect(this.refs && this.refs.test).toEqual(undefined);} });


    var Child = React.createClass({ displayName: 'Child', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 91 } });} });



    var instance = React.createElement(Parent, { child: React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 95 } }), __source: { fileName: _jsxFileName, lineNumber: 95 } });
    instance = ReactTestUtils.renderIntoDocument(instance);});


  it('should support new-style refs', function () {
    var innerObj = {};
    var outerObj = {};

    var Wrapper = React.createClass({ displayName: 'Wrapper', 
      getObject: function () {
        return this.props.object;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 108 } }, this.props.children);} });



    var mounted = false;
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {var _this = this;
        var inner = React.createElement(Wrapper, { object: innerObj, ref: function (c) {return _this.innerRef = c;}, __source: { fileName: _jsxFileName, lineNumber: 115 } });
        var outer = 
        React.createElement(Wrapper, { object: outerObj, ref: function (c) {return _this.outerRef = c;}, __source: { fileName: _jsxFileName, lineNumber: 117 } }, 
        inner);


        return outer;}, 

      componentDidMount: function () {
        expect(this.innerRef.getObject()).toEqual(innerObj);
        expect(this.outerRef.getObject()).toEqual(outerObj);
        mounted = true;} });



    var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 130 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(mounted).toBe(true);});


  it('should support new-style refs with mixed-up owners', function () {
    var Wrapper = React.createClass({ displayName: 'Wrapper', 
      getTitle: function () {
        return this.props.title;}, 

      render: function () {
        return this.props.getContent();} });



    var mounted = false;
    var Component = React.createClass({ displayName: 'Component', 
      getInner: function () {var _this2 = this;
        // (With old-style refs, it's impossible to get a ref to this div
        // because Wrapper is the current owner when this function is called.)
        return React.createElement('div', { title: 'inner', ref: function (c) {return _this2.innerRef = c;}, __source: { fileName: _jsxFileName, lineNumber: 150 } });}, 

      render: function () {var _this3 = this;
        return (
          React.createElement(Wrapper, { 
            title: 'wrapper', 
            ref: function (c) {return _this3.wrapperRef = c;}, 
            getContent: this.getInner, __source: { fileName: _jsxFileName, lineNumber: 154 } }));}, 



      componentDidMount: function () {
        // Check .props.title to make sure we got the right elements back
        expect(this.wrapperRef.getTitle()).toBe('wrapper');
        expect(ReactDOM.findDOMNode(this.innerRef).title).toBe('inner');
        mounted = true;} });



    var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 169 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(mounted).toBe(true);});


  it('should call refs at the correct time', function () {
    var log = [];

    var Inner = React.createClass({ displayName: 'Inner', 
      render: function () {
        log.push('inner ' + this.props.id + ' render');
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 180 } });}, 

      componentDidMount: function () {
        log.push('inner ' + this.props.id + ' componentDidMount');}, 

      componentDidUpdate: function () {
        log.push('inner ' + this.props.id + ' componentDidUpdate');}, 

      componentWillUnmount: function () {
        log.push('inner ' + this.props.id + ' componentWillUnmount');} });



    var Outer = React.createClass({ displayName: 'Outer', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 196 } }, 
          React.createElement(Inner, { id: 1, ref: function (c) {
              log.push('ref 1 got ' + (c ? 'instance ' + c.props.id : 'null'));}, __source: { fileName: _jsxFileName, lineNumber: 197 } }), 

          React.createElement(Inner, { id: 2, ref: function (c) {
              log.push('ref 2 got ' + (c ? 'instance ' + c.props.id : 'null'));}, __source: { fileName: _jsxFileName, lineNumber: 200 } })));}, 




      componentDidMount: function () {
        log.push('outer componentDidMount');}, 

      componentDidUpdate: function () {
        log.push('outer componentDidUpdate');}, 

      componentWillUnmount: function () {
        log.push('outer componentWillUnmount');} });



    // mount, update, unmount
    var el = document.createElement('div');
    log.push('start mount');
    ReactDOM.render(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 220 } }), el);
    log.push('start update');
    ReactDOM.render(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 222 } }), el);
    log.push('start unmount');
    ReactDOM.unmountComponentAtNode(el);

    /* eslint-disable indent */
    expect(log).toEqual([
    'start mount', 
    'inner 1 render', 
    'inner 2 render', 
    'inner 1 componentDidMount', 
    'ref 1 got instance 1', 
    'inner 2 componentDidMount', 
    'ref 2 got instance 2', 
    'outer componentDidMount', 
    'start update', 
    // Previous (equivalent) refs get cleared
    'ref 1 got null', 
    'inner 1 render', 
    'ref 2 got null', 
    'inner 2 render', 
    'inner 1 componentDidUpdate', 
    'ref 1 got instance 1', 
    'inner 2 componentDidUpdate', 
    'ref 2 got instance 2', 
    'outer componentDidUpdate', 
    'start unmount', 
    'outer componentWillUnmount', 
    'ref 1 got null', 
    'inner 1 componentWillUnmount', 
    'ref 2 got null', 
    'inner 2 componentWillUnmount']);

    /* eslint-enable indent */});


  it('fires the callback after a component is rendered', function () {
    var callback = jest.fn();
    var container = document.createElement('div');
    ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 260 } }), container, callback);
    expect(callback.mock.calls.length).toBe(1);
    ReactDOM.render(React.createElement('div', { className: 'foo', __source: { fileName: _jsxFileName, lineNumber: 262 } }), container, callback);
    expect(callback.mock.calls.length).toBe(2);
    ReactDOM.render(React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 264 } }), container, callback);
    expect(callback.mock.calls.length).toBe(3);});


  it('throws usefully when rendering badly-typed elements', function () {
    spyOn(console, 'error');

    var X = undefined;
    expect(function () {return ReactTestUtils.renderIntoDocument(React.createElement(X, { __source: { fileName: _jsxFileName, lineNumber: 272 } }));}).toThrowError(
    'Element type is invalid: expected a string (for built-in components) ' + 
    'or a class/function (for composite components) but got: undefined.');


    var Y = null;
    expect(function () {return ReactTestUtils.renderIntoDocument(React.createElement(Y, { __source: { fileName: _jsxFileName, lineNumber: 278 } }));}).toThrowError(
    'Element type is invalid: expected a string (for built-in components) ' + 
    'or a class/function (for composite components) but got: null.');


    // One warning for each element creation
    expect(console.error.calls.count()).toBe(2);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],258:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactComponentLifeCycle-test.js';

var keyMirror = require('fbjs/lib/keyMirror');

var React;
var ReactDOM;
var ReactInstanceMap;
var ReactTestUtils;

var clone = function (o) {
  return JSON.parse(JSON.stringify(o));};



var GET_INIT_STATE_RETURN_VAL = { 
  hasWillMountCompleted: false, 
  hasRenderCompleted: false, 
  hasDidMountCompleted: false, 
  hasWillUnmountCompleted: false };


var INIT_RENDER_STATE = { 
  hasWillMountCompleted: true, 
  hasRenderCompleted: false, 
  hasDidMountCompleted: false, 
  hasWillUnmountCompleted: false };


var DID_MOUNT_STATE = { 
  hasWillMountCompleted: true, 
  hasRenderCompleted: true, 
  hasDidMountCompleted: false, 
  hasWillUnmountCompleted: false };


var NEXT_RENDER_STATE = { 
  hasWillMountCompleted: true, 
  hasRenderCompleted: true, 
  hasDidMountCompleted: true, 
  hasWillUnmountCompleted: false };


var WILL_UNMOUNT_STATE = { 
  hasWillMountCompleted: true, 
  hasDidMountCompleted: true, 
  hasRenderCompleted: true, 
  hasWillUnmountCompleted: false };


var POST_WILL_UNMOUNT_STATE = { 
  hasWillMountCompleted: true, 
  hasDidMountCompleted: true, 
  hasRenderCompleted: true, 
  hasWillUnmountCompleted: true };


/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({ 
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null, 
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null });


function getLifeCycleState(instance) {
  var internalInstance = ReactInstanceMap.get(instance);
  // Once a component gets mounted, it has an internal instance, once it
  // gets unmounted, it loses that internal instance.
  return internalInstance ? 
  ComponentLifeCycle.MOUNTED : 
  ComponentLifeCycle.UNMOUNTED;}


/**
 * TODO: We should make any setState calls fail in
 * `getInitialState` and `componentWillMount`. They will usually fail
 * anyways because `this._renderedComponent` is empty, however, if a component
 * is *reused*, then that won't be the case and things will appear to work in
 * some cases. Better to just block all updates in initialization.
 */
describe('ReactComponentLifeCycle', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    ReactInstanceMap = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js');});


  it('should not reuse an instance when it has been unmounted', function () {
    var container = document.createElement('div');
    var StatefulComponent = React.createClass({ displayName: 'StatefulComponent', 
      getInitialState: function () {
        return {};}, 

      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 116 } }));} });



    var element = React.createElement(StatefulComponent, { __source: { fileName: _jsxFileName, lineNumber: 120 } });
    var firstInstance = ReactDOM.render(element, container);
    ReactDOM.unmountComponentAtNode(container);
    var secondInstance = ReactDOM.render(element, container);
    expect(firstInstance).not.toBe(secondInstance);});


  /**
   * If a state update triggers rerendering that in turn fires an onDOMReady,
   * that second onDOMReady should not fail.
   */
  it('it should fire onDOMReady when already in onDOMReady', function () {

    var _testJournal = [];

    var Child = React.createClass({ displayName: 'Child', 
      componentDidMount: function () {
        _testJournal.push('Child:onDOMReady');}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 140 } });} });



    var SwitcherParent = React.createClass({ displayName: 'SwitcherParent', 
      getInitialState: function () {
        _testJournal.push('SwitcherParent:getInitialState');
        return { showHasOnDOMReadyComponent: false };}, 

      componentDidMount: function () {
        _testJournal.push('SwitcherParent:onDOMReady');
        this.switchIt();}, 

      switchIt: function () {
        this.setState({ showHasOnDOMReadyComponent: true });}, 

      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 158 } }, 
          this.state.showHasOnDOMReadyComponent ? 
          React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 160 } }) : 
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 161 } }, ' ')));} });





    var instance = React.createElement(SwitcherParent, { __source: { fileName: _jsxFileName, lineNumber: 167 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(_testJournal).toEqual([
    'SwitcherParent:getInitialState', 
    'SwitcherParent:onDOMReady', 
    'Child:onDOMReady']);});



  // You could assign state here, but not access members of it, unless you
  // had provided a getInitialState method.
  it('throws when accessing state in componentWillMount', function () {
    var StatefulComponent = React.createClass({ displayName: 'StatefulComponent', 
      componentWillMount: function () {
        void this.state.yada;}, 

      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 185 } }));} });



    var instance = React.createElement(StatefulComponent, { __source: { fileName: _jsxFileName, lineNumber: 189 } });
    expect(function () {
      instance = ReactTestUtils.renderIntoDocument(instance);}).
    toThrow();});


  it('should allow update state inside of componentWillMount', function () {
    var StatefulComponent = React.createClass({ displayName: 'StatefulComponent', 
      componentWillMount: function () {
        this.setState({ stateField: 'something' });}, 

      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 202 } }));} });



    var instance = React.createElement(StatefulComponent, { __source: { fileName: _jsxFileName, lineNumber: 206 } });
    expect(function () {
      instance = ReactTestUtils.renderIntoDocument(instance);}).
    not.toThrow();});


  it('should not allow update state inside of getInitialState', function () {
    spyOn(console, 'error');
    var StatefulComponent = React.createClass({ displayName: 'StatefulComponent', 
      getInitialState: function () {
        this.setState({ stateField: 'something' });

        return { stateField: 'somethingelse' };}, 

      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 222 } }));} });



    ReactTestUtils.renderIntoDocument(React.createElement(StatefulComponent, { __source: { fileName: _jsxFileName, lineNumber: 226 } }));
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: setState(...): Can only update a mounted or ' + 
    'mounting component. This usually means you called setState() on an ' + 
    'unmounted component. This is a no-op. Please check the code for the ' + 
    'StatefulComponent component.');});



  it('should correctly determine if a component is mounted', function () {
    spyOn(console, 'error');
    var Component = React.createClass({ displayName: 'Component', 
      componentWillMount: function () {
        expect(this.isMounted()).toBeFalsy();}, 

      componentDidMount: function () {
        expect(this.isMounted()).toBeTruthy();}, 

      render: function () {
        expect(this.isMounted()).toBeFalsy();
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 247 } });} });



    var element = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 251 } });

    var instance = ReactTestUtils.renderIntoDocument(element);
    expect(instance.isMounted()).toBeTruthy();

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Component is accessing isMounted inside its render()');});



  it('should correctly determine if a null component is mounted', function () {
    spyOn(console, 'error');
    var Component = React.createClass({ displayName: 'Component', 
      componentWillMount: function () {
        expect(this.isMounted()).toBeFalsy();}, 

      componentDidMount: function () {
        expect(this.isMounted()).toBeTruthy();}, 

      render: function () {
        expect(this.isMounted()).toBeFalsy();
        return null;} });



    var element = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 277 } });

    var instance = ReactTestUtils.renderIntoDocument(element);
    expect(instance.isMounted()).toBeTruthy();

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Component is accessing isMounted inside its render()');});



  it('isMounted should return false when unmounted', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 291 } });} });



    var container = document.createElement('div');
    var instance = ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 296 } }), container);

    expect(instance.isMounted()).toBe(true);

    ReactDOM.unmountComponentAtNode(container);

    expect(instance.isMounted()).toBe(false);});


  it('warns if findDOMNode is used inside render', function () {
    spyOn(console, 'error');
    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { isMounted: false };}, 

      componentDidMount: function () {
        this.setState({ isMounted: true });}, 

      render: function () {
        if (this.state.isMounted) {
          expect(ReactDOM.findDOMNode(this).tagName).toBe('DIV');}

        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 318 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 322 } }));
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Component is accessing findDOMNode inside its render()');});



  it('should carry through each of the phases of setup', function () {
    var LifeCycleComponent = React.createClass({ displayName: 'LifeCycleComponent', 
      getInitialState: function () {
        this._testJournal = {};
        var initState = { 
          hasWillMountCompleted: false, 
          hasDidMountCompleted: false, 
          hasRenderCompleted: false, 
          hasWillUnmountCompleted: false };

        this._testJournal.returnedFromGetInitialState = clone(initState);
        this._testJournal.lifeCycleAtStartOfGetInitialState = 
        getLifeCycleState(this);
        return initState;}, 


      componentWillMount: function () {
        this._testJournal.stateAtStartOfWillMount = clone(this.state);
        this._testJournal.lifeCycleAtStartOfWillMount = 
        getLifeCycleState(this);
        this.state.hasWillMountCompleted = true;}, 


      componentDidMount: function () {
        this._testJournal.stateAtStartOfDidMount = clone(this.state);
        this._testJournal.lifeCycleAtStartOfDidMount = 
        getLifeCycleState(this);
        this.setState({ hasDidMountCompleted: true });}, 


      render: function () {
        var isInitialRender = !this.state.hasRenderCompleted;
        if (isInitialRender) {
          this._testJournal.stateInInitialRender = clone(this.state);
          this._testJournal.lifeCycleInInitialRender = getLifeCycleState(this);} else 
        {
          this._testJournal.stateInLaterRender = clone(this.state);
          this._testJournal.lifeCycleInLaterRender = getLifeCycleState(this);}

        // you would *NEVER* do anything like this in real code!
        this.state.hasRenderCompleted = true;
        return (
          React.createElement('div', { ref: 'theDiv', __source: { fileName: _jsxFileName, lineNumber: 371 } }, 'I am the inner DIV'));}, 





      componentWillUnmount: function () {
        this._testJournal.stateAtStartOfWillUnmount = clone(this.state);
        this._testJournal.lifeCycleAtStartOfWillUnmount = 
        getLifeCycleState(this);
        this.state.hasWillUnmountCompleted = true;} });



    // A component that is merely "constructed" (as in "constructor") but not
    // yet initialized, or rendered.
    //
    var container = document.createElement('div');
    var instance = ReactDOM.render(React.createElement(LifeCycleComponent, { __source: { fileName: _jsxFileName, lineNumber: 389 } }), container);

    // getInitialState
    expect(instance._testJournal.returnedFromGetInitialState).toEqual(
    GET_INIT_STATE_RETURN_VAL);

    expect(instance._testJournal.lifeCycleAtStartOfGetInitialState).
    toBe(ComponentLifeCycle.UNMOUNTED);

    // componentWillMount
    expect(instance._testJournal.stateAtStartOfWillMount).toEqual(
    instance._testJournal.returnedFromGetInitialState);

    expect(instance._testJournal.lifeCycleAtStartOfWillMount).
    toBe(ComponentLifeCycle.MOUNTED);

    // componentDidMount
    expect(instance._testJournal.stateAtStartOfDidMount).
    toEqual(DID_MOUNT_STATE);
    expect(instance._testJournal.lifeCycleAtStartOfDidMount).toBe(
    ComponentLifeCycle.MOUNTED);


    // render
    expect(instance._testJournal.stateInInitialRender).
    toEqual(INIT_RENDER_STATE);
    expect(instance._testJournal.lifeCycleInInitialRender).toBe(
    ComponentLifeCycle.MOUNTED);


    expect(getLifeCycleState(instance)).toBe(ComponentLifeCycle.MOUNTED);

    // Now *update the component*
    instance.forceUpdate();

    // render 2nd time
    expect(instance._testJournal.stateInLaterRender).
    toEqual(NEXT_RENDER_STATE);
    expect(instance._testJournal.lifeCycleInLaterRender).toBe(
    ComponentLifeCycle.MOUNTED);


    expect(getLifeCycleState(instance)).toBe(ComponentLifeCycle.MOUNTED);

    ReactDOM.unmountComponentAtNode(container);

    expect(instance._testJournal.stateAtStartOfWillUnmount).
    toEqual(WILL_UNMOUNT_STATE);
    // componentWillUnmount called right before unmount.
    expect(instance._testJournal.lifeCycleAtStartOfWillUnmount).toBe(
    ComponentLifeCycle.MOUNTED);


    // But the current lifecycle of the component is unmounted.
    expect(getLifeCycleState(instance)).toBe(ComponentLifeCycle.UNMOUNTED);
    expect(instance.state).toEqual(POST_WILL_UNMOUNT_STATE);});


  it('should not throw when updating an auxiliary component', function () {
    var Tooltip = React.createClass({ displayName: 'Tooltip', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 450 } }, this.props.children);}, 

      componentDidMount: function () {
        this.container = document.createElement('div');
        this.updateTooltip();}, 

      componentDidUpdate: function () {
        this.updateTooltip();}, 

      updateTooltip: function () {
        // Even though this.props.tooltip has an owner, updating it shouldn't
        // throw here because it's mounted as a root component
        ReactDOM.render(this.props.tooltip, this.container);} });


    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return (
          React.createElement(Tooltip, { 
            ref: 'tooltip', 
            tooltip: React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 470 } }, this.props.tooltipText), __source: { fileName: _jsxFileName, lineNumber: 468 } }, 
          this.props.text));} });





    var container = document.createElement('div');
    ReactDOM.render(
    React.createElement(Component, { text: 'uno', tooltipText: 'one', __source: { fileName: _jsxFileName, lineNumber: 479 } }), 
    container);


    // Since `instance` is a root component, we can set its props. This also
    // makes Tooltip rerender the tooltip component, which shouldn't throw.
    ReactDOM.render(
    React.createElement(Component, { text: 'dos', tooltipText: 'two', __source: { fileName: _jsxFileName, lineNumber: 486 } }), 
    container);});



  it('should allow state updates in componentDidMount', function () {
    /**
     * calls setState in an componentDidMount.
     */
    var SetStateInComponentDidMount = React.createClass({ displayName: 'SetStateInComponentDidMount', 
      getInitialState: function () {
        return { 
          stateField: this.props.valueToUseInitially };}, 


      componentDidMount: function () {
        this.setState({ stateField: this.props.valueToUseInOnDOMReady });}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 505 } });} });


    var instance = 
    React.createElement(SetStateInComponentDidMount, { 
      valueToUseInitially: 'hello', 
      valueToUseInOnDOMReady: 'goodbye', __source: { fileName: _jsxFileName, lineNumber: 509 } });

    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.state.stateField).toBe('goodbye');});


  it('should call nested lifecycle methods in the right order', function () {
    var log;
    var logger = function (msg) {
      return function () {
        // return true for shouldComponentUpdate
        log.push(msg);
        return true;};};


    var Outer = React.createClass({ displayName: 'Outer', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 528 } }, React.createElement(Inner, { x: this.props.x, __source: { fileName: _jsxFileName, lineNumber: 528 } }));}, 

      componentWillMount: logger('outer componentWillMount'), 
      componentDidMount: logger('outer componentDidMount'), 
      componentWillReceiveProps: logger('outer componentWillReceiveProps'), 
      shouldComponentUpdate: logger('outer shouldComponentUpdate'), 
      componentWillUpdate: logger('outer componentWillUpdate'), 
      componentDidUpdate: logger('outer componentDidUpdate'), 
      componentWillUnmount: logger('outer componentWillUnmount') });

    var Inner = React.createClass({ displayName: 'Inner', 
      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 540 } }, this.props.x);}, 

      componentWillMount: logger('inner componentWillMount'), 
      componentDidMount: logger('inner componentDidMount'), 
      componentWillReceiveProps: logger('inner componentWillReceiveProps'), 
      shouldComponentUpdate: logger('inner shouldComponentUpdate'), 
      componentWillUpdate: logger('inner componentWillUpdate'), 
      componentDidUpdate: logger('inner componentDidUpdate'), 
      componentWillUnmount: logger('inner componentWillUnmount') });



    var container = document.createElement('div');
    log = [];
    ReactDOM.render(React.createElement(Outer, { x: 17, __source: { fileName: _jsxFileName, lineNumber: 554 } }), container);
    expect(log).toEqual([
    'outer componentWillMount', 
    'inner componentWillMount', 
    'inner componentDidMount', 
    'outer componentDidMount']);


    log = [];
    ReactDOM.render(React.createElement(Outer, { x: 42, __source: { fileName: _jsxFileName, lineNumber: 563 } }), container);
    expect(log).toEqual([
    'outer componentWillReceiveProps', 
    'outer shouldComponentUpdate', 
    'outer componentWillUpdate', 
    'inner componentWillReceiveProps', 
    'inner shouldComponentUpdate', 
    'inner componentWillUpdate', 
    'inner componentDidUpdate', 
    'outer componentDidUpdate']);


    log = [];
    ReactDOM.unmountComponentAtNode(container);
    expect(log).toEqual([
    'outer componentWillUnmount', 
    'inner componentWillUnmount']);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js":246,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"fbjs/lib/keyMirror":417}],259:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactCompositeComponent-test.js', _assign = require('object-assign');function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var ChildUpdates;
var MorphingComponent;
var React;
var ReactDOM;
var ReactCurrentOwner;
var ReactPropTypes;
var ReactServerRendering;
var ReactTestUtils;
var ReactUpdates;

var reactComponentExpect;

describe('ReactCompositeComponent', function () {

  beforeEach(function () {
    jest.resetModuleRegistry();
    reactComponentExpect = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js');
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactCurrentOwner = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js');
    ReactPropTypes = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypes.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    ReactServerRendering = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactServerRendering.js');
    ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');

    MorphingComponent = React.createClass({ displayName: 'MorphingComponent', 
      getInitialState: function () {
        return { activated: false };}, 


      _toggleActivatedState: function () {
        this.setState({ activated: !this.state.activated });}, 


      render: function () {
        var toggleActivatedState = this._toggleActivatedState;
        return !this.state.activated ? 
        React.createElement('a', { ref: 'x', onClick: toggleActivatedState, __source: { fileName: _jsxFileName, lineNumber: 51 } }) : 
        React.createElement('b', { ref: 'x', onClick: toggleActivatedState, __source: { fileName: _jsxFileName, lineNumber: 52 } });} });



    /**
     * We'll use this to ensure that an old version is not cached when it is
     * reallocated again.
     */
    ChildUpdates = React.createClass({ displayName: 'ChildUpdates', 
      getAnchor: function () {
        return this.refs.anch;}, 

      render: function () {
        var className = this.props.anchorClassOn ? 'anchorClass' : '';
        return this.props.renderAnchor ? 
        React.createElement('a', { ref: 'anch', className: className, __source: { fileName: _jsxFileName, lineNumber: 67 } }) : 
        React.createElement('b', { __source: { fileName: _jsxFileName, lineNumber: 68 } });} });});




  it('should support module pattern components', function () {
    function Child(_ref) {var test = _ref.test;
      return { 
        render: function () {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 77 } }, test);} };}




    var el = document.createElement('div');
    ReactDOM.render(React.createElement(Child, { test: 'test', __source: { fileName: _jsxFileName, lineNumber: 83 } }), el);

    expect(el.textContent).toBe('test');});


  it('should support rendering to different child types over time', function () {
    var instance = React.createElement(MorphingComponent, { __source: { fileName: _jsxFileName, lineNumber: 89 } });
    instance = ReactTestUtils.renderIntoDocument(instance);

    reactComponentExpect(instance).
    expectRenderedChild().
    toBeDOMComponentWithTag('a');

    instance._toggleActivatedState();
    reactComponentExpect(instance).
    expectRenderedChild().
    toBeDOMComponentWithTag('b');

    instance._toggleActivatedState();
    reactComponentExpect(instance).
    expectRenderedChild().
    toBeDOMComponentWithTag('a');});


  it('should not thrash a server rendered layout with client side one', function () {
    var Child = React.createClass({ displayName: 'Child', 
      render: function () {
        return null;} });


    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 115 } }, React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 115 } }));} });



    var markup = ReactServerRendering.renderToString(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 119 } }));
    var container = document.createElement('div');
    container.innerHTML = markup;

    ReactDOM.render(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 123 } }), container);});


  it('should react to state changes from callbacks', function () {
    var instance = React.createElement(MorphingComponent, { __source: { fileName: _jsxFileName, lineNumber: 127 } });
    instance = ReactTestUtils.renderIntoDocument(instance);

    var renderedChild = reactComponentExpect(instance).
    expectRenderedChild().
    instance();

    ReactTestUtils.Simulate.click(renderedChild);
    reactComponentExpect(instance).
    expectRenderedChild().
    toBeDOMComponentWithTag('b');});


  it('should rewire refs when rendering to different child types', function () {
    var instance = React.createElement(MorphingComponent, { __source: { fileName: _jsxFileName, lineNumber: 141 } });
    instance = ReactTestUtils.renderIntoDocument(instance);

    expect(ReactDOM.findDOMNode(instance.refs.x).tagName).toBe('A');
    instance._toggleActivatedState();
    expect(ReactDOM.findDOMNode(instance.refs.x).tagName).toBe('B');
    instance._toggleActivatedState();
    expect(ReactDOM.findDOMNode(instance.refs.x).tagName).toBe('A');});


  it('should not cache old DOM nodes when switching constructors', function () {
    var container = document.createElement('div');
    var instance = ReactDOM.render(
    React.createElement(ChildUpdates, { renderAnchor: true, anchorClassOn: false, __source: { fileName: _jsxFileName, lineNumber: 154 } }), 
    container);

    ReactDOM.render( // Warm any cache
    React.createElement(ChildUpdates, { renderAnchor: true, anchorClassOn: true, __source: { fileName: _jsxFileName, lineNumber: 158 } }), 
    container);

    ReactDOM.render( // Clear out the anchor
    React.createElement(ChildUpdates, { renderAnchor: false, anchorClassOn: true, __source: { fileName: _jsxFileName, lineNumber: 162 } }), 
    container);

    ReactDOM.render( // rerender
    React.createElement(ChildUpdates, { renderAnchor: true, anchorClassOn: false, __source: { fileName: _jsxFileName, lineNumber: 166 } }), 
    container);

    expect(instance.getAnchor().className).toBe('');});


  it('should auto bind methods and values correctly', function () {
    spyOn(console, 'error');

    var ComponentClass = React.createClass({ displayName: 'ComponentClass', 
      getInitialState: function () {
        return { valueToReturn: 'hi' };}, 

      methodToBeExplicitlyBound: function () {
        return this;}, 

      methodAutoBound: function () {
        return this;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 186 } });} });


    var instance = React.createElement(ComponentClass, { __source: { fileName: _jsxFileName, lineNumber: 189 } });

    // Next, prove that once mounted, the scope is bound correctly to the actual
    // component.
    var mountedInstance = ReactTestUtils.renderIntoDocument(instance);

    expect(function () {
      mountedInstance.methodToBeExplicitlyBound.bind(instance)();}).
    not.toThrow();
    expect(function () {
      mountedInstance.methodAutoBound();}).
    not.toThrow();

    expect(console.error.calls.count()).toBe(1);
    var explicitlyBound = mountedInstance.methodToBeExplicitlyBound.bind(
    mountedInstance);

    expect(console.error.calls.count()).toBe(2);
    var autoBound = mountedInstance.methodAutoBound;

    var context = {};
    expect(explicitlyBound.call(context)).toBe(mountedInstance);
    expect(autoBound.call(context)).toBe(mountedInstance);

    expect(explicitlyBound.call(mountedInstance)).toBe(mountedInstance);
    expect(autoBound.call(mountedInstance)).toBe(mountedInstance);});



  it('should not pass this to getDefaultProps', function () {
    var Component = React.createClass({ displayName: 'Component', 
      getDefaultProps: function () {
        expect(this.render).not.toBeDefined();
        return {};}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 225 } });} });


    ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 228 } }));});


  it('should use default values for undefined props', function () {
    var Component = React.createClass({ displayName: 'Component', 
      getDefaultProps: function () {
        return { prop: 'testKey' };}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 237 } });} });



    var instance1 = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 241 } });
    instance1 = ReactTestUtils.renderIntoDocument(instance1);
    reactComponentExpect(instance1).scalarPropsEqual({ prop: 'testKey' });

    var instance2 = React.createElement(Component, { prop: undefined, __source: { fileName: _jsxFileName, lineNumber: 245 } });
    instance2 = ReactTestUtils.renderIntoDocument(instance2);
    reactComponentExpect(instance2).scalarPropsEqual({ prop: 'testKey' });

    var instance3 = React.createElement(Component, { prop: null, __source: { fileName: _jsxFileName, lineNumber: 249 } });
    instance3 = ReactTestUtils.renderIntoDocument(instance3);
    reactComponentExpect(instance3).scalarPropsEqual({ prop: null });});


  it('should not mutate passed-in props object', function () {
    var Component = React.createClass({ displayName: 'Component', 
      getDefaultProps: function () {
        return { prop: 'testKey' };}, 

      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 260 } });} });



    var inputProps = {};
    var instance1 = React.createElement(Component, _extends({}, inputProps, { __source: { fileName: _jsxFileName, lineNumber: 265 } }));
    instance1 = ReactTestUtils.renderIntoDocument(instance1);
    expect(instance1.props.prop).toBe('testKey');

    // We don't mutate the input, just in case the caller wants to do something
    // with it after using it to instantiate a component
    expect(inputProps.prop).not.toBeDefined();});


  it('should warn about `forceUpdate` on unmounted components', function () {
    spyOn(console, 'error');

    var container = document.createElement('div');
    document.body.appendChild(container);

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 282 } });} });



    var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 286 } });
    expect(instance.forceUpdate).not.toBeDefined();

    instance = ReactDOM.render(instance, container);
    instance.forceUpdate();

    expect(console.error.calls.count()).toBe(0);

    ReactDOM.unmountComponentAtNode(container);

    instance.forceUpdate();
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: forceUpdate(...): Can only update a mounted or ' + 
    'mounting component. This usually means you called forceUpdate() on an ' + 
    'unmounted component. This is a no-op. Please check the code for the ' + 
    'Component component.');});



  it('should warn about `setState` on unmounted components', function () {
    spyOn(console, 'error');

    var container = document.createElement('div');
    document.body.appendChild(container);

    var renders = 0;

    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { value: 0 };}, 

      render: function () {
        renders++;
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 320 } });} });



    var instance = React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 324 } });
    expect(instance.setState).not.toBeDefined();

    instance = ReactDOM.render(instance, container);

    expect(renders).toBe(1);

    instance.setState({ value: 1 });

    expect(console.error.calls.count()).toBe(0);

    expect(renders).toBe(2);

    ReactDOM.unmountComponentAtNode(container);
    instance.setState({ value: 2 });

    expect(renders).toBe(2);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: setState(...): Can only update a mounted or ' + 
    'mounting component. This usually means you called setState() on an ' + 
    'unmounted component. This is a no-op. Please check the code for the ' + 
    'Component component.');});



  it('should silently allow `setState`, not call cb on unmounting components', function () {
    var cbCalled = false;
    var container = document.createElement('div');
    document.body.appendChild(container);

    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { value: 0 };}, 

      componentWillUnmount: function () {var _this = this;
        expect(function () {
          _this.setState({ value: 2 }, function () {
            cbCalled = true;});}).

        not.toThrow();}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 368 } });} });



    var instance = ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 372 } }), container);
    instance.setState({ value: 1 });

    ReactDOM.unmountComponentAtNode(container);
    expect(cbCalled).toBe(false);});



  it('should warn about `setState` in render', function () {
    spyOn(console, 'error');

    var container = document.createElement('div');

    var renderedState = -1;
    var renderPasses = 0;

    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { value: 0 };}, 

      render: function () {
        renderPasses++;
        renderedState = this.state.value;
        if (this.state.value === 0) {
          this.setState({ value: 1 });}

        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 398 } });} });



    expect(console.error.calls.count()).toBe(0);

    var instance = ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 404 } }), container);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: setState(...): Cannot update during an existing state ' + 
    'transition (such as within `render` or another component\'s ' + 
    'constructor). Render methods should be a pure function of props and ' + 
    'state; constructor side-effects are an anti-pattern, but can be moved ' + 
    'to `componentWillMount`.');


    // The setState call is queued and then executed as a second pass. This
    // behavior is undefined though so we're free to change it to suit the
    // implementation details.
    expect(renderPasses).toBe(2);
    expect(renderedState).toBe(1);
    expect(instance.state.value).toBe(1);

    // Forcing a rerender anywhere will cause the update to happen.
    var instance2 = ReactDOM.render(React.createElement(Component, { prop: 123, __source: { fileName: _jsxFileName, lineNumber: 423 } }), container);
    expect(instance).toBe(instance2);
    expect(renderedState).toBe(1);
    expect(instance2.state.value).toBe(1);});


  it('should warn about `setState` in getChildContext', function () {
    spyOn(console, 'error');

    var container = document.createElement('div');

    var renderPasses = 0;

    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { value: 0 };}, 

      getChildContext: function () {
        if (this.state.value === 0) {
          this.setState({ value: 1 });}}, 


      render: function () {
        renderPasses++;
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 447 } });} });


    expect(console.error.calls.count()).toBe(0);
    var instance = ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 451 } }), container);
    expect(renderPasses).toBe(2);
    expect(instance.state.value).toBe(1);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: setState(...): Cannot call setState() inside getChildContext()');});



  it('should cleanup even if render() fatals', function () {
    var BadComponent = React.createClass({ displayName: 'BadComponent', 
      render: function () {
        throw new Error();} });


    var instance = React.createElement(BadComponent, { __source: { fileName: _jsxFileName, lineNumber: 466 } });

    expect(ReactCurrentOwner.current).toBe(null);

    expect(function () {
      instance = ReactTestUtils.renderIntoDocument(instance);}).
    toThrow();

    expect(ReactCurrentOwner.current).toBe(null);});


  it('should call componentWillUnmount before unmounting', function () {
    var container = document.createElement('div');
    var innerUnmounted = false;

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 484 } }, 
          React.createElement(Inner, { __source: { fileName: _jsxFileName, lineNumber: 485 } }), 'Text'));} });





    var Inner = React.createClass({ displayName: 'Inner', 
      componentWillUnmount: function () {
        innerUnmounted = true;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 496 } });} });



    ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 500 } }), container);
    ReactDOM.unmountComponentAtNode(container);
    expect(innerUnmounted).toBe(true);});


  it('should warn when shouldComponentUpdate() returns undefined', function () {
    spyOn(console, 'error');

    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { bogus: false };}, 


      shouldComponentUpdate: function () {
        return undefined;}, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 518 } });} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 522 } }));
    instance.setState({ bogus: true });

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Component.shouldComponentUpdate(): Returned undefined instead of a ' + 
    'boolean value. Make sure to return true or false.');});



  it('should warn when componentDidUnmount method is defined', function () {
    spyOn(console, 'error');

    var Component = React.createClass({ displayName: 'Component', 
      componentDidUnmount: function () {}, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 540 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 544 } }));

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: Component has a method called ' + 
    'componentDidUnmount(). But there is no such lifecycle method. ' + 
    'Did you mean componentWillUnmount()?');});



  it('should pass context to children when not owner', function () {
    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 557 } }, React.createElement(Grandchild, { __source: { fileName: _jsxFileName, lineNumber: 557 } }));} });



    var Child = React.createClass({ displayName: 'Child', 
      childContextTypes: { 
        foo: ReactPropTypes.string }, 


      getChildContext: function () {
        return { 
          foo: 'bar' };}, 



      render: function () {
        return React.Children.only(this.props.children);} });



    var Grandchild = React.createClass({ displayName: 'Grandchild', 
      contextTypes: { 
        foo: ReactPropTypes.string }, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 583 } }, this.context.foo);} });



    var component = ReactTestUtils.renderIntoDocument(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 587 } }));
    expect(ReactDOM.findDOMNode(component).innerHTML).toBe('bar');});


  it('should skip update when rerendering element in container', function () {
    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 594 } }, this.props.children);} });



    var childRenders = 0;
    var Child = React.createClass({ displayName: 'Child', 
      render: function () {
        childRenders++;
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 602 } });} });



    var container = document.createElement('div');
    var child = React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 607 } });

    ReactDOM.render(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 609 } }, child), container);
    ReactDOM.render(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 610 } }, child), container);
    expect(childRenders).toBe(1);});


  it('should pass context when re-rendered for static child', function () {
    var parentInstance = null;
    var childInstance = null;

    var Parent = React.createClass({ displayName: 'Parent', 
      childContextTypes: { 
        foo: ReactPropTypes.string, 
        flag: ReactPropTypes.bool }, 


      getChildContext: function () {
        return { 
          foo: 'bar', 
          flag: this.state.flag };}, 



      getInitialState: function () {
        return { 
          flag: false };}, 



      render: function () {
        return React.Children.only(this.props.children);} });



    var Middle = React.createClass({ displayName: 'Middle', 
      render: function () {
        return this.props.children;} });



    var Child = React.createClass({ displayName: 'Child', 
      contextTypes: { 
        foo: ReactPropTypes.string, 
        flag: ReactPropTypes.bool }, 


      render: function () {
        childInstance = this;
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 656 } }, 'Child');} });



    parentInstance = ReactTestUtils.renderIntoDocument(
    React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 661 } }, React.createElement(Middle, { __source: { fileName: _jsxFileName, lineNumber: 661 } }, React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 661 } }))));


    expect(parentInstance.state.flag).toBe(false);
    reactComponentExpect(childInstance).scalarContextEqual({ foo: 'bar', flag: false });

    parentInstance.setState({ flag: true });
    expect(parentInstance.state.flag).toBe(true);

    reactComponentExpect(childInstance).scalarContextEqual({ foo: 'bar', flag: true });});


  it('should pass context when re-rendered for static child within a composite component', function () {
    var Parent = React.createClass({ displayName: 'Parent', 
      childContextTypes: { 
        flag: ReactPropTypes.bool }, 


      getChildContext: function () {
        return { 
          flag: this.state.flag };}, 



      getInitialState: function () {
        return { 
          flag: true };}, 



      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 692 } }, this.props.children);} });




    var Child = React.createClass({ displayName: 'Child', 
      contextTypes: { 
        flag: ReactPropTypes.bool }, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 703 } });} });



    var Wrapper = React.createClass({ displayName: 'Wrapper', 
      render: function () {
        return (
          React.createElement(Parent, { ref: 'parent', __source: { fileName: _jsxFileName, lineNumber: 710 } }, 
          React.createElement(Child, { ref: 'child', __source: { fileName: _jsxFileName, lineNumber: 711 } })));} });






    var wrapper = ReactTestUtils.renderIntoDocument(
    React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 719 } }));


    expect(wrapper.refs.parent.state.flag).toEqual(true);
    reactComponentExpect(wrapper.refs.child).scalarContextEqual({ flag: true });

    // We update <Parent /> while <Child /> is still a static prop relative to this update
    wrapper.refs.parent.setState({ flag: false });

    expect(wrapper.refs.parent.state.flag).toEqual(false);
    reactComponentExpect(wrapper.refs.child).scalarContextEqual({ flag: false });});



  it('should pass context transitively', function () {
    var childInstance = null;
    var grandchildInstance = null;

    var Parent = React.createClass({ displayName: 'Parent', 
      childContextTypes: { 
        foo: ReactPropTypes.string, 
        depth: ReactPropTypes.number }, 


      getChildContext: function () {
        return { 
          foo: 'bar', 
          depth: 0 };}, 



      render: function () {
        return React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 751 } });} });



    var Child = React.createClass({ displayName: 'Child', 
      contextTypes: { 
        foo: ReactPropTypes.string, 
        depth: ReactPropTypes.number }, 


      childContextTypes: { 
        depth: ReactPropTypes.number }, 


      getChildContext: function () {
        return { 
          depth: this.context.depth + 1 };}, 



      render: function () {
        childInstance = this;
        return React.createElement(Grandchild, { __source: { fileName: _jsxFileName, lineNumber: 773 } });} });



    var Grandchild = React.createClass({ displayName: 'Grandchild', 
      contextTypes: { 
        foo: ReactPropTypes.string, 
        depth: ReactPropTypes.number }, 


      render: function () {
        grandchildInstance = this;
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 785 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 789 } }));
    reactComponentExpect(childInstance).scalarContextEqual({ foo: 'bar', depth: 0 });
    reactComponentExpect(grandchildInstance).scalarContextEqual({ foo: 'bar', depth: 1 });});


  it('should pass context when re-rendered', function () {
    var parentInstance = null;
    var childInstance = null;

    var Parent = React.createClass({ displayName: 'Parent', 
      childContextTypes: { 
        foo: ReactPropTypes.string, 
        depth: ReactPropTypes.number }, 


      getChildContext: function () {
        return { 
          foo: 'bar', 
          depth: 0 };}, 



      getInitialState: function () {
        return { 
          flag: false };}, 



      render: function () {
        var output = React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 818 } });
        if (!this.state.flag) {
          output = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 820 } }, 'Child');}

        return output;} });



    var Child = React.createClass({ displayName: 'Child', 
      contextTypes: { 
        foo: ReactPropTypes.string, 
        depth: ReactPropTypes.number }, 


      render: function () {
        childInstance = this;
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 834 } }, 'Child');} });



    parentInstance = ReactTestUtils.renderIntoDocument(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 838 } }));
    expect(childInstance).toBeNull();

    expect(parentInstance.state.flag).toBe(false);
    ReactUpdates.batchedUpdates(function () {
      parentInstance.setState({ flag: true });});

    expect(parentInstance.state.flag).toBe(true);

    reactComponentExpect(childInstance).scalarContextEqual({ foo: 'bar', depth: 0 });});


  it('unmasked context propagates through updates', function () {

    var Leaf = React.createClass({ displayName: 'Leaf', 
      contextTypes: { 
        foo: ReactPropTypes.string.isRequired }, 


      componentWillReceiveProps: function (nextProps, nextContext) {
        expect('foo' in nextContext).toBe(true);}, 


      componentDidUpdate: function (prevProps, prevState, prevContext) {
        expect('foo' in prevContext).toBe(true);}, 


      shouldComponentUpdate: function (nextProps, nextState, nextContext) {
        expect('foo' in nextContext).toBe(true);
        return true;}, 


      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 871 } }, this.context.foo);} });



    var Intermediary = React.createClass({ displayName: 'Intermediary', 

      componentWillReceiveProps: function (nextProps, nextContext) {
        expect('foo' in nextContext).toBe(false);}, 


      componentDidUpdate: function (prevProps, prevState, prevContext) {
        expect('foo' in prevContext).toBe(false);}, 


      shouldComponentUpdate: function (nextProps, nextState, nextContext) {
        expect('foo' in nextContext).toBe(false);
        return true;}, 


      render: function () {
        return React.createElement(Leaf, { __source: { fileName: _jsxFileName, lineNumber: 891 } });} });



    var Parent = React.createClass({ displayName: 'Parent', 
      childContextTypes: { 
        foo: ReactPropTypes.string }, 


      getChildContext: function () {
        return { 
          foo: this.props.cntxt };}, 



      render: function () {
        return React.createElement(Intermediary, { __source: { fileName: _jsxFileName, lineNumber: 907 } });} });



    var div = document.createElement('div');
    ReactDOM.render(React.createElement(Parent, { cntxt: 'noise', __source: { fileName: _jsxFileName, lineNumber: 912 } }), div);
    expect(div.children[0].innerHTML).toBe('noise');
    div.children[0].innerHTML = 'aliens';
    div.children[0].id = 'aliens';
    expect(div.children[0].innerHTML).toBe('aliens');
    expect(div.children[0].id).toBe('aliens');
    ReactDOM.render(React.createElement(Parent, { cntxt: 'bar', __source: { fileName: _jsxFileName, lineNumber: 918 } }), div);
    expect(div.children[0].innerHTML).toBe('bar');
    expect(div.children[0].id).toBe('aliens');});


  it('should trigger componentWillReceiveProps for context changes', function () {
    var contextChanges = 0;
    var propChanges = 0;

    var GrandChild = React.createClass({ displayName: 'GrandChild', 
      contextTypes: { 
        foo: ReactPropTypes.string.isRequired }, 


      componentWillReceiveProps: function (nextProps, nextContext) {
        expect('foo' in nextContext).toBe(true);

        if (nextProps !== this.props) {
          propChanges++;}


        if (nextContext !== this.context) {
          contextChanges++;}}, 



      render: function () {
        return React.createElement('span', { className: 'grand-child', __source: { fileName: _jsxFileName, lineNumber: 945 } }, this.props.children);} });



    var ChildWithContext = React.createClass({ displayName: 'ChildWithContext', 
      contextTypes: { 
        foo: ReactPropTypes.string.isRequired }, 


      componentWillReceiveProps: function (nextProps, nextContext) {
        expect('foo' in nextContext).toBe(true);

        if (nextProps !== this.props) {
          propChanges++;}


        if (nextContext !== this.context) {
          contextChanges++;}}, 



      render: function () {
        return React.createElement('div', { className: 'child-with', __source: { fileName: _jsxFileName, lineNumber: 967 } }, this.props.children);} });



    var ChildWithoutContext = React.createClass({ displayName: 'ChildWithoutContext', 
      componentWillReceiveProps: function (nextProps, nextContext) {
        expect('foo' in nextContext).toBe(false);

        if (nextProps !== this.props) {
          propChanges++;}


        if (nextContext !== this.context) {
          contextChanges++;}}, 



      render: function () {
        return React.createElement('div', { className: 'child-without', __source: { fileName: _jsxFileName, lineNumber: 985 } }, this.props.children);} });



    var Parent = React.createClass({ displayName: 'Parent', 
      childContextTypes: { 
        foo: ReactPropTypes.string }, 


      getInitialState: function () {
        return { 
          foo: 'abc' };}, 



      getChildContext: function () {
        return { 
          foo: this.state.foo };}, 



      onClick: function () {
        this.setState({ 
          foo: 'def' });}, 



      render: function () {
        return React.createElement('div', { className: 'parent', onClick: this.onClick, __source: { fileName: _jsxFileName, lineNumber: 1013 } }, this.props.children);} });



    var div = document.createElement('div');

    ReactDOM.render(
    React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 1020 } }, 
    React.createElement(ChildWithoutContext, { __source: { fileName: _jsxFileName, lineNumber: 1021 } }, 'A1', 

    React.createElement(GrandChild, { __source: { fileName: _jsxFileName, lineNumber: 1023 } }, 'A2')), 


    React.createElement(ChildWithContext, { __source: { fileName: _jsxFileName, lineNumber: 1026 } }, 'B1', 

    React.createElement(GrandChild, { __source: { fileName: _jsxFileName, lineNumber: 1028 } }, 'B2'))), 


    div);


    ReactTestUtils.Simulate.click(div.childNodes[0]);

    expect(propChanges).toBe(0);
    expect(contextChanges).toBe(3); // ChildWithContext, GrandChild x 2
  });

  it('should disallow nested render calls', function () {
    spyOn(console, 'error');

    var Inner = React.createClass({ displayName: 'Inner', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1045 } });} });


    var Outer = React.createClass({ displayName: 'Outer', 
      render: function () {
        ReactTestUtils.renderIntoDocument(React.createElement(Inner, { __source: { fileName: _jsxFileName, lineNumber: 1050 } }));
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1051 } });} });



    ReactTestUtils.renderIntoDocument(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 1055 } }));
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toBe(
    'Warning: _renderNewRootComponent(): Render methods should ' + 
    'be a pure function of props and state; triggering nested component ' + 
    'updates from render is not allowed. If necessary, trigger nested ' + 
    'updates in componentDidUpdate. Check the render method of Outer.');});



  it('only renders once if updated in componentWillReceiveProps', function () {
    var renders = 0;
    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { updated: false };}, 

      componentWillReceiveProps: function (props) {
        expect(props.update).toBe(1);
        this.setState({ updated: true });}, 

      render: function () {
        renders++;
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1077 } });} });



    var container = document.createElement('div');
    var instance = ReactDOM.render(React.createElement(Component, { update: 0, __source: { fileName: _jsxFileName, lineNumber: 1082 } }), container);
    expect(renders).toBe(1);
    expect(instance.state.updated).toBe(false);
    ReactDOM.render(React.createElement(Component, { update: 1, __source: { fileName: _jsxFileName, lineNumber: 1085 } }), container);
    expect(renders).toBe(2);
    expect(instance.state.updated).toBe(true);});


  it('should update refs if shouldComponentUpdate gives false', function () {
    var Static = React.createClass({ displayName: 'Static', 
      shouldComponentUpdate: function () {
        return false;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1096 } }, this.props.children);} });


    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        if (this.props.flipped) {
          return (
            React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1103 } }, 
            React.createElement(Static, { ref: 'static0', key: 'B', __source: { fileName: _jsxFileName, lineNumber: 1104 } }, 'B (ignored)'), 
            React.createElement(Static, { ref: 'static1', key: 'A', __source: { fileName: _jsxFileName, lineNumber: 1105 } }, 'A (ignored)')));} else 


        {
          return (
            React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1110 } }, 
            React.createElement(Static, { ref: 'static0', key: 'A', __source: { fileName: _jsxFileName, lineNumber: 1111 } }, 'A'), 
            React.createElement(Static, { ref: 'static1', key: 'B', __source: { fileName: _jsxFileName, lineNumber: 1112 } }, 'B')));}} });






    var container = document.createElement('div');
    var comp = ReactDOM.render(React.createElement(Component, { flipped: false, __source: { fileName: _jsxFileName, lineNumber: 1120 } }), container);
    expect(ReactDOM.findDOMNode(comp.refs.static0).textContent).toBe('A');
    expect(ReactDOM.findDOMNode(comp.refs.static1).textContent).toBe('B');

    // When flipping the order, the refs should update even though the actual
    // contents do not
    ReactDOM.render(React.createElement(Component, { flipped: true, __source: { fileName: _jsxFileName, lineNumber: 1126 } }), container);
    expect(ReactDOM.findDOMNode(comp.refs.static0).textContent).toBe('B');
    expect(ReactDOM.findDOMNode(comp.refs.static1).textContent).toBe('A');});


  it('should allow access to findDOMNode in componentWillUnmount', function () {
    var a = null;
    var b = null;
    var Component = React.createClass({ displayName: 'Component', 
      componentDidMount: function () {
        a = ReactDOM.findDOMNode(this);
        expect(a).not.toBe(null);}, 

      componentWillUnmount: function () {
        b = ReactDOM.findDOMNode(this);
        expect(b).not.toBe(null);}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1144 } });} });


    var container = document.createElement('div');
    expect(a).toBe(container.firstChild);
    ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 1149 } }), container);
    ReactDOM.unmountComponentAtNode(container);
    expect(a).toBe(b);});


  it('context should be passed down from the parent', function () {
    var Parent = React.createClass({ displayName: 'Parent', 
      childContextTypes: { 
        foo: ReactPropTypes.string }, 


      getChildContext: function () {
        return { 
          foo: 'bar' };}, 



      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1167 } }, this.props.children);} });



    var Component = React.createClass({ displayName: 'Component', 
      contextTypes: { 
        foo: ReactPropTypes.string.isRequired }, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1177 } });} });



    var div = document.createElement('div');
    ReactDOM.render(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 1182 } }, React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 1182 } })), div);});


  it('should replace state', function () {
    var Moo = React.createClass({ displayName: 'Moo', 
      getInitialState: function () {
        return { x: 1 };}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1191 } });} });



    var moo = ReactTestUtils.renderIntoDocument(React.createElement(Moo, { __source: { fileName: _jsxFileName, lineNumber: 1195 } }));
    moo.replaceState({ y: 2 });
    expect('x' in moo.state).toBe(false);
    expect(moo.state.y).toBe(2);});


  it('should support objects with prototypes as state', function () {
    var NotActuallyImmutable = function (str) {
      this.str = str;};

    NotActuallyImmutable.prototype.amIImmutable = function () {
      return true;};

    var Moo = React.createClass({ displayName: 'Moo', 
      getInitialState: function () {
        return new NotActuallyImmutable('first');}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1213 } });} });



    var moo = ReactTestUtils.renderIntoDocument(React.createElement(Moo, { __source: { fileName: _jsxFileName, lineNumber: 1217 } }));
    expect(moo.state.str).toBe('first');
    expect(moo.state.amIImmutable()).toBe(true);

    var secondState = new NotActuallyImmutable('second');
    moo.replaceState(secondState);
    expect(moo.state.str).toBe('second');
    expect(moo.state.amIImmutable()).toBe(true);
    expect(moo.state).toBe(secondState);

    moo.setState({ str: 'third' });
    expect(moo.state.str).toBe('third');
    // Here we lose the prototype.
    expect(moo.state.amIImmutable).toBe(undefined);

    // When more than one state update is enqueued, we have the same behavior
    var fifthState = new NotActuallyImmutable('fifth');
    ReactUpdates.batchedUpdates(function () {
      moo.setState({ str: 'fourth' });
      moo.replaceState(fifthState);});

    expect(moo.state).toBe(fifthState);

    // When more than one state update is enqueued, we have the same behavior
    var sixthState = new NotActuallyImmutable('sixth');
    ReactUpdates.batchedUpdates(function () {
      moo.replaceState(sixthState);
      moo.setState({ str: 'seventh' });});

    expect(moo.state.str).toBe('seventh');
    expect(moo.state.amIImmutable).toBe(undefined);});


  it('should not warn about unmounting during unmounting', function () {
    var container = document.createElement('div');
    var layer = document.createElement('div');

    var Component = React.createClass({ displayName: 'Component', 
      componentWillMount: function () {
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1256 } }), layer);}, 


      componentWillUnmount: function () {
        ReactDOM.unmountComponentAtNode(layer);}, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1264 } });} });



    var Outer = React.createClass({ displayName: 'Outer', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1270 } }, this.props.children);} });



    ReactDOM.render(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 1274 } }, React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 1274 } })), container);
    ReactDOM.render(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 1275 } }), container);});


  it('should warn when mutated props are passed', function () {
    spyOn(console, 'error');

    var container = document.createElement('div');var 

    Foo = function (_React$Component) {_inherits(Foo, _React$Component);
      function Foo(props) {_classCallCheck(this, Foo);
        var _props = { idx: props.idx + '!' };return _possibleConstructorReturn(this, 
        _React$Component.call(this, _props));}Foo.prototype.


      render = function render() {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 1290 } });};return Foo;}(React.Component);



    expect(console.error.calls.count()).toBe(0);

    ReactDOM.render(React.createElement(Foo, { idx: 'qwe', __source: { fileName: _jsxFileName, lineNumber: 1296 } }), container);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Foo(...): When calling super() in `Foo`, make sure to pass ' + 
    'up the same props that your component\'s constructor was passed.');});




  it('should only call componentWillUnmount once', function () {
    var app;
    var count = 0;var 

    App = function (_React$Component2) {_inherits(App, _React$Component2);function App() {_classCallCheck(this, App);return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));}App.prototype.
      render = function render() {
        if (this.props.stage === 1) {
          return React.createElement(UnunmountableComponent, { __source: { fileName: _jsxFileName, lineNumber: 1313 } });} else 
        {
          return null;}};return App;}(React.Component);var 




    UnunmountableComponent = function (_React$Component3) {_inherits(UnunmountableComponent, _React$Component3);function UnunmountableComponent() {_classCallCheck(this, UnunmountableComponent);return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));}UnunmountableComponent.prototype.
      componentWillUnmount = function componentWillUnmount() {
        app.setState({});
        count++;
        throw Error('always fails');};UnunmountableComponent.prototype.


      render = function render() {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1328 } }, 'Hello ', this.props.name);};return UnunmountableComponent;}(React.Component);



    var container = document.createElement('div');

    var setRef = function (ref) {
      if (ref) {
        app = ref;}};



    expect(function () {
      ReactDOM.render(React.createElement(App, { ref: setRef, stage: 1, __source: { fileName: _jsxFileName, lineNumber: 1341 } }), container);
      ReactDOM.render(React.createElement(App, { ref: setRef, stage: 2, __source: { fileName: _jsxFileName, lineNumber: 1342 } }), container);}).
    toThrow();
    expect(count).toBe(1);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js":38,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\types\\ReactPropTypes.js":47,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\server\\ReactServerRendering.js":153,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js":306,"object-assign":425}],260:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

// Requires
var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactCompositeComponentDOMMinimalism-test.js';var React;
var ReactTestUtils;
var reactComponentExpect;

// Test components
var LowerLevelComposite;
var MyCompositeComponent;

var expectSingleChildlessDiv;

/**
 * Integration test, testing the combination of JSX with our unit of
 * abstraction, `ReactCompositeComponent` does not ever add superfluous DOM
 * nodes.
 */
describe('ReactCompositeComponentDOMMinimalism', function () {

  beforeEach(function () {
    reactComponentExpect = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js');
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

    LowerLevelComposite = React.createClass({ displayName: 'LowerLevelComposite', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 40 } }, 
          this.props.children));} });





    MyCompositeComponent = React.createClass({ displayName: 'MyCompositeComponent', 
      render: function () {
        return (
          React.createElement(LowerLevelComposite, { __source: { fileName: _jsxFileName, lineNumber: 50 } }, 
          this.props.children));} });





    expectSingleChildlessDiv = function (instance) {
      reactComponentExpect(instance).
      expectRenderedChild().
      toBeCompositeComponentWithType(LowerLevelComposite).
      expectRenderedChild().
      toBeDOMComponentWithTag('div').
      toBeDOMComponentWithNoChildren();};});



  it('should not render extra nodes for non-interpolated text', function () {
    var instance = 
    React.createElement(MyCompositeComponent, { __source: { fileName: _jsxFileName, lineNumber: 69 } }, 'A string child');



    instance = ReactTestUtils.renderIntoDocument(instance);
    expectSingleChildlessDiv(instance);});


  it('should not render extra nodes for non-interpolated text', function () {
    var instance = 
    React.createElement(MyCompositeComponent, { __source: { fileName: _jsxFileName, lineNumber: 79 } }, 
    'Interpolated String Child');


    instance = ReactTestUtils.renderIntoDocument(instance);
    expectSingleChildlessDiv(instance);});


  it('should not render extra nodes for non-interpolated text', function () {
    var instance = 
    React.createElement(MyCompositeComponent, { __source: { fileName: _jsxFileName, lineNumber: 89 } }, 
    React.createElement('ul', { __source: { fileName: _jsxFileName, lineNumber: 90 } }, 'This text causes no children in ul, just innerHTML'));




    instance = ReactTestUtils.renderIntoDocument(instance);
    reactComponentExpect(instance).
    expectRenderedChild().
    toBeCompositeComponentWithType(LowerLevelComposite).
    expectRenderedChild().
    toBeDOMComponentWithTag('div').
    toBeDOMComponentWithChildCount(1).
    expectRenderedChildAt(0).
    toBeDOMComponentWithTag('ul').
    toBeDOMComponentWithNoChildren();});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js":306}],261:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactCompositeComponentNestedState-test.js';

var React;
var ReactDOM;
var ReactTestUtils;

describe('ReactCompositeComponentNestedState-state', function () {

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  it('should provide up to date values for props', function () {
    var ParentComponent = React.createClass({ displayName: 'ParentComponent', 
      getInitialState: function () {
        return { color: 'blue' };}, 


      handleColor: function (color) {
        this.props.logger('parent-handleColor', this.state.color);
        this.setState({ color: color }, function () {
          this.props.logger('parent-after-setState', this.state.color);});}, 



      render: function () {
        this.props.logger('parent-render', this.state.color);
        return (
          React.createElement(ChildComponent, { 
            logger: this.props.logger, 
            color: this.state.color, 
            onSelectColor: this.handleColor, __source: { fileName: _jsxFileName, lineNumber: 42 } }));} });





    var ChildComponent = React.createClass({ displayName: 'ChildComponent', 
      getInitialState: function () {
        this.props.logger('getInitialState', this.props.color);
        return { hue: 'dark ' + this.props.color };}, 


      handleHue: function (shade, color) {
        this.props.logger('handleHue', this.state.hue, this.props.color);
        this.props.onSelectColor(color);
        this.setState(function (state, props) {
          this.props.logger('setState-this', this.state.hue, this.props.color);
          this.props.logger('setState-args', state.hue, props.color);
          return { hue: shade + ' ' + props.color };}, 
        function () {
          this.props.logger('after-setState', this.state.hue, this.props.color);});}, 



      render: function () {
        this.props.logger('render', this.state.hue, this.props.color);
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 72 } }, 
          React.createElement('button', { onClick: this.handleHue.bind(this, 'dark', 'blue'), __source: { fileName: _jsxFileName, lineNumber: 73 } }, 'Dark Blue'), 


          React.createElement('button', { onClick: this.handleHue.bind(this, 'light', 'blue'), __source: { fileName: _jsxFileName, lineNumber: 76 } }, 'Light Blue'), 


          React.createElement('button', { onClick: this.handleHue.bind(this, 'dark', 'green'), __source: { fileName: _jsxFileName, lineNumber: 79 } }, 'Dark Green'), 


          React.createElement('button', { onClick: this.handleHue.bind(this, 'light', 'green'), __source: { fileName: _jsxFileName, lineNumber: 82 } }, 'Light Green')));} });







    var container = document.createElement('div');
    document.body.appendChild(container);

    var logger = jest.fn();

    void ReactDOM.render(
    React.createElement(ParentComponent, { logger: logger, __source: { fileName: _jsxFileName, lineNumber: 96 } }), 
    container);


    // click "light green"
    ReactTestUtils.Simulate.click(
    container.childNodes[0].childNodes[3]);


    expect(logger.mock.calls).toEqual([
    ['parent-render', 'blue'], 
    ['getInitialState', 'blue'], 
    ['render', 'dark blue', 'blue'], 
    ['handleHue', 'dark blue', 'blue'], 
    ['parent-handleColor', 'blue'], 
    ['parent-render', 'green'], 
    ['setState-this', 'dark blue', 'blue'], 
    ['setState-args', 'dark blue', 'green'], 
    ['render', 'light green', 'green'], 
    ['parent-after-setState', 'green'], 
    ['after-setState', 'light green', 'green']]);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],262:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactCompositeComponentState-test.js';

var React;
var ReactDOM;

var TestComponent;

describe('ReactCompositeComponent-state', function () {

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');

    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');

    TestComponent = React.createClass({ displayName: 'TestComponent', 
      peekAtState: function (from, state) {
        state = state || this.state;
        this.props.stateListener(from, state && state.color);}, 


      peekAtCallback: function (from) {var _this = this;
        return function () {return _this.peekAtState(from);};}, 


      setFavoriteColor: function (nextColor) {
        this.setState(
        { color: nextColor }, 
        this.peekAtCallback('setFavoriteColor'));}, 



      getInitialState: function () {
        this.peekAtState('getInitialState');
        return { color: 'red' };}, 


      render: function () {
        this.peekAtState('render');
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 50 } }, this.state.color);}, 


      componentWillMount: function () {
        this.peekAtState('componentWillMount-start');
        this.setState(function (state) {
          this.peekAtState('before-setState-sunrise', state);});

        this.setState(
        { color: 'sunrise' }, 
        this.peekAtCallback('setState-sunrise'));

        this.setState(function (state) {
          this.peekAtState('after-setState-sunrise', state);});

        this.peekAtState('componentWillMount-after-sunrise');
        this.setState(
        { color: 'orange' }, 
        this.peekAtCallback('setState-orange'));

        this.setState(function (state) {
          this.peekAtState('after-setState-orange', state);});

        this.peekAtState('componentWillMount-end');}, 


      componentDidMount: function () {
        this.peekAtState('componentDidMount-start');
        this.setState(
        { color: 'yellow' }, 
        this.peekAtCallback('setState-yellow'));

        this.peekAtState('componentDidMount-end');}, 


      componentWillReceiveProps: function (newProps) {
        this.peekAtState('componentWillReceiveProps-start');
        if (newProps.nextColor) {
          this.setState(function (state) {
            this.peekAtState('before-setState-receiveProps', state);
            return { color: newProps.nextColor };});

          this.replaceState({ color: undefined });
          this.setState(
          function (state) {
            this.peekAtState('before-setState-again-receiveProps', state);
            return { color: newProps.nextColor };}, 

          this.peekAtCallback('setState-receiveProps'));

          this.setState(function (state) {
            this.peekAtState('after-setState-receiveProps', state);});}


        this.peekAtState('componentWillReceiveProps-end');}, 


      shouldComponentUpdate: function (nextProps, nextState) {
        this.peekAtState('shouldComponentUpdate-currentState');
        this.peekAtState('shouldComponentUpdate-nextState', nextState);
        return true;}, 


      componentWillUpdate: function (nextProps, nextState) {
        this.peekAtState('componentWillUpdate-currentState');
        this.peekAtState('componentWillUpdate-nextState', nextState);}, 


      componentDidUpdate: function (prevProps, prevState) {
        this.peekAtState('componentDidUpdate-currentState');
        this.peekAtState('componentDidUpdate-prevState', prevState);}, 


      componentWillUnmount: function () {
        this.peekAtState('componentWillUnmount');} });});




  it('should support setting state', function () {
    var container = document.createElement('div');
    document.body.appendChild(container);

    var stateListener = jest.fn();
    var instance = ReactDOM.render(
    React.createElement(TestComponent, { stateListener: stateListener, __source: { fileName: _jsxFileName, lineNumber: 135 } }), 
    container, 
    function peekAtInitialCallback() {
      this.peekAtState('initial-callback');});


    ReactDOM.render(
    React.createElement(TestComponent, { stateListener: stateListener, nextColor: 'green', __source: { fileName: _jsxFileName, lineNumber: 142 } }), 
    container, 
    instance.peekAtCallback('setProps'));

    instance.setFavoriteColor('blue');
    instance.forceUpdate(instance.peekAtCallback('forceUpdate'));

    ReactDOM.unmountComponentAtNode(container);

    expect(stateListener.mock.calls.join('\n')).toEqual([
    // there is no state when getInitialState() is called
    ['getInitialState', null], 
    ['componentWillMount-start', 'red'], 
    // setState()'s only enqueue pending states.
    ['componentWillMount-after-sunrise', 'red'], 
    ['componentWillMount-end', 'red'], 
    // pending state queue is processed
    ['before-setState-sunrise', 'red'], 
    ['after-setState-sunrise', 'sunrise'], 
    ['after-setState-orange', 'orange'], 
    // pending state has been applied
    ['render', 'orange'], 
    ['componentDidMount-start', 'orange'], 
    // setState-sunrise and setState-orange should be called here,
    // after the bug in #1740
    // componentDidMount() called setState({color:'yellow'}), which is async.
    // The update doesn't happen until the next flush.
    ['componentDidMount-end', 'orange'], 
    ['shouldComponentUpdate-currentState', 'orange'], 
    ['shouldComponentUpdate-nextState', 'yellow'], 
    ['componentWillUpdate-currentState', 'orange'], 
    ['componentWillUpdate-nextState', 'yellow'], 
    ['render', 'yellow'], 
    ['componentDidUpdate-currentState', 'yellow'], 
    ['componentDidUpdate-prevState', 'orange'], 
    ['setState-sunrise', 'yellow'], 
    ['setState-orange', 'yellow'], 
    ['setState-yellow', 'yellow'], 
    ['initial-callback', 'yellow'], 
    ['componentWillReceiveProps-start', 'yellow'], 
    // setState({color:'green'}) only enqueues a pending state.
    ['componentWillReceiveProps-end', 'yellow'], 
    // pending state queue is processed
    // before-setState-receiveProps never called, due to replaceState.
    ['before-setState-again-receiveProps', undefined], 
    ['after-setState-receiveProps', 'green'], 
    ['shouldComponentUpdate-currentState', 'yellow'], 
    ['shouldComponentUpdate-nextState', 'green'], 
    ['componentWillUpdate-currentState', 'yellow'], 
    ['componentWillUpdate-nextState', 'green'], 
    ['render', 'green'], 
    ['componentDidUpdate-currentState', 'green'], 
    ['componentDidUpdate-prevState', 'yellow'], 
    ['setState-receiveProps', 'green'], 
    ['setProps', 'green'], 
    // setFavoriteColor('blue')
    ['shouldComponentUpdate-currentState', 'green'], 
    ['shouldComponentUpdate-nextState', 'blue'], 
    ['componentWillUpdate-currentState', 'green'], 
    ['componentWillUpdate-nextState', 'blue'], 
    ['render', 'blue'], 
    ['componentDidUpdate-currentState', 'blue'], 
    ['componentDidUpdate-prevState', 'green'], 
    ['setFavoriteColor', 'blue'], 
    // forceUpdate()
    ['componentWillUpdate-currentState', 'blue'], 
    ['componentWillUpdate-nextState', 'blue'], 
    ['render', 'blue'], 
    ['componentDidUpdate-currentState', 'blue'], 
    ['componentDidUpdate-prevState', 'blue'], 
    ['forceUpdate', 'blue'], 
    // unmountComponent()
    // state is available within `componentWillUnmount()`
    ['componentWillUnmount', 'blue']].
    join('\n'));});


  it('should batch unmounts', function () {
    var outer;
    var Inner = React.createClass({ displayName: 'Inner', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 223 } });}, 

      componentWillUnmount: function () {
        // This should get silently ignored (maybe with a warning), but it
        // shouldn't break React.
        outer.setState({ showInner: false });} });


    var Outer = React.createClass({ displayName: 'Outer', 
      getInitialState: function () {
        return { showInner: true };}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 236 } }, this.state.showInner && React.createElement(Inner, { __source: { fileName: _jsxFileName, lineNumber: 236 } }));} });



    var container = document.createElement('div');
    outer = ReactDOM.render(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 241 } }), container);
    expect(function () {
      ReactDOM.unmountComponentAtNode(container);}).
    not.toThrow();});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62}],263:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactEmptyComponent-test.js';

var React;
var ReactDOM;
var ReactTestUtils;
var TogglingComponent;

var reactComponentExpect;

var log;

describe('ReactEmptyComponent', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

    reactComponentExpect = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js');

    log = jasmine.createSpy();

    TogglingComponent = React.createClass({ displayName: 'TogglingComponent', 
      getInitialState: function () {
        return { component: this.props.firstComponent };}, 

      componentDidMount: function () {
        log(ReactDOM.findDOMNode(this));
        this.setState({ component: this.props.secondComponent });}, 

      componentDidUpdate: function () {
        log(ReactDOM.findDOMNode(this));}, 

      render: function () {
        var Component = this.state.component;
        return Component ? React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 48 } }) : null;} });});




  it('should render null and false as a noscript tag under the hood', function () {
    var Component1 = React.createClass({ displayName: 'Component1', 
      render: function () {
        return null;} });


    var Component2 = React.createClass({ displayName: 'Component2', 
      render: function () {
        return false;} });



    var instance1 = ReactTestUtils.renderIntoDocument(React.createElement(Component1, { __source: { fileName: _jsxFileName, lineNumber: 65 } }));
    var instance2 = ReactTestUtils.renderIntoDocument(React.createElement(Component2, { __source: { fileName: _jsxFileName, lineNumber: 66 } }));
    reactComponentExpect(instance1).
    expectRenderedChild().
    toBeEmptyComponent();
    reactComponentExpect(instance2).
    expectRenderedChild().
    toBeEmptyComponent();});


  it('should still throw when rendering to undefined', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {} });

    expect(function () {
      ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 80 } }));}).
    toThrowError(
    'Component.render(): A valid React element (or null) must be returned. You may ' + 
    'have returned undefined, an array or some other invalid object.');});



  it('should be able to switch between rendering null and a normal tag', function () {
    var instance1 = 
    React.createElement(TogglingComponent, { 
      firstComponent: null, 
      secondComponent: 'div', __source: { fileName: _jsxFileName, lineNumber: 89 } });

    var instance2 = 
    React.createElement(TogglingComponent, { 
      firstComponent: 'div', 
      secondComponent: null, __source: { fileName: _jsxFileName, lineNumber: 94 } });


    ReactTestUtils.renderIntoDocument(instance1);
    ReactTestUtils.renderIntoDocument(instance2);

    expect(log.calls.count()).toBe(4);
    expect(log.calls.argsFor(0)[0]).toBe(null);
    expect(log.calls.argsFor(1)[0].tagName).toBe('DIV');
    expect(log.calls.argsFor(2)[0].tagName).toBe('DIV');
    expect(log.calls.argsFor(3)[0]).toBe(null);});


  it('should be able to switch in a list of children', function () {
    var instance1 = 
    React.createElement(TogglingComponent, { 
      firstComponent: null, 
      secondComponent: 'div', __source: { fileName: _jsxFileName, lineNumber: 111 } });


    ReactTestUtils.renderIntoDocument(
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 117 } }, 
    instance1, 
    instance1, 
    instance1));



    expect(log.calls.count()).toBe(6);
    expect(log.calls.argsFor(0)[0]).toBe(null);
    expect(log.calls.argsFor(1)[0]).toBe(null);
    expect(log.calls.argsFor(2)[0]).toBe(null);
    expect(log.calls.argsFor(3)[0].tagName).toBe('DIV');
    expect(log.calls.argsFor(4)[0].tagName).toBe('DIV');
    expect(log.calls.argsFor(5)[0].tagName).toBe('DIV');});


  it('should distinguish between a script placeholder and an actual script tag', 
  function () {
    var instance1 = 
    React.createElement(TogglingComponent, { 
      firstComponent: null, 
      secondComponent: 'script', __source: { fileName: _jsxFileName, lineNumber: 136 } });

    var instance2 = 
    React.createElement(TogglingComponent, { 
      firstComponent: 'script', 
      secondComponent: null, __source: { fileName: _jsxFileName, lineNumber: 141 } });


    expect(function () {
      ReactTestUtils.renderIntoDocument(instance1);}).
    not.toThrow();
    expect(function () {
      ReactTestUtils.renderIntoDocument(instance2);}).
    not.toThrow();

    expect(log.calls.count()).toBe(4);
    expect(log.calls.argsFor(0)[0]).toBe(null);
    expect(log.calls.argsFor(1)[0].tagName).toBe('SCRIPT');
    expect(log.calls.argsFor(2)[0].tagName).toBe('SCRIPT');
    expect(log.calls.argsFor(3)[0]).toBe(null);});



  it('should have findDOMNode return null when multiple layers of composite ' + 
  'components render to the same null placeholder', 
  function () {
    var GrandChild = React.createClass({ displayName: 'GrandChild', 
      render: function () {
        return null;} });



    var Child = React.createClass({ displayName: 'Child', 
      render: function () {
        return React.createElement(GrandChild, { __source: { fileName: _jsxFileName, lineNumber: 172 } });} });



    var instance1 = 
    React.createElement(TogglingComponent, { 
      firstComponent: 'div', 
      secondComponent: Child, __source: { fileName: _jsxFileName, lineNumber: 177 } });

    var instance2 = 
    React.createElement(TogglingComponent, { 
      firstComponent: Child, 
      secondComponent: 'div', __source: { fileName: _jsxFileName, lineNumber: 182 } });


    expect(function () {
      ReactTestUtils.renderIntoDocument(instance1);}).
    not.toThrow();
    expect(function () {
      ReactTestUtils.renderIntoDocument(instance2);}).
    not.toThrow();

    expect(log.calls.count()).toBe(4);
    expect(log.calls.argsFor(0)[0].tagName).toBe('DIV');
    expect(log.calls.argsFor(1)[0]).toBe(null);
    expect(log.calls.argsFor(2)[0]).toBe(null);
    expect(log.calls.argsFor(3)[0].tagName).toBe('DIV');});



  it('works when switching components', function () {
    var assertions = 0;
    var Inner = React.createClass({ displayName: 'Inner', 
      render: function () {
        return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 206 } });}, 

      componentDidMount: function () {
        // Make sure the DOM node resolves properly even if we're replacing a
        // `null` component
        expect(ReactDOM.findDOMNode(this)).not.toBe(null);
        assertions++;}, 

      componentWillUnmount: function () {
        // Even though we're getting replaced by `null`, we haven't been
        // replaced yet!
        expect(ReactDOM.findDOMNode(this)).not.toBe(null);
        assertions++;} });


    var Wrapper = React.createClass({ displayName: 'Wrapper', 
      render: function () {
        return this.props.showInner ? React.createElement(Inner, { __source: { fileName: _jsxFileName, lineNumber: 223 } }) : null;} });



    var el = document.createElement('div');
    var component;

    // Render the <Inner /> component...
    component = ReactDOM.render(React.createElement(Wrapper, { showInner: true, __source: { fileName: _jsxFileName, lineNumber: 231 } }), el);
    expect(ReactDOM.findDOMNode(component)).not.toBe(null);

    // Switch to null...
    component = ReactDOM.render(React.createElement(Wrapper, { showInner: false, __source: { fileName: _jsxFileName, lineNumber: 235 } }), el);
    expect(ReactDOM.findDOMNode(component)).toBe(null);

    // ...then switch back.
    component = ReactDOM.render(React.createElement(Wrapper, { showInner: true, __source: { fileName: _jsxFileName, lineNumber: 239 } }), el);
    expect(ReactDOM.findDOMNode(component)).not.toBe(null);

    expect(assertions).toBe(3);});


  it('throws when rendering null at the top level', function () {
    // TODO: This should actually work since `null` is a valid ReactNode
    var div = document.createElement('div');
    expect(function () {
      ReactDOM.render(null, div);}).
    toThrowError(
    'ReactDOM.render(): Invalid component element.');});



  it('does not break when updating during mount', function () {
    var Child = React.createClass({ displayName: 'Child', 
      componentDidMount: function () {
        if (this.props.onMount) {
          this.props.onMount();}}, 


      render: function () {
        if (!this.props.visible) {
          return null;}


        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 267 } }, 'hello world');} });



    var Parent = React.createClass({ displayName: 'Parent', 
      update: function () {
        this.forceUpdate();}, 

      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 277 } }, 
          React.createElement(Child, { key: '1', visible: false, __source: { fileName: _jsxFileName, lineNumber: 278 } }), 
          React.createElement(Child, { key: '0', visible: true, onMount: this.update, __source: { fileName: _jsxFileName, lineNumber: 279 } }), 
          React.createElement(Child, { key: '2', visible: false, __source: { fileName: _jsxFileName, lineNumber: 280 } })));} });





    expect(function () {
      ReactTestUtils.renderIntoDocument(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 287 } }));}).
    not.toThrow();});


  it('preserves the dom node during updates', function () {
    var Empty = React.createClass({ displayName: 'Empty', 
      render: function () {
        return null;} });



    var container = document.createElement('div');

    ReactDOM.render(React.createElement(Empty, { __source: { fileName: _jsxFileName, lineNumber: 300 } }), container);
    var noscript1 = container.firstChild;
    expect(noscript1.nodeName).toBe('#comment');

    // This update shouldn't create a DOM node
    ReactDOM.render(React.createElement(Empty, { __source: { fileName: _jsxFileName, lineNumber: 305 } }), container);
    var noscript2 = container.firstChild;
    expect(noscript2.nodeName).toBe('#comment');

    expect(noscript1).toBe(noscript2);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js":306}],264:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactIdentity-test.js';

var React;
var ReactDOM;
var ReactFragment;
var ReactTestUtils;

describe('ReactIdentity', function () {

  beforeEach(function () {
    jest.resetModuleRegistry();
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactFragment = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  function frag(obj) {
    return ReactFragment.create(obj);}


  it('should allow key property to express identity', function () {
    var node;
    var Component = function (props) {return (
        React.createElement('div', { ref: function (c) {return node = c;}, __source: { fileName: _jsxFileName, lineNumber: 36 } }, 
        React.createElement('div', { key: props.swap ? 'banana' : 'apple', __source: { fileName: _jsxFileName, lineNumber: 37 } }), 
        React.createElement('div', { key: props.swap ? 'apple' : 'banana', __source: { fileName: _jsxFileName, lineNumber: 38 } })));};


    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 42 } }), container);
    var origChildren = Array.from(node.childNodes);
    ReactDOM.render(React.createElement(Component, { swap: true, __source: { fileName: _jsxFileName, lineNumber: 44 } }), container);
    var newChildren = Array.from(node.childNodes);
    expect(origChildren[0]).toBe(newChildren[1]);
    expect(origChildren[1]).toBe(newChildren[0]);});


  it('should use composite identity', function () {

    var Wrapper = React.createClass({ displayName: 'Wrapper', 
      render: function () {
        return React.createElement('a', { __source: { fileName: _jsxFileName, lineNumber: 54 } }, this.props.children);} });



    var container = document.createElement('div');
    var node1;
    var node2;
    ReactDOM.render(
    React.createElement(Wrapper, { key: 'wrap1', __source: { fileName: _jsxFileName, lineNumber: 62 } }, React.createElement('span', { ref: function (c) {return node1 = c;}, __source: { fileName: _jsxFileName, lineNumber: 62 } })), 
    container);

    ReactDOM.render(
    React.createElement(Wrapper, { key: 'wrap2', __source: { fileName: _jsxFileName, lineNumber: 66 } }, React.createElement('span', { ref: function (c) {return node2 = c;}, __source: { fileName: _jsxFileName, lineNumber: 66 } })), 
    container);


    expect(node1).not.toBe(node2);});


  function renderAComponentWithKeyIntoContainer(key, container) {

    var Wrapper = React.createClass({ displayName: 'Wrapper', 

      render: function () {
        var s1 = React.createElement('span', { ref: 'span1', key: key, __source: { fileName: _jsxFileName, lineNumber: 78 } });
        var s2 = React.createElement('span', { ref: 'span2', __source: { fileName: _jsxFileName, lineNumber: 79 } });

        var map = {};
        map[key] = s2;
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 83 } }, [s1, frag(map)]);} });




    var instance = ReactDOM.render(React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 88 } }), container);
    var span1 = instance.refs.span1;
    var span2 = instance.refs.span2;

    expect(ReactDOM.findDOMNode(span1)).not.toBe(null);
    expect(ReactDOM.findDOMNode(span2)).not.toBe(null);}


  it('should allow any character as a key, in a detached parent', function () {
    var detachedContainer = document.createElement('div');
    renderAComponentWithKeyIntoContainer(
    "<'WEIRD/&\\key'>", 
    detachedContainer);});



  it('should allow any character as a key, in an attached parent', function () {
    // This test exists to protect against implementation details that
    // incorrectly query escaped IDs using DOM tools like getElementById.
    var attachedContainer = document.createElement('div');
    document.body.appendChild(attachedContainer);

    renderAComponentWithKeyIntoContainer(
    "<'WEIRD/&\\key'>", 
    attachedContainer);


    document.body.removeChild(attachedContainer);});


  it('should not allow scripts in keys to execute', function () {
    var h4x0rKey = 
    '"><script>window[\'YOUVEBEENH4X0RED\']=true;</script><div id="';

    var attachedContainer = document.createElement('div');
    document.body.appendChild(attachedContainer);

    renderAComponentWithKeyIntoContainer(h4x0rKey, attachedContainer);

    document.body.removeChild(attachedContainer);

    // If we get this far, make sure we haven't executed the code
    expect(window.YOUVEBEENH4X0RED).toBe(undefined);});


  it('should let restructured components retain their uniqueness', function () {
    var instance0 = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 134 } });
    var instance1 = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 135 } });
    var instance2 = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 136 } });

    var TestComponent = React.createClass({ displayName: 'TestComponent', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 141 } }, 
          instance2, 
          this.props.children[0], 
          this.props.children[1]));} });





    var TestContainer = React.createClass({ displayName: 'TestContainer', 

      render: function () {
        return React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 153 } }, instance0, instance1);} });




    expect(function () {

      ReactTestUtils.renderIntoDocument(React.createElement(TestContainer, { __source: { fileName: _jsxFileName, lineNumber: 160 } }));}).

    not.toThrow();});


  it('should let nested restructures retain their uniqueness', function () {
    var instance0 = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 166 } });
    var instance1 = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 167 } });
    var instance2 = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 168 } });

    var TestComponent = React.createClass({ displayName: 'TestComponent', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 173 } }, 
          instance2, 
          this.props.children[0], 
          this.props.children[1]));} });





    var TestContainer = React.createClass({ displayName: 'TestContainer', 

      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 186 } }, 
          React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 187 } }, instance0, instance1)));} });






    expect(function () {

      ReactTestUtils.renderIntoDocument(React.createElement(TestContainer, { __source: { fileName: _jsxFileName, lineNumber: 196 } }));}).

    not.toThrow();});


  it('should let text nodes retain their uniqueness', function () {
    var TestComponent = React.createClass({ displayName: 'TestComponent', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 204 } }, this.props.children, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 204 } }));} });



    var TestContainer = React.createClass({ displayName: 'TestContainer', 

      render: function () {
        return (
          React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 212 } }, 
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 213 } }), 
          'second'));} });






    expect(function () {

      ReactTestUtils.renderIntoDocument(React.createElement(TestContainer, { __source: { fileName: _jsxFileName, lineNumber: 223 } }));}).

    not.toThrow();});


  it('should retain key during updates in composite components', function () {

    var TestComponent = React.createClass({ displayName: 'TestComponent', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 232 } }, this.props.children);} });



    var TestContainer = React.createClass({ displayName: 'TestContainer', 

      getInitialState: function () {
        return { swapped: false };}, 


      swap: function () {
        this.setState({ swapped: true });}, 


      render: function () {
        return (
          React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 248 } }, 
          this.state.swapped ? this.props.second : this.props.first, 
          this.state.swapped ? this.props.first : this.props.second));} });






    var instance0 = React.createElement('span', { key: 'A', __source: { fileName: _jsxFileName, lineNumber: 257 } });
    var instance1 = React.createElement('span', { key: 'B', __source: { fileName: _jsxFileName, lineNumber: 258 } });

    var wrapped = React.createElement(TestContainer, { first: instance0, second: instance1, __source: { fileName: _jsxFileName, lineNumber: 260 } });

    wrapped = ReactDOM.render(wrapped, document.createElement('div'));
    var div = ReactDOM.findDOMNode(wrapped);

    var beforeA = div.childNodes[0];
    var beforeB = div.childNodes[1];
    wrapped.swap();
    var afterA = div.childNodes[1];
    var afterB = div.childNodes[0];

    expect(beforeA).toBe(afterA);
    expect(beforeB).toBe(afterB);});



  it('should not allow implicit and explicit keys to collide', function () {
    var component = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 278 } }, 
    React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 279 } }), 
    React.createElement('span', { key: '0', __source: { fileName: _jsxFileName, lineNumber: 280 } }));


    expect(function () {
      ReactTestUtils.renderIntoDocument(component);}).
    not.toThrow();});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js":3,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],265:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactMockedComponent-test.js';

var React;
var ReactTestUtils;

var AutoMockedComponent;
var MockedComponent;

describe('ReactMockedComponent', function () {

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

    AutoMockedComponent = jest.genMockFromModule('ReactMockedComponentTestComponent');
    MockedComponent = jest.genMockFromModule('ReactMockedComponentTestComponent');

    ReactTestUtils.mockComponent(MockedComponent);});


  it('should allow an implicitly mocked component to be rendered without warnings', function () {
    spyOn(console, 'error');
    ReactTestUtils.renderIntoDocument(React.createElement(AutoMockedComponent, { __source: { fileName: _jsxFileName, lineNumber: 34 } }));
    expect(console.error.calls.count()).toBe(0);});


  it('should allow an implicitly mocked component to be updated', function () {
    var Wrapper = React.createClass({ displayName: 'Wrapper', 

      getInitialState: function () {
        return { foo: 1 };}, 


      update: function () {
        this.setState({ foo: 2 });}, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 50 } }, React.createElement(AutoMockedComponent, { prop: this.state.foo, __source: { fileName: _jsxFileName, lineNumber: 50 } }));} });




    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 55 } }));

    var found = ReactTestUtils.findRenderedComponentWithType(
    instance, 
    AutoMockedComponent);

    expect(typeof found).toBe('object');

    instance.update();});


  it('has custom methods on the implicitly mocked component', function () {
    var instance = ReactTestUtils.renderIntoDocument(React.createElement(AutoMockedComponent, { __source: { fileName: _jsxFileName, lineNumber: 67 } }));
    expect(typeof instance.hasCustomMethod).toBe('function');});


  it('should allow an explicitly mocked component to be rendered', function () {
    ReactTestUtils.renderIntoDocument(React.createElement(MockedComponent, { __source: { fileName: _jsxFileName, lineNumber: 72 } }));});


  it('should allow an explicitly mocked component to be updated', function () {
    var Wrapper = React.createClass({ displayName: 'Wrapper', 

      getInitialState: function () {
        return { foo: 1 };}, 


      update: function () {
        this.setState({ foo: 2 });}, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 87 } }, React.createElement(MockedComponent, { prop: this.state.foo, __source: { fileName: _jsxFileName, lineNumber: 87 } }));} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 91 } }));

    var found = ReactTestUtils.findRenderedComponentWithType(
    instance, 
    MockedComponent);

    expect(typeof found).toBe('object');

    instance.update();});


  it('has custom methods on the explicitly mocked component', function () {
    var instance = ReactTestUtils.renderIntoDocument(React.createElement(MockedComponent, { __source: { fileName: _jsxFileName, lineNumber: 103 } }));
    expect(typeof instance.hasCustomMethod).toBe('function');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],266:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactMultiChild-test.js';

describe('ReactMultiChild', function () {
      function normalizeCodeLocInfo(str) {
            return str.replace(/\(at .+?:\d+\)/g, '(at **)');}


      var React;
      var ReactDOM;

      beforeEach(function () {
            jest.resetModuleRegistry();
            React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
            ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');});


      describe('reconciliation', function () {
            it('should update children when possible', function () {
                  var container = document.createElement('div');

                  var mockMount = jest.fn();
                  var mockUpdate = jest.fn();
                  var mockUnmount = jest.fn();

                  var MockComponent = React.createClass({ displayName: 'MockComponent', 
                        componentDidMount: mockMount, 
                        componentDidUpdate: mockUpdate, 
                        componentWillUnmount: mockUnmount, 
                        render: function () {
                              return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 41 } });} });



                  expect(mockMount.mock.calls.length).toBe(0);
                  expect(mockUpdate.mock.calls.length).toBe(0);
                  expect(mockUnmount.mock.calls.length).toBe(0);

                  ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 49 } }, React.createElement(MockComponent, { __source: { fileName: _jsxFileName, lineNumber: 49 } })), container);

                  expect(mockMount.mock.calls.length).toBe(1);
                  expect(mockUpdate.mock.calls.length).toBe(0);
                  expect(mockUnmount.mock.calls.length).toBe(0);

                  ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 55 } }, React.createElement(MockComponent, { __source: { fileName: _jsxFileName, lineNumber: 55 } })), container);

                  expect(mockMount.mock.calls.length).toBe(1);
                  expect(mockUpdate.mock.calls.length).toBe(1);
                  expect(mockUnmount.mock.calls.length).toBe(0);});


            it('should replace children with different constructors', function () {
                  var container = document.createElement('div');

                  var mockMount = jest.fn();
                  var mockUnmount = jest.fn();

                  var MockComponent = React.createClass({ displayName: 'MockComponent', 
                        componentDidMount: mockMount, 
                        componentWillUnmount: mockUnmount, 
                        render: function () {
                              return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 72 } });} });



                  expect(mockMount.mock.calls.length).toBe(0);
                  expect(mockUnmount.mock.calls.length).toBe(0);

                  ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 79 } }, React.createElement(MockComponent, { __source: { fileName: _jsxFileName, lineNumber: 79 } })), container);

                  expect(mockMount.mock.calls.length).toBe(1);
                  expect(mockUnmount.mock.calls.length).toBe(0);

                  ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 84 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 84 } })), container);

                  expect(mockMount.mock.calls.length).toBe(1);
                  expect(mockUnmount.mock.calls.length).toBe(1);});


            it('should NOT replace children with different owners', function () {
                  var container = document.createElement('div');

                  var mockMount = jest.fn();
                  var mockUnmount = jest.fn();

                  var MockComponent = React.createClass({ displayName: 'MockComponent', 
                        componentDidMount: mockMount, 
                        componentWillUnmount: mockUnmount, 
                        render: function () {
                              return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 100 } });} });



                  var WrapperComponent = React.createClass({ displayName: 'WrapperComponent', 
                        render: function () {
                              return this.props.children || React.createElement(MockComponent, { __source: { fileName: _jsxFileName, lineNumber: 106 } });} });



                  expect(mockMount.mock.calls.length).toBe(0);
                  expect(mockUnmount.mock.calls.length).toBe(0);

                  ReactDOM.render(React.createElement(WrapperComponent, { __source: { fileName: _jsxFileName, lineNumber: 113 } }), container);

                  expect(mockMount.mock.calls.length).toBe(1);
                  expect(mockUnmount.mock.calls.length).toBe(0);

                  ReactDOM.render(
                  React.createElement(WrapperComponent, { __source: { fileName: _jsxFileName, lineNumber: 119 } }, React.createElement(MockComponent, { __source: { fileName: _jsxFileName, lineNumber: 119 } })), 
                  container);


                  expect(mockMount.mock.calls.length).toBe(1);
                  expect(mockUnmount.mock.calls.length).toBe(0);});


            it('should replace children with different keys', function () {
                  var container = document.createElement('div');

                  var mockMount = jest.fn();
                  var mockUnmount = jest.fn();

                  var MockComponent = React.createClass({ displayName: 'MockComponent', 
                        componentDidMount: mockMount, 
                        componentWillUnmount: mockUnmount, 
                        render: function () {
                              return React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 137 } });} });



                  expect(mockMount.mock.calls.length).toBe(0);
                  expect(mockUnmount.mock.calls.length).toBe(0);

                  ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 144 } }, React.createElement(MockComponent, { key: 'A', __source: { fileName: _jsxFileName, lineNumber: 144 } })), container);

                  expect(mockMount.mock.calls.length).toBe(1);
                  expect(mockUnmount.mock.calls.length).toBe(0);

                  ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 149 } }, React.createElement(MockComponent, { key: 'B', __source: { fileName: _jsxFileName, lineNumber: 149 } })), container);

                  expect(mockMount.mock.calls.length).toBe(2);
                  expect(mockUnmount.mock.calls.length).toBe(1);});


            it('should warn for duplicated keys with component stack info', function () {
                  spyOn(console, 'error');

                  var container = document.createElement('div');

                  var WrapperComponent = React.createClass({ displayName: 'WrapperComponent', 
                        render: function () {
                              return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 162 } }, this.props.children);} });



                  var Parent = React.createClass({ displayName: 'Parent', 
                        render: function () {
                              return (
                                    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 169 } }, 
                                    React.createElement(WrapperComponent, { __source: { fileName: _jsxFileName, lineNumber: 170 } }, 
                                    this.props.children)));} });






                  ReactDOM.render(
                  React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 179 } }, [React.createElement('div', { key: '1', __source: { fileName: _jsxFileName, lineNumber: 179 } })]), 
                  container);


                  ReactDOM.render(
                  React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 184 } }, [React.createElement('div', { key: '1', __source: { fileName: _jsxFileName, lineNumber: 184 } }), React.createElement('div', { key: '1', __source: { fileName: _jsxFileName, lineNumber: 184 } })]), 
                  container);


                  expect(console.error.calls.count()).toBe(1);
                  expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
                  'Warning: flattenChildren(...): ' + 
                  'Encountered two children with the same key, `1`. ' + 
                  'Child keys must be unique; when two children share a key, ' + 
                  'only the first child will be used.\n' + 
                  '    in div (at **)\n' + 
                  '    in WrapperComponent (at **)\n' + 
                  '    in div (at **)\n' + 
                  '    in Parent (at **)');});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62}],267:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactMultiChildReconcile-test.js', _assign = require('object-assign');

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactInstanceMap = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js');

var mapObject = require('fbjs/lib/mapObject');

var stripEmptyValues = function (obj) {
  var ret = {};
  var name;
  for (name in obj) {
    if (!obj.hasOwnProperty(name)) {
      continue;}

    if (obj[name] !== null && obj[name] !== undefined) {
      ret[name] = obj[name];}}


  return ret;};


/**
 * Child key names are wrapped like '.$key:0'. We strip the extra chars out
 * here. This relies on an implementation detail of the rendering system.
 */
var getOriginalKey = function (childName) {
  var match = childName.match(/^\.\$([^.]+)$/);
  expect(match).not.toBeNull();
  return match[1];};


/**
 * Contains internal static internal state in order to test that updates to
 * existing children won't reinitialize components, when moving children -
 * reusing existing DOM/memory resources.
 */
var StatusDisplay = React.createClass({ displayName: 'StatusDisplay', 
  getInitialState: function () {
    return { internalState: Math.random() };}, 


  getStatus: function () {
    return this.props.status;}, 


  getInternalState: function () {
    return this.state.internalState;}, 


  render: function () {
    return (
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 65 } }, 
      this.state.internalState));} });





/**
 * Displays friends statuses.
 */
var FriendsStatusDisplay = React.createClass({ displayName: 'FriendsStatusDisplay', 
  /**
   * Retrieves the rendered children in a nice format for comparing to the input
   * `this.props.usernameToStatus`. Gets the order directly from each rendered
   * child's `index` field. Refs are not maintained in the rendered order, and
   * neither is `this._renderedChildren` (surprisingly).
   */
  getStatusDisplays: function () {
    var name;
    var orderOfUsernames = [];
    // TODO: Update this to a better test that doesn't rely so much on internal
    // implementation details.
    var statusDisplays = 
    ReactInstanceMap.get(this).
    _renderedComponent.
    _renderedChildren;
    for (name in statusDisplays) {
      var child = statusDisplays[name];
      var isPresent = !!child;
      if (isPresent) {
        orderOfUsernames[child._mountIndex] = getOriginalKey(name);}}


    var res = {};
    var i;
    for (i = 0; i < orderOfUsernames.length; i++) {
      var key = orderOfUsernames[i];
      res[key] = this.refs[key];}

    return res;}, 

  render: function () {
    var children = [];
    var key;
    for (key in this.props.usernameToStatus) {
      var status = this.props.usernameToStatus[key];
      children.push(
      !status ? null : 
      React.createElement(StatusDisplay, { key: key, ref: key, status: status, __source: { fileName: _jsxFileName, lineNumber: 113 } }));}


    return (
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 117 } }, 
      children));} });






function getInternalStateByUserName(statusDisplays) {
  return mapObject(statusDisplays, function (statusDisplay, key) {
    return statusDisplay.getInternalState();});}



/**
 * Verifies that the rendered `StatusDisplay` instances match the `props` that
 * were responsible for allocating them. Checks the content of the user's status
 * message as well as the order of them.
 */
function verifyStatuses(statusDisplays, props) {
  var nonEmptyStatusDisplays = stripEmptyValues(statusDisplays);
  var nonEmptyStatusProps = stripEmptyValues(props.usernameToStatus);
  var username;
  expect(Object.keys(nonEmptyStatusDisplays).length).
  toEqual(Object.keys(nonEmptyStatusProps).length);
  for (username in nonEmptyStatusDisplays) {
    if (!nonEmptyStatusDisplays.hasOwnProperty(username)) {
      continue;}

    expect(nonEmptyStatusDisplays[username].getStatus()).
    toEqual(nonEmptyStatusProps[username]);}


  // now go the other way to make sure we got them all.
  for (username in nonEmptyStatusProps) {
    if (!nonEmptyStatusProps.hasOwnProperty(username)) {
      continue;}

    expect(nonEmptyStatusDisplays[username].getStatus()).
    toEqual(nonEmptyStatusProps[username]);}


  expect(Object.keys(nonEmptyStatusDisplays)).
  toEqual(Object.keys(nonEmptyStatusProps));}


/**
 * For all statusDisplays that existed in the previous iteration of the
 * sequence, verify that the state has been preserved. `StatusDisplay` contains
 * a unique number that allows us to track internal state across ordering
 * movements.
 */
function verifyStatesPreserved(lastInternalStates, statusDisplays) {
  var key;
  for (key in statusDisplays) {
    if (!statusDisplays.hasOwnProperty(key)) {
      continue;}

    if (lastInternalStates[key]) {
      expect(lastInternalStates[key]).
      toEqual(statusDisplays[key].getInternalState());}}}





/**
 * Verifies that the internal representation of a set of `renderedChildren`
 * accurately reflects what is in the DOM.
 */
function verifyDomOrderingAccurate(parentInstance, statusDisplays) {
  var containerNode = ReactDOM.findDOMNode(parentInstance);
  var statusDisplayNodes = containerNode.childNodes;
  var i;
  var orderedDomIDs = [];
  for (i = 0; i < statusDisplayNodes.length; i++) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(statusDisplayNodes[i]);
    orderedDomIDs.push(inst._rootNodeID);}


  var orderedLogicalIDs = [];
  var username;
  for (username in statusDisplays) {
    if (!statusDisplays.hasOwnProperty(username)) {
      continue;}

    var statusDisplay = statusDisplays[username];
    orderedLogicalIDs.push(
    ReactInstanceMap.get(statusDisplay)._renderedComponent._rootNodeID);}


  expect(orderedDomIDs).toEqual(orderedLogicalIDs);}


/**
 * Todo: Check that internal state is preserved across transitions
 */
function testPropsSequence(sequence) {
  var i;
  var container = document.createElement('div');
  var parentInstance = ReactDOM.render(
  React.createElement(FriendsStatusDisplay, _extends({}, sequence[0], { __source: { fileName: _jsxFileName, lineNumber: 218 } })), 
  container);

  var statusDisplays = parentInstance.getStatusDisplays();
  var lastInternalStates = getInternalStateByUserName(statusDisplays);
  verifyStatuses(statusDisplays, sequence[0]);

  for (i = 1; i < sequence.length; i++) {
    ReactDOM.render(
    React.createElement(FriendsStatusDisplay, _extends({}, sequence[i], { __source: { fileName: _jsxFileName, lineNumber: 227 } })), 
    container);

    statusDisplays = parentInstance.getStatusDisplays();
    verifyStatuses(statusDisplays, sequence[i]);
    verifyStatesPreserved(lastInternalStates, statusDisplays);
    verifyDomOrderingAccurate(parentInstance, statusDisplays);

    lastInternalStates = getInternalStateByUserName(statusDisplays);}}



describe('ReactMultiChildReconcile', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();});


  it('should reset internal state if removed then readded', function () {
    // Test basics.
    var props = { 
      usernameToStatus: { 
        jcw: 'jcwStatus' } };



    var container = document.createElement('div');
    var parentInstance = ReactDOM.render(
    React.createElement(FriendsStatusDisplay, _extends({}, props, { __source: { fileName: _jsxFileName, lineNumber: 254 } })), 
    container);

    var statusDisplays = parentInstance.getStatusDisplays();
    var startingInternalState = statusDisplays.jcw.getInternalState();

    // Now remove the child.
    ReactDOM.render(
    React.createElement(FriendsStatusDisplay, { __source: { fileName: _jsxFileName, lineNumber: 262 } }), 
    container);

    statusDisplays = parentInstance.getStatusDisplays();
    expect(statusDisplays.jcw).toBeFalsy();

    // Now reset the props that cause there to be a child
    ReactDOM.render(
    React.createElement(FriendsStatusDisplay, _extends({}, props, { __source: { fileName: _jsxFileName, lineNumber: 270 } })), 
    container);

    statusDisplays = parentInstance.getStatusDisplays();
    expect(statusDisplays.jcw).toBeTruthy();
    expect(statusDisplays.jcw.getInternalState()).
    not.toBe(startingInternalState);});


  it('should create unique identity', function () {
    // Test basics.
    var usernameToStatus = { 
      jcw: 'jcwStatus', 
      awalke: 'awalkeStatus', 
      bob: 'bobStatus' };


    testPropsSequence([{ usernameToStatus: usernameToStatus }]);});


  it('should preserve order if children order has not changed', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        jcw: 'jcwstatus2', 
        jordanjcw: 'jordanjcwstatus2' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should transition from zero to one children correctly', function () {
    var PROPS_SEQUENCE = [
    { usernameToStatus: {} }, 
    { 
      usernameToStatus: { 
        first: 'firstStatus' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should transition from one to zero children correctly', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        first: 'firstStatus' } }, 


    { usernameToStatus: {} }];

    testPropsSequence(PROPS_SEQUENCE);});


  it('should transition from one child to null children', function () {
    testPropsSequence([
    { 
      usernameToStatus: { 
        first: 'firstStatus' } }, 


    {}]);});



  it('should transition from null children to one child', function () {
    testPropsSequence([
    {}, 
    { 
      usernameToStatus: { 
        first: 'firstStatus' } }]);});





  it('should transition from zero children to null children', function () {
    testPropsSequence([
    { 
      usernameToStatus: {} }, 

    {}]);});



  it('should transition from null children to zero children', function () {
    testPropsSequence([
    {}, 
    { 
      usernameToStatus: {} }]);});






  /**
   * `FriendsStatusDisplay` renders nulls as empty children (it's a convention
   * of `FriendsStatusDisplay`, nothing related to React or these test cases.
   */
  it('should remove nulled out children at the beginning', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        jcw: null, 
        jordanjcw: 'jordanjcwstatus2' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should remove nulled out children at the end', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        jcw: 'jcwstatus2', 
        jordanjcw: null } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should reverse the order of two children', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        userOne: 'userOneStatus', 
        userTwo: 'userTwoStatus' } }, 


    { 
      usernameToStatus: { 
        userTwo: 'userTwoStatus', 
        userOne: 'userOneStatus' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should reverse the order of more than two children', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        userOne: 'userOneStatus', 
        userTwo: 'userTwoStatus', 
        userThree: 'userThreeStatus' } }, 


    { 
      usernameToStatus: { 
        userThree: 'userThreeStatus', 
        userTwo: 'userTwoStatus', 
        userOne: 'userOneStatus' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should cycle order correctly', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        userOne: 'userOneStatus', 
        userTwo: 'userTwoStatus', 
        userThree: 'userThreeStatus', 
        userFour: 'userFourStatus' } }, 


    { 
      usernameToStatus: { 
        userTwo: 'userTwoStatus', 
        userThree: 'userThreeStatus', 
        userFour: 'userFourStatus', 
        userOne: 'userOneStatus' } }, 


    { 
      usernameToStatus: { 
        userThree: 'userThreeStatus', 
        userFour: 'userFourStatus', 
        userOne: 'userOneStatus', 
        userTwo: 'userTwoStatus' } }, 


    { 
      usernameToStatus: { 
        userFour: 'userFourStatus', 
        userOne: 'userOneStatus', 
        userTwo: 'userTwoStatus', 
        userThree: 'userThreeStatus' } }, 


    { 
      usernameToStatus: { // Full circle!
        userOne: 'userOneStatus', 
        userTwo: 'userTwoStatus', 
        userThree: 'userThreeStatus', 
        userFour: 'userFourStatus' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should cycle order correctly in the other direction', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        userOne: 'userOneStatus', 
        userTwo: 'userTwoStatus', 
        userThree: 'userThreeStatus', 
        userFour: 'userFourStatus' } }, 


    { 
      usernameToStatus: { 
        userFour: 'userFourStatus', 
        userOne: 'userOneStatus', 
        userTwo: 'userTwoStatus', 
        userThree: 'userThreeStatus' } }, 


    { 
      usernameToStatus: { 
        userThree: 'userThreeStatus', 
        userFour: 'userFourStatus', 
        userOne: 'userOneStatus', 
        userTwo: 'userTwoStatus' } }, 


    { 
      usernameToStatus: { 
        userTwo: 'userTwoStatus', 
        userThree: 'userThreeStatus', 
        userFour: 'userFourStatus', 
        userOne: 'userOneStatus' } }, 


    { 
      usernameToStatus: { // Full circle!
        userOne: 'userOneStatus', 
        userTwo: 'userTwoStatus', 
        userThree: 'userThreeStatus', 
        userFour: 'userFourStatus' } }];



    testPropsSequence(PROPS_SEQUENCE);});



  it('should remove nulled out children and ignore new null children', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        jordanjcw: 'jordanjcwstatus2', 
        jcw: null, 
        another: null } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should remove nulled out children and reorder remaining', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus', 
        john: 'johnStatus', // john will go away
        joe: 'joeStatus' } }, 


    { 
      usernameToStatus: { 
        jordanjcw: 'jordanjcwStatus', 
        joe: 'joeStatus', 
        jcw: 'jcwStatus' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should append children to the end', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus', 
        jordanjcwnew: 'jordanjcwnewStatus' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should append multiple children to the end', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus', 
        jordanjcwnew: 'jordanjcwnewStatus', 
        jordanjcwnew2: 'jordanjcwnewStatus2' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should prepend children to the beginning', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        newUsername: 'newUsernameStatus', 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should prepend multiple children to the beginning', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        newNewUsername: 'newNewUsernameStatus', 
        newUsername: 'newUsernameStatus', 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should not prepend an empty child to the beginning', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        emptyUsername: null, 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should not append an empty child to the end', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus', 
        emptyUsername: null } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should not insert empty children in the middle', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        jcw: 'jcwstatus2', 
        skipOverMe: null, 
        skipOverMeToo: null, 
        definitelySkipOverMe: null, 
        jordanjcw: 'jordanjcwstatus2' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should insert one new child in the middle', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        jcw: 'jcwstatus2', 
        insertThis: 'insertThisStatus', 
        jordanjcw: 'jordanjcwstatus2' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should insert multiple new truthy children in the middle', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        jcw: 'jcwstatus2', 
        insertThis: 'insertThisStatus', 
        insertThisToo: 'insertThisTooStatus', 
        definitelyInsertThisToo: 'definitelyInsertThisTooStatus', 
        jordanjcw: 'jordanjcwstatus2' } }];



    testPropsSequence(PROPS_SEQUENCE);});


  it('should insert non-empty children in middle where nulls were', function () {
    var PROPS_SEQUENCE = [
    { 
      usernameToStatus: { 
        jcw: 'jcwStatus', 
        insertThis: null, 
        insertThisToo: null, 
        definitelyInsertThisToo: null, 
        jordanjcw: 'jordanjcwStatus' } }, 


    { 
      usernameToStatus: { 
        jcw: 'jcwstatus2', 
        insertThis: 'insertThisStatus', 
        insertThisToo: 'insertThisTooStatus', 
        definitelyInsertThisToo: 'definitelyInsertThisTooStatus', 
        jordanjcw: 'jordanjcwstatus2' } }];



    testPropsSequence(PROPS_SEQUENCE);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js":246,"fbjs/lib/mapObject":419,"object-assign":425}],268:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactMultiChildText-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
// console.log(require.resolve('ReactDOM'));
// console.log(require.resolve('ReactTestUtils'));
// console.log(require.resolve('React'));
// throw new Error('HIHIHIHIHHHIHIHIIHIHIHIH');

// Helpers
var testAllPermutations = function (testCases) {
  for (var i = 0; i < testCases.length; i += 2) {
    var renderWithChildren = testCases[i];
    var expectedResultAfterRender = testCases[i + 1];

    for (var j = 0; j < testCases.length; j += 2) {
      var updateWithChildren = testCases[j];
      var expectedResultAfterUpdate = testCases[j + 1];

      var container = document.createElement('div');
      var d = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 33 } }, renderWithChildren), container);
      expectChildren(d, expectedResultAfterRender);

      d = ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 36 } }, updateWithChildren), container);
      expectChildren(d, expectedResultAfterUpdate);}}};




var expectChildren = function (d, children) {
  var outerNode = ReactDOM.findDOMNode(d);
  var textNode;
  if (typeof children === 'string') {
    textNode = outerNode.firstChild;

    if (children === '') {
      expect(textNode != null).toBe(false);} else 
    {
      expect(textNode != null).toBe(true);
      expect(textNode.nodeType).toBe(3);
      expect(textNode.data).toBe('' + children);}} else 

  {
    var openingCommentNode;
    var closingCommentNode;
    var mountIndex = 0;

    for (var i = 0; i < children.length; i++) {
      var child = children[i];

      if (typeof child === 'string') {
        openingCommentNode = outerNode.childNodes[mountIndex];

        expect(openingCommentNode.nodeType).toBe(8);
        expect(openingCommentNode.nodeValue).toMatch(' react-text: [0-9]+ ');

        if (child === '') {
          textNode = null;
          closingCommentNode = openingCommentNode.nextSibling;
          mountIndex += 2;} else 
        {
          textNode = openingCommentNode.nextSibling;
          closingCommentNode = textNode.nextSibling;
          mountIndex += 3;}


        if (textNode) {
          expect(textNode.nodeType).toBe(3);
          expect(textNode.data).toBe('' + child);}


        expect(closingCommentNode.nodeType).toBe(8);
        expect(closingCommentNode.nodeValue).toBe(' /react-text ');} else 
      {
        var elementDOMNode = outerNode.childNodes[mountIndex];
        expect(elementDOMNode.tagName).toBe('DIV');
        mountIndex++;}}}};






/**
 * ReactMultiChild DOM integration test. In ReactDOM components, we make sure
 * that single children that are strings are treated as "content" which is much
 * faster to render and update.
 */
describe('ReactMultiChildText', function () {
  it('should correctly handle all possible children for render and update', function () {
    spyOn(console, 'error');
    testAllPermutations([
    // basic values
    undefined, [], 
    null, [], 
    false, [], 
    true, [], 
    0, '0', 
    1.2, '1.2', 
    '', '', 
    'foo', 'foo', 

    [], [], 
    [undefined], [], 
    [null], [], 
    [false], [], 
    [true], [], 
    [0], ['0'], 
    [1.2], ['1.2'], 
    [''], [''], 
    ['foo'], ['foo'], 
    [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 124 } })], [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 124 } })], 

    // two adjacent values
    [true, 0], ['0'], 
    [0, 0], ['0', '0'], 
    [1.2, 0], ['1.2', '0'], 
    [0, ''], ['0', ''], 
    ['foo', 0], ['foo', '0'], 
    [0, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 132 } })], ['0', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 132 } })], 

    [true, 1.2], ['1.2'], 
    [1.2, 0], ['1.2', '0'], 
    [1.2, 1.2], ['1.2', '1.2'], 
    [1.2, ''], ['1.2', ''], 
    ['foo', 1.2], ['foo', '1.2'], 
    [1.2, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 139 } })], ['1.2', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 139 } })], 

    [true, ''], [''], 
    ['', 0], ['', '0'], 
    [1.2, ''], ['1.2', ''], 
    ['', ''], ['', ''], 
    ['foo', ''], ['foo', ''], 
    ['', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 146 } })], ['', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 146 } })], 

    [true, 'foo'], ['foo'], 
    ['foo', 0], ['foo', '0'], 
    [1.2, 'foo'], ['1.2', 'foo'], 
    ['foo', ''], ['foo', ''], 
    ['foo', 'foo'], ['foo', 'foo'], 
    ['foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 153 } })], ['foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 153 } })], 

    // values separated by an element
    [true, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 156 } }), true], [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 156 } })], 
    [1.2, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 157 } }), 1.2], ['1.2', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 157 } }), '1.2'], 
    ['', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 158 } }), ''], ['', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 158 } }), ''], 
    ['foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 159 } }), 'foo'], ['foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 159 } }), 'foo'], 

    [true, 1.2, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 161 } }), '', 'foo'], ['1.2', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 161 } }), '', 'foo'], 
    [1.2, '', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 162 } }), 'foo', true], ['1.2', '', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 162 } }), 'foo'], 
    ['', 'foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 163 } }), true, 1.2], ['', 'foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 163 } }), '1.2'], 

    [true, 1.2, '', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 165 } }), 'foo', true, 1.2], ['1.2', '', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 165 } }), 'foo', '1.2'], 
    ['', 'foo', true, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 166 } }), 1.2, '', 'foo'], ['', 'foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 166 } }), '1.2', '', 'foo'], 

    // values inside arrays
    [[true], [true]], [], 
    [[1.2], [1.2]], ['1.2', '1.2'], 
    [[''], ['']], ['', ''], 
    [['foo'], ['foo']], ['foo', 'foo'], 
    [[React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 173 } })], [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 173 } })]], [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 173 } }), React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 173 } })], 

    [[true, 1.2, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 175 } })], '', 'foo'], ['1.2', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 175 } }), '', 'foo'], 
    [1.2, '', [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 176 } }), 'foo', true]], ['1.2', '', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 176 } }), 'foo'], 
    ['', ['foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 177 } }), true], 1.2], ['', 'foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 177 } }), '1.2'], 

    [true, [1.2, '', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 179 } }), 'foo'], true, 1.2], ['1.2', '', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 179 } }), 'foo', '1.2'], 
    ['', 'foo', [true, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 180 } }), 1.2, ''], 'foo'], ['', 'foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 180 } }), '1.2', '', 'foo'], 

    // values inside elements
    [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 183 } }, true, 1.2, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 183 } })), '', 'foo'], [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 183 } }), '', 'foo'], 
    [1.2, '', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 184 } }, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 184 } }), 'foo', true)], ['1.2', '', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 184 } })], 
    ['', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 185 } }, 'foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 185 } }), true), 1.2], ['', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 185 } }), '1.2'], 

    [true, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 187 } }, 1.2, '', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 187 } }), 'foo'), true, 1.2], [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 187 } }), '1.2'], 
    ['', 'foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 188 } }, true, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 188 } }), 1.2, ''), 'foo'], ['', 'foo', React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 188 } }), 'foo']]);

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Warning: Each child in an array or iterator should have a unique "key" prop.');});



  it('should throw if rendering both HTML and children', function () {
    expect(function () {
      ReactTestUtils.renderIntoDocument(
      React.createElement('div', { dangerouslySetInnerHTML: { __html: 'abcdef' }, __source: { fileName: _jsxFileName, lineNumber: 199 } }, 'ghjkl'));}).

    toThrow();});


  it('should render between nested components and inline children', function () {
    ReactTestUtils.renderIntoDocument(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 205 } }, React.createElement('h1', { __source: { fileName: _jsxFileName, lineNumber: 205 } }, React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 205 } }), React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 205 } }))));

    expect(function () {
      ReactTestUtils.renderIntoDocument(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 208 } }, React.createElement('h1', { __source: { fileName: _jsxFileName, lineNumber: 208 } }, 'A')));}).
    not.toThrow();

    expect(function () {
      ReactTestUtils.renderIntoDocument(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 212 } }, React.createElement('h1', { __source: { fileName: _jsxFileName, lineNumber: 212 } }, ['A'])));}).
    not.toThrow();

    expect(function () {
      ReactTestUtils.renderIntoDocument(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 216 } }, React.createElement('h1', { __source: { fileName: _jsxFileName, lineNumber: 216 } }, ['A', 'B'])));}).
    not.toThrow();});


  it('should reorder keyed text nodes', function () {
    spyOn(console, 'error');

    var container = document.createElement('div');
    ReactDOM.render(
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 225 } }, new Map([['a', 'alpha'], ['b', 'beta']])), 
    container);


    var childNodes = container.firstChild.childNodes;
    var alpha1 = childNodes[0];
    var alpha2 = childNodes[1];
    var alpha3 = childNodes[2];
    var beta1 = childNodes[3];
    var beta2 = childNodes[4];
    var beta3 = childNodes[5];

    ReactDOM.render(
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 238 } }, new Map([['b', 'beta'], ['a', 'alpha']])), 
    container);


    childNodes = container.firstChild.childNodes;
    expect(childNodes[0]).toBe(beta1);
    expect(childNodes[1]).toBe(beta2);
    expect(childNodes[2]).toBe(beta3);
    expect(childNodes[3]).toBe(alpha1);
    expect(childNodes[4]).toBe(alpha2);
    expect(childNodes[5]).toBe(alpha3);

    // Using Maps as children gives a single warning
    expect(console.error.calls.count()).toBe(1);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],269:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactStateSetters-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactStateSetters = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactStateSetters.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

var TestComponent;
var TestComponentWithMixin;

describe('ReactStateSetters', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();

    TestComponent = React.createClass({ displayName: 'TestComponent', 
      getInitialState: function () {
        return { foo: 'foo' };}, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 31 } });} });



    TestComponentWithMixin = React.createClass({ displayName: 'TestComponentWithMixin', 
      mixins: [ReactStateSetters.Mixin], 

      getInitialState: function () {
        return { foo: 'foo' };}, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 43 } });} });});




  it('createStateSetter should update state', function () {
    var instance = React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 49 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.state).toEqual({ foo: 'foo' });

    var setter = ReactStateSetters.createStateSetter(
    instance, 
    function (a, b, c) {
      return { 
        foo: a + b + c, 
        bar: a * b * c };});



    expect(instance.state).toEqual({ foo: 'foo' });

    setter(1, 2, 3);
    expect(instance.state).toEqual({ foo: 6, bar: 6 });

    setter(10, 11, 12);
    expect(instance.state).toEqual({ foo: 33, bar: 1320 });});


  it('createStateKeySetter should update state', function () {
    var instance = React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 72 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.state).toEqual({ foo: 'foo' });

    var setter = ReactStateSetters.createStateKeySetter(instance, 'foo');

    expect(instance.state).toEqual({ foo: 'foo' });

    setter('bar');
    expect(instance.state).toEqual({ foo: 'bar' });

    setter('baz');
    expect(instance.state).toEqual({ foo: 'baz' });});


  it('createStateKeySetter is memoized', function () {
    var instance = React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 88 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.state).toEqual({ foo: 'foo' });

    var foo1 = ReactStateSetters.createStateKeySetter(instance, 'foo');
    var bar1 = ReactStateSetters.createStateKeySetter(instance, 'bar');

    var foo2 = ReactStateSetters.createStateKeySetter(instance, 'foo');
    var bar2 = ReactStateSetters.createStateKeySetter(instance, 'bar');

    expect(foo2).toBe(foo1);
    expect(bar2).toBe(bar1);});


  it('createStateSetter should update state from mixin', function () {
    var instance = React.createElement(TestComponentWithMixin, { __source: { fileName: _jsxFileName, lineNumber: 103 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.state).toEqual({ foo: 'foo' });

    var setter = instance.createStateSetter(
    function (a, b, c) {
      return { 
        foo: a + b + c, 
        bar: a * b * c };});



    expect(instance.state).toEqual({ foo: 'foo' });

    setter(1, 2, 3);
    expect(instance.state).toEqual({ foo: 6, bar: 6 });

    setter(10, 11, 12);
    expect(instance.state).toEqual({ foo: 33, bar: 1320 });});


  it('createStateKeySetter should update state with mixin', function () {
    var instance = React.createElement(TestComponentWithMixin, { __source: { fileName: _jsxFileName, lineNumber: 125 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.state).toEqual({ foo: 'foo' });

    var setter = instance.createStateKeySetter('foo');

    expect(instance.state).toEqual({ foo: 'foo' });

    setter('bar');
    expect(instance.state).toEqual({ foo: 'bar' });

    setter('baz');
    expect(instance.state).toEqual({ foo: 'baz' });});


  it('createStateKeySetter is memoized with mixin', function () {
    var instance = React.createElement(TestComponentWithMixin, { __source: { fileName: _jsxFileName, lineNumber: 141 } });
    instance = ReactTestUtils.renderIntoDocument(instance);
    expect(instance.state).toEqual({ foo: 'foo' });

    var foo1 = instance.createStateKeySetter('foo');
    var bar1 = instance.createStateKeySetter('bar');

    var foo2 = instance.createStateKeySetter('foo');
    var bar2 = instance.createStateKeySetter('bar');

    expect(foo2).toBe(foo1);
    expect(bar2).toBe(bar1);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactStateSetters.js":253,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],270:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactStatelessComponent-test.js', _assign = require('object-assign');

var React;
var ReactDOM;
var ReactTestUtils;

function StatelessComponent(props) {
  return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 19 } }, props.name);}


describe('ReactStatelessComponent', function () {

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  it('should render stateless component', function () {
    var el = document.createElement('div');
    ReactDOM.render(React.createElement(StatelessComponent, { name: 'A', __source: { fileName: _jsxFileName, lineNumber: 32 } }), el);

    expect(el.textContent).toBe('A');});


  it('should update stateless component', function () {
    var Parent = React.createClass({ displayName: 'Parent', 
      render: function () {
        return React.createElement(StatelessComponent, _extends({}, this.props, { __source: { fileName: _jsxFileName, lineNumber: 40 } }));} });



    var el = document.createElement('div');
    ReactDOM.render(React.createElement(Parent, { name: 'A', __source: { fileName: _jsxFileName, lineNumber: 45 } }), el);
    expect(el.textContent).toBe('A');

    ReactDOM.render(React.createElement(Parent, { name: 'B', __source: { fileName: _jsxFileName, lineNumber: 48 } }), el);
    expect(el.textContent).toBe('B');});


  it('should unmount stateless component', function () {
    var container = document.createElement('div');

    ReactDOM.render(React.createElement(StatelessComponent, { name: 'A', __source: { fileName: _jsxFileName, lineNumber: 55 } }), container);
    expect(container.textContent).toBe('A');

    ReactDOM.unmountComponentAtNode(container);
    expect(container.textContent).toBe('');});


  it('should pass context thru stateless component', function () {
    var Child = React.createClass({ displayName: 'Child', 
      contextTypes: { 
        test: React.PropTypes.string.isRequired }, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 69 } }, this.context.test);} });



    function Parent() {
      return React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 74 } });}


    var GrandParent = React.createClass({ displayName: 'GrandParent', 
      childContextTypes: { 
        test: React.PropTypes.string.isRequired }, 


      getChildContext: function () {
        return { test: this.props.test };}, 


      render: function () {
        return React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 87 } });} });



    var el = document.createElement('div');
    ReactDOM.render(React.createElement(GrandParent, { test: 'test', __source: { fileName: _jsxFileName, lineNumber: 92 } }), el);

    expect(el.textContent).toBe('test');

    ReactDOM.render(React.createElement(GrandParent, { test: 'mest', __source: { fileName: _jsxFileName, lineNumber: 96 } }), el);

    expect(el.textContent).toBe('mest');});


  it('should warn when stateless component returns array', function () {
    spyOn(console, 'error');
    function NotAComponent() {
      return [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 104 } }), React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 104 } })];}

    expect(function () {
      ReactTestUtils.renderIntoDocument(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 107 } }, React.createElement(NotAComponent, { __source: { fileName: _jsxFileName, lineNumber: 107 } })));}).
    toThrow();
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'NotAComponent(...): A valid React element (or null) must be returned. ' + 
    'You may have returned undefined, an array or some other invalid object.');});



  it('should throw on string refs in pure functions', function () {
    function Child() {
      return React.createElement('div', { ref: 'me', __source: { fileName: _jsxFileName, lineNumber: 118 } });}


    expect(function () {
      ReactTestUtils.renderIntoDocument(React.createElement(Child, { test: 'test', __source: { fileName: _jsxFileName, lineNumber: 122 } }));}).
    toThrowError(
    'Stateless function components cannot have refs.');});



  it('should warn when given a ref', function () {
    spyOn(console, 'error');

    var Parent = React.createClass({ 
      displayName: 'Parent', 
      render: function () {
        return React.createElement(StatelessComponent, { name: 'A', ref: 'stateless', __source: { fileName: _jsxFileName, lineNumber: 134 } });} });


    ReactTestUtils.renderIntoDocument(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 137 } }));

    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Stateless function components cannot be given refs ' + 
    '(See ref "stateless" in StatelessComponent created by Parent). ' + 
    'Attempts to access this ref will fail.');});



  it('should provide a null ref', function () {
    function Child() {
      return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 149 } });}


    var comp = ReactTestUtils.renderIntoDocument(React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 152 } }));
    expect(comp).toBe(null);});


  it('should use correct name in key warning', function () {
    function Child() {
      return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 158 } }, [React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 158 } })]);}


    spyOn(console, 'error');
    ReactTestUtils.renderIntoDocument(React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 162 } }));
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain('a unique "key" prop');
    expect(console.error.calls.argsFor(0)[0]).toContain('Child');});


  it('should support default props and prop types', function () {
    function Child(props) {
      return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 170 } }, props.test);}

    Child.defaultProps = { test: 2 };
    Child.propTypes = { test: React.PropTypes.string };

    spyOn(console, 'error');
    ReactTestUtils.renderIntoDocument(React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 176 } }));
    expect(console.error.calls.count()).toBe(1);
    expect(
    console.error.calls.argsFor(0)[0].replace(/\(at .+?:\d+\)/g, '(at **)')).
    toBe(
    'Warning: Failed prop type: Invalid prop `test` of type `number` ' + 
    'supplied to `Child`, expected `string`.\n' + 
    '    in Child (at **)');});



  it('should receive context', function () {
    var Parent = React.createClass({ displayName: 'Parent', 
      childContextTypes: { 
        lang: React.PropTypes.string }, 

      getChildContext: function () {
        return { lang: 'en' };}, 

      render: function () {
        return React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 196 } });} });


    function Child(props, context) {
      return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 200 } }, context.lang);}

    Child.contextTypes = { lang: React.PropTypes.string };

    var el = document.createElement('div');
    ReactDOM.render(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 205 } }), el);
    expect(el.textContent).toBe('en');});


  it('should work with arrow functions', function () {
    var Child = function () {
      return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 211 } });};

    // Will create a new bound function without a prototype, much like a native
    // arrow function.
    Child = Child.bind(this);

    expect(function () {return ReactTestUtils.renderIntoDocument(React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 217 } }));}).not.toThrow();});


  it('should allow simple functions to return null', function () {
    var Child = function () {
      return null;};

    expect(function () {return ReactTestUtils.renderIntoDocument(React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 224 } }));}).not.toThrow();});


  it('should allow simple functions to return false', function () {
    function Child() {
      return false;}

    expect(function () {return ReactTestUtils.renderIntoDocument(React.createElement(Child, { __source: { fileName: _jsxFileName, lineNumber: 231 } }));}).not.toThrow();});


  it('should warn when using non-React functions in JSX', function () {
    spyOn(console, 'error');
    function NotAComponent() {
      return [React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 237 } }), React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 237 } })];}

    expect(function () {
      ReactTestUtils.renderIntoDocument(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 240 } }, React.createElement(NotAComponent, { __source: { fileName: _jsxFileName, lineNumber: 240 } })));}).
    toThrow(); // has no method 'render'
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'NotAComponent(...): A valid React element (or null) must be returned. You may ' + 
    'have returned undefined, an array or some other invalid object.');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"object-assign":425}],271:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\ReactUpdates-test.js';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var React;
var ReactDOM;
var ReactTestUtils;
var ReactUpdates;

describe('ReactUpdates', function () {
  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');});


  it('should batch state when updating state twice', function () {
    var updateCount = 0;
    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { x: 0 };}, 

      componentDidUpdate: function () {
        updateCount++;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 37 } }, this.state.x);} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 41 } }));
    expect(instance.state.x).toBe(0);

    ReactUpdates.batchedUpdates(function () {
      instance.setState({ x: 1 });
      instance.setState({ x: 2 });
      expect(instance.state.x).toBe(0);
      expect(updateCount).toBe(0);});


    expect(instance.state.x).toBe(2);
    expect(updateCount).toBe(1);});


  it('should batch state when updating two different state keys', function () {
    var updateCount = 0;
    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { x: 0, y: 0 };}, 

      componentDidUpdate: function () {
        updateCount++;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 65 } }, '(', this.state.x, ', ', this.state.y, ')');} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 69 } }));
    expect(instance.state.x).toBe(0);
    expect(instance.state.y).toBe(0);

    ReactUpdates.batchedUpdates(function () {
      instance.setState({ x: 1 });
      instance.setState({ y: 2 });
      expect(instance.state.x).toBe(0);
      expect(instance.state.y).toBe(0);
      expect(updateCount).toBe(0);});


    expect(instance.state.x).toBe(1);
    expect(instance.state.y).toBe(2);
    expect(updateCount).toBe(1);});


  it('should batch state and props together', function () {
    var updateCount = 0;
    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { y: 0 };}, 

      componentDidUpdate: function () {
        updateCount++;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 96 } }, '(', this.props.x, ', ', this.state.y, ')');} });



    var container = document.createElement('div');
    var instance = ReactDOM.render(React.createElement(Component, { x: 0, __source: { fileName: _jsxFileName, lineNumber: 101 } }), container);
    expect(instance.props.x).toBe(0);
    expect(instance.state.y).toBe(0);

    ReactUpdates.batchedUpdates(function () {
      ReactDOM.render(React.createElement(Component, { x: 1, __source: { fileName: _jsxFileName, lineNumber: 106 } }), container);
      instance.setState({ y: 2 });
      expect(instance.props.x).toBe(0);
      expect(instance.state.y).toBe(0);
      expect(updateCount).toBe(0);});


    expect(instance.props.x).toBe(1);
    expect(instance.state.y).toBe(2);
    expect(updateCount).toBe(1);});


  it('should batch parent/child state updates together', function () {
    var parentUpdateCount = 0;
    var Parent = React.createClass({ displayName: 'Parent', 
      getInitialState: function () {
        return { x: 0 };}, 

      componentDidUpdate: function () {
        parentUpdateCount++;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 128 } }, React.createElement(Child, { ref: 'child', x: this.state.x, __source: { fileName: _jsxFileName, lineNumber: 128 } }));} });


    var childUpdateCount = 0;
    var Child = React.createClass({ displayName: 'Child', 
      getInitialState: function () {
        return { y: 0 };}, 

      componentDidUpdate: function () {
        childUpdateCount++;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 140 } }, this.props.x + this.state.y);} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 144 } }));
    var child = instance.refs.child;
    expect(instance.state.x).toBe(0);
    expect(child.state.y).toBe(0);

    ReactUpdates.batchedUpdates(function () {
      instance.setState({ x: 1 });
      child.setState({ y: 2 });
      expect(instance.state.x).toBe(0);
      expect(child.state.y).toBe(0);
      expect(parentUpdateCount).toBe(0);
      expect(childUpdateCount).toBe(0);});


    expect(instance.state.x).toBe(1);
    expect(child.state.y).toBe(2);
    expect(parentUpdateCount).toBe(1);
    expect(childUpdateCount).toBe(1);});


  it('should batch child/parent state updates together', function () {
    var parentUpdateCount = 0;
    var Parent = React.createClass({ displayName: 'Parent', 
      getInitialState: function () {
        return { x: 0 };}, 

      componentDidUpdate: function () {
        parentUpdateCount++;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 174 } }, React.createElement(Child, { ref: 'child', x: this.state.x, __source: { fileName: _jsxFileName, lineNumber: 174 } }));} });


    var childUpdateCount = 0;
    var Child = React.createClass({ displayName: 'Child', 
      getInitialState: function () {
        return { y: 0 };}, 

      componentDidUpdate: function () {
        childUpdateCount++;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 186 } }, this.props.x + this.state.y);} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 190 } }));
    var child = instance.refs.child;
    expect(instance.state.x).toBe(0);
    expect(child.state.y).toBe(0);

    ReactUpdates.batchedUpdates(function () {
      child.setState({ y: 2 });
      instance.setState({ x: 1 });
      expect(instance.state.x).toBe(0);
      expect(child.state.y).toBe(0);
      expect(parentUpdateCount).toBe(0);
      expect(childUpdateCount).toBe(0);});


    expect(instance.state.x).toBe(1);
    expect(child.state.y).toBe(2);
    expect(parentUpdateCount).toBe(1);

    // Batching reduces the number of updates here to 1.
    expect(childUpdateCount).toBe(1);});


  it('should support chained state updates', function () {
    var updateCount = 0;
    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { x: 0 };}, 

      componentDidUpdate: function () {
        updateCount++;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 222 } }, this.state.x);} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 226 } }));
    expect(instance.state.x).toBe(0);

    var innerCallbackRun = false;
    ReactUpdates.batchedUpdates(function () {
      instance.setState({ x: 1 }, function () {
        instance.setState({ x: 2 }, function () {
          expect(this).toBe(instance);
          innerCallbackRun = true;
          expect(instance.state.x).toBe(2);
          expect(updateCount).toBe(2);});

        expect(instance.state.x).toBe(1);
        expect(updateCount).toBe(1);});

      expect(instance.state.x).toBe(0);
      expect(updateCount).toBe(0);});


    expect(innerCallbackRun).toBeTruthy();
    expect(instance.state.x).toBe(2);
    expect(updateCount).toBe(2);});


  it('should batch forceUpdate together', function () {
    var shouldUpdateCount = 0;
    var updateCount = 0;
    var Component = React.createClass({ displayName: 'Component', 
      getInitialState: function () {
        return { x: 0 };}, 

      shouldComponentUpdate: function () {
        shouldUpdateCount++;}, 

      componentDidUpdate: function () {
        updateCount++;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 264 } }, this.state.x);} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 268 } }));
    expect(instance.state.x).toBe(0);

    var callbacksRun = 0;
    ReactUpdates.batchedUpdates(function () {
      instance.setState({ x: 1 }, function () {
        callbacksRun++;});

      instance.forceUpdate(function () {
        callbacksRun++;});

      expect(instance.state.x).toBe(0);
      expect(updateCount).toBe(0);});


    expect(callbacksRun).toBe(2);
    // shouldComponentUpdate shouldn't be called since we're forcing
    expect(shouldUpdateCount).toBe(0);
    expect(instance.state.x).toBe(1);
    expect(updateCount).toBe(1);});


  it('should update children even if parent blocks updates', function () {
    var parentRenderCount = 0;
    var childRenderCount = 0;

    var Parent = React.createClass({ displayName: 'Parent', 
      shouldComponentUpdate: function () {
        return false;}, 


      render: function () {
        parentRenderCount++;
        return React.createElement(Child, { ref: 'child', __source: { fileName: _jsxFileName, lineNumber: 301 } });} });



    var Child = React.createClass({ displayName: 'Child', 
      render: function () {
        childRenderCount++;
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 308 } });} });



    expect(parentRenderCount).toBe(0);
    expect(childRenderCount).toBe(0);

    var instance = React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 315 } });
    instance = ReactTestUtils.renderIntoDocument(instance);

    expect(parentRenderCount).toBe(1);
    expect(childRenderCount).toBe(1);

    ReactUpdates.batchedUpdates(function () {
      instance.setState({ x: 1 });});


    expect(parentRenderCount).toBe(1);
    expect(childRenderCount).toBe(1);

    ReactUpdates.batchedUpdates(function () {
      instance.refs.child.setState({ x: 1 });});


    expect(parentRenderCount).toBe(1);
    expect(childRenderCount).toBe(2);});


  it('should not reconcile children passed via props', function () {
    var numMiddleRenders = 0;
    var numBottomRenders = 0;

    var Top = React.createClass({ displayName: 'Top', 
      render: function () {
        return React.createElement(Middle, { __source: { fileName: _jsxFileName, lineNumber: 342 } }, React.createElement(Bottom, { __source: { fileName: _jsxFileName, lineNumber: 342 } }));} });



    var Middle = React.createClass({ displayName: 'Middle', 
      componentDidMount: function () {
        this.forceUpdate();}, 


      render: function () {
        numMiddleRenders++;
        return React.Children.only(this.props.children);} });



    var Bottom = React.createClass({ displayName: 'Bottom', 
      render: function () {
        numBottomRenders++;
        return null;} });



    ReactTestUtils.renderIntoDocument(React.createElement(Top, { __source: { fileName: _jsxFileName, lineNumber: 364 } }));
    expect(numMiddleRenders).toBe(2);
    expect(numBottomRenders).toBe(1);});


  it('should flow updates correctly', function () {
    var willUpdates = [];
    var didUpdates = [];

    var UpdateLoggingMixin = { 
      componentWillUpdate: function () {
        willUpdates.push(this.constructor.displayName);}, 

      componentDidUpdate: function () {
        didUpdates.push(this.constructor.displayName);} };



    var Box = React.createClass({ displayName: 'Box', 
      mixins: [UpdateLoggingMixin], 

      render: function () {
        return React.createElement('div', { ref: 'boxDiv', __source: { fileName: _jsxFileName, lineNumber: 386 } }, this.props.children);} });



    var Child = React.createClass({ displayName: 'Child', 
      mixins: [UpdateLoggingMixin], 

      render: function () {
        return React.createElement('span', { ref: 'span', __source: { fileName: _jsxFileName, lineNumber: 394 } }, 'child');} });



    var Switcher = React.createClass({ displayName: 'Switcher', 
      mixins: [UpdateLoggingMixin], 

      getInitialState: function () {
        return { tabKey: 'hello' };}, 


      render: function () {
        var child = this.props.children;

        return (
          React.createElement(Box, { ref: 'box', __source: { fileName: _jsxFileName, lineNumber: 409 } }, 
          React.createElement('div', { 
            ref: 'switcherDiv', 
            style: { 
              display: this.state.tabKey === child.key ? '' : 'none' }, __source: { fileName: _jsxFileName, lineNumber: 410 } }, 

          child)));} });






    var App = React.createClass({ displayName: 'App', 
      mixins: [UpdateLoggingMixin], 

      render: function () {
        return (
          React.createElement(Switcher, { ref: 'switcher', __source: { fileName: _jsxFileName, lineNumber: 427 } }, 
          React.createElement(Child, { key: 'hello', ref: 'child', __source: { fileName: _jsxFileName, lineNumber: 428 } })));} });





    var root = React.createElement(App, { __source: { fileName: _jsxFileName, lineNumber: 434 } });
    root = ReactTestUtils.renderIntoDocument(root);

    function expectUpdates(desiredWillUpdates, desiredDidUpdates) {
      var i;
      for (i = 0; i < desiredWillUpdates; i++) {
        expect(willUpdates).toContain(desiredWillUpdates[i]);}

      for (i = 0; i < desiredDidUpdates; i++) {
        expect(didUpdates).toContain(desiredDidUpdates[i]);}

      willUpdates = [];
      didUpdates = [];}


    function triggerUpdate(c) {
      c.setState({ x: 1 });}


    function testUpdates(components, desiredWillUpdates, desiredDidUpdates) {
      var i;

      ReactUpdates.batchedUpdates(function () {
        for (i = 0; i < components.length; i++) {
          triggerUpdate(components[i]);}});



      expectUpdates(desiredWillUpdates, desiredDidUpdates);

      // Try them in reverse order

      ReactUpdates.batchedUpdates(function () {
        for (i = components.length - 1; i >= 0; i--) {
          triggerUpdate(components[i]);}});



      expectUpdates(desiredWillUpdates, desiredDidUpdates);}

    testUpdates(
    [root.refs.switcher.refs.box, root.refs.switcher], 
    // Owner-child relationships have inverse will and did
    ['Switcher', 'Box'], 
    ['Box', 'Switcher']);


    testUpdates(
    [root.refs.child, root.refs.switcher.refs.box], 
    // Not owner-child so reconcile independently
    ['Box', 'Child'], 
    ['Box', 'Child']);


    testUpdates(
    [root.refs.child, root.refs.switcher], 
    // Switcher owns Box and Child, Box does not own Child
    ['Switcher', 'Box', 'Child'], 
    ['Box', 'Switcher', 'Child']);});



  it('should share reconcile transaction across different roots', function () {
    var ReconcileTransaction = ReactUpdates.ReactReconcileTransaction;
    spyOn(ReconcileTransaction, 'getPooled').and.callThrough();

    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 502 } }, this.props.text);} });



    var containerA = document.createElement('div');
    var containerB = document.createElement('div');

    // Initial renders aren't batched together yet...
    ReactUpdates.batchedUpdates(function () {
      ReactDOM.render(React.createElement(Component, { text: 'A1', __source: { fileName: _jsxFileName, lineNumber: 511 } }), containerA);
      ReactDOM.render(React.createElement(Component, { text: 'B1', __source: { fileName: _jsxFileName, lineNumber: 512 } }), containerB);});

    expect(ReconcileTransaction.getPooled.calls.count()).toBe(2);

    // ...but updates are! Here only one more transaction is used, which means
    // we only have to initialize and close the wrappers once.
    ReactUpdates.batchedUpdates(function () {
      ReactDOM.render(React.createElement(Component, { text: 'A2', __source: { fileName: _jsxFileName, lineNumber: 519 } }), containerA);
      ReactDOM.render(React.createElement(Component, { text: 'B2', __source: { fileName: _jsxFileName, lineNumber: 520 } }), containerB);});

    expect(ReconcileTransaction.getPooled.calls.count()).toBe(3);});


  it('should queue mount-ready handlers across different roots', function () {
    // We'll define two components A and B, then update both of them. When A's
    // componentDidUpdate handlers is called, B's DOM should already have been
    // updated.

    var a;
    var b;

    var aUpdated = false;

    var A = React.createClass({ displayName: 'A', 
      getInitialState: function () {
        return { x: 0 };}, 

      componentDidUpdate: function () {
        expect(ReactDOM.findDOMNode(b).textContent).toBe('B1');
        aUpdated = true;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 544 } }, 'A', this.state.x);} });



    var B = React.createClass({ displayName: 'B', 
      getInitialState: function () {
        return { x: 0 };}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 553 } }, 'B', this.state.x);} });



    a = ReactTestUtils.renderIntoDocument(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 557 } }));
    b = ReactTestUtils.renderIntoDocument(React.createElement(B, { __source: { fileName: _jsxFileName, lineNumber: 558 } }));

    ReactUpdates.batchedUpdates(function () {
      a.setState({ x: 1 });
      b.setState({ x: 1 });});


    expect(aUpdated).toBe(true);});


  it('should flush updates in the correct order', function () {
    var updates = [];
    var Outer = React.createClass({ displayName: 'Outer', 
      getInitialState: function () {
        return { x: 0 };}, 

      render: function () {
        updates.push('Outer-render-' + this.state.x);
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 576 } }, React.createElement(Inner, { x: this.state.x, ref: 'inner', __source: { fileName: _jsxFileName, lineNumber: 576 } }));}, 

      componentDidUpdate: function () {
        var x = this.state.x;
        updates.push('Outer-didUpdate-' + x);
        updates.push('Inner-setState-' + x);
        this.refs.inner.setState({ x: x }, function () {
          updates.push('Inner-callback-' + x);});} });



    var Inner = React.createClass({ displayName: 'Inner', 
      getInitialState: function () {
        return { x: 0 };}, 

      render: function () {
        updates.push('Inner-render-' + this.props.x + '-' + this.state.x);
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 593 } });}, 

      componentDidUpdate: function () {
        updates.push('Inner-didUpdate-' + this.props.x + '-' + this.state.x);} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 600 } }));

    updates.push('Outer-setState-1');
    instance.setState({ x: 1 }, function () {
      updates.push('Outer-callback-1');
      updates.push('Outer-setState-2');
      instance.setState({ x: 2 }, function () {
        updates.push('Outer-callback-2');});});



    /* eslint-disable indent */
    expect(updates).toEqual([
    'Outer-render-0', 
    'Inner-render-0-0', 

    'Outer-setState-1', 
    'Outer-render-1', 
    'Inner-render-1-0', 
    'Inner-didUpdate-1-0', 
    'Outer-didUpdate-1', 
    'Inner-setState-1', 
    'Inner-render-1-1', 
    'Inner-didUpdate-1-1', 
    'Inner-callback-1', 
    'Outer-callback-1', 

    'Outer-setState-2', 
    'Outer-render-2', 
    'Inner-render-2-1', 
    'Inner-didUpdate-2-1', 
    'Outer-didUpdate-2', 
    'Inner-setState-2', 
    'Inner-render-2-2', 
    'Inner-didUpdate-2-2', 
    'Inner-callback-2', 
    'Outer-callback-2']);

    /* eslint-enable indent */});


  it('should flush updates in the correct order across roots', function () {
    var instances = [];
    var updates = [];

    var MockComponent = React.createClass({ displayName: 'MockComponent', 
      render: function () {
        updates.push(this.props.depth);
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 648 } });}, 

      componentDidMount: function () {
        instances.push(this);
        if (this.props.depth < this.props.count) {
          ReactDOM.render(
          React.createElement(MockComponent, { 
            depth: this.props.depth + 1, 
            count: this.props.count, __source: { fileName: _jsxFileName, lineNumber: 654 } }), 

          ReactDOM.findDOMNode(this));}} });





    ReactTestUtils.renderIntoDocument(React.createElement(MockComponent, { depth: 0, count: 2, __source: { fileName: _jsxFileName, lineNumber: 664 } }));

    expect(updates).toEqual([0, 1, 2]);

    ReactUpdates.batchedUpdates(function () {
      // Simulate update on each component from top to bottom.
      instances.forEach(function (instance) {
        instance.forceUpdate();});});



    expect(updates).toEqual([0, 1, 2, 0, 1, 2]);});


  it('should queue nested updates', function () {
    // See https://github.com/facebook/react/issues/1147

    var X = React.createClass({ displayName: 'X', 
      getInitialState: function () {
        return { s: 0 };}, 

      render: function () {
        if (this.state.s === 0) {
          return (
            React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 688 } }, 
            React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 689 } }, '0')));} else 


        {
          return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 693 } }, '1');}}, 


      go: function () {
        this.setState({ s: 1 });
        this.setState({ s: 0 });
        this.setState({ s: 1 });} });



    var Y = React.createClass({ displayName: 'Y', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 706 } }, 
          React.createElement(Z, { __source: { fileName: _jsxFileName, lineNumber: 707 } })));} });





    var Z = React.createClass({ displayName: 'Z', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 715 } });}, 

      componentWillUpdate: function () {
        x.go();} });



    var x;
    var y;

    x = ReactTestUtils.renderIntoDocument(React.createElement(X, { __source: { fileName: _jsxFileName, lineNumber: 725 } }));
    y = ReactTestUtils.renderIntoDocument(React.createElement(Y, { __source: { fileName: _jsxFileName, lineNumber: 726 } }));
    expect(ReactDOM.findDOMNode(x).textContent).toBe('0');

    y.forceUpdate();
    expect(ReactDOM.findDOMNode(x).textContent).toBe('1');});


  it('should queue updates from during mount', function () {
    // See https://github.com/facebook/react/issues/1353
    var a;

    var A = React.createClass({ displayName: 'A', 
      getInitialState: function () {
        return { x: 0 };}, 

      componentWillMount: function () {
        a = this;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 745 } }, 'A', this.state.x);} });



    var B = React.createClass({ displayName: 'B', 
      componentWillMount: function () {
        a.setState({ x: 1 });}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 754 } });} });



    ReactUpdates.batchedUpdates(function () {
      ReactTestUtils.renderIntoDocument(
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 760 } }, 
      React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 761 } }), 
      React.createElement(B, { __source: { fileName: _jsxFileName, lineNumber: 762 } })));});




    expect(a.state.x).toBe(1);
    expect(ReactDOM.findDOMNode(a).textContent).toBe('A1');});


  it('calls componentWillReceiveProps setState callback properly', function () {
    var callbackCount = 0;
    var A = React.createClass({ displayName: 'A', 
      getInitialState: function () {
        return { x: this.props.x };}, 

      componentWillReceiveProps: function (nextProps) {
        var newX = nextProps.x;
        this.setState({ x: newX }, function () {
          // State should have updated by the time this callback gets called
          expect(this.state.x).toBe(newX);
          callbackCount++;});}, 


      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 786 } }, this.state.x);} });



    var container = document.createElement('div');
    ReactDOM.render(React.createElement(A, { x: 1, __source: { fileName: _jsxFileName, lineNumber: 791 } }), container);
    ReactDOM.render(React.createElement(A, { x: 2, __source: { fileName: _jsxFileName, lineNumber: 792 } }), container);
    expect(callbackCount).toBe(1);});


  it('calls asap callbacks properly', function () {
    var callbackCount = 0;
    var A = React.createClass({ displayName: 'A', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 800 } });}, 

      componentDidUpdate: function () {
        ReactUpdates.asap(function () {
          expect(this).toBe(component);
          callbackCount++;
          ReactUpdates.asap(function () {
            callbackCount++;});

          expect(callbackCount).toBe(1);}, 
        component);
        expect(callbackCount).toBe(0);} });



    var component = ReactTestUtils.renderIntoDocument(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 815 } }));
    component.forceUpdate();
    expect(callbackCount).toBe(2);});


  it('calls asap callbacks with queued updates', function () {
    var log = [];
    var A = React.createClass({ displayName: 'A', 
      getInitialState: function () {return { updates: 0 };}, 
      render: function () {
        log.push('render-' + this.state.updates);
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 826 } });}, 

      componentDidUpdate: function () {
        if (this.state.updates === 1) {
          ReactUpdates.asap(function () {
            this.setState({ updates: 2 }, function () {
              ReactUpdates.asap(function () {
                log.push('asap-1.2');});

              log.push('setState-cb');});

            log.push('asap-1.1');}, 
          this);} else 
        if (this.state.updates === 2) {
          ReactUpdates.asap(function () {
            log.push('asap-2');});}


        log.push('didUpdate-' + this.state.updates);} });



    var component = ReactTestUtils.renderIntoDocument(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 848 } }));
    component.setState({ updates: 1 });
    expect(log).toEqual([
    'render-0', 
    // We do the first update...
    'render-1', 
    'didUpdate-1', 
    // ...which calls asap and enqueues a second update...
    'asap-1.1', 
    // ...which runs and enqueues the asap-2 log in its didUpdate...
    'render-2', 
    'didUpdate-2', 
    // ...and runs the setState callback, which enqueues the log for
    // asap-1.2.
    'setState-cb', 
    'asap-2', 
    'asap-1.2']);});



  it('does not call render after a component as been deleted', function () {

    var renderCount = 0;
    var componentB = null;

    var B = React.createClass({ displayName: 'B', 
      getInitialState: function () {
        return { updates: 0 };}, 

      componentDidMount: function () {
        componentB = this;}, 

      render: function () {
        renderCount++;
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 882 } });} });



    var A = React.createClass({ displayName: 'A', 
      getInitialState: function () {
        return { showB: true };}, 

      render: function () {
        return this.state.showB ? React.createElement(B, { __source: { fileName: _jsxFileName, lineNumber: 891 } }) : React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 891 } });} });



    var component = ReactTestUtils.renderIntoDocument(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 895 } }));

    ReactUpdates.batchedUpdates(function () {
      // B will have scheduled an update but the batching should ensure that its
      // update never fires.
      componentB.setState({ updates: 1 });
      component.setState({ showB: false });});


    expect(renderCount).toBe(1);});


  it('marks top-level updates', function () {
    var ReactFeatureFlags = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactFeatureFlags.js');

    var Foo = React.createClass({ displayName: 'Foo', 
      render: function () {
        return React.createElement(Bar, { __source: { fileName: _jsxFileName, lineNumber: 912 } });} });



    var Bar = React.createClass({ displayName: 'Bar', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 918 } });} });



    var container = document.createElement('div');
    ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 923 } }), container);

    try {
      ReactFeatureFlags.logTopLevelRenders = true;
      spyOn(console, 'time');
      spyOn(console, 'timeEnd');

      ReactDOM.render(React.createElement(Foo, { __source: { fileName: _jsxFileName, lineNumber: 930 } }), container);

      expect(console.time.calls.count()).toBe(1);
      expect(console.time.calls.argsFor(0)[0]).toBe('React update: Foo');
      expect(console.timeEnd.calls.count()).toBe(1);
      expect(console.timeEnd.calls.argsFor(0)[0]).toBe('React update: Foo');} finally 
    {
      ReactFeatureFlags.logTopLevelRenders = false;}});



  it('throws in setState if the update callback is not a function', function () {
    function Foo() {
      this.a = 1;
      this.b = 2;}

    var A = React.createClass({ displayName: 'A', 
      getInitialState: function () {
        return {};}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 951 } });} });


    var component = ReactTestUtils.renderIntoDocument(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 954 } }));

    expect(function () {return component.setState({}, 'no');}).toThrowError(
    'setState(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: string.');

    expect(function () {return component.setState({}, {});}).toThrowError(
    'setState(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: Object.');

    expect(function () {return component.setState({}, new Foo());}).toThrowError(
    'setState(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: Foo (keys: a, b).');});



  it('throws in replaceState if the update callback is not a function', function () {
    function Foo() {
      this.a = 1;
      this.b = 2;}

    var A = React.createClass({ displayName: 'A', 
      getInitialState: function () {
        return {};}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 980 } });} });


    var component = ReactTestUtils.renderIntoDocument(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 983 } }));

    expect(function () {return component.replaceState({}, 'no');}).toThrowError(
    'replaceState(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: string.');

    expect(function () {return component.replaceState({}, {});}).toThrowError(
    'replaceState(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: Object.');

    expect(function () {return component.replaceState({}, new Foo());}).toThrowError(
    'replaceState(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: Foo (keys: a, b).');});



  it('throws in forceUpdate if the update callback is not a function', function () {
    function Foo() {
      this.a = 1;
      this.b = 2;}

    var A = React.createClass({ displayName: 'A', 
      getInitialState: function () {
        return {};}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1009 } });} });


    var component = ReactTestUtils.renderIntoDocument(React.createElement(A, { __source: { fileName: _jsxFileName, lineNumber: 1012 } }));

    expect(function () {return component.forceUpdate('no');}).toThrowError(
    'forceUpdate(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: string.');

    expect(function () {return component.forceUpdate({});}).toThrowError(
    'forceUpdate(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: Object.');

    expect(function () {return component.forceUpdate(new Foo());}).toThrowError(
    'forceUpdate(...): Expected the last optional `callback` argument ' + 
    'to be a function. Instead received: Foo (keys: a, b).');});



  it('does not update one component twice in a batch (#2410)', function () {
    var Parent = React.createClass({ displayName: 'Parent', 
      getChild: function () {
        return this.refs.child;}, 

      render: function () {
        return React.createElement(Child, { ref: 'child', __source: { fileName: _jsxFileName, lineNumber: 1034 } });} });



    var renderCount = 0;
    var postRenderCount = 0;
    var once = false;
    var Child = React.createClass({ displayName: 'Child', 
      getInitialState: function () {
        return { updated: false };}, 

      componentWillUpdate: function () {
        if (!once) {
          once = true;
          this.setState({ updated: true });}}, 


      componentDidMount: function () {
        expect(renderCount).toBe(postRenderCount + 1);
        postRenderCount++;}, 

      componentDidUpdate: function () {
        expect(renderCount).toBe(postRenderCount + 1);
        postRenderCount++;}, 

      render: function () {
        expect(renderCount).toBe(postRenderCount);
        renderCount++;
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1062 } });} });



    var parent = ReactTestUtils.renderIntoDocument(React.createElement(Parent, { __source: { fileName: _jsxFileName, lineNumber: 1066 } }));
    var child = parent.getChild();
    ReactDOM.unstable_batchedUpdates(function () {
      parent.forceUpdate();
      child.forceUpdate();});});



  it('does not update one component twice in a batch (#6371)', function () {
    var callbacks = [];
    function emitChange() {
      callbacks.forEach(function (c) {return c();});}var 


    App = function (_React$Component) {_inherits(App, _React$Component);
      function App(props) {_classCallCheck(this, App);var _this = _possibleConstructorReturn(this, 
        _React$Component.call(this, props));
        _this.state = { showChild: true };return _this;}App.prototype.

      componentDidMount = function componentDidMount() {
        this.setState({ showChild: false });};App.prototype.

      render = function render() {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 1090 } }, 
          React.createElement(ForceUpdatesOnChange, { __source: { fileName: _jsxFileName, lineNumber: 1091 } }), 
          this.state.showChild && React.createElement(EmitsChangeOnUnmount, { __source: { fileName: _jsxFileName, lineNumber: 1092 } })));};return App;}(React.Component);var 





    EmitsChangeOnUnmount = function (_React$Component2) {_inherits(EmitsChangeOnUnmount, _React$Component2);function EmitsChangeOnUnmount() {_classCallCheck(this, EmitsChangeOnUnmount);return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));}EmitsChangeOnUnmount.prototype.
      componentWillUnmount = function componentWillUnmount() {
        emitChange();};EmitsChangeOnUnmount.prototype.

      render = function render() {
        return null;};return EmitsChangeOnUnmount;}(React.Component);var 



    ForceUpdatesOnChange = function (_React$Component3) {_inherits(ForceUpdatesOnChange, _React$Component3);function ForceUpdatesOnChange() {_classCallCheck(this, ForceUpdatesOnChange);return _possibleConstructorReturn(this, _React$Component3.apply(this, arguments));}ForceUpdatesOnChange.prototype.
      componentDidMount = function componentDidMount() {var _this4 = this;
        this.onChange = function () {return _this4.forceUpdate();};
        this.onChange();
        callbacks.push(this.onChange);};ForceUpdatesOnChange.prototype.

      componentWillUnmount = function componentWillUnmount() {var _this5 = this;
        callbacks = callbacks.filter(function (c) {return c !== _this5.onChange;});};ForceUpdatesOnChange.prototype.

      render = function render() {
        return React.createElement('div', { key: Math.random(), onClick: function () {}, __source: { fileName: _jsxFileName, lineNumber: 1117 } });};return ForceUpdatesOnChange;}(React.Component);



    ReactDOM.render(React.createElement(App, { __source: { fileName: _jsxFileName, lineNumber: 1121 } }), document.createElement('div'));});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactFeatureFlags.js":279,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],272:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\refs-destruction-test.js';

var React;
var ReactDOM;
var ReactTestUtils;

var TestComponent;

describe('refs-destruction', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();

    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

    TestComponent = React.createClass({ displayName: 'TestComponent', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 31 } }, 
          this.props.destroy ? null : 
          React.createElement('div', { ref: 'theInnerDiv', __source: { fileName: _jsxFileName, lineNumber: 33 } }, 'Lets try to destroy this.')));} });});









  it('should remove refs when destroying the parent', function () {
    var container = document.createElement('div');
    var testInstance = ReactDOM.render(React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 45 } }), container);
    expect(ReactTestUtils.isDOMComponent(testInstance.refs.theInnerDiv)).
    toBe(true);
    expect(Object.keys(testInstance.refs || {}).length).toEqual(1);
    ReactDOM.unmountComponentAtNode(container);
    expect(Object.keys(testInstance.refs || {}).length).toEqual(0);});


  it('should remove refs when destroying the child', function () {
    var container = document.createElement('div');
    var testInstance = ReactDOM.render(React.createElement(TestComponent, { __source: { fileName: _jsxFileName, lineNumber: 55 } }), container);
    expect(ReactTestUtils.isDOMComponent(testInstance.refs.theInnerDiv)).
    toBe(true);
    expect(Object.keys(testInstance.refs || {}).length).toEqual(1);
    ReactDOM.render(React.createElement(TestComponent, { destroy: true, __source: { fileName: _jsxFileName, lineNumber: 59 } }), container);
    expect(Object.keys(testInstance.refs || {}).length).toEqual(0);});


  it('should not error when destroying child with ref asynchronously', function () {
    var Modal = React.createClass({ displayName: 'Modal', 
      componentDidMount: function () {
        this.div = document.createElement('div');
        document.body.appendChild(this.div);
        this.componentDidUpdate();}, 

      componentDidUpdate: function () {
        ReactDOM.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 71 } }, this.props.children), this.div);}, 

      componentWillUnmount: function () {
        var self = this;
        // some async animation
        setTimeout(function () {
          expect(function () {
            ReactDOM.unmountComponentAtNode(self.div);}).
          not.toThrow();
          document.body.removeChild(self.div);}, 
        0);}, 

      render: function () {
        return null;} });


    var AppModal = React.createClass({ displayName: 'AppModal', 
      render: function () {
        return React.createElement(Modal, { __source: { fileName: _jsxFileName, lineNumber: 89 } }, 
        React.createElement('a', { ref: 'ref', __source: { fileName: _jsxFileName, lineNumber: 90 } }));} });



    var App = React.createClass({ displayName: 'App', 
      render: function () {
        return this.props.hidden ? null : React.createElement(AppModal, { onClose: this.close, __source: { fileName: _jsxFileName, lineNumber: 96 } });} });


    var container = document.createElement('div');
    ReactDOM.render(React.createElement(App, { __source: { fileName: _jsxFileName, lineNumber: 100 } }), container);
    ReactDOM.render(React.createElement(App, { hidden: true, __source: { fileName: _jsxFileName, lineNumber: 101 } }), container);
    jest.runAllTimers();});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301}],273:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\renderers\\shared\\stack\\reconciler\\__tests__\\refs-test.js';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

var reactComponentExpect = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js');


/**
 * Counts clicks and has a renders an item for each click. Each item rendered
 * has a ref of the form "clickLogN".
 */
var ClickCounter = React.createClass({ displayName: 'ClickCounter', 
  getInitialState: function () {
    return { count: this.props.initialCount };}, 

  triggerReset: function () {
    this.setState({ count: this.props.initialCount });}, 

  handleClick: function () {
    this.setState({ count: this.state.count + 1 });}, 

  render: function () {
    var children = [];
    var i;
    for (i = 0; i < this.state.count; i++) {
      children.push(
      React.createElement('div', { 
        className: 'clickLogDiv', 
        key: 'clickLog' + i, 
        ref: 'clickLog' + i, __source: { fileName: _jsxFileName, lineNumber: 39 } }));}



    return (
      React.createElement('span', { className: 'clickIncrementer', onClick: this.handleClick, __source: { fileName: _jsxFileName, lineNumber: 47 } }, 
      children));} });





/**
 * Only purpose is to test that refs are tracked even when applied to a
 * component that is injected down several layers. Ref systems are difficult to
 * build in such a way that ownership is maintained in an airtight manner.
 */
var GeneralContainerComponent = React.createClass({ displayName: 'GeneralContainerComponent', 
  render: function () {
    return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 61 } }, this.props.children);} });



/**
 * Notice how refs ownership is maintained even when injecting a component
 * into a different parent.
 */
var TestRefsComponent = React.createClass({ displayName: 'TestRefsComponent', 
  doReset: function () {
    this.refs.myCounter.triggerReset();}, 

  render: function () {
    return (
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 75 } }, 
      React.createElement('div', { ref: 'resetDiv', onClick: this.doReset, __source: { fileName: _jsxFileName, lineNumber: 76 } }, 'Reset Me By Clicking This.'), 


      React.createElement(GeneralContainerComponent, { ref: 'myContainer', __source: { fileName: _jsxFileName, lineNumber: 79 } }, 
      React.createElement(ClickCounter, { ref: 'myCounter', initialCount: 1, __source: { fileName: _jsxFileName, lineNumber: 80 } }))));} });






/**
 * Render a TestRefsComponent and ensure that the main refs are wired up.
 */
var renderTestRefsComponent = function () {
  var testRefsComponent = 
  ReactTestUtils.renderIntoDocument(React.createElement(TestRefsComponent, { __source: { fileName: _jsxFileName, lineNumber: 92 } }));

  reactComponentExpect(testRefsComponent).
  toBeCompositeComponentWithType(TestRefsComponent);

  var generalContainer = testRefsComponent.refs.myContainer;
  var counter = testRefsComponent.refs.myCounter;

  reactComponentExpect(generalContainer).
  toBeCompositeComponentWithType(GeneralContainerComponent);
  reactComponentExpect(counter).
  toBeCompositeComponentWithType(ClickCounter);

  return testRefsComponent;};



var expectClickLogsLengthToBe = function (instance, length) {
  var clickLogs = 
  ReactTestUtils.scryRenderedDOMComponentsWithClass(instance, 'clickLogDiv');
  expect(clickLogs.length).toBe(length);
  expect(Object.keys(instance.refs.myCounter.refs).length).toBe(length);};


describe('reactiverefs', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();});


  /**
   * Ensure that for every click log there is a corresponding ref (from the
   * perspective of the injected ClickCounter component.
   */
  it('Should increase refs with an increase in divs', function () {
    var testRefsComponent = renderTestRefsComponent();
    var clickIncrementer = 
    ReactTestUtils.findRenderedDOMComponentWithClass(
    testRefsComponent, 
    'clickIncrementer');


    expectClickLogsLengthToBe(testRefsComponent, 1);

    // After clicking the reset, there should still only be one click log ref.
    ReactTestUtils.Simulate.click(testRefsComponent.refs.resetDiv);
    expectClickLogsLengthToBe(testRefsComponent, 1);

    // Begin incrementing clicks (and therefore refs).
    ReactTestUtils.Simulate.click(clickIncrementer);
    expectClickLogsLengthToBe(testRefsComponent, 2);

    ReactTestUtils.Simulate.click(clickIncrementer);
    expectClickLogsLengthToBe(testRefsComponent, 3);

    // Now reset again
    ReactTestUtils.Simulate.click(testRefsComponent.refs.resetDiv);
    expectClickLogsLengthToBe(testRefsComponent, 1);});});







/**
 * Tests that when a ref hops around children, we can track that correctly.
 */
describe('ref swapping', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();});


  var RefHopsAround = React.createClass({ displayName: 'RefHopsAround', 
    getInitialState: function () {
      return { count: 0 };}, 

    moveRef: function () {
      this.setState({ count: this.state.count + 1 });}, 

    render: function () {
      var count = this.state.count;
      /**
       * What we have here, is three divs with refs (div1/2/3), but a single
       * moving cursor ref `hopRef` that "hops" around the three. We'll call the
       * `moveRef()` function several times and make sure that the hop ref
       * points to the correct divs.
       */
      return (
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 180 } }, 
        React.createElement('div', { 
          className: 'first', 
          ref: count % 3 === 0 ? 'hopRef' : 'divOneRef', __source: { fileName: _jsxFileName, lineNumber: 181 } }), 

        React.createElement('div', { 
          className: 'second', 
          ref: count % 3 === 1 ? 'hopRef' : 'divTwoRef', __source: { fileName: _jsxFileName, lineNumber: 185 } }), 

        React.createElement('div', { 
          className: 'third', 
          ref: count % 3 === 2 ? 'hopRef' : 'divThreeRef', __source: { fileName: _jsxFileName, lineNumber: 189 } })));} });






  it('Allow refs to hop around children correctly', function () {
    var refHopsAround = ReactTestUtils.renderIntoDocument(React.createElement(RefHopsAround, { __source: { fileName: _jsxFileName, lineNumber: 199 } }));

    var firstDiv = 
    ReactTestUtils.findRenderedDOMComponentWithClass(refHopsAround, 'first');
    var secondDiv = 
    ReactTestUtils.findRenderedDOMComponentWithClass(refHopsAround, 'second');
    var thirdDiv = 
    ReactTestUtils.findRenderedDOMComponentWithClass(refHopsAround, 'third');

    expect(refHopsAround.refs.hopRef).toEqual(firstDiv);
    expect(refHopsAround.refs.divTwoRef).toEqual(secondDiv);
    expect(refHopsAround.refs.divThreeRef).toEqual(thirdDiv);

    refHopsAround.moveRef();
    expect(refHopsAround.refs.divOneRef).toEqual(firstDiv);
    expect(refHopsAround.refs.hopRef).toEqual(secondDiv);
    expect(refHopsAround.refs.divThreeRef).toEqual(thirdDiv);

    refHopsAround.moveRef();
    expect(refHopsAround.refs.divOneRef).toEqual(firstDiv);
    expect(refHopsAround.refs.divTwoRef).toEqual(secondDiv);
    expect(refHopsAround.refs.hopRef).toEqual(thirdDiv);

    /**
     * Make sure that after the third, we're back to where we started and the
     * refs are completely restored.
     */
    refHopsAround.moveRef();
    expect(refHopsAround.refs.hopRef).toEqual(firstDiv);
    expect(refHopsAround.refs.divTwoRef).toEqual(secondDiv);
    expect(refHopsAround.refs.divThreeRef).toEqual(thirdDiv);});



  it('always has a value for this.refs', function () {
    var Component = React.createClass({ displayName: 'Component', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 236 } });} });



    var instance = ReactTestUtils.renderIntoDocument(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 240 } }));
    expect(!!instance.refs).toBe(true);});


  function testRefCall() {
    var refCalled = 0;
    function Inner(props) {
      return React.createElement('a', { ref: props.saveA, __source: { fileName: _jsxFileName, lineNumber: 247 } });}

    var Outer = React.createClass({ displayName: 'Outer', 
      saveA: function () {
        refCalled++;}, 

      componentDidMount: function () {
        this.setState({});}, 

      render: function () {
        return React.createElement(Inner, { saveA: this.saveA, __source: { fileName: _jsxFileName, lineNumber: 257 } });} });


    ReactTestUtils.renderIntoDocument(React.createElement(Outer, { __source: { fileName: _jsxFileName, lineNumber: 260 } }));
    expect(refCalled).toBe(1);}


  it('ref called correctly for stateless component when __DEV__ = false', function () {
    var originalDev = __DEV__;
    __DEV__ = false;
    testRefCall();
    __DEV__ = originalDev;});


  it('ref called correctly for stateless component when __DEV__ = true', function () {
    var originalDev = __DEV__;
    __DEV__ = true;
    testRefCall();
    __DEV__ = originalDev;});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js":306}],274:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 */

'use strict';var _assign = require('object-assign');

var ReactCompositeComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactCompositeComponent.js');
var ReactEmptyComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactEmptyComponent.js');
var ReactHostComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactHostComponent.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);};

_assign(
ReactCompositeComponentWrapper.prototype, 
ReactCompositeComponent.Mixin, 
{ 
  _instantiateReactComponent: instantiateReactComponent });



function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';}}


  return '';}


function getDisplayName(instance) {
  var element = instance._currentElement;
  if (element == null) {
    return '#empty';} else 
  if (typeof element === 'string' || typeof element === 'number') {
    return '#text';} else 
  if (typeof element.type === 'string') {
    return element.type;} else 
  if (instance.getName) {
    return instance.getName() || 'Unknown';} else 
  {
    return element.type.displayName || element.type.name || 'Unknown';}}



/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return (
    typeof type === 'function' && 
    typeof type.prototype !== 'undefined' && 
    typeof type.prototype.mountComponent === 'function' && 
    typeof type.prototype.receiveComponent === 'function');}



var nextDebugID = 1;

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node) {
  var instance;

  var isEmpty = node === null || node === false;
  if (isEmpty) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);} else 
  if (typeof node === 'object') {
    var element = node;
    invariant(
    element && (typeof element.type === 'function' || 
    typeof element.type === 'string'), 
    'Element type is invalid: expected a string (for built-in components) ' + 
    'or a class/function (for composite components) but got: %s.%s', 
    element.type == null ? element.type : typeof element.type, 
    getDeclarationErrorAddendum(element._owner));


    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);} else 
    if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;}} else 

    {
      instance = new ReactCompositeComponentWrapper(element);}} else 

  if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);} else 
  {
    invariant(
    false, 
    'Encountered invalid React node of type %s', 
    typeof node);}



  if (__DEV__) {
    warning(
    typeof instance.mountComponent === 'function' && 
    typeof instance.receiveComponent === 'function' && 
    typeof instance.getHostNode === 'function' && 
    typeof instance.unmountComponent === 'function', 
    'Only React Components can be mounted.');}



  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (__DEV__) {
    var debugID = isEmpty ? 0 : nextDebugID++;
    instance._debugID = debugID;

    if (debugID !== 0) {
      var displayName = getDisplayName(instance);
      ReactInstrumentation.debugTool.onSetDisplayName(debugID, displayName);
      var owner = node && node._owner;
      if (owner) {
        ReactInstrumentation.debugTool.onSetOwner(debugID, owner._debugID);}}}




  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (__DEV__) {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);}}



  return instance;}


module.exports = instantiateReactComponent;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactCompositeComponent.js":240,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactEmptyComponent.js":242,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactHostComponent.js":244,"fbjs/lib/invariant":414,"fbjs/lib/warning":424,"object-assign":425}],275:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';var _assign = require('object-assign');

var PooledClass = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js');

var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;}


_assign(CallbackQueue.prototype, { 

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function (callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);}, 


  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function () {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      invariant(
      callbacks.length === contexts.length, 
      'Mismatched list of contexts in callback queue');

      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i]);}

      callbacks.length = 0;
      contexts.length = 0;}}, 



  checkpoint: function () {
    return this._callbacks ? this._callbacks.length : 0;}, 


  rollback: function (len) {
    if (this._callbacks) {
      this._callbacks.length = len;
      this._contexts.length = len;}}, 



  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function () {
    this._callbacks = null;
    this._contexts = null;}, 


  /**
   * `PooledClass` looks for this.
   */
  destructor: function () {
    this.reset();} });




PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js":277,"fbjs/lib/invariant":414,"object-assign":425}],276:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule KeyEscapeUtils
 */

'use strict';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {*} key to be escaped.
 * @return {string} the escaped key.
 */
function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = { 
    '=': '=0', 
    ':': '=2' };

  var escapedString = ('' + key).replace(
  escapeRegex, 
  function (match) {
    return escaperLookup[match];});



  return '$' + escapedString;}


/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = { 
    '=0': '=', 
    '=2': ':' };

  var keySubstring = key[0] === '.' && key[1] === '$' ? 
  key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(
  unescapeRegex, 
  function (match) {
    return unescaperLookup[match];});}




var KeyEscapeUtils = { 
  escape: escape, 
  unescape: unescape };


module.exports = KeyEscapeUtils;
},{}],277:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;} else 
  {
    return new Klass(copyFieldsFrom);}};



var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;} else 
  {
    return new Klass(a1, a2);}};



var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;} else 
  {
    return new Klass(a1, a2, a3);}};



var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;} else 
  {
    return new Klass(a1, a2, a3, a4);}};



var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;} else 
  {
    return new Klass(a1, a2, a3, a4, a5);}};



var standardReleaser = function (instance) {
  var Klass = this;
  invariant(
  instance instanceof Klass, 
  'Trying to release an instance into a pool of a different type.');

  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);}};



var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;}

  NewKlass.release = standardReleaser;
  return NewKlass;};


var PooledClass = { 
  addPoolingTo: addPoolingTo, 
  oneArgumentPooler: oneArgumentPooler, 
  twoArgumentPooler: twoArgumentPooler, 
  threeArgumentPooler: threeArgumentPooler, 
  fourArgumentPooler: fourArgumentPooler, 
  fiveArgumentPooler: fiveArgumentPooler };


module.exports = PooledClass;
},{"fbjs/lib/invariant":414}],278:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {?String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a, b) {
  try {
    return func(a, b);} 
  catch (x) {
    if (caughtError === null) {
      caughtError = x;}

    return undefined;}}



var ReactErrorUtils = { 
  invokeGuardedCallback: invokeGuardedCallback, 

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback, 

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;}} };




if (__DEV__) {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && 
  typeof window.dispatchEvent === 'function' && 
  typeof document !== 'undefined' && 
  typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
      var boundFunc = func.bind(null, a, b);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);};}}




module.exports = ReactErrorUtils;
},{}],279:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactFeatureFlags
 */

'use strict';

var ReactFeatureFlags = { 
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false };


module.exports = ReactFeatureFlags;
},{}],280:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNodeTypes
 */

'use strict';

var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');

var invariant = require('fbjs/lib/invariant');

var ReactNodeTypes = { 
  HOST: 0, 
  COMPOSITE: 1, 
  EMPTY: 2, 

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;} else 
    if (ReactElement.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;} else 
      {
        return ReactNodeTypes.HOST;}}


    invariant(false, 'Unexpected node: %s', node);} };



module.exports = ReactNodeTypes;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"fbjs/lib/invariant":414}],281:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = { 
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;} else 
    {
      this.wrapperInitData = [];}

    this._isInTransaction = false;}, 


  _isInTransaction: false, 

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null, 

  isInTransaction: function () {
    return !!this._isInTransaction;}, 


  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    invariant(
    !this.isInTransaction(), 
    'Transaction.perform(...): Cannot initialize a transaction when there ' + 
    'is already an outstanding transaction.');

    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;} finally 
    {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);} 
          catch (err) {}} else 

        {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);}} finally 

      {
        this._isInTransaction = false;}}


    return ret;}, 


  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? 
        wrapper.initialize.call(this) : 
        null;} finally 
      {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);} 
          catch (err) {}}}}}, 






  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    invariant(
    this.isInTransaction(), 
    'Transaction.closeAll(): Cannot close transaction when none are open.');

    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);}

        errorThrown = false;} finally 
      {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);} 
          catch (e) {}}}}




    this.wrapperInitData.length = 0;} };



var Transaction = { 

  Mixin: Mixin, 

  /**
   * Token to look for to determine if an error occurred.
   */
  OBSERVED_ERROR: {} };



module.exports = Transaction;
},{"fbjs/lib/invariant":414}],282:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var KeyEscapeUtils;

describe('KeyEscapeUtils', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();

    KeyEscapeUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\KeyEscapeUtils.js');});


  describe('escape', function () {
    it('should properly escape and wrap user defined keys', function () {
      expect(KeyEscapeUtils.escape('1')).toBe('$1');
      expect(KeyEscapeUtils.escape('1=::=2')).toBe('$1=0=2=2=02');});});



  describe('unescape', function () {
    it('should properly unescape and unwrap user defined keys', function () {
      expect(KeyEscapeUtils.unescape('.1')).toBe('1');
      expect(KeyEscapeUtils.unescape('$1')).toBe('1');
      expect(KeyEscapeUtils.unescape('.$1')).toBe('1');
      expect(KeyEscapeUtils.unescape('$1=0=2=2=02')).toBe('1=::=2');});});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\KeyEscapeUtils.js":276}],283:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var PooledClass;
var PoolableClass;

describe('Pooled class', function () {
  beforeEach(function () {
    PooledClass = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js');
    PoolableClass = function () {};
    PoolableClass.prototype.destructor = function () {};
    PooledClass.addPoolingTo(PoolableClass);});


  it('should initialize a pool correctly', function () {
    expect(PoolableClass.instancePool).toBeDefined();});


  it('should return a new instance when the pool is empty', function () {
    var instance = PoolableClass.getPooled();
    expect(instance instanceof PoolableClass).toBe(true);});


  it('should return the instance back into the pool when it gets released', 
  function () {
    var instance = PoolableClass.getPooled();
    PoolableClass.release(instance);
    expect(PoolableClass.instancePool.length).toBe(1);
    expect(PoolableClass.instancePool[0]).toBe(instance);});



  it('should return an old instance if available in the pool', function () {
    var instance = PoolableClass.getPooled();
    PoolableClass.release(instance);
    var instance2 = PoolableClass.getPooled();
    expect(instance).toBe(instance2);});


  it('should call the destructor when instance gets released', function () {
    var log = [];
    var PoolableClassWithDestructor = function () {};
    PoolableClassWithDestructor.prototype.destructor = function () {
      log.push('released');};

    PooledClass.addPoolingTo(PoolableClassWithDestructor);
    var instance = PoolableClassWithDestructor.getPooled();
    PoolableClassWithDestructor.release(instance);
    expect(log).toEqual(['released']);});


  it('should accept poolers with different arguments', function () {
    var log = [];
    var PoolableClassWithMultiArguments = function (a, b) {
      log.push(a, b);};

    PoolableClassWithMultiArguments.prototype.destructor = function () {};
    PooledClass.addPoolingTo(
    PoolableClassWithMultiArguments, 
    PooledClass.twoArgumentPooler);

    PoolableClassWithMultiArguments.getPooled('a', 'b', 'c');
    expect(log).toEqual(['a', 'b']);});


  it('should call a new constructor with arguments', function () {
    var log = [];
    var PoolableClassWithOneArgument = function (a) {
      log.push(a);};

    PoolableClassWithOneArgument.prototype.destructor = function () {};
    PooledClass.addPoolingTo(
    PoolableClassWithOneArgument);

    PoolableClassWithOneArgument.getPooled('new');
    expect(log).toEqual(['new']);});


  it('should call an old constructor with arguments', function () {
    var log = [];
    var PoolableClassWithOneArgument = function (a) {
      log.push(a);};

    PoolableClassWithOneArgument.prototype.destructor = function () {};
    PooledClass.addPoolingTo(
    PoolableClassWithOneArgument);

    var instance = PoolableClassWithOneArgument.getPooled('new');
    PoolableClassWithOneArgument.release(instance);
    PoolableClassWithOneArgument.getPooled('old');
    expect(log).toEqual(['new', 'old']);});


  it('should throw when the class releases an instance of a different type', 
  function () {
    var RandomClass = function () {};
    RandomClass.prototype.destructor = function () {};
    PooledClass.addPoolingTo(RandomClass);
    var randomInstance = RandomClass.getPooled();
    PoolableClass.getPooled();
    expect(function () {
      PoolableClass.release(randomInstance);}).
    toThrowError(
    'Trying to release an instance into a pool of a different type.');});




  it('should throw if no destructor is defined', function () {
    var ImmortalClass = function () {};
    PooledClass.addPoolingTo(ImmortalClass);
    var inst = ImmortalClass.getPooled();
    expect(function () {
      ImmortalClass.release(inst);}).
    toThrow();});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\PooledClass.js":277}],284:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _assign = require('object-assign');


var Transaction;

var INIT_ERRORED = 'initErrored'; // Just a dummy value to check for.
describe('Transaction', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();
    Transaction = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\Transaction.js');});


  /**
   * We should not invoke closers for inits that failed. We should pass init
   * return values to closers when those inits are successful. We should not
   * invoke the actual method when any of the initializers fail.
   */
  it('should invoke closers with/only-with init returns', function () {
    var throwInInit = function () {
      throw new Error('close[0] should receive Transaction.OBSERVED_ERROR');};


    var performSideEffect;
    var dontPerformThis = function () {
      performSideEffect = 'This should never be set to this';};


    /**
     * New test Transaction subclass.
     */
    var TestTransaction = function () {
      this.reinitializeTransaction();
      this.firstCloseParam = INIT_ERRORED; // WON'T be set to something else
      this.secondCloseParam = INIT_ERRORED; // WILL be set to something else
      this.lastCloseParam = INIT_ERRORED; // WON'T be set to something else
    };
    _assign(TestTransaction.prototype, Transaction.Mixin);
    TestTransaction.prototype.getTransactionWrappers = function () {
      return [
      { 
        initialize: throwInInit, 
        close: function (initResult) {
          this.firstCloseParam = initResult;} }, 


      { 
        initialize: function () {
          return 'asdf';}, 

        close: function (initResult) {
          this.secondCloseParam = initResult;} }, 


      { 
        initialize: throwInInit, 
        close: function (initResult) {
          this.lastCloseParam = initResult;} }];};





    var transaction = new TestTransaction();

    expect(function () {
      transaction.perform(dontPerformThis);}).
    toThrow();

    expect(performSideEffect).toBe(undefined);
    expect(transaction.firstCloseParam).toBe(INIT_ERRORED);
    expect(transaction.secondCloseParam).toBe('asdf');
    expect(transaction.lastCloseParam).toBe(INIT_ERRORED);
    expect(transaction.isInTransaction()).toBe(false);});


  it('should invoke closers and wrapped method when inits success', function () {

    var performSideEffect;
    /**
     * New test Transaction subclass.
     */
    var TestTransaction = function () {
      this.reinitializeTransaction();
      this.firstCloseParam = INIT_ERRORED; // WILL be set to something else
      this.secondCloseParam = INIT_ERRORED; // WILL be set to something else
      this.lastCloseParam = INIT_ERRORED; // WILL be set to something else
    };
    _assign(TestTransaction.prototype, Transaction.Mixin);
    TestTransaction.prototype.getTransactionWrappers = function () {
      return [
      { 
        initialize: function () {
          return 'firstResult';}, 

        close: function (initResult) {
          this.firstCloseParam = initResult;} }, 


      { 
        initialize: function () {
          return 'secondResult';}, 

        close: function (initResult) {
          this.secondCloseParam = initResult;} }, 


      { 
        initialize: function () {
          return 'thirdResult';}, 

        close: function (initResult) {
          this.lastCloseParam = initResult;} }];};





    var transaction = new TestTransaction();

    transaction.perform(function () {
      performSideEffect = 'SIDE_EFFECT';});


    expect(performSideEffect).toBe('SIDE_EFFECT');
    expect(transaction.firstCloseParam).toBe('firstResult');
    expect(transaction.secondCloseParam).toBe('secondResult');
    expect(transaction.lastCloseParam).toBe('thirdResult');
    expect(transaction.isInTransaction()).toBe(false);});


  /**
   * When the operation throws, the transaction should throw, but all of the
   * error-free closers should execute gracefully without issue. If a closer
   * throws an error, the transaction should prefer to throw the error
   * encountered earlier in the operation.
   */
  it('should throw when wrapped operation throws', function () {

    var performSideEffect;
    /**
     * New test Transaction subclass.
     */
    var TestTransaction = function () {
      this.reinitializeTransaction();
      this.firstCloseParam = INIT_ERRORED; // WILL be set to something else
      this.secondCloseParam = INIT_ERRORED; // WILL be set to something else
      this.lastCloseParam = INIT_ERRORED; // WILL be set to something else
    };
    _assign(TestTransaction.prototype, Transaction.Mixin);
    // Now, none of the close/inits throw, but the operation we wrap will throw.
    TestTransaction.prototype.getTransactionWrappers = function () {
      return [
      { 
        initialize: function () {
          return 'firstResult';}, 

        close: function (initResult) {
          this.firstCloseParam = initResult;} }, 


      { 
        initialize: function () {
          return 'secondResult';}, 

        close: function (initResult) {
          this.secondCloseParam = initResult;} }, 


      { 
        initialize: function () {
          return 'thirdResult';}, 

        close: function (initResult) {
          this.lastCloseParam = initResult;} }, 


      { 
        initialize: function () {
          return 'fourthResult';}, 

        close: function (initResult) {
          throw new Error('The transaction should throw a TypeError.');} }];};





    var transaction = new TestTransaction();

    expect(function () {
      var isTypeError = false;
      try {
        transaction.perform(function () {
          throw new TypeError('Thrown in main wrapped operation');});} 

      catch (err) {
        isTypeError = err instanceof TypeError;}

      return isTypeError;}()).
    toBe(true);

    expect(performSideEffect).toBe(undefined);
    expect(transaction.firstCloseParam).toBe('firstResult');
    expect(transaction.secondCloseParam).toBe('secondResult');
    expect(transaction.lastCloseParam).toBe('thirdResult');
    expect(transaction.isInTransaction()).toBe(false);});


  it('should throw errors in transaction close', function () {
    var TestTransaction = function () {
      this.reinitializeTransaction();};

    _assign(TestTransaction.prototype, Transaction.Mixin);
    var exceptionMsg = 'This exception should throw.';
    TestTransaction.prototype.getTransactionWrappers = function () {
      return [
      { 
        close: function (initResult) {
          throw new Error(exceptionMsg);} }];};





    var transaction = new TestTransaction();
    expect(function () {
      transaction.perform(function () {});}).
    toThrowError(exceptionMsg);
    expect(transaction.isInTransaction()).toBe(false);});


  it('should allow nesting of transactions', function () {
    var performSideEffect;
    var nestedPerformSideEffect;
    /**
     * New test Transaction subclass.
     */
    var TestTransaction = function () {
      this.reinitializeTransaction();
      this.firstCloseParam = INIT_ERRORED; // WILL be set to something else
    };
    _assign(TestTransaction.prototype, Transaction.Mixin);
    TestTransaction.prototype.getTransactionWrappers = function () {
      return [
      { 
        initialize: function () {
          return 'firstResult';}, 

        close: function (initResult) {
          this.firstCloseParam = initResult;} }, 


      { 
        initialize: function () {
          this.nestedTransaction = new NestedTransaction();}, 

        close: function () {
          // Test performing a transaction in another transaction's close()
          this.nestedTransaction.perform(function () {
            nestedPerformSideEffect = 'NESTED_SIDE_EFFECT';});} }];};






    var NestedTransaction = function () {
      this.reinitializeTransaction();};

    _assign(NestedTransaction.prototype, Transaction.Mixin);
    NestedTransaction.prototype.getTransactionWrappers = function () {
      return [
      { 
        initialize: function () {
          this.hasInitializedNested = true;}, 

        close: function () {
          this.hasClosedNested = true;} }];};





    var transaction = new TestTransaction();

    transaction.perform(function () {
      performSideEffect = 'SIDE_EFFECT';});


    expect(performSideEffect).toBe('SIDE_EFFECT');
    expect(nestedPerformSideEffect).toBe('NESTED_SIDE_EFFECT');
    expect(transaction.firstCloseParam).toBe('firstResult');
    expect(transaction.isInTransaction()).toBe(false);
    expect(transaction.nestedTransaction.hasClosedNested).toBe(true);
    expect(transaction.nestedTransaction.hasInitializedNested).toBe(true);
    expect(transaction.nestedTransaction.isInTransaction()).toBe(false);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\Transaction.js":281,"object-assign":425}],285:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

jest.
unmock('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\accumulateInto.js');

var accumulateInto;

describe('accumulateInto', function () {

  beforeEach(function () {
    accumulateInto = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\accumulateInto.js');});


  it('throws if the second item is null', function () {
    expect(function () {
      accumulateInto([], null);}).
    toThrowError(
    'accumulateInto(...): Accumulated items must not be null or undefined.');});



  it('returns the second item if first is null', function () {
    var a = [];
    expect(accumulateInto(null, a)).toBe(a);});


  it('merges the second into the first if first item is an array', function () {
    var a = [1, 2];
    var b = [3, 4];
    accumulateInto(a, b);
    expect(a).toEqual([1, 2, 3, 4]);
    expect(b).toEqual([3, 4]);
    var c = [1];
    accumulateInto(c, 2);
    expect(c).toEqual([1, 2]);});


  it('returns a new array if first or both items are scalar', function () {
    var a = [2];
    expect(accumulateInto(1, a)).toEqual([1, 2]);
    expect(a).toEqual([2]);
    expect(accumulateInto(1, 2)).toEqual([1, 2]);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\accumulateInto.js":289}],286:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';

var adler32 = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\adler32.js');

describe('adler32', function () {
  it('generates differing checksums', function () {
    expect(adler32('foo')).not.toBe(adler32('bar'));});


  it('generates consistent checksums', function () {
    expect(adler32('linux')).toBe(adler32('linux'));});


  it('is case sensitive', function () {
    expect(adler32('a')).not.toBe(adler32('A'));});


  it('doesn\'t barf on large inputs', function () {
    var str = '';
    for (var i = 0; i < 100000; i++) {
      str += 'This will be repeated to be very large indeed. ';}

    expect(adler32(str)).toBe(692898118);});


  it('doesn\'t barf on international inputs', function () {
    var str = 'Linux 是一個真棒操作系統!';
    expect(adler32(str)).toBe(-1183804097);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\adler32.js":290}],287:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\shared\\utils\\__tests__\\traverseAllChildren-test.js';

describe('traverseAllChildren', function () {
  var traverseAllChildren;
  var React;
  var ReactFragment;
  beforeEach(function () {
    jest.resetModuleRegistry();
    traverseAllChildren = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\traverseAllChildren.js');
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactFragment = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js');});


  function frag(obj) {
    return ReactFragment.create(obj);}


  it('should support identity for simple', function () {
    var traverseContext = [];
    var traverseFn = 
    jasmine.createSpy().and.callFake(function (context, kid, key, index) {
      context.push(true);});


    var simpleKid = React.createElement('span', { key: 'simple', __source: { fileName: _jsxFileName, lineNumber: 36 } });

    // Jasmine doesn't provide a way to test that the fn was invoked with scope.
    var instance = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 39 } }, simpleKid);
    traverseAllChildren(instance.props.children, traverseFn, traverseContext);
    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    simpleKid, 
    '.$simple');

    expect(traverseContext.length).toEqual(1);});


  it('should treat single arrayless child as being in array', function () {
    var traverseContext = [];
    var traverseFn = 
    jasmine.createSpy().and.callFake(function (context, kid, key, index) {
      context.push(true);});


    var simpleKid = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 56 } });
    var instance = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 57 } }, simpleKid);
    traverseAllChildren(instance.props.children, traverseFn, traverseContext);
    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    simpleKid, 
    '.0');

    expect(traverseContext.length).toEqual(1);});


  it('should treat single child in array as expected', function () {
    spyOn(console, 'error');
    var traverseContext = [];
    var traverseFn = 
    jasmine.createSpy().and.callFake(function (context, kid, key, index) {
      context.push(true);});


    var simpleKid = React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 75 } });
    var instance = React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 76 } }, [simpleKid]);
    traverseAllChildren(instance.props.children, traverseFn, traverseContext);
    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    simpleKid, 
    '.0');

    expect(traverseContext.length).toEqual(1);
    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Warning: Each child in an array or iterator should have a unique "key" prop.');});



  it('should be called for each child', function () {
    var zero = React.createElement('div', { key: 'keyZero', __source: { fileName: _jsxFileName, lineNumber: 91 } });
    var one = null;
    var two = React.createElement('div', { key: 'keyTwo', __source: { fileName: _jsxFileName, lineNumber: 93 } });
    var three = null;
    var four = React.createElement('div', { key: 'keyFour', __source: { fileName: _jsxFileName, lineNumber: 95 } });

    var traverseContext = [];
    var traverseFn = 
    jasmine.createSpy().and.callFake(function (context, kid, key, index) {
      context.push(true);});


    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 104 } }, 
    zero, 
    one, 
    two, 
    three, 
    four);



    traverseAllChildren(instance.props.children, traverseFn, traverseContext);
    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    zero, 
    '.$keyZero');

    expect(traverseFn).toHaveBeenCalledWith(traverseContext, one, '.1');
    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    two, 
    '.$keyTwo');

    expect(traverseFn).toHaveBeenCalledWith(traverseContext, three, '.3');
    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    four, 
    '.$keyFour');});



  it('should traverse children of different kinds', function () {
    var div = React.createElement('div', { key: 'divNode', __source: { fileName: _jsxFileName, lineNumber: 134 } });
    var span = React.createElement('span', { key: 'spanNode', __source: { fileName: _jsxFileName, lineNumber: 135 } });
    var a = React.createElement('a', { key: 'aNode', __source: { fileName: _jsxFileName, lineNumber: 136 } });

    var traverseContext = [];
    var traverseFn = 
    jasmine.createSpy().and.callFake(function (context, kid, key, index) {
      context.push(true);});


    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 145 } }, 
    div, 
    [frag({ span: span })], 
    frag({ a: a }), 
    'string', 
    1234, 
    true, 
    false, 
    null, 
    undefined);



    traverseAllChildren(instance.props.children, traverseFn, traverseContext);

    expect(traverseFn.calls.count()).toBe(9);
    expect(traverseContext.length).toEqual(9);

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, div, '.$divNode');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, React.createElement('span', { key: 'span/.$spanNode', __source: { fileName: _jsxFileName, lineNumber: 167 } }), '.1:0:$span/.$spanNode');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, React.createElement('a', { key: 'a/.$aNode', __source: { fileName: _jsxFileName, lineNumber: 170 } }), '.2:$a/.$aNode');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 'string', '.3');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 1234, '.4');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, null, '.5');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, null, '.6');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, null, '.7');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, null, '.8');});



  it('should be called for each child in nested structure', function () {
    var zero = React.createElement('div', { key: 'keyZero', __source: { fileName: _jsxFileName, lineNumber: 193 } });
    var one = null;
    var two = React.createElement('div', { key: 'keyTwo', __source: { fileName: _jsxFileName, lineNumber: 195 } });
    var three = null;
    var four = React.createElement('div', { key: 'keyFour', __source: { fileName: _jsxFileName, lineNumber: 197 } });
    var five = React.createElement('div', { key: 'keyFiveInner', __source: { fileName: _jsxFileName, lineNumber: 198 } });
    // five is placed into a JS object with a key that is joined to the
    // component key attribute.
    // Precedence is as follows:
    // 1. If grouped in an Object, the object key combined with `key` prop
    // 2. If grouped in an Array, the `key` prop, falling back to array index


    var traverseContext = [];
    var traverseFn = 
    jasmine.createSpy().and.callFake(function (context, kid, key, index) {
      context.push(true);});


    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 213 } }, 
    [
    frag({ 
      firstHalfKey: [zero, one, two], 
      secondHalfKey: [three, four], 
      keyFive: five })]);





    traverseAllChildren(instance.props.children, traverseFn, traverseContext);
    expect(traverseFn.calls.count()).toBe(4);
    expect(traverseContext.length).toEqual(4);
    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    React.createElement('div', { key: 'firstHalfKey/.$keyZero', __source: { fileName: _jsxFileName, lineNumber: 229 } }), 
    '.0:$firstHalfKey/.$keyZero');


    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    React.createElement('div', { key: 'firstHalfKey/.$keyTwo', __source: { fileName: _jsxFileName, lineNumber: 235 } }), 
    '.0:$firstHalfKey/.$keyTwo');


    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    React.createElement('div', { key: 'secondHalfKey/.$keyFour', __source: { fileName: _jsxFileName, lineNumber: 241 } }), 
    '.0:$secondHalfKey/.$keyFour');


    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    React.createElement('div', { key: 'keyFive/.$keyFiveInner', __source: { fileName: _jsxFileName, lineNumber: 247 } }), 
    '.0:$keyFive/.$keyFiveInner');});



  it('should retain key across two mappings', function () {
    var zeroForceKey = React.createElement('div', { key: 'keyZero', __source: { fileName: _jsxFileName, lineNumber: 253 } });
    var oneForceKey = React.createElement('div', { key: 'keyOne', __source: { fileName: _jsxFileName, lineNumber: 254 } });
    var traverseContext = [];
    var traverseFn = 
    jasmine.createSpy().and.callFake(function (context, kid, key, index) {
      context.push(true);});


    var forcedKeys = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 262 } }, 
    zeroForceKey, 
    oneForceKey);



    traverseAllChildren(forcedKeys.props.children, traverseFn, traverseContext);
    expect(traverseContext.length).toEqual(2);
    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    zeroForceKey, 
    '.$keyZero');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    oneForceKey, 
    '.$keyOne');});



  it('should be called for each child in an iterable without keys', function () {
    spyOn(console, 'error');
    var threeDivIterable = { 
      '@@iterator': function () {
        var i = 0;
        return { 
          next: function () {
            if (i++ < 3) {
              return { value: React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 290 } }), done: false };} else 
            {
              return { value: undefined, done: true };}} };} };






    var traverseContext = [];
    var traverseFn = 
    jasmine.createSpy().and.callFake(function (context, kid, key, index) {
      context.push(kid);});


    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 306 } }, 
    threeDivIterable);



    traverseAllChildren(instance.props.children, traverseFn, traverseContext);
    expect(traverseFn.calls.count()).toBe(3);

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    traverseContext[0], 
    '.0');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    traverseContext[1], 
    '.1');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    traverseContext[2], 
    '.2');


    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Warning: Each child in an array or iterator should have a unique "key" prop.');});



  it('should be called for each child in an iterable with keys', function () {
    var threeDivIterable = { 
      '@@iterator': function () {
        var i = 0;
        return { 
          next: function () {
            if (i++ < 3) {
              return { value: React.createElement('div', { key: '#' + i, __source: { fileName: _jsxFileName, lineNumber: 343 } }), done: false };} else 
            {
              return { value: undefined, done: true };}} };} };






    var traverseContext = [];
    var traverseFn = 
    jasmine.createSpy().and.callFake(function (context, kid, key, index) {
      context.push(kid);});


    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 359 } }, 
    threeDivIterable);



    traverseAllChildren(instance.props.children, traverseFn, traverseContext);
    expect(traverseFn.calls.count()).toBe(3);

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    traverseContext[0], 
    '.$#1');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    traverseContext[1], 
    '.$#2');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    traverseContext[2], 
    '.$#3');});



  it('should use keys from entry iterables', function () {
    spyOn(console, 'error');

    var threeDivEntryIterable = { 
      '@@iterator': function () {
        var i = 0;
        return { 
          next: function () {
            if (i++ < 3) {
              return { value: ['#' + i, React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 393 } })], done: false };} else 
            {
              return { value: undefined, done: true };}} };} };





    threeDivEntryIterable.entries = threeDivEntryIterable['@@iterator'];

    var traverseContext = [];
    var traverseFn = 
    jasmine.createSpy().and.callFake(function (context, kid, key, index) {
      context.push(kid);});


    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 410 } }, 
    threeDivEntryIterable);



    traverseAllChildren(instance.props.children, traverseFn, traverseContext);
    expect(traverseFn.calls.count()).toBe(3);

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    traverseContext[0], 
    '.$#1:0');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    traverseContext[1], 
    '.$#2:0');

    expect(traverseFn).toHaveBeenCalledWith(
    traverseContext, 
    traverseContext[2], 
    '.$#3:0');


    expect(console.error.calls.count()).toBe(1);
    expect(console.error.calls.argsFor(0)[0]).toContain(
    'Warning: Using Maps as children is not yet fully supported. It is an ' + 
    'experimental feature that might be removed. Convert it to a sequence ' + 
    '/ iterable of keyed ReactElements instead.');});



  it('should not enumerate enumerable numbers (#4776)', function () {
    /*eslint-disable no-extend-native */
    Number.prototype['@@iterator'] = function () {
      throw new Error('number iterator called');};

    /*eslint-enable no-extend-native */

    try {
      var instance = 
      React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 451 } }, 
      5, 
      12, 
      13);



      var traverseFn = jasmine.createSpy();

      traverseAllChildren(instance.props.children, traverseFn, null);
      expect(traverseFn.calls.count()).toBe(3);

      expect(traverseFn).toHaveBeenCalledWith(
      null, 
      5, 
      '.0');

      expect(traverseFn).toHaveBeenCalledWith(
      null, 
      12, 
      '.1');

      expect(traverseFn).toHaveBeenCalledWith(
      null, 
      13, 
      '.2');} finally 

    {
      delete Number.prototype['@@iterator'];}});



  it('should allow extension of native prototypes', function () {
    /*eslint-disable no-extend-native */
    String.prototype.key = 'react';
    Number.prototype.key = 'rocks';
    /*eslint-enable no-extend-native */

    var instance = 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 490 } }, 
    'a', 
    13);



    var traverseFn = jasmine.createSpy();

    traverseAllChildren(instance.props.children, traverseFn, null);
    expect(traverseFn.calls.count()).toBe(2);

    expect(traverseFn).toHaveBeenCalledWith(
    null, 
    'a', 
    '.0');

    expect(traverseFn).toHaveBeenCalledWith(
    null, 
    13, 
    '.1');


    delete String.prototype.key;
    delete Number.prototype.key;});


  it('should throw on object', function () {
    expect(function () {
      traverseAllChildren({ a: 1, b: 2 }, function () {}, null);}).
    toThrowError(
    'Objects are not valid as a React child (found: object with keys ' + 
    '{a, b}). If you meant to render a collection of children, use an ' + 
    'array instead or wrap the object using createFragment(object) from ' + 
    'the React add-ons.');});



  it('should throw on regex', function () {
    // Really, we care about dates (#4840) but those have nondeterministic
    // serialization (timezones) so let's test a regex instead:
    expect(function () {
      traverseAllChildren(/abc/, function () {}, null);}).
    toThrowError(
    'Objects are not valid as a React child (found: /abc/). If you meant ' + 
    'to render a collection of children, use an array instead or wrap the ' + 
    'object using createFragment(object) from the React add-ons.');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactFragment.js":3,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\traverseAllChildren.js":298}],288:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulate
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Accumulates items that must not be null or undefined.
 *
 * This is used to conserve memory by avoiding array allocations.
 *
 * @return {*|array<*>} An accumulation of items.
 */
function accumulate(current, next) {
  invariant(
  next != null, 
  'accumulate(...): Accumulated items must be not be null or undefined.');

  if (current == null) {
    return next;} else 
  {
    // Both are not empty. Warning: Never call x.concat(y) when you are not
    // certain that x is an Array (x could be a string with concat method).
    var currentIsArray = Array.isArray(current);
    var nextIsArray = Array.isArray(next);
    if (currentIsArray) {
      return current.concat(next);} else 
    {
      if (nextIsArray) {
        return [current].concat(next);} else 
      {
        return [current, next];}}}}





module.exports = accumulate;
},{"fbjs/lib/invariant":414}],289:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  invariant(
  next != null, 
  'accumulateInto(...): Accumulated items must not be null or undefined.');

  if (current == null) {
    return next;}


  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;}


  if (currentIsArray) {
    current.push(next);
    return current;}


  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);}


  return [current, next];}


module.exports = accumulateInto;
},{"fbjs/lib/invariant":414}],290:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += 
      (a += data.charCodeAt(i)) + (
      a += data.charCodeAt(i + 1)) + (
      a += data.charCodeAt(i + 2)) + (
      a += data.charCodeAt(i + 3));}


    a %= MOD;
    b %= MOD;}

  for (; i < l; i++) {
    b += a += data.charCodeAt(i);}

  a %= MOD;
  b %= MOD;
  return a | b << 16;}


module.exports = adler32;
},{}],291:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule canDefineProperty
 */

'use strict';

var canDefineProperty = false;
if (__DEV__) {
  try {
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;} 
  catch (x) {
    // IE will fail on defineProperty
  }}


module.exports = canDefineProperty;
},{}],292:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

'use strict';var _assign = require('object-assign');

var warning = require('fbjs/lib/warning');

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} fnName The name of the function
 * @param {string} newModule The module that fn will exist in
 * @param {string} newPackage The module that fn will exist in
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {function} The function that will warn once and then call fn
 */
function deprecated(fnName, newModule, newPackage, ctx, fn) {
  var warned = false;
  if (__DEV__) {
    var newFn = function () {
      warning(
      warned, 
      /* eslint-disable no-useless-concat */
      // Require examples in this string must be split to prevent React's
      // build tools from mistaking them for real requires.
      // Otherwise the build tools will attempt to build a '%s' module.
      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 
      'instead.', 
      fnName, 
      newModule, 
      fnName, 
      newPackage);

      /* eslint-enable no-useless-concat */
      warned = true;
      return fn.apply(ctx, arguments);};

    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return _assign(newFn, fn);}


  return fn;}


module.exports = deprecated;
},{"fbjs/lib/warning":424,"object-assign":425}],293:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var ReactComponentTreeDevtool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js');
var KeyEscapeUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\KeyEscapeUtils.js');
var traverseAllChildren = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\traverseAllChildren.js');
var warning = require('fbjs/lib/warning');

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = result[name] === undefined;
  if (__DEV__) {
    warning(
    keyUnique, 
    'flattenChildren(...): Encountered two children with the same key, ' + 
    '`%s`. Child keys must be unique; when two children share a key, only ' + 
    'the first child will be used.%s', 
    KeyEscapeUtils.unescape(name), 
    ReactComponentTreeDevtool.getStackAddendumByID(selfDebugID));}


  if (keyUnique && child != null) {
    result[name] = child;}}



/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;}

  var result = {};

  if (__DEV__) {
    traverseAllChildren(
    children, 
    function (traverseContext, child, name) {return flattenSingleChildIntoContext(
      traverseContext, 
      child, 
      name, 
      selfDebugID);}, 

    result);} else 

  {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);}

  return result;}


module.exports = flattenChildren;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js":211,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\KeyEscapeUtils.js":276,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\traverseAllChildren.js":298,"fbjs/lib/warning":424}],294:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function (arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);} else 
  if (arr) {
    cb.call(scope, arr);}};



module.exports = forEachAccumulated;
},{}],295:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getHostComponentFromComposite
 */

'use strict';

var ReactNodeTypes = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactNodeTypes.js');

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;}


  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;} else 
  if (type === ReactNodeTypes.EMPTY) {
    return null;}}



module.exports = getHostComponentFromComposite;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\ReactNodeTypes.js":280}],296:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (
  ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || 
  maybeIterable[FAUX_ITERATOR_SYMBOL]);

  if (typeof iteratorFn === 'function') {
    return iteratorFn;}}



module.exports = getIteratorFn;
},{}],297:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = { 
  'color': true, 
  'date': true, 
  'datetime': true, 
  'datetime-local': true, 
  'email': true, 
  'month': true, 
  'number': true, 
  'password': true, 
  'range': true, 
  'search': true, 
  'tel': true, 
  'text': true, 
  'time': true, 
  'url': true, 
  'week': true };


function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (
  nodeName === 'input' && supportedInputTypes[elem.type] || 
  nodeName === 'textarea');}



module.exports = isTextInputElement;
},{}],298:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactCurrentOwner = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js');
var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');

var getIteratorFn = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\getIteratorFn.js');
var invariant = require('fbjs/lib/invariant');
var KeyEscapeUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\KeyEscapeUtils.js');
var warning = require('fbjs/lib/warning');

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);}

  // Implicit key determined by the index in the set
  return index.toString(36);}


/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(
children, 
nameSoFar, 
callback, 
traverseContext) 
{
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;}


  if (children === null || 
  type === 'string' || 
  type === 'number' || 
  ReactElement.isValidElement(children)) {
    callback(
    traverseContext, 
    children, 
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);

    return 1;}


  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(
      child, 
      nextName, 
      callback, 
      traverseContext);}} else 


  {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(
          child, 
          nextName, 
          callback, 
          traverseContext);}} else 


      {
        if (__DEV__) {
          warning(
          didWarnAboutMaps, 
          'Using Maps as children is not yet fully supported. It is an ' + 
          'experimental feature that might be removed. Convert it to a ' + 
          'sequence / iterable of keyed ReactElements instead.');

          didWarnAboutMaps = true;}

        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = 
            nextNamePrefix + 
            KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + 
            getComponentKey(child, 0);

            subtreeCount += traverseAllChildrenImpl(
            child, 
            nextName, 
            callback, 
            traverseContext);}}}} else 




    if (type === 'object') {
      var addendum = '';
      if (__DEV__) {
        addendum = 
        ' If you meant to render a collection of children, use an array ' + 
        'instead or wrap the object using createFragment(object) from the ' + 
        'React add-ons.';
        if (children._isReactElement) {
          addendum = 
          ' It looks like you\'re using an element created by a different ' + 
          'version of React. Make sure to use only one copy of React.';}

        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';}}}



      var childrenString = String(children);
      invariant(
      false, 
      'Objects are not valid as a React child (found: %s).%s', 
      childrenString === '[object Object]' ? 
      'object with keys {' + Object.keys(children).join(', ') + '}' : 
      childrenString, 
      addendum);}}




  return subtreeCount;}


/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;}


  return traverseAllChildrenImpl(children, '', callback, traverseContext);}


module.exports = traverseAllChildren;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactCurrentOwner.js":38,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\KeyEscapeUtils.js":276,"f:\\GitHubRepos\\react\\browsertests\\src\\shared\\utils\\getIteratorFn.js":296,"fbjs/lib/invariant":414,"fbjs/lib/warning":424}],299:[function(require,module,exports){
/**
 * @license
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 * @providesModule WebComponents
 */
// @version 0.5.1
window.WebComponents = window.WebComponents || {};

(function(scope) {
  var flags = scope.flags || {};
  var file = "webcomponents.js";
  var script = document.querySelector('script[src*="' + file + '"]');
  var flags = {};
  if (!flags.noOpts) {
    location.search.slice(1).split("&").forEach(function(o) {
      o = o.split("=");
      o[0] && (flags[o[0]] = o[1] || true);
    });
    if (script) {
      for (var i = 0, a; a = script.attributes[i]; i++) {
        if (a.name !== "src") {
          flags[a.name] = a.value || true;
        }
      }
    }
    if (flags.log) {
      var parts = flags.log.split(",");
      flags.log = {};
      parts.forEach(function(f) {
        flags.log[f] = true;
      });
    } else {
      flags.log = {};
    }
  }
  flags.shadow = flags.shadow || flags.shadowdom || flags.polyfill;
  if (flags.shadow === "native") {
    flags.shadow = false;
  } else {
    flags.shadow = flags.shadow || !HTMLElement.prototype.createShadowRoot;
  }
  if (flags.register) {
    window.CustomElements = window.CustomElements || {
      flags: {}
    };
    window.CustomElements.flags.register = flags.register;
  }
  scope.flags = flags;
})(WebComponents);

if (WebComponents.flags.shadow) {
  if (typeof WeakMap === "undefined") {
    (function() {
      var defineProperty = Object.defineProperty;
      var counter = Date.now() % 1e9;
      var WeakMap = function() {
        this.name = "__st" + (Math.random() * 1e9 >>> 0) + (counter++ + "__");
      };
      WeakMap.prototype = {
        set: function(key, value) {
          var entry = key[this.name];
          if (entry && entry[0] === key) entry[1] = value; else defineProperty(key, this.name, {
            value: [ key, value ],
            writable: true
          });
          return this;
        },
        get: function(key) {
          var entry;
          return (entry = key[this.name]) && entry[0] === key ? entry[1] : undefined;
        },
        "delete": function(key) {
          var entry = key[this.name];
          if (!entry || entry[0] !== key) return false;
          entry[0] = entry[1] = undefined;
          return true;
        },
        has: function(key) {
          var entry = key[this.name];
          if (!entry) return false;
          return entry[0] === key;
        }
      };
      window.WeakMap = WeakMap;
    })();
  }
  window.ShadowDOMPolyfill = {};
  (function(scope) {
    "use strict";
    var constructorTable = new WeakMap();
    var nativePrototypeTable = new WeakMap();
    var wrappers = Object.create(null);
    function detectEval() {
      if (typeof chrome !== "undefined" && chrome.app && chrome.app.runtime) {
        return false;
      }
      if (navigator.getDeviceStorage) {
        return false;
      }
      try {
        var f = new Function("return true;");
        return f();
      } catch (ex) {
        return false;
      }
    }
    var hasEval = detectEval();
    function assert(b) {
      if (!b) throw new Error("Assertion failed");
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    function mixin(to, from) {
      var names = getOwnPropertyNames(from);
      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        defineProperty(to, name, getOwnPropertyDescriptor(from, name));
      }
      return to;
    }
    function mixinStatics(to, from) {
      var names = getOwnPropertyNames(from);
      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        switch (name) {
         case "arguments":
         case "caller":
         case "length":
         case "name":
         case "prototype":
         case "toString":
          continue;
        }
        defineProperty(to, name, getOwnPropertyDescriptor(from, name));
      }
      return to;
    }
    function oneOf(object, propertyNames) {
      for (var i = 0; i < propertyNames.length; i++) {
        if (propertyNames[i] in object) return propertyNames[i];
      }
    }
    var nonEnumerableDataDescriptor = {
      value: undefined,
      configurable: true,
      enumerable: false,
      writable: true
    };
    function defineNonEnumerableDataProperty(object, name, value) {
      nonEnumerableDataDescriptor.value = value;
      defineProperty(object, name, nonEnumerableDataDescriptor);
    }
    getOwnPropertyNames(window);
    function getWrapperConstructor(node) {
      var nativePrototype = node.__proto__ || Object.getPrototypeOf(node);
      var wrapperConstructor = constructorTable.get(nativePrototype);
      if (wrapperConstructor) return wrapperConstructor;
      var parentWrapperConstructor = getWrapperConstructor(nativePrototype);
      var GeneratedWrapper = createWrapperConstructor(parentWrapperConstructor);
      registerInternal(nativePrototype, GeneratedWrapper, node);
      return GeneratedWrapper;
    }
    function addForwardingProperties(nativePrototype, wrapperPrototype) {
      installProperty(nativePrototype, wrapperPrototype, true);
    }
    function registerInstanceProperties(wrapperPrototype, instanceObject) {
      installProperty(instanceObject, wrapperPrototype, false);
    }
    var isFirefox = /Firefox/.test(navigator.userAgent);
    var dummyDescriptor = {
      get: function() {},
      set: function(v) {},
      configurable: true,
      enumerable: true
    };
    function isEventHandlerName(name) {
      return /^on[a-z]+$/.test(name);
    }
    function isIdentifierName(name) {
      return /^\w[a-zA-Z_0-9]*$/.test(name);
    }
    function getGetter(name) {
      return hasEval && isIdentifierName(name) ? new Function("return this.__impl4cf1e782hg__." + name) : function() {
        return this.__impl4cf1e782hg__[name];
      };
    }
    function getSetter(name) {
      return hasEval && isIdentifierName(name) ? new Function("v", "this.__impl4cf1e782hg__." + name + " = v") : function(v) {
        this.__impl4cf1e782hg__[name] = v;
      };
    }
    function getMethod(name) {
      return hasEval && isIdentifierName(name) ? new Function("return this.__impl4cf1e782hg__." + name + ".apply(this.__impl4cf1e782hg__, arguments)") : function() {
        return this.__impl4cf1e782hg__[name].apply(this.__impl4cf1e782hg__, arguments);
      };
    }
    function getDescriptor(source, name) {
      try {
        return Object.getOwnPropertyDescriptor(source, name);
      } catch (ex) {
        return dummyDescriptor;
      }
    }
    var isBrokenSafari = function() {
      var descr = Object.getOwnPropertyDescriptor(Node.prototype, "nodeType");
      return descr && !descr.get && !descr.set;
    }();
    function installProperty(source, target, allowMethod, opt_blacklist) {
      var names = getOwnPropertyNames(source);
      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        if (name === "polymerBlackList_") continue;
        if (name in target) continue;
        if (source.polymerBlackList_ && source.polymerBlackList_[name]) continue;
        if (isFirefox) {
          source.__lookupGetter__(name);
        }
        var descriptor = getDescriptor(source, name);
        var getter, setter;
        if (allowMethod && typeof descriptor.value === "function") {
          target[name] = getMethod(name);
          continue;
        }
        var isEvent = isEventHandlerName(name);
        if (isEvent) getter = scope.getEventHandlerGetter(name); else getter = getGetter(name);
        if (descriptor.writable || descriptor.set || isBrokenSafari) {
          if (isEvent) setter = scope.getEventHandlerSetter(name); else setter = getSetter(name);
        }
        defineProperty(target, name, {
          get: getter,
          set: setter,
          configurable: descriptor.configurable,
          enumerable: descriptor.enumerable
        });
      }
    }
    function register(nativeConstructor, wrapperConstructor, opt_instance) {
      var nativePrototype = nativeConstructor.prototype;
      registerInternal(nativePrototype, wrapperConstructor, opt_instance);
      mixinStatics(wrapperConstructor, nativeConstructor);
    }
    function registerInternal(nativePrototype, wrapperConstructor, opt_instance) {
      var wrapperPrototype = wrapperConstructor.prototype;
      assert(constructorTable.get(nativePrototype) === undefined);
      constructorTable.set(nativePrototype, wrapperConstructor);
      nativePrototypeTable.set(wrapperPrototype, nativePrototype);
      addForwardingProperties(nativePrototype, wrapperPrototype);
      if (opt_instance) registerInstanceProperties(wrapperPrototype, opt_instance);
      defineNonEnumerableDataProperty(wrapperPrototype, "constructor", wrapperConstructor);
      wrapperConstructor.prototype = wrapperPrototype;
    }
    function isWrapperFor(wrapperConstructor, nativeConstructor) {
      return constructorTable.get(nativeConstructor.prototype) === wrapperConstructor;
    }
    function registerObject(object) {
      var nativePrototype = Object.getPrototypeOf(object);
      var superWrapperConstructor = getWrapperConstructor(nativePrototype);
      var GeneratedWrapper = createWrapperConstructor(superWrapperConstructor);
      registerInternal(nativePrototype, GeneratedWrapper, object);
      return GeneratedWrapper;
    }
    function createWrapperConstructor(superWrapperConstructor) {
      function GeneratedWrapper(node) {
        superWrapperConstructor.call(this, node);
      }
      var p = Object.create(superWrapperConstructor.prototype);
      p.constructor = GeneratedWrapper;
      GeneratedWrapper.prototype = p;
      return GeneratedWrapper;
    }
    function isWrapper(object) {
      return object && object.__impl4cf1e782hg__;
    }
    function isNative(object) {
      return !isWrapper(object);
    }
    function wrap(impl) {
      if (impl === null) return null;
      assert(isNative(impl));
      return impl.__wrapper8e3dd93a60__ || (impl.__wrapper8e3dd93a60__ = new (getWrapperConstructor(impl))(impl));
    }
    function unwrap(wrapper) {
      if (wrapper === null) return null;
      assert(isWrapper(wrapper));
      return wrapper.__impl4cf1e782hg__;
    }
    function unsafeUnwrap(wrapper) {
      return wrapper.__impl4cf1e782hg__;
    }
    function setWrapper(impl, wrapper) {
      wrapper.__impl4cf1e782hg__ = impl;
      impl.__wrapper8e3dd93a60__ = wrapper;
    }
    function unwrapIfNeeded(object) {
      return object && isWrapper(object) ? unwrap(object) : object;
    }
    function wrapIfNeeded(object) {
      return object && !isWrapper(object) ? wrap(object) : object;
    }
    function rewrap(node, wrapper) {
      if (wrapper === null) return;
      assert(isNative(node));
      assert(wrapper === undefined || isWrapper(wrapper));
      node.__wrapper8e3dd93a60__ = wrapper;
    }
    var getterDescriptor = {
      get: undefined,
      configurable: true,
      enumerable: true
    };
    function defineGetter(constructor, name, getter) {
      getterDescriptor.get = getter;
      defineProperty(constructor.prototype, name, getterDescriptor);
    }
    function defineWrapGetter(constructor, name) {
      defineGetter(constructor, name, function() {
        return wrap(this.__impl4cf1e782hg__[name]);
      });
    }
    function forwardMethodsToWrapper(constructors, names) {
      constructors.forEach(function(constructor) {
        names.forEach(function(name) {
          constructor.prototype[name] = function() {
            var w = wrapIfNeeded(this);
            return w[name].apply(w, arguments);
          };
        });
      });
    }
    scope.assert = assert;
    scope.constructorTable = constructorTable;
    scope.defineGetter = defineGetter;
    scope.defineWrapGetter = defineWrapGetter;
    scope.forwardMethodsToWrapper = forwardMethodsToWrapper;
    scope.isWrapper = isWrapper;
    scope.isWrapperFor = isWrapperFor;
    scope.mixin = mixin;
    scope.nativePrototypeTable = nativePrototypeTable;
    scope.oneOf = oneOf;
    scope.registerObject = registerObject;
    scope.registerWrapper = register;
    scope.rewrap = rewrap;
    scope.setWrapper = setWrapper;
    scope.unsafeUnwrap = unsafeUnwrap;
    scope.unwrap = unwrap;
    scope.unwrapIfNeeded = unwrapIfNeeded;
    scope.wrap = wrap;
    scope.wrapIfNeeded = wrapIfNeeded;
    scope.wrappers = wrappers;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    function newSplice(index, removed, addedCount) {
      return {
        index: index,
        removed: removed,
        addedCount: addedCount
      };
    }
    var EDIT_LEAVE = 0;
    var EDIT_UPDATE = 1;
    var EDIT_ADD = 2;
    var EDIT_DELETE = 3;
    function ArraySplice() {}
    ArraySplice.prototype = {
      calcEditDistances: function(current, currentStart, currentEnd, old, oldStart, oldEnd) {
        var rowCount = oldEnd - oldStart + 1;
        var columnCount = currentEnd - currentStart + 1;
        var distances = new Array(rowCount);
        for (var i = 0; i < rowCount; i++) {
          distances[i] = new Array(columnCount);
          distances[i][0] = i;
        }
        for (var j = 0; j < columnCount; j++) distances[0][j] = j;
        for (var i = 1; i < rowCount; i++) {
          for (var j = 1; j < columnCount; j++) {
            if (this.equals(current[currentStart + j - 1], old[oldStart + i - 1])) distances[i][j] = distances[i - 1][j - 1]; else {
              var north = distances[i - 1][j] + 1;
              var west = distances[i][j - 1] + 1;
              distances[i][j] = north < west ? north : west;
            }
          }
        }
        return distances;
      },
      spliceOperationsFromEditDistances: function(distances) {
        var i = distances.length - 1;
        var j = distances[0].length - 1;
        var current = distances[i][j];
        var edits = [];
        while (i > 0 || j > 0) {
          if (i == 0) {
            edits.push(EDIT_ADD);
            j--;
            continue;
          }
          if (j == 0) {
            edits.push(EDIT_DELETE);
            i--;
            continue;
          }
          var northWest = distances[i - 1][j - 1];
          var west = distances[i - 1][j];
          var north = distances[i][j - 1];
          var min;
          if (west < north) min = west < northWest ? west : northWest; else min = north < northWest ? north : northWest;
          if (min == northWest) {
            if (northWest == current) {
              edits.push(EDIT_LEAVE);
            } else {
              edits.push(EDIT_UPDATE);
              current = northWest;
            }
            i--;
            j--;
          } else if (min == west) {
            edits.push(EDIT_DELETE);
            i--;
            current = west;
          } else {
            edits.push(EDIT_ADD);
            j--;
            current = north;
          }
        }
        edits.reverse();
        return edits;
      },
      calcSplices: function(current, currentStart, currentEnd, old, oldStart, oldEnd) {
        var prefixCount = 0;
        var suffixCount = 0;
        var minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);
        if (currentStart == 0 && oldStart == 0) prefixCount = this.sharedPrefix(current, old, minLength);
        if (currentEnd == current.length && oldEnd == old.length) suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);
        currentStart += prefixCount;
        oldStart += prefixCount;
        currentEnd -= suffixCount;
        oldEnd -= suffixCount;
        if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0) return [];
        if (currentStart == currentEnd) {
          var splice = newSplice(currentStart, [], 0);
          while (oldStart < oldEnd) splice.removed.push(old[oldStart++]);
          return [ splice ];
        } else if (oldStart == oldEnd) return [ newSplice(currentStart, [], currentEnd - currentStart) ];
        var ops = this.spliceOperationsFromEditDistances(this.calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));
        var splice = undefined;
        var splices = [];
        var index = currentStart;
        var oldIndex = oldStart;
        for (var i = 0; i < ops.length; i++) {
          switch (ops[i]) {
           case EDIT_LEAVE:
            if (splice) {
              splices.push(splice);
              splice = undefined;
            }
            index++;
            oldIndex++;
            break;

           case EDIT_UPDATE:
            if (!splice) splice = newSplice(index, [], 0);
            splice.addedCount++;
            index++;
            splice.removed.push(old[oldIndex]);
            oldIndex++;
            break;

           case EDIT_ADD:
            if (!splice) splice = newSplice(index, [], 0);
            splice.addedCount++;
            index++;
            break;

           case EDIT_DELETE:
            if (!splice) splice = newSplice(index, [], 0);
            splice.removed.push(old[oldIndex]);
            oldIndex++;
            break;
          }
        }
        if (splice) {
          splices.push(splice);
        }
        return splices;
      },
      sharedPrefix: function(current, old, searchLength) {
        for (var i = 0; i < searchLength; i++) if (!this.equals(current[i], old[i])) return i;
        return searchLength;
      },
      sharedSuffix: function(current, old, searchLength) {
        var index1 = current.length;
        var index2 = old.length;
        var count = 0;
        while (count < searchLength && this.equals(current[--index1], old[--index2])) count++;
        return count;
      },
      calculateSplices: function(current, previous) {
        return this.calcSplices(current, 0, current.length, previous, 0, previous.length);
      },
      equals: function(currentValue, previousValue) {
        return currentValue === previousValue;
      }
    };
    scope.ArraySplice = ArraySplice;
  })(window.ShadowDOMPolyfill);
  (function(context) {
    "use strict";
    var OriginalMutationObserver = window.MutationObserver;
    var callbacks = [];
    var pending = false;
    var timerFunc;
    function handle() {
      pending = false;
      var copies = callbacks.slice(0);
      callbacks = [];
      for (var i = 0; i < copies.length; i++) {
        (0, copies[i])();
      }
    }
    if (OriginalMutationObserver) {
      var counter = 1;
      var observer = new OriginalMutationObserver(handle);
      var textNode = document.createTextNode(counter);
      observer.observe(textNode, {
        characterData: true
      });
      timerFunc = function() {
        counter = (counter + 1) % 2;
        textNode.data = counter;
      };
    } else {
      timerFunc = window.setTimeout;
    }
    function setEndOfMicrotask(func) {
      callbacks.push(func);
      if (pending) return;
      pending = true;
      timerFunc(handle, 0);
    }
    context.setEndOfMicrotask = setEndOfMicrotask;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var setEndOfMicrotask = scope.setEndOfMicrotask;
    var wrapIfNeeded = scope.wrapIfNeeded;
    var wrappers = scope.wrappers;
    var registrationsTable = new WeakMap();
    var globalMutationObservers = [];
    var isScheduled = false;
    function scheduleCallback(observer) {
      if (observer.scheduled_) return;
      observer.scheduled_ = true;
      globalMutationObservers.push(observer);
      if (isScheduled) return;
      setEndOfMicrotask(notifyObservers);
      isScheduled = true;
    }
    function notifyObservers() {
      isScheduled = false;
      while (globalMutationObservers.length) {
        var notifyList = globalMutationObservers;
        globalMutationObservers = [];
        notifyList.sort(function(x, y) {
          return x.uid_ - y.uid_;
        });
        for (var i = 0; i < notifyList.length; i++) {
          var mo = notifyList[i];
          mo.scheduled_ = false;
          var queue = mo.takeRecords();
          removeTransientObserversFor(mo);
          if (queue.length) {
            mo.callback_(queue, mo);
          }
        }
      }
    }
    function MutationRecord(type, target) {
      this.type = type;
      this.target = target;
      this.addedNodes = new wrappers.NodeList();
      this.removedNodes = new wrappers.NodeList();
      this.previousSibling = null;
      this.nextSibling = null;
      this.attributeName = null;
      this.attributeNamespace = null;
      this.oldValue = null;
    }
    function registerTransientObservers(ancestor, node) {
      for (;ancestor; ancestor = ancestor.parentNode) {
        var registrations = registrationsTable.get(ancestor);
        if (!registrations) continue;
        for (var i = 0; i < registrations.length; i++) {
          var registration = registrations[i];
          if (registration.options.subtree) registration.addTransientObserver(node);
        }
      }
    }
    function removeTransientObserversFor(observer) {
      for (var i = 0; i < observer.nodes_.length; i++) {
        var node = observer.nodes_[i];
        var registrations = registrationsTable.get(node);
        if (!registrations) return;
        for (var j = 0; j < registrations.length; j++) {
          var registration = registrations[j];
          if (registration.observer === observer) registration.removeTransientObservers();
        }
      }
    }
    function enqueueMutation(target, type, data) {
      var interestedObservers = Object.create(null);
      var associatedStrings = Object.create(null);
      for (var node = target; node; node = node.parentNode) {
        var registrations = registrationsTable.get(node);
        if (!registrations) continue;
        for (var j = 0; j < registrations.length; j++) {
          var registration = registrations[j];
          var options = registration.options;
          if (node !== target && !options.subtree) continue;
          if (type === "attributes" && !options.attributes) continue;
          if (type === "attributes" && options.attributeFilter && (data.namespace !== null || options.attributeFilter.indexOf(data.name) === -1)) {
            continue;
          }
          if (type === "characterData" && !options.characterData) continue;
          if (type === "childList" && !options.childList) continue;
          var observer = registration.observer;
          interestedObservers[observer.uid_] = observer;
          if (type === "attributes" && options.attributeOldValue || type === "characterData" && options.characterDataOldValue) {
            associatedStrings[observer.uid_] = data.oldValue;
          }
        }
      }
      for (var uid in interestedObservers) {
        var observer = interestedObservers[uid];
        var record = new MutationRecord(type, target);
        if ("name" in data && "namespace" in data) {
          record.attributeName = data.name;
          record.attributeNamespace = data.namespace;
        }
        if (data.addedNodes) record.addedNodes = data.addedNodes;
        if (data.removedNodes) record.removedNodes = data.removedNodes;
        if (data.previousSibling) record.previousSibling = data.previousSibling;
        if (data.nextSibling) record.nextSibling = data.nextSibling;
        if (associatedStrings[uid] !== undefined) record.oldValue = associatedStrings[uid];
        scheduleCallback(observer);
        observer.records_.push(record);
      }
    }
    var slice = Array.prototype.slice;
    function MutationObserverOptions(options) {
      this.childList = !!options.childList;
      this.subtree = !!options.subtree;
      if (!("attributes" in options) && ("attributeOldValue" in options || "attributeFilter" in options)) {
        this.attributes = true;
      } else {
        this.attributes = !!options.attributes;
      }
      if ("characterDataOldValue" in options && !("characterData" in options)) this.characterData = true; else this.characterData = !!options.characterData;
      if (!this.attributes && (options.attributeOldValue || "attributeFilter" in options) || !this.characterData && options.characterDataOldValue) {
        throw new TypeError();
      }
      this.characterData = !!options.characterData;
      this.attributeOldValue = !!options.attributeOldValue;
      this.characterDataOldValue = !!options.characterDataOldValue;
      if ("attributeFilter" in options) {
        if (options.attributeFilter == null || typeof options.attributeFilter !== "object") {
          throw new TypeError();
        }
        this.attributeFilter = slice.call(options.attributeFilter);
      } else {
        this.attributeFilter = null;
      }
    }
    var uidCounter = 0;
    function MutationObserver(callback) {
      this.callback_ = callback;
      this.nodes_ = [];
      this.records_ = [];
      this.uid_ = ++uidCounter;
      this.scheduled_ = false;
    }
    MutationObserver.prototype = {
      constructor: MutationObserver,
      observe: function(target, options) {
        target = wrapIfNeeded(target);
        var newOptions = new MutationObserverOptions(options);
        var registration;
        var registrations = registrationsTable.get(target);
        if (!registrations) registrationsTable.set(target, registrations = []);
        for (var i = 0; i < registrations.length; i++) {
          if (registrations[i].observer === this) {
            registration = registrations[i];
            registration.removeTransientObservers();
            registration.options = newOptions;
          }
        }
        if (!registration) {
          registration = new Registration(this, target, newOptions);
          registrations.push(registration);
          this.nodes_.push(target);
        }
      },
      disconnect: function() {
        this.nodes_.forEach(function(node) {
          var registrations = registrationsTable.get(node);
          for (var i = 0; i < registrations.length; i++) {
            var registration = registrations[i];
            if (registration.observer === this) {
              registrations.splice(i, 1);
              break;
            }
          }
        }, this);
        this.records_ = [];
      },
      takeRecords: function() {
        var copyOfRecords = this.records_;
        this.records_ = [];
        return copyOfRecords;
      }
    };
    function Registration(observer, target, options) {
      this.observer = observer;
      this.target = target;
      this.options = options;
      this.transientObservedNodes = [];
    }
    Registration.prototype = {
      addTransientObserver: function(node) {
        if (node === this.target) return;
        scheduleCallback(this.observer);
        this.transientObservedNodes.push(node);
        var registrations = registrationsTable.get(node);
        if (!registrations) registrationsTable.set(node, registrations = []);
        registrations.push(this);
      },
      removeTransientObservers: function() {
        var transientObservedNodes = this.transientObservedNodes;
        this.transientObservedNodes = [];
        for (var i = 0; i < transientObservedNodes.length; i++) {
          var node = transientObservedNodes[i];
          var registrations = registrationsTable.get(node);
          for (var j = 0; j < registrations.length; j++) {
            if (registrations[j] === this) {
              registrations.splice(j, 1);
              break;
            }
          }
        }
      }
    };
    scope.enqueueMutation = enqueueMutation;
    scope.registerTransientObservers = registerTransientObservers;
    scope.wrappers.MutationObserver = MutationObserver;
    scope.wrappers.MutationRecord = MutationRecord;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    function TreeScope(root, parent) {
      this.root = root;
      this.parent = parent;
    }
    TreeScope.prototype = {
      get renderer() {
        if (this.root instanceof scope.wrappers.ShadowRoot) {
          return scope.getRendererForHost(this.root.host);
        }
        return null;
      },
      contains: function(treeScope) {
        for (;treeScope; treeScope = treeScope.parent) {
          if (treeScope === this) return true;
        }
        return false;
      }
    };
    function setTreeScope(node, treeScope) {
      if (node.treeScope_ !== treeScope) {
        node.treeScope_ = treeScope;
        for (var sr = node.shadowRoot; sr; sr = sr.olderShadowRoot) {
          sr.treeScope_.parent = treeScope;
        }
        for (var child = node.firstChild; child; child = child.nextSibling) {
          setTreeScope(child, treeScope);
        }
      }
    }
    function getTreeScope(node) {
      if (node instanceof scope.wrappers.Window) {
        debugger;
      }
      if (node.treeScope_) return node.treeScope_;
      var parent = node.parentNode;
      var treeScope;
      if (parent) treeScope = getTreeScope(parent); else treeScope = new TreeScope(node, null);
      return node.treeScope_ = treeScope;
    }
    scope.TreeScope = TreeScope;
    scope.getTreeScope = getTreeScope;
    scope.setTreeScope = setTreeScope;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var forwardMethodsToWrapper = scope.forwardMethodsToWrapper;
    var getTreeScope = scope.getTreeScope;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var setWrapper = scope.setWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var unwrap = scope.unwrap;
    var wrap = scope.wrap;
    var wrappers = scope.wrappers;
    var wrappedFuns = new WeakMap();
    var listenersTable = new WeakMap();
    var handledEventsTable = new WeakMap();
    var currentlyDispatchingEvents = new WeakMap();
    var targetTable = new WeakMap();
    var currentTargetTable = new WeakMap();
    var relatedTargetTable = new WeakMap();
    var eventPhaseTable = new WeakMap();
    var stopPropagationTable = new WeakMap();
    var stopImmediatePropagationTable = new WeakMap();
    var eventHandlersTable = new WeakMap();
    var eventPathTable = new WeakMap();
    function isShadowRoot(node) {
      return node instanceof wrappers.ShadowRoot;
    }
    function rootOfNode(node) {
      return getTreeScope(node).root;
    }
    function getEventPath(node, event) {
      var path = [];
      var current = node;
      path.push(current);
      while (current) {
        var destinationInsertionPoints = getDestinationInsertionPoints(current);
        if (destinationInsertionPoints && destinationInsertionPoints.length > 0) {
          for (var i = 0; i < destinationInsertionPoints.length; i++) {
            var insertionPoint = destinationInsertionPoints[i];
            if (isShadowInsertionPoint(insertionPoint)) {
              var shadowRoot = rootOfNode(insertionPoint);
              var olderShadowRoot = shadowRoot.olderShadowRoot;
              if (olderShadowRoot) path.push(olderShadowRoot);
            }
            path.push(insertionPoint);
          }
          current = destinationInsertionPoints[destinationInsertionPoints.length - 1];
        } else {
          if (isShadowRoot(current)) {
            if (inSameTree(node, current) && eventMustBeStopped(event)) {
              break;
            }
            current = current.host;
            path.push(current);
          } else {
            current = current.parentNode;
            if (current) path.push(current);
          }
        }
      }
      return path;
    }
    function eventMustBeStopped(event) {
      if (!event) return false;
      switch (event.type) {
       case "abort":
       case "error":
       case "select":
       case "change":
       case "load":
       case "reset":
       case "resize":
       case "scroll":
       case "selectstart":
        return true;
      }
      return false;
    }
    function isShadowInsertionPoint(node) {
      return node instanceof HTMLShadowElement;
    }
    function getDestinationInsertionPoints(node) {
      return scope.getDestinationInsertionPoints(node);
    }
    function eventRetargetting(path, currentTarget) {
      if (path.length === 0) return currentTarget;
      if (currentTarget instanceof wrappers.Window) currentTarget = currentTarget.document;
      var currentTargetTree = getTreeScope(currentTarget);
      var originalTarget = path[0];
      var originalTargetTree = getTreeScope(originalTarget);
      var relativeTargetTree = lowestCommonInclusiveAncestor(currentTargetTree, originalTargetTree);
      for (var i = 0; i < path.length; i++) {
        var node = path[i];
        if (getTreeScope(node) === relativeTargetTree) return node;
      }
      return path[path.length - 1];
    }
    function getTreeScopeAncestors(treeScope) {
      var ancestors = [];
      for (;treeScope; treeScope = treeScope.parent) {
        ancestors.push(treeScope);
      }
      return ancestors;
    }
    function lowestCommonInclusiveAncestor(tsA, tsB) {
      var ancestorsA = getTreeScopeAncestors(tsA);
      var ancestorsB = getTreeScopeAncestors(tsB);
      var result = null;
      while (ancestorsA.length > 0 && ancestorsB.length > 0) {
        var a = ancestorsA.pop();
        var b = ancestorsB.pop();
        if (a === b) result = a; else break;
      }
      return result;
    }
    function getTreeScopeRoot(ts) {
      if (!ts.parent) return ts;
      return getTreeScopeRoot(ts.parent);
    }
    function relatedTargetResolution(event, currentTarget, relatedTarget) {
      if (currentTarget instanceof wrappers.Window) currentTarget = currentTarget.document;
      var currentTargetTree = getTreeScope(currentTarget);
      var relatedTargetTree = getTreeScope(relatedTarget);
      var relatedTargetEventPath = getEventPath(relatedTarget, event);
      var lowestCommonAncestorTree;
      var lowestCommonAncestorTree = lowestCommonInclusiveAncestor(currentTargetTree, relatedTargetTree);
      if (!lowestCommonAncestorTree) lowestCommonAncestorTree = relatedTargetTree.root;
      for (var commonAncestorTree = lowestCommonAncestorTree; commonAncestorTree; commonAncestorTree = commonAncestorTree.parent) {
        var adjustedRelatedTarget;
        for (var i = 0; i < relatedTargetEventPath.length; i++) {
          var node = relatedTargetEventPath[i];
          if (getTreeScope(node) === commonAncestorTree) return node;
        }
      }
      return null;
    }
    function inSameTree(a, b) {
      return getTreeScope(a) === getTreeScope(b);
    }
    var NONE = 0;
    var CAPTURING_PHASE = 1;
    var AT_TARGET = 2;
    var BUBBLING_PHASE = 3;
    var pendingError;
    function dispatchOriginalEvent(originalEvent) {
      if (handledEventsTable.get(originalEvent)) return;
      handledEventsTable.set(originalEvent, true);
      dispatchEvent(wrap(originalEvent), wrap(originalEvent.target));
      if (pendingError) {
        var err = pendingError;
        pendingError = null;
        throw err;
      }
    }
    function isLoadLikeEvent(event) {
      switch (event.type) {
       case "load":
       case "beforeunload":
       case "unload":
        return true;
      }
      return false;
    }
    function dispatchEvent(event, originalWrapperTarget) {
      if (currentlyDispatchingEvents.get(event)) throw new Error("InvalidStateError");
      currentlyDispatchingEvents.set(event, true);
      scope.renderAllPending();
      var eventPath;
      var overrideTarget;
      var win;
      if (isLoadLikeEvent(event) && !event.bubbles) {
        var doc = originalWrapperTarget;
        if (doc instanceof wrappers.Document && (win = doc.defaultView)) {
          overrideTarget = doc;
          eventPath = [];
        }
      }
      if (!eventPath) {
        if (originalWrapperTarget instanceof wrappers.Window) {
          win = originalWrapperTarget;
          eventPath = [];
        } else {
          eventPath = getEventPath(originalWrapperTarget, event);
          if (!isLoadLikeEvent(event)) {
            var doc = eventPath[eventPath.length - 1];
            if (doc instanceof wrappers.Document) win = doc.defaultView;
          }
        }
      }
      eventPathTable.set(event, eventPath);
      if (dispatchCapturing(event, eventPath, win, overrideTarget)) {
        if (dispatchAtTarget(event, eventPath, win, overrideTarget)) {
          dispatchBubbling(event, eventPath, win, overrideTarget);
        }
      }
      eventPhaseTable.set(event, NONE);
      currentTargetTable.delete(event, null);
      currentlyDispatchingEvents.delete(event);
      return event.defaultPrevented;
    }
    function dispatchCapturing(event, eventPath, win, overrideTarget) {
      var phase = CAPTURING_PHASE;
      if (win) {
        if (!invoke(win, event, phase, eventPath, overrideTarget)) return false;
      }
      for (var i = eventPath.length - 1; i > 0; i--) {
        if (!invoke(eventPath[i], event, phase, eventPath, overrideTarget)) return false;
      }
      return true;
    }
    function dispatchAtTarget(event, eventPath, win, overrideTarget) {
      var phase = AT_TARGET;
      var currentTarget = eventPath[0] || win;
      return invoke(currentTarget, event, phase, eventPath, overrideTarget);
    }
    function dispatchBubbling(event, eventPath, win, overrideTarget) {
      var phase = BUBBLING_PHASE;
      for (var i = 1; i < eventPath.length; i++) {
        if (!invoke(eventPath[i], event, phase, eventPath, overrideTarget)) return;
      }
      if (win && eventPath.length > 0) {
        invoke(win, event, phase, eventPath, overrideTarget);
      }
    }
    function invoke(currentTarget, event, phase, eventPath, overrideTarget) {
      var listeners = listenersTable.get(currentTarget);
      if (!listeners) return true;
      var target = overrideTarget || eventRetargetting(eventPath, currentTarget);
      if (target === currentTarget) {
        if (phase === CAPTURING_PHASE) return true;
        if (phase === BUBBLING_PHASE) phase = AT_TARGET;
      } else if (phase === BUBBLING_PHASE && !event.bubbles) {
        return true;
      }
      if ("relatedTarget" in event) {
        var originalEvent = unwrap(event);
        var unwrappedRelatedTarget = originalEvent.relatedTarget;
        if (unwrappedRelatedTarget) {
          if (unwrappedRelatedTarget instanceof Object && unwrappedRelatedTarget.addEventListener) {
            var relatedTarget = wrap(unwrappedRelatedTarget);
            var adjusted = relatedTargetResolution(event, currentTarget, relatedTarget);
            if (adjusted === target) return true;
          } else {
            adjusted = null;
          }
          relatedTargetTable.set(event, adjusted);
        }
      }
      eventPhaseTable.set(event, phase);
      var type = event.type;
      var anyRemoved = false;
      targetTable.set(event, target);
      currentTargetTable.set(event, currentTarget);
      listeners.depth++;
      for (var i = 0, len = listeners.length; i < len; i++) {
        var listener = listeners[i];
        if (listener.removed) {
          anyRemoved = true;
          continue;
        }
        if (listener.type !== type || !listener.capture && phase === CAPTURING_PHASE || listener.capture && phase === BUBBLING_PHASE) {
          continue;
        }
        try {
          if (typeof listener.handler === "function") listener.handler.call(currentTarget, event); else listener.handler.handleEvent(event);
          if (stopImmediatePropagationTable.get(event)) return false;
        } catch (ex) {
          if (!pendingError) pendingError = ex;
        }
      }
      listeners.depth--;
      if (anyRemoved && listeners.depth === 0) {
        var copy = listeners.slice();
        listeners.length = 0;
        for (var i = 0; i < copy.length; i++) {
          if (!copy[i].removed) listeners.push(copy[i]);
        }
      }
      return !stopPropagationTable.get(event);
    }
    function Listener(type, handler, capture) {
      this.type = type;
      this.handler = handler;
      this.capture = Boolean(capture);
    }
    Listener.prototype = {
      equals: function(that) {
        return this.handler === that.handler && this.type === that.type && this.capture === that.capture;
      },
      get removed() {
        return this.handler === null;
      },
      remove: function() {
        this.handler = null;
      }
    };
    var OriginalEvent = window.Event;
    OriginalEvent.prototype.polymerBlackList_ = {
      returnValue: true,
      keyLocation: true
    };
    function Event(type, options) {
      if (type instanceof OriginalEvent) {
        var impl = type;
        if (!OriginalBeforeUnloadEvent && impl.type === "beforeunload" && !(this instanceof BeforeUnloadEvent)) {
          return new BeforeUnloadEvent(impl);
        }
        setWrapper(impl, this);
      } else {
        return wrap(constructEvent(OriginalEvent, "Event", type, options));
      }
    }
    Event.prototype = {
      get target() {
        return targetTable.get(this);
      },
      get currentTarget() {
        return currentTargetTable.get(this);
      },
      get eventPhase() {
        return eventPhaseTable.get(this);
      },
      get path() {
        var eventPath = eventPathTable.get(this);
        if (!eventPath) return [];
        return eventPath.slice();
      },
      stopPropagation: function() {
        stopPropagationTable.set(this, true);
      },
      stopImmediatePropagation: function() {
        stopPropagationTable.set(this, true);
        stopImmediatePropagationTable.set(this, true);
      }
    };
    registerWrapper(OriginalEvent, Event, document.createEvent("Event"));
    function unwrapOptions(options) {
      if (!options || !options.relatedTarget) return options;
      return Object.create(options, {
        relatedTarget: {
          value: unwrap(options.relatedTarget)
        }
      });
    }
    function registerGenericEvent(name, SuperEvent, prototype) {
      var OriginalEvent = window[name];
      var GenericEvent = function(type, options) {
        if (type instanceof OriginalEvent) setWrapper(type, this); else return wrap(constructEvent(OriginalEvent, name, type, options));
      };
      GenericEvent.prototype = Object.create(SuperEvent.prototype);
      if (prototype) mixin(GenericEvent.prototype, prototype);
      if (OriginalEvent) {
        try {
          registerWrapper(OriginalEvent, GenericEvent, new OriginalEvent("temp"));
        } catch (ex) {
          registerWrapper(OriginalEvent, GenericEvent, document.createEvent(name));
        }
      }
      return GenericEvent;
    }
    var UIEvent = registerGenericEvent("UIEvent", Event);
    var CustomEvent = registerGenericEvent("CustomEvent", Event);
    var relatedTargetProto = {
      get relatedTarget() {
        var relatedTarget = relatedTargetTable.get(this);
        if (relatedTarget !== undefined) return relatedTarget;
        return wrap(unwrap(this).relatedTarget);
      }
    };
    function getInitFunction(name, relatedTargetIndex) {
      return function() {
        arguments[relatedTargetIndex] = unwrap(arguments[relatedTargetIndex]);
        var impl = unwrap(this);
        impl[name].apply(impl, arguments);
      };
    }
    var mouseEventProto = mixin({
      initMouseEvent: getInitFunction("initMouseEvent", 14)
    }, relatedTargetProto);
    var focusEventProto = mixin({
      initFocusEvent: getInitFunction("initFocusEvent", 5)
    }, relatedTargetProto);
    var MouseEvent = registerGenericEvent("MouseEvent", UIEvent, mouseEventProto);
    var FocusEvent = registerGenericEvent("FocusEvent", UIEvent, focusEventProto);
    var defaultInitDicts = Object.create(null);
    var supportsEventConstructors = function() {
      try {
        new window.FocusEvent("focus");
      } catch (ex) {
        return false;
      }
      return true;
    }();
    function constructEvent(OriginalEvent, name, type, options) {
      if (supportsEventConstructors) return new OriginalEvent(type, unwrapOptions(options));
      var event = unwrap(document.createEvent(name));
      var defaultDict = defaultInitDicts[name];
      var args = [ type ];
      Object.keys(defaultDict).forEach(function(key) {
        var v = options != null && key in options ? options[key] : defaultDict[key];
        if (key === "relatedTarget") v = unwrap(v);
        args.push(v);
      });
      event["init" + name].apply(event, args);
      return event;
    }
    if (!supportsEventConstructors) {
      var configureEventConstructor = function(name, initDict, superName) {
        if (superName) {
          var superDict = defaultInitDicts[superName];
          initDict = mixin(mixin({}, superDict), initDict);
        }
        defaultInitDicts[name] = initDict;
      };
      configureEventConstructor("Event", {
        bubbles: false,
        cancelable: false
      });
      configureEventConstructor("CustomEvent", {
        detail: null
      }, "Event");
      configureEventConstructor("UIEvent", {
        view: null,
        detail: 0
      }, "Event");
      configureEventConstructor("MouseEvent", {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        ctrlKey: false,
        altKey: false,
        shiftKey: false,
        metaKey: false,
        button: 0,
        relatedTarget: null
      }, "UIEvent");
      configureEventConstructor("FocusEvent", {
        relatedTarget: null
      }, "UIEvent");
    }
    var OriginalBeforeUnloadEvent = window.BeforeUnloadEvent;
    function BeforeUnloadEvent(impl) {
      Event.call(this, impl);
    }
    BeforeUnloadEvent.prototype = Object.create(Event.prototype);
    mixin(BeforeUnloadEvent.prototype, {
      get returnValue() {
        return unsafeUnwrap(this).returnValue;
      },
      set returnValue(v) {
        unsafeUnwrap(this).returnValue = v;
      }
    });
    if (OriginalBeforeUnloadEvent) registerWrapper(OriginalBeforeUnloadEvent, BeforeUnloadEvent);
    function isValidListener(fun) {
      if (typeof fun === "function") return true;
      return fun && fun.handleEvent;
    }
    function isMutationEvent(type) {
      switch (type) {
       case "DOMAttrModified":
       case "DOMAttributeNameChanged":
       case "DOMCharacterDataModified":
       case "DOMElementNameChanged":
       case "DOMNodeInserted":
       case "DOMNodeInsertedIntoDocument":
       case "DOMNodeRemoved":
       case "DOMNodeRemovedFromDocument":
       case "DOMSubtreeModified":
        return true;
      }
      return false;
    }
    var OriginalEventTarget = window.EventTarget;
    function EventTarget(impl) {
      setWrapper(impl, this);
    }
    var methodNames = [ "addEventListener", "removeEventListener", "dispatchEvent" ];
    [ Node, Window ].forEach(function(constructor) {
      var p = constructor.prototype;
      methodNames.forEach(function(name) {
        Object.defineProperty(p, name + "_", {
          value: p[name]
        });
      });
    });
    function getTargetToListenAt(wrapper) {
      if (wrapper instanceof wrappers.ShadowRoot) wrapper = wrapper.host;
      return unwrap(wrapper);
    }
    EventTarget.prototype = {
      addEventListener: function(type, fun, capture) {
        if (!isValidListener(fun) || isMutationEvent(type)) return;
        var listener = new Listener(type, fun, capture);
        var listeners = listenersTable.get(this);
        if (!listeners) {
          listeners = [];
          listeners.depth = 0;
          listenersTable.set(this, listeners);
        } else {
          for (var i = 0; i < listeners.length; i++) {
            if (listener.equals(listeners[i])) return;
          }
        }
        listeners.push(listener);
        var target = getTargetToListenAt(this);
        target.addEventListener_(type, dispatchOriginalEvent, true);
      },
      removeEventListener: function(type, fun, capture) {
        capture = Boolean(capture);
        var listeners = listenersTable.get(this);
        if (!listeners) return;
        var count = 0, found = false;
        for (var i = 0; i < listeners.length; i++) {
          if (listeners[i].type === type && listeners[i].capture === capture) {
            count++;
            if (listeners[i].handler === fun) {
              found = true;
              listeners[i].remove();
            }
          }
        }
        if (found && count === 1) {
          var target = getTargetToListenAt(this);
          target.removeEventListener_(type, dispatchOriginalEvent, true);
        }
      },
      dispatchEvent: function(event) {
        var nativeEvent = unwrap(event);
        var eventType = nativeEvent.type;
        handledEventsTable.set(nativeEvent, false);
        scope.renderAllPending();
        var tempListener;
        if (!hasListenerInAncestors(this, eventType)) {
          tempListener = function() {};
          this.addEventListener(eventType, tempListener, true);
        }
        try {
          return unwrap(this).dispatchEvent_(nativeEvent);
        } finally {
          if (tempListener) this.removeEventListener(eventType, tempListener, true);
        }
      }
    };
    function hasListener(node, type) {
      var listeners = listenersTable.get(node);
      if (listeners) {
        for (var i = 0; i < listeners.length; i++) {
          if (!listeners[i].removed && listeners[i].type === type) return true;
        }
      }
      return false;
    }
    function hasListenerInAncestors(target, type) {
      for (var node = unwrap(target); node; node = node.parentNode) {
        if (hasListener(wrap(node), type)) return true;
      }
      return false;
    }
    if (OriginalEventTarget) registerWrapper(OriginalEventTarget, EventTarget);
    function wrapEventTargetMethods(constructors) {
      forwardMethodsToWrapper(constructors, methodNames);
    }
    var originalElementFromPoint = document.elementFromPoint;
    function elementFromPoint(self, document, x, y) {
      scope.renderAllPending();
      var element = wrap(originalElementFromPoint.call(unsafeUnwrap(document), x, y));
      if (!element) return null;
      var path = getEventPath(element, null);
      var idx = path.lastIndexOf(self);
      if (idx == -1) return null; else path = path.slice(0, idx);
      return eventRetargetting(path, self);
    }
    function getEventHandlerGetter(name) {
      return function() {
        var inlineEventHandlers = eventHandlersTable.get(this);
        return inlineEventHandlers && inlineEventHandlers[name] && inlineEventHandlers[name].value || null;
      };
    }
    function getEventHandlerSetter(name) {
      var eventType = name.slice(2);
      return function(value) {
        var inlineEventHandlers = eventHandlersTable.get(this);
        if (!inlineEventHandlers) {
          inlineEventHandlers = Object.create(null);
          eventHandlersTable.set(this, inlineEventHandlers);
        }
        var old = inlineEventHandlers[name];
        if (old) this.removeEventListener(eventType, old.wrapped, false);
        if (typeof value === "function") {
          var wrapped = function(e) {
            var rv = value.call(this, e);
            if (rv === false) e.preventDefault(); else if (name === "onbeforeunload" && typeof rv === "string") e.returnValue = rv;
          };
          this.addEventListener(eventType, wrapped, false);
          inlineEventHandlers[name] = {
            value: value,
            wrapped: wrapped
          };
        }
      };
    }
    scope.elementFromPoint = elementFromPoint;
    scope.getEventHandlerGetter = getEventHandlerGetter;
    scope.getEventHandlerSetter = getEventHandlerSetter;
    scope.wrapEventTargetMethods = wrapEventTargetMethods;
    scope.wrappers.BeforeUnloadEvent = BeforeUnloadEvent;
    scope.wrappers.CustomEvent = CustomEvent;
    scope.wrappers.Event = Event;
    scope.wrappers.EventTarget = EventTarget;
    scope.wrappers.FocusEvent = FocusEvent;
    scope.wrappers.MouseEvent = MouseEvent;
    scope.wrappers.UIEvent = UIEvent;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var UIEvent = scope.wrappers.UIEvent;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var setWrapper = scope.setWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var wrap = scope.wrap;
    var OriginalTouchEvent = window.TouchEvent;
    if (!OriginalTouchEvent) return;
    var nativeEvent;
    try {
      nativeEvent = document.createEvent("TouchEvent");
    } catch (ex) {
      return;
    }
    var nonEnumDescriptor = {
      enumerable: false
    };
    function nonEnum(obj, prop) {
      Object.defineProperty(obj, prop, nonEnumDescriptor);
    }
    function Touch(impl) {
      setWrapper(impl, this);
    }
    Touch.prototype = {
      get target() {
        return wrap(unsafeUnwrap(this).target);
      }
    };
    var descr = {
      configurable: true,
      enumerable: true,
      get: null
    };
    [ "clientX", "clientY", "screenX", "screenY", "pageX", "pageY", "identifier", "webkitRadiusX", "webkitRadiusY", "webkitRotationAngle", "webkitForce" ].forEach(function(name) {
      descr.get = function() {
        return unsafeUnwrap(this)[name];
      };
      Object.defineProperty(Touch.prototype, name, descr);
    });
    function TouchList() {
      this.length = 0;
      nonEnum(this, "length");
    }
    TouchList.prototype = {
      item: function(index) {
        return this[index];
      }
    };
    function wrapTouchList(nativeTouchList) {
      var list = new TouchList();
      for (var i = 0; i < nativeTouchList.length; i++) {
        list[i] = new Touch(nativeTouchList[i]);
      }
      list.length = i;
      return list;
    }
    function TouchEvent(impl) {
      UIEvent.call(this, impl);
    }
    TouchEvent.prototype = Object.create(UIEvent.prototype);
    mixin(TouchEvent.prototype, {
      get touches() {
        return wrapTouchList(unsafeUnwrap(this).touches);
      },
      get targetTouches() {
        return wrapTouchList(unsafeUnwrap(this).targetTouches);
      },
      get changedTouches() {
        return wrapTouchList(unsafeUnwrap(this).changedTouches);
      },
      initTouchEvent: function() {
        throw new Error("Not implemented");
      }
    });
    registerWrapper(OriginalTouchEvent, TouchEvent, nativeEvent);
    scope.wrappers.Touch = Touch;
    scope.wrappers.TouchEvent = TouchEvent;
    scope.wrappers.TouchList = TouchList;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var unsafeUnwrap = scope.unsafeUnwrap;
    var wrap = scope.wrap;
    var nonEnumDescriptor = {
      enumerable: false
    };
    function nonEnum(obj, prop) {
      Object.defineProperty(obj, prop, nonEnumDescriptor);
    }
    function NodeList() {
      this.length = 0;
      nonEnum(this, "length");
    }
    NodeList.prototype = {
      item: function(index) {
        return this[index];
      }
    };
    nonEnum(NodeList.prototype, "item");
    function wrapNodeList(list) {
      if (list == null) return list;
      var wrapperList = new NodeList();
      for (var i = 0, length = list.length; i < length; i++) {
        wrapperList[i] = wrap(list[i]);
      }
      wrapperList.length = length;
      return wrapperList;
    }
    function addWrapNodeListMethod(wrapperConstructor, name) {
      wrapperConstructor.prototype[name] = function() {
        return wrapNodeList(unsafeUnwrap(this)[name].apply(unsafeUnwrap(this), arguments));
      };
    }
    scope.wrappers.NodeList = NodeList;
    scope.addWrapNodeListMethod = addWrapNodeListMethod;
    scope.wrapNodeList = wrapNodeList;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    scope.wrapHTMLCollection = scope.wrapNodeList;
    scope.wrappers.HTMLCollection = scope.wrappers.NodeList;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var EventTarget = scope.wrappers.EventTarget;
    var NodeList = scope.wrappers.NodeList;
    var TreeScope = scope.TreeScope;
    var assert = scope.assert;
    var defineWrapGetter = scope.defineWrapGetter;
    var enqueueMutation = scope.enqueueMutation;
    var getTreeScope = scope.getTreeScope;
    var isWrapper = scope.isWrapper;
    var mixin = scope.mixin;
    var registerTransientObservers = scope.registerTransientObservers;
    var registerWrapper = scope.registerWrapper;
    var setTreeScope = scope.setTreeScope;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var unwrap = scope.unwrap;
    var unwrapIfNeeded = scope.unwrapIfNeeded;
    var wrap = scope.wrap;
    var wrapIfNeeded = scope.wrapIfNeeded;
    var wrappers = scope.wrappers;
    function assertIsNodeWrapper(node) {
      assert(node instanceof Node);
    }
    function createOneElementNodeList(node) {
      var nodes = new NodeList();
      nodes[0] = node;
      nodes.length = 1;
      return nodes;
    }
    var surpressMutations = false;
    function enqueueRemovalForInsertedNodes(node, parent, nodes) {
      enqueueMutation(parent, "childList", {
        removedNodes: nodes,
        previousSibling: node.previousSibling,
        nextSibling: node.nextSibling
      });
    }
    function enqueueRemovalForInsertedDocumentFragment(df, nodes) {
      enqueueMutation(df, "childList", {
        removedNodes: nodes
      });
    }
    function collectNodes(node, parentNode, previousNode, nextNode) {
      if (node instanceof DocumentFragment) {
        var nodes = collectNodesForDocumentFragment(node);
        surpressMutations = true;
        for (var i = nodes.length - 1; i >= 0; i--) {
          node.removeChild(nodes[i]);
          nodes[i].parentNode_ = parentNode;
        }
        surpressMutations = false;
        for (var i = 0; i < nodes.length; i++) {
          nodes[i].previousSibling_ = nodes[i - 1] || previousNode;
          nodes[i].nextSibling_ = nodes[i + 1] || nextNode;
        }
        if (previousNode) previousNode.nextSibling_ = nodes[0];
        if (nextNode) nextNode.previousSibling_ = nodes[nodes.length - 1];
        return nodes;
      }
      var nodes = createOneElementNodeList(node);
      var oldParent = node.parentNode;
      if (oldParent) {
        oldParent.removeChild(node);
      }
      node.parentNode_ = parentNode;
      node.previousSibling_ = previousNode;
      node.nextSibling_ = nextNode;
      if (previousNode) previousNode.nextSibling_ = node;
      if (nextNode) nextNode.previousSibling_ = node;
      return nodes;
    }
    function collectNodesNative(node) {
      if (node instanceof DocumentFragment) return collectNodesForDocumentFragment(node);
      var nodes = createOneElementNodeList(node);
      var oldParent = node.parentNode;
      if (oldParent) enqueueRemovalForInsertedNodes(node, oldParent, nodes);
      return nodes;
    }
    function collectNodesForDocumentFragment(node) {
      var nodes = new NodeList();
      var i = 0;
      for (var child = node.firstChild; child; child = child.nextSibling) {
        nodes[i++] = child;
      }
      nodes.length = i;
      enqueueRemovalForInsertedDocumentFragment(node, nodes);
      return nodes;
    }
    function snapshotNodeList(nodeList) {
      return nodeList;
    }
    function nodeWasAdded(node, treeScope) {
      setTreeScope(node, treeScope);
      node.nodeIsInserted_();
    }
    function nodesWereAdded(nodes, parent) {
      var treeScope = getTreeScope(parent);
      for (var i = 0; i < nodes.length; i++) {
        nodeWasAdded(nodes[i], treeScope);
      }
    }
    function nodeWasRemoved(node) {
      setTreeScope(node, new TreeScope(node, null));
    }
    function nodesWereRemoved(nodes) {
      for (var i = 0; i < nodes.length; i++) {
        nodeWasRemoved(nodes[i]);
      }
    }
    function ensureSameOwnerDocument(parent, child) {
      var ownerDoc = parent.nodeType === Node.DOCUMENT_NODE ? parent : parent.ownerDocument;
      if (ownerDoc !== child.ownerDocument) ownerDoc.adoptNode(child);
    }
    function adoptNodesIfNeeded(owner, nodes) {
      if (!nodes.length) return;
      var ownerDoc = owner.ownerDocument;
      if (ownerDoc === nodes[0].ownerDocument) return;
      for (var i = 0; i < nodes.length; i++) {
        scope.adoptNodeNoRemove(nodes[i], ownerDoc);
      }
    }
    function unwrapNodesForInsertion(owner, nodes) {
      adoptNodesIfNeeded(owner, nodes);
      var length = nodes.length;
      if (length === 1) return unwrap(nodes[0]);
      var df = unwrap(owner.ownerDocument.createDocumentFragment());
      for (var i = 0; i < length; i++) {
        df.appendChild(unwrap(nodes[i]));
      }
      return df;
    }
    function clearChildNodes(wrapper) {
      if (wrapper.firstChild_ !== undefined) {
        var child = wrapper.firstChild_;
        while (child) {
          var tmp = child;
          child = child.nextSibling_;
          tmp.parentNode_ = tmp.previousSibling_ = tmp.nextSibling_ = undefined;
        }
      }
      wrapper.firstChild_ = wrapper.lastChild_ = undefined;
    }
    function removeAllChildNodes(wrapper) {
      if (wrapper.invalidateShadowRenderer()) {
        var childWrapper = wrapper.firstChild;
        while (childWrapper) {
          assert(childWrapper.parentNode === wrapper);
          var nextSibling = childWrapper.nextSibling;
          var childNode = unwrap(childWrapper);
          var parentNode = childNode.parentNode;
          if (parentNode) originalRemoveChild.call(parentNode, childNode);
          childWrapper.previousSibling_ = childWrapper.nextSibling_ = childWrapper.parentNode_ = null;
          childWrapper = nextSibling;
        }
        wrapper.firstChild_ = wrapper.lastChild_ = null;
      } else {
        var node = unwrap(wrapper);
        var child = node.firstChild;
        var nextSibling;
        while (child) {
          nextSibling = child.nextSibling;
          originalRemoveChild.call(node, child);
          child = nextSibling;
        }
      }
    }
    function invalidateParent(node) {
      var p = node.parentNode;
      return p && p.invalidateShadowRenderer();
    }
    function cleanupNodes(nodes) {
      for (var i = 0, n; i < nodes.length; i++) {
        n = nodes[i];
        n.parentNode.removeChild(n);
      }
    }
    var originalImportNode = document.importNode;
    var originalCloneNode = window.Node.prototype.cloneNode;
    function cloneNode(node, deep, opt_doc) {
      var clone;
      if (opt_doc) clone = wrap(originalImportNode.call(opt_doc, unsafeUnwrap(node), false)); else clone = wrap(originalCloneNode.call(unsafeUnwrap(node), false));
      if (deep) {
        for (var child = node.firstChild; child; child = child.nextSibling) {
          clone.appendChild(cloneNode(child, true, opt_doc));
        }
        if (node instanceof wrappers.HTMLTemplateElement) {
          var cloneContent = clone.content;
          for (var child = node.content.firstChild; child; child = child.nextSibling) {
            cloneContent.appendChild(cloneNode(child, true, opt_doc));
          }
        }
      }
      return clone;
    }
    function contains(self, child) {
      if (!child || getTreeScope(self) !== getTreeScope(child)) return false;
      for (var node = child; node; node = node.parentNode) {
        if (node === self) return true;
      }
      return false;
    }
    var OriginalNode = window.Node;
    function Node(original) {
      assert(original instanceof OriginalNode);
      EventTarget.call(this, original);
      this.parentNode_ = undefined;
      this.firstChild_ = undefined;
      this.lastChild_ = undefined;
      this.nextSibling_ = undefined;
      this.previousSibling_ = undefined;
      this.treeScope_ = undefined;
    }
    var OriginalDocumentFragment = window.DocumentFragment;
    var originalAppendChild = OriginalNode.prototype.appendChild;
    var originalCompareDocumentPosition = OriginalNode.prototype.compareDocumentPosition;
    var originalInsertBefore = OriginalNode.prototype.insertBefore;
    var originalRemoveChild = OriginalNode.prototype.removeChild;
    var originalReplaceChild = OriginalNode.prototype.replaceChild;
    var isIe = /Trident/.test(navigator.userAgent);
    var removeChildOriginalHelper = isIe ? function(parent, child) {
      try {
        originalRemoveChild.call(parent, child);
      } catch (ex) {
        if (!(parent instanceof OriginalDocumentFragment)) throw ex;
      }
    } : function(parent, child) {
      originalRemoveChild.call(parent, child);
    };
    Node.prototype = Object.create(EventTarget.prototype);
    mixin(Node.prototype, {
      appendChild: function(childWrapper) {
        return this.insertBefore(childWrapper, null);
      },
      insertBefore: function(childWrapper, refWrapper) {
        assertIsNodeWrapper(childWrapper);
        var refNode;
        if (refWrapper) {
          if (isWrapper(refWrapper)) {
            refNode = unwrap(refWrapper);
          } else {
            refNode = refWrapper;
            refWrapper = wrap(refNode);
          }
        } else {
          refWrapper = null;
          refNode = null;
        }
        refWrapper && assert(refWrapper.parentNode === this);
        var nodes;
        var previousNode = refWrapper ? refWrapper.previousSibling : this.lastChild;
        var useNative = !this.invalidateShadowRenderer() && !invalidateParent(childWrapper);
        if (useNative) nodes = collectNodesNative(childWrapper); else nodes = collectNodes(childWrapper, this, previousNode, refWrapper);
        if (useNative) {
          ensureSameOwnerDocument(this, childWrapper);
          clearChildNodes(this);
          originalInsertBefore.call(unsafeUnwrap(this), unwrap(childWrapper), refNode);
        } else {
          if (!previousNode) this.firstChild_ = nodes[0];
          if (!refWrapper) {
            this.lastChild_ = nodes[nodes.length - 1];
            if (this.firstChild_ === undefined) this.firstChild_ = this.firstChild;
          }
          var parentNode = refNode ? refNode.parentNode : unsafeUnwrap(this);
          if (parentNode) {
            originalInsertBefore.call(parentNode, unwrapNodesForInsertion(this, nodes), refNode);
          } else {
            adoptNodesIfNeeded(this, nodes);
          }
        }
        enqueueMutation(this, "childList", {
          addedNodes: nodes,
          nextSibling: refWrapper,
          previousSibling: previousNode
        });
        nodesWereAdded(nodes, this);
        return childWrapper;
      },
      removeChild: function(childWrapper) {
        assertIsNodeWrapper(childWrapper);
        if (childWrapper.parentNode !== this) {
          var found = false;
          var childNodes = this.childNodes;
          for (var ieChild = this.firstChild; ieChild; ieChild = ieChild.nextSibling) {
            if (ieChild === childWrapper) {
              found = true;
              break;
            }
          }
          if (!found) {
            throw new Error("NotFoundError");
          }
        }
        var childNode = unwrap(childWrapper);
        var childWrapperNextSibling = childWrapper.nextSibling;
        var childWrapperPreviousSibling = childWrapper.previousSibling;
        if (this.invalidateShadowRenderer()) {
          var thisFirstChild = this.firstChild;
          var thisLastChild = this.lastChild;
          var parentNode = childNode.parentNode;
          if (parentNode) removeChildOriginalHelper(parentNode, childNode);
          if (thisFirstChild === childWrapper) this.firstChild_ = childWrapperNextSibling;
          if (thisLastChild === childWrapper) this.lastChild_ = childWrapperPreviousSibling;
          if (childWrapperPreviousSibling) childWrapperPreviousSibling.nextSibling_ = childWrapperNextSibling;
          if (childWrapperNextSibling) {
            childWrapperNextSibling.previousSibling_ = childWrapperPreviousSibling;
          }
          childWrapper.previousSibling_ = childWrapper.nextSibling_ = childWrapper.parentNode_ = undefined;
        } else {
          clearChildNodes(this);
          removeChildOriginalHelper(unsafeUnwrap(this), childNode);
        }
        if (!surpressMutations) {
          enqueueMutation(this, "childList", {
            removedNodes: createOneElementNodeList(childWrapper),
            nextSibling: childWrapperNextSibling,
            previousSibling: childWrapperPreviousSibling
          });
        }
        registerTransientObservers(this, childWrapper);
        return childWrapper;
      },
      replaceChild: function(newChildWrapper, oldChildWrapper) {
        assertIsNodeWrapper(newChildWrapper);
        var oldChildNode;
        if (isWrapper(oldChildWrapper)) {
          oldChildNode = unwrap(oldChildWrapper);
        } else {
          oldChildNode = oldChildWrapper;
          oldChildWrapper = wrap(oldChildNode);
        }
        if (oldChildWrapper.parentNode !== this) {
          throw new Error("NotFoundError");
        }
        var nextNode = oldChildWrapper.nextSibling;
        var previousNode = oldChildWrapper.previousSibling;
        var nodes;
        var useNative = !this.invalidateShadowRenderer() && !invalidateParent(newChildWrapper);
        if (useNative) {
          nodes = collectNodesNative(newChildWrapper);
        } else {
          if (nextNode === newChildWrapper) nextNode = newChildWrapper.nextSibling;
          nodes = collectNodes(newChildWrapper, this, previousNode, nextNode);
        }
        if (!useNative) {
          if (this.firstChild === oldChildWrapper) this.firstChild_ = nodes[0];
          if (this.lastChild === oldChildWrapper) this.lastChild_ = nodes[nodes.length - 1];
          oldChildWrapper.previousSibling_ = oldChildWrapper.nextSibling_ = oldChildWrapper.parentNode_ = undefined;
          if (oldChildNode.parentNode) {
            originalReplaceChild.call(oldChildNode.parentNode, unwrapNodesForInsertion(this, nodes), oldChildNode);
          }
        } else {
          ensureSameOwnerDocument(this, newChildWrapper);
          clearChildNodes(this);
          originalReplaceChild.call(unsafeUnwrap(this), unwrap(newChildWrapper), oldChildNode);
        }
        enqueueMutation(this, "childList", {
          addedNodes: nodes,
          removedNodes: createOneElementNodeList(oldChildWrapper),
          nextSibling: nextNode,
          previousSibling: previousNode
        });
        nodeWasRemoved(oldChildWrapper);
        nodesWereAdded(nodes, this);
        return oldChildWrapper;
      },
      nodeIsInserted_: function() {
        for (var child = this.firstChild; child; child = child.nextSibling) {
          child.nodeIsInserted_();
        }
      },
      hasChildNodes: function() {
        return this.firstChild !== null;
      },
      get parentNode() {
        return this.parentNode_ !== undefined ? this.parentNode_ : wrap(unsafeUnwrap(this).parentNode);
      },
      get firstChild() {
        return this.firstChild_ !== undefined ? this.firstChild_ : wrap(unsafeUnwrap(this).firstChild);
      },
      get lastChild() {
        return this.lastChild_ !== undefined ? this.lastChild_ : wrap(unsafeUnwrap(this).lastChild);
      },
      get nextSibling() {
        return this.nextSibling_ !== undefined ? this.nextSibling_ : wrap(unsafeUnwrap(this).nextSibling);
      },
      get previousSibling() {
        return this.previousSibling_ !== undefined ? this.previousSibling_ : wrap(unsafeUnwrap(this).previousSibling);
      },
      get parentElement() {
        var p = this.parentNode;
        while (p && p.nodeType !== Node.ELEMENT_NODE) {
          p = p.parentNode;
        }
        return p;
      },
      get textContent() {
        var s = "";
        for (var child = this.firstChild; child; child = child.nextSibling) {
          if (child.nodeType != Node.COMMENT_NODE) {
            s += child.textContent;
          }
        }
        return s;
      },
      set textContent(textContent) {
        if (textContent == null) textContent = "";
        var removedNodes = snapshotNodeList(this.childNodes);
        if (this.invalidateShadowRenderer()) {
          removeAllChildNodes(this);
          if (textContent !== "") {
            var textNode = unsafeUnwrap(this).ownerDocument.createTextNode(textContent);
            this.appendChild(textNode);
          }
        } else {
          clearChildNodes(this);
          unsafeUnwrap(this).textContent = textContent;
        }
        var addedNodes = snapshotNodeList(this.childNodes);
        enqueueMutation(this, "childList", {
          addedNodes: addedNodes,
          removedNodes: removedNodes
        });
        nodesWereRemoved(removedNodes);
        nodesWereAdded(addedNodes, this);
      },
      get childNodes() {
        var wrapperList = new NodeList();
        var i = 0;
        for (var child = this.firstChild; child; child = child.nextSibling) {
          wrapperList[i++] = child;
        }
        wrapperList.length = i;
        return wrapperList;
      },
      cloneNode: function(deep) {
        return cloneNode(this, deep);
      },
      contains: function(child) {
        return contains(this, wrapIfNeeded(child));
      },
      compareDocumentPosition: function(otherNode) {
        return originalCompareDocumentPosition.call(unsafeUnwrap(this), unwrapIfNeeded(otherNode));
      },
      normalize: function() {
        var nodes = snapshotNodeList(this.childNodes);
        var remNodes = [];
        var s = "";
        var modNode;
        for (var i = 0, n; i < nodes.length; i++) {
          n = nodes[i];
          if (n.nodeType === Node.TEXT_NODE) {
            if (!modNode && !n.data.length) this.removeNode(n); else if (!modNode) modNode = n; else {
              s += n.data;
              remNodes.push(n);
            }
          } else {
            if (modNode && remNodes.length) {
              modNode.data += s;
              cleanupNodes(remNodes);
            }
            remNodes = [];
            s = "";
            modNode = null;
            if (n.childNodes.length) n.normalize();
          }
        }
        if (modNode && remNodes.length) {
          modNode.data += s;
          cleanupNodes(remNodes);
        }
      }
    });
    defineWrapGetter(Node, "ownerDocument");
    registerWrapper(OriginalNode, Node, document.createDocumentFragment());
    delete Node.prototype.querySelector;
    delete Node.prototype.querySelectorAll;
    Node.prototype = mixin(Object.create(EventTarget.prototype), Node.prototype);
    scope.cloneNode = cloneNode;
    scope.nodeWasAdded = nodeWasAdded;
    scope.nodeWasRemoved = nodeWasRemoved;
    scope.nodesWereAdded = nodesWereAdded;
    scope.nodesWereRemoved = nodesWereRemoved;
    scope.originalInsertBefore = originalInsertBefore;
    scope.originalRemoveChild = originalRemoveChild;
    scope.snapshotNodeList = snapshotNodeList;
    scope.wrappers.Node = Node;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLCollection = scope.wrappers.HTMLCollection;
    var NodeList = scope.wrappers.NodeList;
    var getTreeScope = scope.getTreeScope;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var wrap = scope.wrap;
    var originalDocumentQuerySelector = document.querySelector;
    var originalElementQuerySelector = document.documentElement.querySelector;
    var originalDocumentQuerySelectorAll = document.querySelectorAll;
    var originalElementQuerySelectorAll = document.documentElement.querySelectorAll;
    var originalDocumentGetElementsByTagName = document.getElementsByTagName;
    var originalElementGetElementsByTagName = document.documentElement.getElementsByTagName;
    var originalDocumentGetElementsByTagNameNS = document.getElementsByTagNameNS;
    var originalElementGetElementsByTagNameNS = document.documentElement.getElementsByTagNameNS;
    var OriginalElement = window.Element;
    var OriginalDocument = window.HTMLDocument || window.Document;
    function filterNodeList(list, index, result, deep) {
      var wrappedItem = null;
      var root = null;
      for (var i = 0, length = list.length; i < length; i++) {
        wrappedItem = wrap(list[i]);
        if (!deep && (root = getTreeScope(wrappedItem).root)) {
          if (root instanceof scope.wrappers.ShadowRoot) {
            continue;
          }
        }
        result[index++] = wrappedItem;
      }
      return index;
    }
    function shimSelector(selector) {
      return String(selector).replace(/\/deep\//g, " ");
    }
    function findOne(node, selector) {
      var m, el = node.firstElementChild;
      while (el) {
        if (el.matches(selector)) return el;
        m = findOne(el, selector);
        if (m) return m;
        el = el.nextElementSibling;
      }
      return null;
    }
    function matchesSelector(el, selector) {
      return el.matches(selector);
    }
    var XHTML_NS = "http://www.w3.org/1999/xhtml";
    function matchesTagName(el, localName, localNameLowerCase) {
      var ln = el.localName;
      return ln === localName || ln === localNameLowerCase && el.namespaceURI === XHTML_NS;
    }
    function matchesEveryThing() {
      return true;
    }
    function matchesLocalNameOnly(el, ns, localName) {
      return el.localName === localName;
    }
    function matchesNameSpace(el, ns) {
      return el.namespaceURI === ns;
    }
    function matchesLocalNameNS(el, ns, localName) {
      return el.namespaceURI === ns && el.localName === localName;
    }
    function findElements(node, index, result, p, arg0, arg1) {
      var el = node.firstElementChild;
      while (el) {
        if (p(el, arg0, arg1)) result[index++] = el;
        index = findElements(el, index, result, p, arg0, arg1);
        el = el.nextElementSibling;
      }
      return index;
    }
    function querySelectorAllFiltered(p, index, result, selector, deep) {
      var target = unsafeUnwrap(this);
      var list;
      var root = getTreeScope(this).root;
      if (root instanceof scope.wrappers.ShadowRoot) {
        return findElements(this, index, result, p, selector, null);
      } else if (target instanceof OriginalElement) {
        list = originalElementQuerySelectorAll.call(target, selector);
      } else if (target instanceof OriginalDocument) {
        list = originalDocumentQuerySelectorAll.call(target, selector);
      } else {
        return findElements(this, index, result, p, selector, null);
      }
      return filterNodeList(list, index, result, deep);
    }
    var SelectorsInterface = {
      querySelector: function(selector) {
        var shimmed = shimSelector(selector);
        var deep = shimmed !== selector;
        selector = shimmed;
        var target = unsafeUnwrap(this);
        var wrappedItem;
        var root = getTreeScope(this).root;
        if (root instanceof scope.wrappers.ShadowRoot) {
          return findOne(this, selector);
        } else if (target instanceof OriginalElement) {
          wrappedItem = wrap(originalElementQuerySelector.call(target, selector));
        } else if (target instanceof OriginalDocument) {
          wrappedItem = wrap(originalDocumentQuerySelector.call(target, selector));
        } else {
          return findOne(this, selector);
        }
        if (!wrappedItem) {
          return wrappedItem;
        } else if (!deep && (root = getTreeScope(wrappedItem).root)) {
          if (root instanceof scope.wrappers.ShadowRoot) {
            return findOne(this, selector);
          }
        }
        return wrappedItem;
      },
      querySelectorAll: function(selector) {
        var shimmed = shimSelector(selector);
        var deep = shimmed !== selector;
        selector = shimmed;
        var result = new NodeList();
        result.length = querySelectorAllFiltered.call(this, matchesSelector, 0, result, selector, deep);
        return result;
      }
    };
    function getElementsByTagNameFiltered(p, index, result, localName, lowercase) {
      var target = unsafeUnwrap(this);
      var list;
      var root = getTreeScope(this).root;
      if (root instanceof scope.wrappers.ShadowRoot) {
        return findElements(this, index, result, p, localName, lowercase);
      } else if (target instanceof OriginalElement) {
        list = originalElementGetElementsByTagName.call(target, localName, lowercase);
      } else if (target instanceof OriginalDocument) {
        list = originalDocumentGetElementsByTagName.call(target, localName, lowercase);
      } else {
        return findElements(this, index, result, p, localName, lowercase);
      }
      return filterNodeList(list, index, result, false);
    }
    function getElementsByTagNameNSFiltered(p, index, result, ns, localName) {
      var target = unsafeUnwrap(this);
      var list;
      var root = getTreeScope(this).root;
      if (root instanceof scope.wrappers.ShadowRoot) {
        return findElements(this, index, result, p, ns, localName);
      } else if (target instanceof OriginalElement) {
        list = originalElementGetElementsByTagNameNS.call(target, ns, localName);
      } else if (target instanceof OriginalDocument) {
        list = originalDocumentGetElementsByTagNameNS.call(target, ns, localName);
      } else {
        return findElements(this, index, result, p, ns, localName);
      }
      return filterNodeList(list, index, result, false);
    }
    var GetElementsByInterface = {
      getElementsByTagName: function(localName) {
        var result = new HTMLCollection();
        var match = localName === "*" ? matchesEveryThing : matchesTagName;
        result.length = getElementsByTagNameFiltered.call(this, match, 0, result, localName, localName.toLowerCase());
        return result;
      },
      getElementsByClassName: function(className) {
        return this.querySelectorAll("." + className);
      },
      getElementsByTagNameNS: function(ns, localName) {
        var result = new HTMLCollection();
        var match = null;
        if (ns === "*") {
          match = localName === "*" ? matchesEveryThing : matchesLocalNameOnly;
        } else {
          match = localName === "*" ? matchesNameSpace : matchesLocalNameNS;
        }
        result.length = getElementsByTagNameNSFiltered.call(this, match, 0, result, ns || null, localName);
        return result;
      }
    };
    scope.GetElementsByInterface = GetElementsByInterface;
    scope.SelectorsInterface = SelectorsInterface;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var NodeList = scope.wrappers.NodeList;
    function forwardElement(node) {
      while (node && node.nodeType !== Node.ELEMENT_NODE) {
        node = node.nextSibling;
      }
      return node;
    }
    function backwardsElement(node) {
      while (node && node.nodeType !== Node.ELEMENT_NODE) {
        node = node.previousSibling;
      }
      return node;
    }
    var ParentNodeInterface = {
      get firstElementChild() {
        return forwardElement(this.firstChild);
      },
      get lastElementChild() {
        return backwardsElement(this.lastChild);
      },
      get childElementCount() {
        var count = 0;
        for (var child = this.firstElementChild; child; child = child.nextElementSibling) {
          count++;
        }
        return count;
      },
      get children() {
        var wrapperList = new NodeList();
        var i = 0;
        for (var child = this.firstElementChild; child; child = child.nextElementSibling) {
          wrapperList[i++] = child;
        }
        wrapperList.length = i;
        return wrapperList;
      },
      remove: function() {
        var p = this.parentNode;
        if (p) p.removeChild(this);
      }
    };
    var ChildNodeInterface = {
      get nextElementSibling() {
        return forwardElement(this.nextSibling);
      },
      get previousElementSibling() {
        return backwardsElement(this.previousSibling);
      }
    };
    scope.ChildNodeInterface = ChildNodeInterface;
    scope.ParentNodeInterface = ParentNodeInterface;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var ChildNodeInterface = scope.ChildNodeInterface;
    var Node = scope.wrappers.Node;
    var enqueueMutation = scope.enqueueMutation;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var OriginalCharacterData = window.CharacterData;
    function CharacterData(node) {
      Node.call(this, node);
    }
    CharacterData.prototype = Object.create(Node.prototype);
    mixin(CharacterData.prototype, {
      get textContent() {
        return this.data;
      },
      set textContent(value) {
        this.data = value;
      },
      get data() {
        return unsafeUnwrap(this).data;
      },
      set data(value) {
        var oldValue = unsafeUnwrap(this).data;
        enqueueMutation(this, "characterData", {
          oldValue: oldValue
        });
        unsafeUnwrap(this).data = value;
      }
    });
    mixin(CharacterData.prototype, ChildNodeInterface);
    registerWrapper(OriginalCharacterData, CharacterData, document.createTextNode(""));
    scope.wrappers.CharacterData = CharacterData;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var CharacterData = scope.wrappers.CharacterData;
    var enqueueMutation = scope.enqueueMutation;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    function toUInt32(x) {
      return x >>> 0;
    }
    var OriginalText = window.Text;
    function Text(node) {
      CharacterData.call(this, node);
    }
    Text.prototype = Object.create(CharacterData.prototype);
    mixin(Text.prototype, {
      splitText: function(offset) {
        offset = toUInt32(offset);
        var s = this.data;
        if (offset > s.length) throw new Error("IndexSizeError");
        var head = s.slice(0, offset);
        var tail = s.slice(offset);
        this.data = head;
        var newTextNode = this.ownerDocument.createTextNode(tail);
        if (this.parentNode) this.parentNode.insertBefore(newTextNode, this.nextSibling);
        return newTextNode;
      }
    });
    registerWrapper(OriginalText, Text, document.createTextNode(""));
    scope.wrappers.Text = Text;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var setWrapper = scope.setWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    function invalidateClass(el) {
      scope.invalidateRendererBasedOnAttribute(el, "class");
    }
    function DOMTokenList(impl, ownerElement) {
      setWrapper(impl, this);
      this.ownerElement_ = ownerElement;
    }
    DOMTokenList.prototype = {
      constructor: DOMTokenList,
      get length() {
        return unsafeUnwrap(this).length;
      },
      item: function(index) {
        return unsafeUnwrap(this).item(index);
      },
      contains: function(token) {
        return unsafeUnwrap(this).contains(token);
      },
      add: function() {
        unsafeUnwrap(this).add.apply(unsafeUnwrap(this), arguments);
        invalidateClass(this.ownerElement_);
      },
      remove: function() {
        unsafeUnwrap(this).remove.apply(unsafeUnwrap(this), arguments);
        invalidateClass(this.ownerElement_);
      },
      toggle: function(token) {
        var rv = unsafeUnwrap(this).toggle.apply(unsafeUnwrap(this), arguments);
        invalidateClass(this.ownerElement_);
        return rv;
      },
      toString: function() {
        return unsafeUnwrap(this).toString();
      }
    };
    scope.wrappers.DOMTokenList = DOMTokenList;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var ChildNodeInterface = scope.ChildNodeInterface;
    var GetElementsByInterface = scope.GetElementsByInterface;
    var Node = scope.wrappers.Node;
    var DOMTokenList = scope.wrappers.DOMTokenList;
    var ParentNodeInterface = scope.ParentNodeInterface;
    var SelectorsInterface = scope.SelectorsInterface;
    var addWrapNodeListMethod = scope.addWrapNodeListMethod;
    var enqueueMutation = scope.enqueueMutation;
    var mixin = scope.mixin;
    var oneOf = scope.oneOf;
    var registerWrapper = scope.registerWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var wrappers = scope.wrappers;
    var OriginalElement = window.Element;
    var matchesNames = [ "matches", "mozMatchesSelector", "msMatchesSelector", "webkitMatchesSelector" ].filter(function(name) {
      return OriginalElement.prototype[name];
    });
    var matchesName = matchesNames[0];
    var originalMatches = OriginalElement.prototype[matchesName];
    function invalidateRendererBasedOnAttribute(element, name) {
      var p = element.parentNode;
      if (!p || !p.shadowRoot) return;
      var renderer = scope.getRendererForHost(p);
      if (renderer.dependsOnAttribute(name)) renderer.invalidate();
    }
    function enqueAttributeChange(element, name, oldValue) {
      enqueueMutation(element, "attributes", {
        name: name,
        namespace: null,
        oldValue: oldValue
      });
    }
    var classListTable = new WeakMap();
    function Element(node) {
      Node.call(this, node);
    }
    Element.prototype = Object.create(Node.prototype);
    mixin(Element.prototype, {
      createShadowRoot: function() {
        var newShadowRoot = new wrappers.ShadowRoot(this);
        unsafeUnwrap(this).polymerShadowRoot_ = newShadowRoot;
        var renderer = scope.getRendererForHost(this);
        renderer.invalidate();
        return newShadowRoot;
      },
      get shadowRoot() {
        return unsafeUnwrap(this).polymerShadowRoot_ || null;
      },
      setAttribute: function(name, value) {
        var oldValue = unsafeUnwrap(this).getAttribute(name);
        unsafeUnwrap(this).setAttribute(name, value);
        enqueAttributeChange(this, name, oldValue);
        invalidateRendererBasedOnAttribute(this, name);
      },
      removeAttribute: function(name) {
        var oldValue = unsafeUnwrap(this).getAttribute(name);
        unsafeUnwrap(this).removeAttribute(name);
        enqueAttributeChange(this, name, oldValue);
        invalidateRendererBasedOnAttribute(this, name);
      },
      matches: function(selector) {
        return originalMatches.call(unsafeUnwrap(this), selector);
      },
      get classList() {
        var list = classListTable.get(this);
        if (!list) {
          classListTable.set(this, list = new DOMTokenList(unsafeUnwrap(this).classList, this));
        }
        return list;
      },
      get className() {
        return unsafeUnwrap(this).className;
      },
      set className(v) {
        this.setAttribute("class", v);
      },
      get id() {
        return unsafeUnwrap(this).id;
      },
      set id(v) {
        this.setAttribute("id", v);
      }
    });
    matchesNames.forEach(function(name) {
      if (name !== "matches") {
        Element.prototype[name] = function(selector) {
          return this.matches(selector);
        };
      }
    });
    if (OriginalElement.prototype.webkitCreateShadowRoot) {
      Element.prototype.webkitCreateShadowRoot = Element.prototype.createShadowRoot;
    }
    mixin(Element.prototype, ChildNodeInterface);
    mixin(Element.prototype, GetElementsByInterface);
    mixin(Element.prototype, ParentNodeInterface);
    mixin(Element.prototype, SelectorsInterface);
    registerWrapper(OriginalElement, Element, document.createElementNS(null, "x"));
    scope.invalidateRendererBasedOnAttribute = invalidateRendererBasedOnAttribute;
    scope.matchesNames = matchesNames;
    scope.wrappers.Element = Element;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var Element = scope.wrappers.Element;
    var defineGetter = scope.defineGetter;
    var enqueueMutation = scope.enqueueMutation;
    var mixin = scope.mixin;
    var nodesWereAdded = scope.nodesWereAdded;
    var nodesWereRemoved = scope.nodesWereRemoved;
    var registerWrapper = scope.registerWrapper;
    var snapshotNodeList = scope.snapshotNodeList;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var unwrap = scope.unwrap;
    var wrap = scope.wrap;
    var wrappers = scope.wrappers;
    var escapeAttrRegExp = /[&\u00A0"]/g;
    var escapeDataRegExp = /[&\u00A0<>]/g;
    function escapeReplace(c) {
      switch (c) {
       case "&":
        return "&amp;";

       case "<":
        return "&lt;";

       case ">":
        return "&gt;";

       case '"':
        return "&quot;";

       case " ":
        return "&nbsp;";
      }
    }
    function escapeAttr(s) {
      return s.replace(escapeAttrRegExp, escapeReplace);
    }
    function escapeData(s) {
      return s.replace(escapeDataRegExp, escapeReplace);
    }
    function makeSet(arr) {
      var set = {};
      for (var i = 0; i < arr.length; i++) {
        set[arr[i]] = true;
      }
      return set;
    }
    var voidElements = makeSet([ "area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr" ]);
    var plaintextParents = makeSet([ "style", "script", "xmp", "iframe", "noembed", "noframes", "plaintext", "noscript" ]);
    function getOuterHTML(node, parentNode) {
      switch (node.nodeType) {
       case Node.ELEMENT_NODE:
        var tagName = node.tagName.toLowerCase();
        var s = "<" + tagName;
        var attrs = node.attributes;
        for (var i = 0, attr; attr = attrs[i]; i++) {
          s += " " + attr.name + '="' + escapeAttr(attr.value) + '"';
        }
        s += ">";
        if (voidElements[tagName]) return s;
        return s + getInnerHTML(node) + "</" + tagName + ">";

       case Node.TEXT_NODE:
        var data = node.data;
        if (parentNode && plaintextParents[parentNode.localName]) return data;
        return escapeData(data);

       case Node.COMMENT_NODE:
        return "<!--" + node.data + "-->";

       default:
        console.error(node);
        throw new Error("not implemented");
      }
    }
    function getInnerHTML(node) {
      if (node instanceof wrappers.HTMLTemplateElement) node = node.content;
      var s = "";
      for (var child = node.firstChild; child; child = child.nextSibling) {
        s += getOuterHTML(child, node);
      }
      return s;
    }
    function setInnerHTML(node, value, opt_tagName) {
      var tagName = opt_tagName || "div";
      node.textContent = "";
      var tempElement = unwrap(node.ownerDocument.createElement(tagName));
      tempElement.innerHTML = value;
      var firstChild;
      while (firstChild = tempElement.firstChild) {
        node.appendChild(wrap(firstChild));
      }
    }
    var oldIe = /MSIE/.test(navigator.userAgent);
    var OriginalHTMLElement = window.HTMLElement;
    var OriginalHTMLTemplateElement = window.HTMLTemplateElement;
    function HTMLElement(node) {
      Element.call(this, node);
    }
    HTMLElement.prototype = Object.create(Element.prototype);
    mixin(HTMLElement.prototype, {
      get innerHTML() {
        return getInnerHTML(this);
      },
      set innerHTML(value) {
        if (oldIe && plaintextParents[this.localName]) {
          this.textContent = value;
          return;
        }
        var removedNodes = snapshotNodeList(this.childNodes);
        if (this.invalidateShadowRenderer()) {
          if (this instanceof wrappers.HTMLTemplateElement) setInnerHTML(this.content, value); else setInnerHTML(this, value, this.tagName);
        } else if (!OriginalHTMLTemplateElement && this instanceof wrappers.HTMLTemplateElement) {
          setInnerHTML(this.content, value);
        } else {
          unsafeUnwrap(this).innerHTML = value;
        }
        var addedNodes = snapshotNodeList(this.childNodes);
        enqueueMutation(this, "childList", {
          addedNodes: addedNodes,
          removedNodes: removedNodes
        });
        nodesWereRemoved(removedNodes);
        nodesWereAdded(addedNodes, this);
      },
      get outerHTML() {
        return getOuterHTML(this, this.parentNode);
      },
      set outerHTML(value) {
        var p = this.parentNode;
        if (p) {
          p.invalidateShadowRenderer();
          var df = frag(p, value);
          p.replaceChild(df, this);
        }
      },
      insertAdjacentHTML: function(position, text) {
        var contextElement, refNode;
        switch (String(position).toLowerCase()) {
         case "beforebegin":
          contextElement = this.parentNode;
          refNode = this;
          break;

         case "afterend":
          contextElement = this.parentNode;
          refNode = this.nextSibling;
          break;

         case "afterbegin":
          contextElement = this;
          refNode = this.firstChild;
          break;

         case "beforeend":
          contextElement = this;
          refNode = null;
          break;

         default:
          return;
        }
        var df = frag(contextElement, text);
        contextElement.insertBefore(df, refNode);
      },
      get hidden() {
        return this.hasAttribute("hidden");
      },
      set hidden(v) {
        if (v) {
          this.setAttribute("hidden", "");
        } else {
          this.removeAttribute("hidden");
        }
      }
    });
    function frag(contextElement, html) {
      var p = unwrap(contextElement.cloneNode(false));
      p.innerHTML = html;
      var df = unwrap(document.createDocumentFragment());
      var c;
      while (c = p.firstChild) {
        df.appendChild(c);
      }
      return wrap(df);
    }
    function getter(name) {
      return function() {
        scope.renderAllPending();
        return unsafeUnwrap(this)[name];
      };
    }
    function getterRequiresRendering(name) {
      defineGetter(HTMLElement, name, getter(name));
    }
    [ "clientHeight", "clientLeft", "clientTop", "clientWidth", "offsetHeight", "offsetLeft", "offsetTop", "offsetWidth", "scrollHeight", "scrollWidth" ].forEach(getterRequiresRendering);
    function getterAndSetterRequiresRendering(name) {
      Object.defineProperty(HTMLElement.prototype, name, {
        get: getter(name),
        set: function(v) {
          scope.renderAllPending();
          unsafeUnwrap(this)[name] = v;
        },
        configurable: true,
        enumerable: true
      });
    }
    [ "scrollLeft", "scrollTop" ].forEach(getterAndSetterRequiresRendering);
    function methodRequiresRendering(name) {
      Object.defineProperty(HTMLElement.prototype, name, {
        value: function() {
          scope.renderAllPending();
          return unsafeUnwrap(this)[name].apply(unsafeUnwrap(this), arguments);
        },
        configurable: true,
        enumerable: true
      });
    }
    [ "getBoundingClientRect", "getClientRects", "scrollIntoView" ].forEach(methodRequiresRendering);
    registerWrapper(OriginalHTMLElement, HTMLElement, document.createElement("b"));
    scope.wrappers.HTMLElement = HTMLElement;
    scope.getInnerHTML = getInnerHTML;
    scope.setInnerHTML = setInnerHTML;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var wrap = scope.wrap;
    var OriginalHTMLCanvasElement = window.HTMLCanvasElement;
    function HTMLCanvasElement(node) {
      HTMLElement.call(this, node);
    }
    HTMLCanvasElement.prototype = Object.create(HTMLElement.prototype);
    mixin(HTMLCanvasElement.prototype, {
      getContext: function() {
        var context = unsafeUnwrap(this).getContext.apply(unsafeUnwrap(this), arguments);
        return context && wrap(context);
      }
    });
    registerWrapper(OriginalHTMLCanvasElement, HTMLCanvasElement, document.createElement("canvas"));
    scope.wrappers.HTMLCanvasElement = HTMLCanvasElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var OriginalHTMLContentElement = window.HTMLContentElement;
    function HTMLContentElement(node) {
      HTMLElement.call(this, node);
    }
    HTMLContentElement.prototype = Object.create(HTMLElement.prototype);
    mixin(HTMLContentElement.prototype, {
      constructor: HTMLContentElement,
      get select() {
        return this.getAttribute("select");
      },
      set select(value) {
        this.setAttribute("select", value);
      },
      setAttribute: function(n, v) {
        HTMLElement.prototype.setAttribute.call(this, n, v);
        if (String(n).toLowerCase() === "select") this.invalidateShadowRenderer(true);
      }
    });
    if (OriginalHTMLContentElement) registerWrapper(OriginalHTMLContentElement, HTMLContentElement);
    scope.wrappers.HTMLContentElement = HTMLContentElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var wrapHTMLCollection = scope.wrapHTMLCollection;
    var unwrap = scope.unwrap;
    var OriginalHTMLFormElement = window.HTMLFormElement;
    function HTMLFormElement(node) {
      HTMLElement.call(this, node);
    }
    HTMLFormElement.prototype = Object.create(HTMLElement.prototype);
    mixin(HTMLFormElement.prototype, {
      get elements() {
        return wrapHTMLCollection(unwrap(this).elements);
      }
    });
    registerWrapper(OriginalHTMLFormElement, HTMLFormElement, document.createElement("form"));
    scope.wrappers.HTMLFormElement = HTMLFormElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var registerWrapper = scope.registerWrapper;
    var unwrap = scope.unwrap;
    var rewrap = scope.rewrap;
    var OriginalHTMLImageElement = window.HTMLImageElement;
    function HTMLImageElement(node) {
      HTMLElement.call(this, node);
    }
    HTMLImageElement.prototype = Object.create(HTMLElement.prototype);
    registerWrapper(OriginalHTMLImageElement, HTMLImageElement, document.createElement("img"));
    function Image(width, height) {
      if (!(this instanceof Image)) {
        throw new TypeError("DOM object constructor cannot be called as a function.");
      }
      var node = unwrap(document.createElement("img"));
      HTMLElement.call(this, node);
      rewrap(node, this);
      if (width !== undefined) node.width = width;
      if (height !== undefined) node.height = height;
    }
    Image.prototype = HTMLImageElement.prototype;
    scope.wrappers.HTMLImageElement = HTMLImageElement;
    scope.wrappers.Image = Image;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var mixin = scope.mixin;
    var NodeList = scope.wrappers.NodeList;
    var registerWrapper = scope.registerWrapper;
    var OriginalHTMLShadowElement = window.HTMLShadowElement;
    function HTMLShadowElement(node) {
      HTMLElement.call(this, node);
    }
    HTMLShadowElement.prototype = Object.create(HTMLElement.prototype);
    HTMLShadowElement.prototype.constructor = HTMLShadowElement;
    if (OriginalHTMLShadowElement) registerWrapper(OriginalHTMLShadowElement, HTMLShadowElement);
    scope.wrappers.HTMLShadowElement = HTMLShadowElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var unwrap = scope.unwrap;
    var wrap = scope.wrap;
    var contentTable = new WeakMap();
    var templateContentsOwnerTable = new WeakMap();
    function getTemplateContentsOwner(doc) {
      if (!doc.defaultView) return doc;
      var d = templateContentsOwnerTable.get(doc);
      if (!d) {
        d = doc.implementation.createHTMLDocument("");
        while (d.lastChild) {
          d.removeChild(d.lastChild);
        }
        templateContentsOwnerTable.set(doc, d);
      }
      return d;
    }
    function extractContent(templateElement) {
      var doc = getTemplateContentsOwner(templateElement.ownerDocument);
      var df = unwrap(doc.createDocumentFragment());
      var child;
      while (child = templateElement.firstChild) {
        df.appendChild(child);
      }
      return df;
    }
    var OriginalHTMLTemplateElement = window.HTMLTemplateElement;
    function HTMLTemplateElement(node) {
      HTMLElement.call(this, node);
      if (!OriginalHTMLTemplateElement) {
        var content = extractContent(node);
        contentTable.set(this, wrap(content));
      }
    }
    HTMLTemplateElement.prototype = Object.create(HTMLElement.prototype);
    mixin(HTMLTemplateElement.prototype, {
      constructor: HTMLTemplateElement,
      get content() {
        if (OriginalHTMLTemplateElement) return wrap(unsafeUnwrap(this).content);
        return contentTable.get(this);
      }
    });
    if (OriginalHTMLTemplateElement) registerWrapper(OriginalHTMLTemplateElement, HTMLTemplateElement);
    scope.wrappers.HTMLTemplateElement = HTMLTemplateElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var registerWrapper = scope.registerWrapper;
    var OriginalHTMLMediaElement = window.HTMLMediaElement;
    if (!OriginalHTMLMediaElement) return;
    function HTMLMediaElement(node) {
      HTMLElement.call(this, node);
    }
    HTMLMediaElement.prototype = Object.create(HTMLElement.prototype);
    registerWrapper(OriginalHTMLMediaElement, HTMLMediaElement, document.createElement("audio"));
    scope.wrappers.HTMLMediaElement = HTMLMediaElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLMediaElement = scope.wrappers.HTMLMediaElement;
    var registerWrapper = scope.registerWrapper;
    var unwrap = scope.unwrap;
    var rewrap = scope.rewrap;
    var OriginalHTMLAudioElement = window.HTMLAudioElement;
    if (!OriginalHTMLAudioElement) return;
    function HTMLAudioElement(node) {
      HTMLMediaElement.call(this, node);
    }
    HTMLAudioElement.prototype = Object.create(HTMLMediaElement.prototype);
    registerWrapper(OriginalHTMLAudioElement, HTMLAudioElement, document.createElement("audio"));
    function Audio(src) {
      if (!(this instanceof Audio)) {
        throw new TypeError("DOM object constructor cannot be called as a function.");
      }
      var node = unwrap(document.createElement("audio"));
      HTMLMediaElement.call(this, node);
      rewrap(node, this);
      node.setAttribute("preload", "auto");
      if (src !== undefined) node.setAttribute("src", src);
    }
    Audio.prototype = HTMLAudioElement.prototype;
    scope.wrappers.HTMLAudioElement = HTMLAudioElement;
    scope.wrappers.Audio = Audio;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var rewrap = scope.rewrap;
    var unwrap = scope.unwrap;
    var wrap = scope.wrap;
    var OriginalHTMLOptionElement = window.HTMLOptionElement;
    function trimText(s) {
      return s.replace(/\s+/g, " ").trim();
    }
    function HTMLOptionElement(node) {
      HTMLElement.call(this, node);
    }
    HTMLOptionElement.prototype = Object.create(HTMLElement.prototype);
    mixin(HTMLOptionElement.prototype, {
      get text() {
        return trimText(this.textContent);
      },
      set text(value) {
        this.textContent = trimText(String(value));
      },
      get form() {
        return wrap(unwrap(this).form);
      }
    });
    registerWrapper(OriginalHTMLOptionElement, HTMLOptionElement, document.createElement("option"));
    function Option(text, value, defaultSelected, selected) {
      if (!(this instanceof Option)) {
        throw new TypeError("DOM object constructor cannot be called as a function.");
      }
      var node = unwrap(document.createElement("option"));
      HTMLElement.call(this, node);
      rewrap(node, this);
      if (text !== undefined) node.text = text;
      if (value !== undefined) node.setAttribute("value", value);
      if (defaultSelected === true) node.setAttribute("selected", "");
      node.selected = selected === true;
    }
    Option.prototype = HTMLOptionElement.prototype;
    scope.wrappers.HTMLOptionElement = HTMLOptionElement;
    scope.wrappers.Option = Option;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var unwrap = scope.unwrap;
    var wrap = scope.wrap;
    var OriginalHTMLSelectElement = window.HTMLSelectElement;
    function HTMLSelectElement(node) {
      HTMLElement.call(this, node);
    }
    HTMLSelectElement.prototype = Object.create(HTMLElement.prototype);
    mixin(HTMLSelectElement.prototype, {
      add: function(element, before) {
        if (typeof before === "object") before = unwrap(before);
        unwrap(this).add(unwrap(element), before);
      },
      remove: function(indexOrNode) {
        if (indexOrNode === undefined) {
          HTMLElement.prototype.remove.call(this);
          return;
        }
        if (typeof indexOrNode === "object") indexOrNode = unwrap(indexOrNode);
        unwrap(this).remove(indexOrNode);
      },
      get form() {
        return wrap(unwrap(this).form);
      }
    });
    registerWrapper(OriginalHTMLSelectElement, HTMLSelectElement, document.createElement("select"));
    scope.wrappers.HTMLSelectElement = HTMLSelectElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var unwrap = scope.unwrap;
    var wrap = scope.wrap;
    var wrapHTMLCollection = scope.wrapHTMLCollection;
    var OriginalHTMLTableElement = window.HTMLTableElement;
    function HTMLTableElement(node) {
      HTMLElement.call(this, node);
    }
    HTMLTableElement.prototype = Object.create(HTMLElement.prototype);
    mixin(HTMLTableElement.prototype, {
      get caption() {
        return wrap(unwrap(this).caption);
      },
      createCaption: function() {
        return wrap(unwrap(this).createCaption());
      },
      get tHead() {
        return wrap(unwrap(this).tHead);
      },
      createTHead: function() {
        return wrap(unwrap(this).createTHead());
      },
      createTFoot: function() {
        return wrap(unwrap(this).createTFoot());
      },
      get tFoot() {
        return wrap(unwrap(this).tFoot);
      },
      get tBodies() {
        return wrapHTMLCollection(unwrap(this).tBodies);
      },
      createTBody: function() {
        return wrap(unwrap(this).createTBody());
      },
      get rows() {
        return wrapHTMLCollection(unwrap(this).rows);
      },
      insertRow: function(index) {
        return wrap(unwrap(this).insertRow(index));
      }
    });
    registerWrapper(OriginalHTMLTableElement, HTMLTableElement, document.createElement("table"));
    scope.wrappers.HTMLTableElement = HTMLTableElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var wrapHTMLCollection = scope.wrapHTMLCollection;
    var unwrap = scope.unwrap;
    var wrap = scope.wrap;
    var OriginalHTMLTableSectionElement = window.HTMLTableSectionElement;
    function HTMLTableSectionElement(node) {
      HTMLElement.call(this, node);
    }
    HTMLTableSectionElement.prototype = Object.create(HTMLElement.prototype);
    mixin(HTMLTableSectionElement.prototype, {
      constructor: HTMLTableSectionElement,
      get rows() {
        return wrapHTMLCollection(unwrap(this).rows);
      },
      insertRow: function(index) {
        return wrap(unwrap(this).insertRow(index));
      }
    });
    registerWrapper(OriginalHTMLTableSectionElement, HTMLTableSectionElement, document.createElement("thead"));
    scope.wrappers.HTMLTableSectionElement = HTMLTableSectionElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var wrapHTMLCollection = scope.wrapHTMLCollection;
    var unwrap = scope.unwrap;
    var wrap = scope.wrap;
    var OriginalHTMLTableRowElement = window.HTMLTableRowElement;
    function HTMLTableRowElement(node) {
      HTMLElement.call(this, node);
    }
    HTMLTableRowElement.prototype = Object.create(HTMLElement.prototype);
    mixin(HTMLTableRowElement.prototype, {
      get cells() {
        return wrapHTMLCollection(unwrap(this).cells);
      },
      insertCell: function(index) {
        return wrap(unwrap(this).insertCell(index));
      }
    });
    registerWrapper(OriginalHTMLTableRowElement, HTMLTableRowElement, document.createElement("tr"));
    scope.wrappers.HTMLTableRowElement = HTMLTableRowElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLContentElement = scope.wrappers.HTMLContentElement;
    var HTMLElement = scope.wrappers.HTMLElement;
    var HTMLShadowElement = scope.wrappers.HTMLShadowElement;
    var HTMLTemplateElement = scope.wrappers.HTMLTemplateElement;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var OriginalHTMLUnknownElement = window.HTMLUnknownElement;
    function HTMLUnknownElement(node) {
      switch (node.localName) {
       case "content":
        return new HTMLContentElement(node);

       case "shadow":
        return new HTMLShadowElement(node);

       case "template":
        return new HTMLTemplateElement(node);
      }
      HTMLElement.call(this, node);
    }
    HTMLUnknownElement.prototype = Object.create(HTMLElement.prototype);
    registerWrapper(OriginalHTMLUnknownElement, HTMLUnknownElement);
    scope.wrappers.HTMLUnknownElement = HTMLUnknownElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var Element = scope.wrappers.Element;
    var HTMLElement = scope.wrappers.HTMLElement;
    var registerObject = scope.registerObject;
    var SVG_NS = "http://www.w3.org/2000/svg";
    var svgTitleElement = document.createElementNS(SVG_NS, "title");
    var SVGTitleElement = registerObject(svgTitleElement);
    var SVGElement = Object.getPrototypeOf(SVGTitleElement.prototype).constructor;
    if (!("classList" in svgTitleElement)) {
      var descr = Object.getOwnPropertyDescriptor(Element.prototype, "classList");
      Object.defineProperty(HTMLElement.prototype, "classList", descr);
      delete Element.prototype.classList;
    }
    scope.wrappers.SVGElement = SVGElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var unwrap = scope.unwrap;
    var wrap = scope.wrap;
    var OriginalSVGUseElement = window.SVGUseElement;
    var SVG_NS = "http://www.w3.org/2000/svg";
    var gWrapper = wrap(document.createElementNS(SVG_NS, "g"));
    var useElement = document.createElementNS(SVG_NS, "use");
    var SVGGElement = gWrapper.constructor;
    var parentInterfacePrototype = Object.getPrototypeOf(SVGGElement.prototype);
    var parentInterface = parentInterfacePrototype.constructor;
    function SVGUseElement(impl) {
      parentInterface.call(this, impl);
    }
    SVGUseElement.prototype = Object.create(parentInterfacePrototype);
    if ("instanceRoot" in useElement) {
      mixin(SVGUseElement.prototype, {
        get instanceRoot() {
          return wrap(unwrap(this).instanceRoot);
        },
        get animatedInstanceRoot() {
          return wrap(unwrap(this).animatedInstanceRoot);
        }
      });
    }
    registerWrapper(OriginalSVGUseElement, SVGUseElement, useElement);
    scope.wrappers.SVGUseElement = SVGUseElement;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var EventTarget = scope.wrappers.EventTarget;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var wrap = scope.wrap;
    var OriginalSVGElementInstance = window.SVGElementInstance;
    if (!OriginalSVGElementInstance) return;
    function SVGElementInstance(impl) {
      EventTarget.call(this, impl);
    }
    SVGElementInstance.prototype = Object.create(EventTarget.prototype);
    mixin(SVGElementInstance.prototype, {
      get correspondingElement() {
        return wrap(unsafeUnwrap(this).correspondingElement);
      },
      get correspondingUseElement() {
        return wrap(unsafeUnwrap(this).correspondingUseElement);
      },
      get parentNode() {
        return wrap(unsafeUnwrap(this).parentNode);
      },
      get childNodes() {
        throw new Error("Not implemented");
      },
      get firstChild() {
        return wrap(unsafeUnwrap(this).firstChild);
      },
      get lastChild() {
        return wrap(unsafeUnwrap(this).lastChild);
      },
      get previousSibling() {
        return wrap(unsafeUnwrap(this).previousSibling);
      },
      get nextSibling() {
        return wrap(unsafeUnwrap(this).nextSibling);
      }
    });
    registerWrapper(OriginalSVGElementInstance, SVGElementInstance);
    scope.wrappers.SVGElementInstance = SVGElementInstance;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var setWrapper = scope.setWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var unwrap = scope.unwrap;
    var unwrapIfNeeded = scope.unwrapIfNeeded;
    var wrap = scope.wrap;
    var OriginalCanvasRenderingContext2D = window.CanvasRenderingContext2D;
    function CanvasRenderingContext2D(impl) {
      setWrapper(impl, this);
    }
    mixin(CanvasRenderingContext2D.prototype, {
      get canvas() {
        return wrap(unsafeUnwrap(this).canvas);
      },
      drawImage: function() {
        arguments[0] = unwrapIfNeeded(arguments[0]);
        unsafeUnwrap(this).drawImage.apply(unsafeUnwrap(this), arguments);
      },
      createPattern: function() {
        arguments[0] = unwrap(arguments[0]);
        return unsafeUnwrap(this).createPattern.apply(unsafeUnwrap(this), arguments);
      }
    });
    registerWrapper(OriginalCanvasRenderingContext2D, CanvasRenderingContext2D, document.createElement("canvas").getContext("2d"));
    scope.wrappers.CanvasRenderingContext2D = CanvasRenderingContext2D;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var setWrapper = scope.setWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var unwrapIfNeeded = scope.unwrapIfNeeded;
    var wrap = scope.wrap;
    var OriginalWebGLRenderingContext = window.WebGLRenderingContext;
    if (!OriginalWebGLRenderingContext) return;
    function WebGLRenderingContext(impl) {
      setWrapper(impl, this);
    }
    mixin(WebGLRenderingContext.prototype, {
      get canvas() {
        return wrap(unsafeUnwrap(this).canvas);
      },
      texImage2D: function() {
        arguments[5] = unwrapIfNeeded(arguments[5]);
        unsafeUnwrap(this).texImage2D.apply(unsafeUnwrap(this), arguments);
      },
      texSubImage2D: function() {
        arguments[6] = unwrapIfNeeded(arguments[6]);
        unsafeUnwrap(this).texSubImage2D.apply(unsafeUnwrap(this), arguments);
      }
    });
    var instanceProperties = /WebKit/.test(navigator.userAgent) ? {
      drawingBufferHeight: null,
      drawingBufferWidth: null
    } : {};
    registerWrapper(OriginalWebGLRenderingContext, WebGLRenderingContext, instanceProperties);
    scope.wrappers.WebGLRenderingContext = WebGLRenderingContext;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var registerWrapper = scope.registerWrapper;
    var setWrapper = scope.setWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var unwrap = scope.unwrap;
    var unwrapIfNeeded = scope.unwrapIfNeeded;
    var wrap = scope.wrap;
    var OriginalRange = window.Range;
    function Range(impl) {
      setWrapper(impl, this);
    }
    Range.prototype = {
      get startContainer() {
        return wrap(unsafeUnwrap(this).startContainer);
      },
      get endContainer() {
        return wrap(unsafeUnwrap(this).endContainer);
      },
      get commonAncestorContainer() {
        return wrap(unsafeUnwrap(this).commonAncestorContainer);
      },
      setStart: function(refNode, offset) {
        unsafeUnwrap(this).setStart(unwrapIfNeeded(refNode), offset);
      },
      setEnd: function(refNode, offset) {
        unsafeUnwrap(this).setEnd(unwrapIfNeeded(refNode), offset);
      },
      setStartBefore: function(refNode) {
        unsafeUnwrap(this).setStartBefore(unwrapIfNeeded(refNode));
      },
      setStartAfter: function(refNode) {
        unsafeUnwrap(this).setStartAfter(unwrapIfNeeded(refNode));
      },
      setEndBefore: function(refNode) {
        unsafeUnwrap(this).setEndBefore(unwrapIfNeeded(refNode));
      },
      setEndAfter: function(refNode) {
        unsafeUnwrap(this).setEndAfter(unwrapIfNeeded(refNode));
      },
      selectNode: function(refNode) {
        unsafeUnwrap(this).selectNode(unwrapIfNeeded(refNode));
      },
      selectNodeContents: function(refNode) {
        unsafeUnwrap(this).selectNodeContents(unwrapIfNeeded(refNode));
      },
      compareBoundaryPoints: function(how, sourceRange) {
        return unsafeUnwrap(this).compareBoundaryPoints(how, unwrap(sourceRange));
      },
      extractContents: function() {
        return wrap(unsafeUnwrap(this).extractContents());
      },
      cloneContents: function() {
        return wrap(unsafeUnwrap(this).cloneContents());
      },
      insertNode: function(node) {
        unsafeUnwrap(this).insertNode(unwrapIfNeeded(node));
      },
      surroundContents: function(newParent) {
        unsafeUnwrap(this).surroundContents(unwrapIfNeeded(newParent));
      },
      cloneRange: function() {
        return wrap(unsafeUnwrap(this).cloneRange());
      },
      isPointInRange: function(node, offset) {
        return unsafeUnwrap(this).isPointInRange(unwrapIfNeeded(node), offset);
      },
      comparePoint: function(node, offset) {
        return unsafeUnwrap(this).comparePoint(unwrapIfNeeded(node), offset);
      },
      intersectsNode: function(node) {
        return unsafeUnwrap(this).intersectsNode(unwrapIfNeeded(node));
      },
      toString: function() {
        return unsafeUnwrap(this).toString();
      }
    };
    if (OriginalRange.prototype.createContextualFragment) {
      Range.prototype.createContextualFragment = function(html) {
        return wrap(unsafeUnwrap(this).createContextualFragment(html));
      };
    }
    registerWrapper(window.Range, Range, document.createRange());
    scope.wrappers.Range = Range;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var GetElementsByInterface = scope.GetElementsByInterface;
    var ParentNodeInterface = scope.ParentNodeInterface;
    var SelectorsInterface = scope.SelectorsInterface;
    var mixin = scope.mixin;
    var registerObject = scope.registerObject;
    var DocumentFragment = registerObject(document.createDocumentFragment());
    mixin(DocumentFragment.prototype, ParentNodeInterface);
    mixin(DocumentFragment.prototype, SelectorsInterface);
    mixin(DocumentFragment.prototype, GetElementsByInterface);
    var Comment = registerObject(document.createComment(""));
    scope.wrappers.Comment = Comment;
    scope.wrappers.DocumentFragment = DocumentFragment;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var DocumentFragment = scope.wrappers.DocumentFragment;
    var TreeScope = scope.TreeScope;
    var elementFromPoint = scope.elementFromPoint;
    var getInnerHTML = scope.getInnerHTML;
    var getTreeScope = scope.getTreeScope;
    var mixin = scope.mixin;
    var rewrap = scope.rewrap;
    var setInnerHTML = scope.setInnerHTML;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var unwrap = scope.unwrap;
    var shadowHostTable = new WeakMap();
    var nextOlderShadowTreeTable = new WeakMap();
    var spaceCharRe = /[ \t\n\r\f]/;
    function ShadowRoot(hostWrapper) {
      var node = unwrap(unsafeUnwrap(hostWrapper).ownerDocument.createDocumentFragment());
      DocumentFragment.call(this, node);
      rewrap(node, this);
      var oldShadowRoot = hostWrapper.shadowRoot;
      nextOlderShadowTreeTable.set(this, oldShadowRoot);
      this.treeScope_ = new TreeScope(this, getTreeScope(oldShadowRoot || hostWrapper));
      shadowHostTable.set(this, hostWrapper);
    }
    ShadowRoot.prototype = Object.create(DocumentFragment.prototype);
    mixin(ShadowRoot.prototype, {
      constructor: ShadowRoot,
      get innerHTML() {
        return getInnerHTML(this);
      },
      set innerHTML(value) {
        setInnerHTML(this, value);
        this.invalidateShadowRenderer();
      },
      get olderShadowRoot() {
        return nextOlderShadowTreeTable.get(this) || null;
      },
      get host() {
        return shadowHostTable.get(this) || null;
      },
      invalidateShadowRenderer: function() {
        return shadowHostTable.get(this).invalidateShadowRenderer();
      },
      elementFromPoint: function(x, y) {
        return elementFromPoint(this, this.ownerDocument, x, y);
      },
      getElementById: function(id) {
        if (spaceCharRe.test(id)) return null;
        return this.querySelector('[id="' + id + '"]');
      }
    });
    scope.wrappers.ShadowRoot = ShadowRoot;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var Element = scope.wrappers.Element;
    var HTMLContentElement = scope.wrappers.HTMLContentElement;
    var HTMLShadowElement = scope.wrappers.HTMLShadowElement;
    var Node = scope.wrappers.Node;
    var ShadowRoot = scope.wrappers.ShadowRoot;
    var assert = scope.assert;
    var getTreeScope = scope.getTreeScope;
    var mixin = scope.mixin;
    var oneOf = scope.oneOf;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var unwrap = scope.unwrap;
    var wrap = scope.wrap;
    var ArraySplice = scope.ArraySplice;
    function updateWrapperUpAndSideways(wrapper) {
      wrapper.previousSibling_ = wrapper.previousSibling;
      wrapper.nextSibling_ = wrapper.nextSibling;
      wrapper.parentNode_ = wrapper.parentNode;
    }
    function updateWrapperDown(wrapper) {
      wrapper.firstChild_ = wrapper.firstChild;
      wrapper.lastChild_ = wrapper.lastChild;
    }
    function updateAllChildNodes(parentNodeWrapper) {
      assert(parentNodeWrapper instanceof Node);
      for (var childWrapper = parentNodeWrapper.firstChild; childWrapper; childWrapper = childWrapper.nextSibling) {
        updateWrapperUpAndSideways(childWrapper);
      }
      updateWrapperDown(parentNodeWrapper);
    }
    function insertBefore(parentNodeWrapper, newChildWrapper, refChildWrapper) {
      var parentNode = unwrap(parentNodeWrapper);
      var newChild = unwrap(newChildWrapper);
      var refChild = refChildWrapper ? unwrap(refChildWrapper) : null;
      remove(newChildWrapper);
      updateWrapperUpAndSideways(newChildWrapper);
      if (!refChildWrapper) {
        parentNodeWrapper.lastChild_ = parentNodeWrapper.lastChild;
        if (parentNodeWrapper.lastChild === parentNodeWrapper.firstChild) parentNodeWrapper.firstChild_ = parentNodeWrapper.firstChild;
        var lastChildWrapper = wrap(parentNode.lastChild);
        if (lastChildWrapper) lastChildWrapper.nextSibling_ = lastChildWrapper.nextSibling;
      } else {
        if (parentNodeWrapper.firstChild === refChildWrapper) parentNodeWrapper.firstChild_ = refChildWrapper;
        refChildWrapper.previousSibling_ = refChildWrapper.previousSibling;
      }
      scope.originalInsertBefore.call(parentNode, newChild, refChild);
    }
    function remove(nodeWrapper) {
      var node = unwrap(nodeWrapper);
      var parentNode = node.parentNode;
      if (!parentNode) return;
      var parentNodeWrapper = wrap(parentNode);
      updateWrapperUpAndSideways(nodeWrapper);
      if (nodeWrapper.previousSibling) nodeWrapper.previousSibling.nextSibling_ = nodeWrapper;
      if (nodeWrapper.nextSibling) nodeWrapper.nextSibling.previousSibling_ = nodeWrapper;
      if (parentNodeWrapper.lastChild === nodeWrapper) parentNodeWrapper.lastChild_ = nodeWrapper;
      if (parentNodeWrapper.firstChild === nodeWrapper) parentNodeWrapper.firstChild_ = nodeWrapper;
      scope.originalRemoveChild.call(parentNode, node);
    }
    var distributedNodesTable = new WeakMap();
    var destinationInsertionPointsTable = new WeakMap();
    var rendererForHostTable = new WeakMap();
    function resetDistributedNodes(insertionPoint) {
      distributedNodesTable.set(insertionPoint, []);
    }
    function getDistributedNodes(insertionPoint) {
      var rv = distributedNodesTable.get(insertionPoint);
      if (!rv) distributedNodesTable.set(insertionPoint, rv = []);
      return rv;
    }
    function getChildNodesSnapshot(node) {
      var result = [], i = 0;
      for (var child = node.firstChild; child; child = child.nextSibling) {
        result[i++] = child;
      }
      return result;
    }
    var request = oneOf(window, [ "requestAnimationFrame", "mozRequestAnimationFrame", "webkitRequestAnimationFrame", "setTimeout" ]);
    var pendingDirtyRenderers = [];
    var renderTimer;
    function renderAllPending() {
      for (var i = 0; i < pendingDirtyRenderers.length; i++) {
        var renderer = pendingDirtyRenderers[i];
        var parentRenderer = renderer.parentRenderer;
        if (parentRenderer && parentRenderer.dirty) continue;
        renderer.render();
      }
      pendingDirtyRenderers = [];
    }
    function handleRequestAnimationFrame() {
      renderTimer = null;
      renderAllPending();
    }
    function getRendererForHost(host) {
      var renderer = rendererForHostTable.get(host);
      if (!renderer) {
        renderer = new ShadowRenderer(host);
        rendererForHostTable.set(host, renderer);
      }
      return renderer;
    }
    function getShadowRootAncestor(node) {
      var root = getTreeScope(node).root;
      if (root instanceof ShadowRoot) return root;
      return null;
    }
    function getRendererForShadowRoot(shadowRoot) {
      return getRendererForHost(shadowRoot.host);
    }
    var spliceDiff = new ArraySplice();
    spliceDiff.equals = function(renderNode, rawNode) {
      return unwrap(renderNode.node) === rawNode;
    };
    function RenderNode(node) {
      this.skip = false;
      this.node = node;
      this.childNodes = [];
    }
    RenderNode.prototype = {
      append: function(node) {
        var rv = new RenderNode(node);
        this.childNodes.push(rv);
        return rv;
      },
      sync: function(opt_added) {
        if (this.skip) return;
        var nodeWrapper = this.node;
        var newChildren = this.childNodes;
        var oldChildren = getChildNodesSnapshot(unwrap(nodeWrapper));
        var added = opt_added || new WeakMap();
        var splices = spliceDiff.calculateSplices(newChildren, oldChildren);
        var newIndex = 0, oldIndex = 0;
        var lastIndex = 0;
        for (var i = 0; i < splices.length; i++) {
          var splice = splices[i];
          for (;lastIndex < splice.index; lastIndex++) {
            oldIndex++;
            newChildren[newIndex++].sync(added);
          }
          var removedCount = splice.removed.length;
          for (var j = 0; j < removedCount; j++) {
            var wrapper = wrap(oldChildren[oldIndex++]);
            if (!added.get(wrapper)) remove(wrapper);
          }
          var addedCount = splice.addedCount;
          var refNode = oldChildren[oldIndex] && wrap(oldChildren[oldIndex]);
          for (var j = 0; j < addedCount; j++) {
            var newChildRenderNode = newChildren[newIndex++];
            var newChildWrapper = newChildRenderNode.node;
            insertBefore(nodeWrapper, newChildWrapper, refNode);
            added.set(newChildWrapper, true);
            newChildRenderNode.sync(added);
          }
          lastIndex += addedCount;
        }
        for (var i = lastIndex; i < newChildren.length; i++) {
          newChildren[i].sync(added);
        }
      }
    };
    function ShadowRenderer(host) {
      this.host = host;
      this.dirty = false;
      this.invalidateAttributes();
      this.associateNode(host);
    }
    ShadowRenderer.prototype = {
      render: function(opt_renderNode) {
        if (!this.dirty) return;
        this.invalidateAttributes();
        var host = this.host;
        this.distribution(host);
        var renderNode = opt_renderNode || new RenderNode(host);
        this.buildRenderTree(renderNode, host);
        var topMostRenderer = !opt_renderNode;
        if (topMostRenderer) renderNode.sync();
        this.dirty = false;
      },
      get parentRenderer() {
        return getTreeScope(this.host).renderer;
      },
      invalidate: function() {
        if (!this.dirty) {
          this.dirty = true;
          var parentRenderer = this.parentRenderer;
          if (parentRenderer) parentRenderer.invalidate();
          pendingDirtyRenderers.push(this);
          if (renderTimer) return;
          renderTimer = window[request](handleRequestAnimationFrame, 0);
        }
      },
      distribution: function(root) {
        this.resetAllSubtrees(root);
        this.distributionResolution(root);
      },
      resetAll: function(node) {
        if (isInsertionPoint(node)) resetDistributedNodes(node); else resetDestinationInsertionPoints(node);
        this.resetAllSubtrees(node);
      },
      resetAllSubtrees: function(node) {
        for (var child = node.firstChild; child; child = child.nextSibling) {
          this.resetAll(child);
        }
        if (node.shadowRoot) this.resetAll(node.shadowRoot);
        if (node.olderShadowRoot) this.resetAll(node.olderShadowRoot);
      },
      distributionResolution: function(node) {
        if (isShadowHost(node)) {
          var shadowHost = node;
          var pool = poolPopulation(shadowHost);
          var shadowTrees = getShadowTrees(shadowHost);
          for (var i = 0; i < shadowTrees.length; i++) {
            this.poolDistribution(shadowTrees[i], pool);
          }
          for (var i = shadowTrees.length - 1; i >= 0; i--) {
            var shadowTree = shadowTrees[i];
            var shadow = getShadowInsertionPoint(shadowTree);
            if (shadow) {
              var olderShadowRoot = shadowTree.olderShadowRoot;
              if (olderShadowRoot) {
                pool = poolPopulation(olderShadowRoot);
              }
              for (var j = 0; j < pool.length; j++) {
                destributeNodeInto(pool[j], shadow);
              }
            }
            this.distributionResolution(shadowTree);
          }
        }
        for (var child = node.firstChild; child; child = child.nextSibling) {
          this.distributionResolution(child);
        }
      },
      poolDistribution: function(node, pool) {
        if (node instanceof HTMLShadowElement) return;
        if (node instanceof HTMLContentElement) {
          var content = node;
          this.updateDependentAttributes(content.getAttribute("select"));
          var anyDistributed = false;
          for (var i = 0; i < pool.length; i++) {
            var node = pool[i];
            if (!node) continue;
            if (matches(node, content)) {
              destributeNodeInto(node, content);
              pool[i] = undefined;
              anyDistributed = true;
            }
          }
          if (!anyDistributed) {
            for (var child = content.firstChild; child; child = child.nextSibling) {
              destributeNodeInto(child, content);
            }
          }
          return;
        }
        for (var child = node.firstChild; child; child = child.nextSibling) {
          this.poolDistribution(child, pool);
        }
      },
      buildRenderTree: function(renderNode, node) {
        var children = this.compose(node);
        for (var i = 0; i < children.length; i++) {
          var child = children[i];
          var childRenderNode = renderNode.append(child);
          this.buildRenderTree(childRenderNode, child);
        }
        if (isShadowHost(node)) {
          var renderer = getRendererForHost(node);
          renderer.dirty = false;
        }
      },
      compose: function(node) {
        var children = [];
        var p = node.shadowRoot || node;
        for (var child = p.firstChild; child; child = child.nextSibling) {
          if (isInsertionPoint(child)) {
            this.associateNode(p);
            var distributedNodes = getDistributedNodes(child);
            for (var j = 0; j < distributedNodes.length; j++) {
              var distributedNode = distributedNodes[j];
              if (isFinalDestination(child, distributedNode)) children.push(distributedNode);
            }
          } else {
            children.push(child);
          }
        }
        return children;
      },
      invalidateAttributes: function() {
        this.attributes = Object.create(null);
      },
      updateDependentAttributes: function(selector) {
        if (!selector) return;
        var attributes = this.attributes;
        if (/\.\w+/.test(selector)) attributes["class"] = true;
        if (/#\w+/.test(selector)) attributes["id"] = true;
        selector.replace(/\[\s*([^\s=\|~\]]+)/g, function(_, name) {
          attributes[name] = true;
        });
      },
      dependsOnAttribute: function(name) {
        return this.attributes[name];
      },
      associateNode: function(node) {
        unsafeUnwrap(node).polymerShadowRenderer_ = this;
      }
    };
    function poolPopulation(node) {
      var pool = [];
      for (var child = node.firstChild; child; child = child.nextSibling) {
        if (isInsertionPoint(child)) {
          pool.push.apply(pool, getDistributedNodes(child));
        } else {
          pool.push(child);
        }
      }
      return pool;
    }
    function getShadowInsertionPoint(node) {
      if (node instanceof HTMLShadowElement) return node;
      if (node instanceof HTMLContentElement) return null;
      for (var child = node.firstChild; child; child = child.nextSibling) {
        var res = getShadowInsertionPoint(child);
        if (res) return res;
      }
      return null;
    }
    function destributeNodeInto(child, insertionPoint) {
      getDistributedNodes(insertionPoint).push(child);
      var points = destinationInsertionPointsTable.get(child);
      if (!points) destinationInsertionPointsTable.set(child, [ insertionPoint ]); else points.push(insertionPoint);
    }
    function getDestinationInsertionPoints(node) {
      return destinationInsertionPointsTable.get(node);
    }
    function resetDestinationInsertionPoints(node) {
      destinationInsertionPointsTable.set(node, undefined);
    }
    var selectorStartCharRe = /^(:not\()?[*.#[a-zA-Z_|]/;
    function matches(node, contentElement) {
      var select = contentElement.getAttribute("select");
      if (!select) return true;
      select = select.trim();
      if (!select) return true;
      if (!(node instanceof Element)) return false;
      if (!selectorStartCharRe.test(select)) return false;
      try {
        return node.matches(select);
      } catch (ex) {
        return false;
      }
    }
    function isFinalDestination(insertionPoint, node) {
      var points = getDestinationInsertionPoints(node);
      return points && points[points.length - 1] === insertionPoint;
    }
    function isInsertionPoint(node) {
      return node instanceof HTMLContentElement || node instanceof HTMLShadowElement;
    }
    function isShadowHost(shadowHost) {
      return shadowHost.shadowRoot;
    }
    function getShadowTrees(host) {
      var trees = [];
      for (var tree = host.shadowRoot; tree; tree = tree.olderShadowRoot) {
        trees.push(tree);
      }
      return trees;
    }
    function render(host) {
      new ShadowRenderer(host).render();
    }
    Node.prototype.invalidateShadowRenderer = function(force) {
      var renderer = unsafeUnwrap(this).polymerShadowRenderer_;
      if (renderer) {
        renderer.invalidate();
        return true;
      }
      return false;
    };
    HTMLContentElement.prototype.getDistributedNodes = HTMLShadowElement.prototype.getDistributedNodes = function() {
      renderAllPending();
      return getDistributedNodes(this);
    };
    Element.prototype.getDestinationInsertionPoints = function() {
      renderAllPending();
      return getDestinationInsertionPoints(this) || [];
    };
    HTMLContentElement.prototype.nodeIsInserted_ = HTMLShadowElement.prototype.nodeIsInserted_ = function() {
      this.invalidateShadowRenderer();
      var shadowRoot = getShadowRootAncestor(this);
      var renderer;
      if (shadowRoot) renderer = getRendererForShadowRoot(shadowRoot);
      unsafeUnwrap(this).polymerShadowRenderer_ = renderer;
      if (renderer) renderer.invalidate();
    };
    scope.getRendererForHost = getRendererForHost;
    scope.getShadowTrees = getShadowTrees;
    scope.renderAllPending = renderAllPending;
    scope.getDestinationInsertionPoints = getDestinationInsertionPoints;
    scope.visual = {
      insertBefore: insertBefore,
      remove: remove
    };
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var HTMLElement = scope.wrappers.HTMLElement;
    var assert = scope.assert;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var unwrap = scope.unwrap;
    var wrap = scope.wrap;
    var elementsWithFormProperty = [ "HTMLButtonElement", "HTMLFieldSetElement", "HTMLInputElement", "HTMLKeygenElement", "HTMLLabelElement", "HTMLLegendElement", "HTMLObjectElement", "HTMLOutputElement", "HTMLTextAreaElement" ];
    function createWrapperConstructor(name) {
      if (!window[name]) return;
      assert(!scope.wrappers[name]);
      var GeneratedWrapper = function(node) {
        HTMLElement.call(this, node);
      };
      GeneratedWrapper.prototype = Object.create(HTMLElement.prototype);
      mixin(GeneratedWrapper.prototype, {
        get form() {
          return wrap(unwrap(this).form);
        }
      });
      registerWrapper(window[name], GeneratedWrapper, document.createElement(name.slice(4, -7)));
      scope.wrappers[name] = GeneratedWrapper;
    }
    elementsWithFormProperty.forEach(createWrapperConstructor);
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var registerWrapper = scope.registerWrapper;
    var setWrapper = scope.setWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var unwrap = scope.unwrap;
    var unwrapIfNeeded = scope.unwrapIfNeeded;
    var wrap = scope.wrap;
    var OriginalSelection = window.Selection;
    function Selection(impl) {
      setWrapper(impl, this);
    }
    Selection.prototype = {
      get anchorNode() {
        return wrap(unsafeUnwrap(this).anchorNode);
      },
      get focusNode() {
        return wrap(unsafeUnwrap(this).focusNode);
      },
      addRange: function(range) {
        unsafeUnwrap(this).addRange(unwrap(range));
      },
      collapse: function(node, index) {
        unsafeUnwrap(this).collapse(unwrapIfNeeded(node), index);
      },
      containsNode: function(node, allowPartial) {
        return unsafeUnwrap(this).containsNode(unwrapIfNeeded(node), allowPartial);
      },
      extend: function(node, offset) {
        unsafeUnwrap(this).extend(unwrapIfNeeded(node), offset);
      },
      getRangeAt: function(index) {
        return wrap(unsafeUnwrap(this).getRangeAt(index));
      },
      removeRange: function(range) {
        unsafeUnwrap(this).removeRange(unwrap(range));
      },
      selectAllChildren: function(node) {
        unsafeUnwrap(this).selectAllChildren(unwrapIfNeeded(node));
      },
      toString: function() {
        return unsafeUnwrap(this).toString();
      }
    };
    registerWrapper(window.Selection, Selection, window.getSelection());
    scope.wrappers.Selection = Selection;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var GetElementsByInterface = scope.GetElementsByInterface;
    var Node = scope.wrappers.Node;
    var ParentNodeInterface = scope.ParentNodeInterface;
    var Selection = scope.wrappers.Selection;
    var SelectorsInterface = scope.SelectorsInterface;
    var ShadowRoot = scope.wrappers.ShadowRoot;
    var TreeScope = scope.TreeScope;
    var cloneNode = scope.cloneNode;
    var defineWrapGetter = scope.defineWrapGetter;
    var elementFromPoint = scope.elementFromPoint;
    var forwardMethodsToWrapper = scope.forwardMethodsToWrapper;
    var matchesNames = scope.matchesNames;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var renderAllPending = scope.renderAllPending;
    var rewrap = scope.rewrap;
    var setWrapper = scope.setWrapper;
    var unsafeUnwrap = scope.unsafeUnwrap;
    var unwrap = scope.unwrap;
    var wrap = scope.wrap;
    var wrapEventTargetMethods = scope.wrapEventTargetMethods;
    var wrapNodeList = scope.wrapNodeList;
    var implementationTable = new WeakMap();
    function Document(node) {
      Node.call(this, node);
      this.treeScope_ = new TreeScope(this, null);
    }
    Document.prototype = Object.create(Node.prototype);
    defineWrapGetter(Document, "documentElement");
    defineWrapGetter(Document, "body");
    defineWrapGetter(Document, "head");
    function wrapMethod(name) {
      var original = document[name];
      Document.prototype[name] = function() {
        return wrap(original.apply(unsafeUnwrap(this), arguments));
      };
    }
    [ "createComment", "createDocumentFragment", "createElement", "createElementNS", "createEvent", "createEventNS", "createRange", "createTextNode", "getElementById" ].forEach(wrapMethod);
    var originalAdoptNode = document.adoptNode;
    function adoptNodeNoRemove(node, doc) {
      originalAdoptNode.call(unsafeUnwrap(doc), unwrap(node));
      adoptSubtree(node, doc);
    }
    function adoptSubtree(node, doc) {
      if (node.shadowRoot) doc.adoptNode(node.shadowRoot);
      if (node instanceof ShadowRoot) adoptOlderShadowRoots(node, doc);
      for (var child = node.firstChild; child; child = child.nextSibling) {
        adoptSubtree(child, doc);
      }
    }
    function adoptOlderShadowRoots(shadowRoot, doc) {
      var oldShadowRoot = shadowRoot.olderShadowRoot;
      if (oldShadowRoot) doc.adoptNode(oldShadowRoot);
    }
    var originalGetSelection = document.getSelection;
    mixin(Document.prototype, {
      adoptNode: function(node) {
        if (node.parentNode) node.parentNode.removeChild(node);
        adoptNodeNoRemove(node, this);
        return node;
      },
      elementFromPoint: function(x, y) {
        return elementFromPoint(this, this, x, y);
      },
      importNode: function(node, deep) {
        return cloneNode(node, deep, unsafeUnwrap(this));
      },
      getSelection: function() {
        renderAllPending();
        return new Selection(originalGetSelection.call(unwrap(this)));
      },
      getElementsByName: function(name) {
        return SelectorsInterface.querySelectorAll.call(this, "[name=" + JSON.stringify(String(name)) + "]");
      }
    });
    if (document.registerElement) {
      var originalRegisterElement = document.registerElement;
      Document.prototype.registerElement = function(tagName, object) {
        var prototype, extendsOption;
        if (object !== undefined) {
          prototype = object.prototype;
          extendsOption = object.extends;
        }
        if (!prototype) prototype = Object.create(HTMLElement.prototype);
        if (scope.nativePrototypeTable.get(prototype)) {
          throw new Error("NotSupportedError");
        }
        var proto = Object.getPrototypeOf(prototype);
        var nativePrototype;
        var prototypes = [];
        while (proto) {
          nativePrototype = scope.nativePrototypeTable.get(proto);
          if (nativePrototype) break;
          prototypes.push(proto);
          proto = Object.getPrototypeOf(proto);
        }
        if (!nativePrototype) {
          throw new Error("NotSupportedError");
        }
        var newPrototype = Object.create(nativePrototype);
        for (var i = prototypes.length - 1; i >= 0; i--) {
          newPrototype = Object.create(newPrototype);
        }
        [ "createdCallback", "attachedCallback", "detachedCallback", "attributeChangedCallback" ].forEach(function(name) {
          var f = prototype[name];
          if (!f) return;
          newPrototype[name] = function() {
            if (!(wrap(this) instanceof CustomElementConstructor)) {
              rewrap(this);
            }
            f.apply(wrap(this), arguments);
          };
        });
        var p = {
          prototype: newPrototype
        };
        if (extendsOption) p.extends = extendsOption;
        function CustomElementConstructor(node) {
          if (!node) {
            if (extendsOption) {
              return document.createElement(extendsOption, tagName);
            } else {
              return document.createElement(tagName);
            }
          }
          setWrapper(node, this);
        }
        CustomElementConstructor.prototype = prototype;
        CustomElementConstructor.prototype.constructor = CustomElementConstructor;
        scope.constructorTable.set(newPrototype, CustomElementConstructor);
        scope.nativePrototypeTable.set(prototype, newPrototype);
        var nativeConstructor = originalRegisterElement.call(unwrap(this), tagName, p);
        return CustomElementConstructor;
      };
      forwardMethodsToWrapper([ window.HTMLDocument || window.Document ], [ "registerElement" ]);
    }
    forwardMethodsToWrapper([ window.HTMLBodyElement, window.HTMLDocument || window.Document, window.HTMLHeadElement, window.HTMLHtmlElement ], [ "appendChild", "compareDocumentPosition", "contains", "getElementsByClassName", "getElementsByTagName", "getElementsByTagNameNS", "insertBefore", "querySelector", "querySelectorAll", "removeChild", "replaceChild" ].concat(matchesNames));
    forwardMethodsToWrapper([ window.HTMLDocument || window.Document ], [ "adoptNode", "importNode", "contains", "createComment", "createDocumentFragment", "createElement", "createElementNS", "createEvent", "createEventNS", "createRange", "createTextNode", "elementFromPoint", "getElementById", "getElementsByName", "getSelection" ]);
    mixin(Document.prototype, GetElementsByInterface);
    mixin(Document.prototype, ParentNodeInterface);
    mixin(Document.prototype, SelectorsInterface);
    mixin(Document.prototype, {
      get implementation() {
        var implementation = implementationTable.get(this);
        if (implementation) return implementation;
        implementation = new DOMImplementation(unwrap(this).implementation);
        implementationTable.set(this, implementation);
        return implementation;
      },
      get defaultView() {
        return wrap(unwrap(this).defaultView);
      }
    });
    registerWrapper(window.Document, Document, document.implementation.createHTMLDocument(""));
    if (window.HTMLDocument) registerWrapper(window.HTMLDocument, Document);
    wrapEventTargetMethods([ window.HTMLBodyElement, window.HTMLDocument || window.Document, window.HTMLHeadElement ]);
    function DOMImplementation(impl) {
      setWrapper(impl, this);
    }
    function wrapImplMethod(constructor, name) {
      var original = document.implementation[name];
      constructor.prototype[name] = function() {
        return wrap(original.apply(unsafeUnwrap(this), arguments));
      };
    }
    function forwardImplMethod(constructor, name) {
      var original = document.implementation[name];
      constructor.prototype[name] = function() {
        return original.apply(unsafeUnwrap(this), arguments);
      };
    }
    wrapImplMethod(DOMImplementation, "createDocumentType");
    wrapImplMethod(DOMImplementation, "createDocument");
    wrapImplMethod(DOMImplementation, "createHTMLDocument");
    forwardImplMethod(DOMImplementation, "hasFeature");
    registerWrapper(window.DOMImplementation, DOMImplementation);
    forwardMethodsToWrapper([ window.DOMImplementation ], [ "createDocumentType", "createDocument", "createHTMLDocument", "hasFeature" ]);
    scope.adoptNodeNoRemove = adoptNodeNoRemove;
    scope.wrappers.DOMImplementation = DOMImplementation;
    scope.wrappers.Document = Document;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var EventTarget = scope.wrappers.EventTarget;
    var Selection = scope.wrappers.Selection;
    var mixin = scope.mixin;
    var registerWrapper = scope.registerWrapper;
    var renderAllPending = scope.renderAllPending;
    var unwrap = scope.unwrap;
    var unwrapIfNeeded = scope.unwrapIfNeeded;
    var wrap = scope.wrap;
    var OriginalWindow = window.Window;
    var originalGetComputedStyle = window.getComputedStyle;
    var originalGetDefaultComputedStyle = window.getDefaultComputedStyle;
    var originalGetSelection = window.getSelection;
    function Window(impl) {
      EventTarget.call(this, impl);
    }
    Window.prototype = Object.create(EventTarget.prototype);
    OriginalWindow.prototype.getComputedStyle = function(el, pseudo) {
      return wrap(this || window).getComputedStyle(unwrapIfNeeded(el), pseudo);
    };
    if (originalGetDefaultComputedStyle) {
      OriginalWindow.prototype.getDefaultComputedStyle = function(el, pseudo) {
        return wrap(this || window).getDefaultComputedStyle(unwrapIfNeeded(el), pseudo);
      };
    }
    OriginalWindow.prototype.getSelection = function() {
      return wrap(this || window).getSelection();
    };
    delete window.getComputedStyle;
    delete window.getDefaultComputedStyle;
    delete window.getSelection;
    [ "addEventListener", "removeEventListener", "dispatchEvent" ].forEach(function(name) {
      OriginalWindow.prototype[name] = function() {
        var w = wrap(this || window);
        return w[name].apply(w, arguments);
      };
      delete window[name];
    });
    mixin(Window.prototype, {
      getComputedStyle: function(el, pseudo) {
        renderAllPending();
        return originalGetComputedStyle.call(unwrap(this), unwrapIfNeeded(el), pseudo);
      },
      getSelection: function() {
        renderAllPending();
        return new Selection(originalGetSelection.call(unwrap(this)));
      },
      get document() {
        return wrap(unwrap(this).document);
      }
    });
    if (originalGetDefaultComputedStyle) {
      Window.prototype.getDefaultComputedStyle = function(el, pseudo) {
        renderAllPending();
        return originalGetDefaultComputedStyle.call(unwrap(this), unwrapIfNeeded(el), pseudo);
      };
    }
    registerWrapper(OriginalWindow, Window, window);
    scope.wrappers.Window = Window;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var unwrap = scope.unwrap;
    var OriginalDataTransfer = window.DataTransfer || window.Clipboard;
    var OriginalDataTransferSetDragImage = OriginalDataTransfer.prototype.setDragImage;
    if (OriginalDataTransferSetDragImage) {
      OriginalDataTransfer.prototype.setDragImage = function(image, x, y) {
        OriginalDataTransferSetDragImage.call(this, unwrap(image), x, y);
      };
    }
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var registerWrapper = scope.registerWrapper;
    var setWrapper = scope.setWrapper;
    var unwrap = scope.unwrap;
    var OriginalFormData = window.FormData;
    if (!OriginalFormData) return;
    function FormData(formElement) {
      var impl;
      if (formElement instanceof OriginalFormData) {
        impl = formElement;
      } else {
        impl = new OriginalFormData(formElement && unwrap(formElement));
      }
      setWrapper(impl, this);
    }
    registerWrapper(OriginalFormData, FormData, new OriginalFormData());
    scope.wrappers.FormData = FormData;
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var unwrapIfNeeded = scope.unwrapIfNeeded;
    var originalSend = XMLHttpRequest.prototype.send;
    XMLHttpRequest.prototype.send = function(obj) {
      return originalSend.call(this, unwrapIfNeeded(obj));
    };
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    "use strict";
    var isWrapperFor = scope.isWrapperFor;
    var elements = {
      a: "HTMLAnchorElement",
      area: "HTMLAreaElement",
      audio: "HTMLAudioElement",
      base: "HTMLBaseElement",
      body: "HTMLBodyElement",
      br: "HTMLBRElement",
      button: "HTMLButtonElement",
      canvas: "HTMLCanvasElement",
      caption: "HTMLTableCaptionElement",
      col: "HTMLTableColElement",
      content: "HTMLContentElement",
      data: "HTMLDataElement",
      datalist: "HTMLDataListElement",
      del: "HTMLModElement",
      dir: "HTMLDirectoryElement",
      div: "HTMLDivElement",
      dl: "HTMLDListElement",
      embed: "HTMLEmbedElement",
      fieldset: "HTMLFieldSetElement",
      font: "HTMLFontElement",
      form: "HTMLFormElement",
      frame: "HTMLFrameElement",
      frameset: "HTMLFrameSetElement",
      h1: "HTMLHeadingElement",
      head: "HTMLHeadElement",
      hr: "HTMLHRElement",
      html: "HTMLHtmlElement",
      iframe: "HTMLIFrameElement",
      img: "HTMLImageElement",
      input: "HTMLInputElement",
      keygen: "HTMLKeygenElement",
      label: "HTMLLabelElement",
      legend: "HTMLLegendElement",
      li: "HTMLLIElement",
      link: "HTMLLinkElement",
      map: "HTMLMapElement",
      marquee: "HTMLMarqueeElement",
      menu: "HTMLMenuElement",
      menuitem: "HTMLMenuItemElement",
      meta: "HTMLMetaElement",
      meter: "HTMLMeterElement",
      object: "HTMLObjectElement",
      ol: "HTMLOListElement",
      optgroup: "HTMLOptGroupElement",
      option: "HTMLOptionElement",
      output: "HTMLOutputElement",
      p: "HTMLParagraphElement",
      param: "HTMLParamElement",
      pre: "HTMLPreElement",
      progress: "HTMLProgressElement",
      q: "HTMLQuoteElement",
      script: "HTMLScriptElement",
      select: "HTMLSelectElement",
      shadow: "HTMLShadowElement",
      source: "HTMLSourceElement",
      span: "HTMLSpanElement",
      style: "HTMLStyleElement",
      table: "HTMLTableElement",
      tbody: "HTMLTableSectionElement",
      template: "HTMLTemplateElement",
      textarea: "HTMLTextAreaElement",
      thead: "HTMLTableSectionElement",
      time: "HTMLTimeElement",
      title: "HTMLTitleElement",
      tr: "HTMLTableRowElement",
      track: "HTMLTrackElement",
      ul: "HTMLUListElement",
      video: "HTMLVideoElement"
    };
    function overrideConstructor(tagName) {
      var nativeConstructorName = elements[tagName];
      var nativeConstructor = window[nativeConstructorName];
      if (!nativeConstructor) return;
      var element = document.createElement(tagName);
      var wrapperConstructor = element.constructor;
      window[nativeConstructorName] = wrapperConstructor;
    }
    Object.keys(elements).forEach(overrideConstructor);
    Object.getOwnPropertyNames(scope.wrappers).forEach(function(name) {
      window[name] = scope.wrappers[name];
    });
  })(window.ShadowDOMPolyfill);
  (function(scope) {
    var ShadowCSS = {
      strictStyling: false,
      registry: {},
      shimStyling: function(root, name, extendsName) {
        var scopeStyles = this.prepareRoot(root, name, extendsName);
        var typeExtension = this.isTypeExtension(extendsName);
        var scopeSelector = this.makeScopeSelector(name, typeExtension);
        var cssText = stylesToCssText(scopeStyles, true);
        cssText = this.scopeCssText(cssText, scopeSelector);
        if (root) {
          root.shimmedStyle = cssText;
        }
        this.addCssToDocument(cssText, name);
      },
      shimStyle: function(style, selector) {
        return this.shimCssText(style.textContent, selector);
      },
      shimCssText: function(cssText, selector) {
        cssText = this.insertDirectives(cssText);
        return this.scopeCssText(cssText, selector);
      },
      makeScopeSelector: function(name, typeExtension) {
        if (name) {
          return typeExtension ? "[is=" + name + "]" : name;
        }
        return "";
      },
      isTypeExtension: function(extendsName) {
        return extendsName && extendsName.indexOf("-") < 0;
      },
      prepareRoot: function(root, name, extendsName) {
        var def = this.registerRoot(root, name, extendsName);
        this.replaceTextInStyles(def.rootStyles, this.insertDirectives);
        this.removeStyles(root, def.rootStyles);
        if (this.strictStyling) {
          this.applyScopeToContent(root, name);
        }
        return def.scopeStyles;
      },
      removeStyles: function(root, styles) {
        for (var i = 0, l = styles.length, s; i < l && (s = styles[i]); i++) {
          s.parentNode.removeChild(s);
        }
      },
      registerRoot: function(root, name, extendsName) {
        var def = this.registry[name] = {
          root: root,
          name: name,
          extendsName: extendsName
        };
        var styles = this.findStyles(root);
        def.rootStyles = styles;
        def.scopeStyles = def.rootStyles;
        var extendee = this.registry[def.extendsName];
        if (extendee) {
          def.scopeStyles = extendee.scopeStyles.concat(def.scopeStyles);
        }
        return def;
      },
      findStyles: function(root) {
        if (!root) {
          return [];
        }
        var styles = root.querySelectorAll("style");
        return Array.prototype.filter.call(styles, function(s) {
          return !s.hasAttribute(NO_SHIM_ATTRIBUTE);
        });
      },
      applyScopeToContent: function(root, name) {
        if (root) {
          Array.prototype.forEach.call(root.querySelectorAll("*"), function(node) {
            node.setAttribute(name, "");
          });
          Array.prototype.forEach.call(root.querySelectorAll("template"), function(template) {
            this.applyScopeToContent(template.content, name);
          }, this);
        }
      },
      insertDirectives: function(cssText) {
        cssText = this.insertPolyfillDirectivesInCssText(cssText);
        return this.insertPolyfillRulesInCssText(cssText);
      },
      insertPolyfillDirectivesInCssText: function(cssText) {
        cssText = cssText.replace(cssCommentNextSelectorRe, function(match, p1) {
          return p1.slice(0, -2) + "{";
        });
        return cssText.replace(cssContentNextSelectorRe, function(match, p1) {
          return p1 + " {";
        });
      },
      insertPolyfillRulesInCssText: function(cssText) {
        cssText = cssText.replace(cssCommentRuleRe, function(match, p1) {
          return p1.slice(0, -1);
        });
        return cssText.replace(cssContentRuleRe, function(match, p1, p2, p3) {
          var rule = match.replace(p1, "").replace(p2, "");
          return p3 + rule;
        });
      },
      scopeCssText: function(cssText, scopeSelector) {
        var unscoped = this.extractUnscopedRulesFromCssText(cssText);
        cssText = this.insertPolyfillHostInCssText(cssText);
        cssText = this.convertColonHost(cssText);
        cssText = this.convertColonHostContext(cssText);
        cssText = this.convertShadowDOMSelectors(cssText);
        if (scopeSelector) {
          var self = this, cssText;
          withCssRules(cssText, function(rules) {
            cssText = self.scopeRules(rules, scopeSelector);
          });
        }
        cssText = cssText + "\n" + unscoped;
        return cssText.trim();
      },
      extractUnscopedRulesFromCssText: function(cssText) {
        var r = "", m;
        while (m = cssCommentUnscopedRuleRe.exec(cssText)) {
          r += m[1].slice(0, -1) + "\n\n";
        }
        while (m = cssContentUnscopedRuleRe.exec(cssText)) {
          r += m[0].replace(m[2], "").replace(m[1], m[3]) + "\n\n";
        }
        return r;
      },
      convertColonHost: function(cssText) {
        return this.convertColonRule(cssText, cssColonHostRe, this.colonHostPartReplacer);
      },
      convertColonHostContext: function(cssText) {
        return this.convertColonRule(cssText, cssColonHostContextRe, this.colonHostContextPartReplacer);
      },
      convertColonRule: function(cssText, regExp, partReplacer) {
        return cssText.replace(regExp, function(m, p1, p2, p3) {
          p1 = polyfillHostNoCombinator;
          if (p2) {
            var parts = p2.split(","), r = [];
            for (var i = 0, l = parts.length, p; i < l && (p = parts[i]); i++) {
              p = p.trim();
              r.push(partReplacer(p1, p, p3));
            }
            return r.join(",");
          } else {
            return p1 + p3;
          }
        });
      },
      colonHostContextPartReplacer: function(host, part, suffix) {
        if (part.match(polyfillHost)) {
          return this.colonHostPartReplacer(host, part, suffix);
        } else {
          return host + part + suffix + ", " + part + " " + host + suffix;
        }
      },
      colonHostPartReplacer: function(host, part, suffix) {
        return host + part.replace(polyfillHost, "") + suffix;
      },
      convertShadowDOMSelectors: function(cssText) {
        for (var i = 0; i < shadowDOMSelectorsRe.length; i++) {
          cssText = cssText.replace(shadowDOMSelectorsRe[i], " ");
        }
        return cssText;
      },
      scopeRules: function(cssRules, scopeSelector) {
        var cssText = "";
        if (cssRules) {
          Array.prototype.forEach.call(cssRules, function(rule) {
            if (rule.selectorText && (rule.style && rule.style.cssText !== undefined)) {
              cssText += this.scopeSelector(rule.selectorText, scopeSelector, this.strictStyling) + " {\n	";
              cssText += this.propertiesFromRule(rule) + "\n}\n\n";
            } else if (rule.type === CSSRule.MEDIA_RULE) {
              cssText += "@media " + rule.media.mediaText + " {\n";
              cssText += this.scopeRules(rule.cssRules, scopeSelector);
              cssText += "\n}\n\n";
            } else {
              try {
                if (rule.cssText) {
                  cssText += rule.cssText + "\n\n";
                }
              } catch (x) {
                if (rule.type === CSSRule.KEYFRAMES_RULE && rule.cssRules) {
                  cssText += this.ieSafeCssTextFromKeyFrameRule(rule);
                }
              }
            }
          }, this);
        }
        return cssText;
      },
      ieSafeCssTextFromKeyFrameRule: function(rule) {
        var cssText = "@keyframes " + rule.name + " {";
        Array.prototype.forEach.call(rule.cssRules, function(rule) {
          cssText += " " + rule.keyText + " {" + rule.style.cssText + "}";
        });
        cssText += " }";
        return cssText;
      },
      scopeSelector: function(selector, scopeSelector, strict) {
        var r = [], parts = selector.split(",");
        parts.forEach(function(p) {
          p = p.trim();
          if (this.selectorNeedsScoping(p, scopeSelector)) {
            p = strict && !p.match(polyfillHostNoCombinator) ? this.applyStrictSelectorScope(p, scopeSelector) : this.applySelectorScope(p, scopeSelector);
          }
          r.push(p);
        }, this);
        return r.join(", ");
      },
      selectorNeedsScoping: function(selector, scopeSelector) {
        if (Array.isArray(scopeSelector)) {
          return true;
        }
        var re = this.makeScopeMatcher(scopeSelector);
        return !selector.match(re);
      },
      makeScopeMatcher: function(scopeSelector) {
        scopeSelector = scopeSelector.replace(/\[/g, "\\[").replace(/\[/g, "\\]");
        return new RegExp("^(" + scopeSelector + ")" + selectorReSuffix, "m");
      },
      applySelectorScope: function(selector, selectorScope) {
        return Array.isArray(selectorScope) ? this.applySelectorScopeList(selector, selectorScope) : this.applySimpleSelectorScope(selector, selectorScope);
      },
      applySelectorScopeList: function(selector, scopeSelectorList) {
        var r = [];
        for (var i = 0, s; s = scopeSelectorList[i]; i++) {
          r.push(this.applySimpleSelectorScope(selector, s));
        }
        return r.join(", ");
      },
      applySimpleSelectorScope: function(selector, scopeSelector) {
        if (selector.match(polyfillHostRe)) {
          selector = selector.replace(polyfillHostNoCombinator, scopeSelector);
          return selector.replace(polyfillHostRe, scopeSelector + " ");
        } else {
          return scopeSelector + " " + selector;
        }
      },
      applyStrictSelectorScope: function(selector, scopeSelector) {
        scopeSelector = scopeSelector.replace(/\[is=([^\]]*)\]/g, "$1");
        var splits = [ " ", ">", "+", "~" ], scoped = selector, attrName = "[" + scopeSelector + "]";
        splits.forEach(function(sep) {
          var parts = scoped.split(sep);
          scoped = parts.map(function(p) {
            var t = p.trim().replace(polyfillHostRe, "");
            if (t && splits.indexOf(t) < 0 && t.indexOf(attrName) < 0) {
              p = t.replace(/([^:]*)(:*)(.*)/, "$1" + attrName + "$2$3");
            }
            return p;
          }).join(sep);
        });
        return scoped;
      },
      insertPolyfillHostInCssText: function(selector) {
        return selector.replace(colonHostContextRe, polyfillHostContext).replace(colonHostRe, polyfillHost);
      },
      propertiesFromRule: function(rule) {
        var cssText = rule.style.cssText;
        if (rule.style.content && !rule.style.content.match(/['"]+|attr/)) {
          cssText = cssText.replace(/content:[^;]*;/g, "content: '" + rule.style.content + "';");
        }
        var style = rule.style;
        for (var i in style) {
          if (style[i] === "initial") {
            cssText += i + ": initial; ";
          }
        }
        return cssText;
      },
      replaceTextInStyles: function(styles, action) {
        if (styles && action) {
          if (!(styles instanceof Array)) {
            styles = [ styles ];
          }
          Array.prototype.forEach.call(styles, function(s) {
            s.textContent = action.call(this, s.textContent);
          }, this);
        }
      },
      addCssToDocument: function(cssText, name) {
        if (cssText.match("@import")) {
          addOwnSheet(cssText, name);
        } else {
          addCssToDocument(cssText);
        }
      }
    };
    var selectorRe = /([^{]*)({[\s\S]*?})/gim, cssCommentRe = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim, cssCommentNextSelectorRe = /\/\*\s*@polyfill ([^*]*\*+([^/*][^*]*\*+)*\/)([^{]*?){/gim, cssContentNextSelectorRe = /polyfill-next-selector[^}]*content\:[\s]*?['"](.*?)['"][;\s]*}([^{]*?){/gim, cssCommentRuleRe = /\/\*\s@polyfill-rule([^*]*\*+([^/*][^*]*\*+)*)\//gim, cssContentRuleRe = /(polyfill-rule)[^}]*(content\:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim, cssCommentUnscopedRuleRe = /\/\*\s@polyfill-unscoped-rule([^*]*\*+([^/*][^*]*\*+)*)\//gim, cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content\:[\s]*['"](.*?)['"])[;\s]*[^}]*}/gim, cssPseudoRe = /::(x-[^\s{,(]*)/gim, cssPartRe = /::part\(([^)]*)\)/gim, polyfillHost = "-shadowcsshost", polyfillHostContext = "-shadowcsscontext", parenSuffix = ")(?:\\((" + "(?:\\([^)(]*\\)|[^)(]*)+?" + ")\\))?([^,{]*)";
    var cssColonHostRe = new RegExp("(" + polyfillHost + parenSuffix, "gim"), cssColonHostContextRe = new RegExp("(" + polyfillHostContext + parenSuffix, "gim"), selectorReSuffix = "([>\\s~+[.,{:][\\s\\S]*)?$", colonHostRe = /\:host/gim, colonHostContextRe = /\:host-context/gim, polyfillHostNoCombinator = polyfillHost + "-no-combinator", polyfillHostRe = new RegExp(polyfillHost, "gim"), polyfillHostContextRe = new RegExp(polyfillHostContext, "gim"), shadowDOMSelectorsRe = [ /\^\^/g, /\^/g, /\/shadow\//g, /\/shadow-deep\//g, /::shadow/g, /\/deep\//g, /::content/g ];
    function stylesToCssText(styles, preserveComments) {
      var cssText = "";
      Array.prototype.forEach.call(styles, function(s) {
        cssText += s.textContent + "\n\n";
      });
      if (!preserveComments) {
        cssText = cssText.replace(cssCommentRe, "");
      }
      return cssText;
    }
    function cssTextToStyle(cssText) {
      var style = document.createElement("style");
      style.textContent = cssText;
      return style;
    }
    function cssToRules(cssText) {
      var style = cssTextToStyle(cssText);
      document.head.appendChild(style);
      var rules = [];
      if (style.sheet) {
        try {
          rules = style.sheet.cssRules;
        } catch (e) {}
      } else {
        console.warn("sheet not found", style);
      }
      style.parentNode.removeChild(style);
      return rules;
    }
    var frame = document.createElement("iframe");
    frame.style.display = "none";
    function initFrame() {
      frame.initialized = true;
      document.body.appendChild(frame);
      var doc = frame.contentDocument;
      var base = doc.createElement("base");
      base.href = document.baseURI;
      doc.head.appendChild(base);
    }
    function inFrame(fn) {
      if (!frame.initialized) {
        initFrame();
      }
      document.body.appendChild(frame);
      fn(frame.contentDocument);
      document.body.removeChild(frame);
    }
    var isChrome = navigator.userAgent.match("Chrome");
    function withCssRules(cssText, callback) {
      if (!callback) {
        return;
      }
      var rules;
      if (cssText.match("@import") && isChrome) {
        var style = cssTextToStyle(cssText);
        inFrame(function(doc) {
          doc.head.appendChild(style.impl);
          rules = Array.prototype.slice.call(style.sheet.cssRules, 0);
          callback(rules);
        });
      } else {
        rules = cssToRules(cssText);
        callback(rules);
      }
    }
    function rulesToCss(cssRules) {
      for (var i = 0, css = []; i < cssRules.length; i++) {
        css.push(cssRules[i].cssText);
      }
      return css.join("\n\n");
    }
    function addCssToDocument(cssText) {
      if (cssText) {
        getSheet().appendChild(document.createTextNode(cssText));
      }
    }
    function addOwnSheet(cssText, name) {
      var style = cssTextToStyle(cssText);
      style.setAttribute(name, "");
      style.setAttribute(SHIMMED_ATTRIBUTE, "");
      document.head.appendChild(style);
    }
    var SHIM_ATTRIBUTE = "shim-shadowdom";
    var SHIMMED_ATTRIBUTE = "shim-shadowdom-css";
    var NO_SHIM_ATTRIBUTE = "no-shim";
    var sheet;
    function getSheet() {
      if (!sheet) {
        sheet = document.createElement("style");
        sheet.setAttribute(SHIMMED_ATTRIBUTE, "");
        sheet[SHIMMED_ATTRIBUTE] = true;
      }
      return sheet;
    }
    if (window.ShadowDOMPolyfill) {
      addCssToDocument("style { display: none !important; }\n");
      var doc = ShadowDOMPolyfill.wrap(document);
      var head = doc.querySelector("head");
      head.insertBefore(getSheet(), head.childNodes[0]);
      document.addEventListener("DOMContentLoaded", function() {
        var urlResolver = scope.urlResolver;
        if (window.HTMLImports && !HTMLImports.useNative) {
          var SHIM_SHEET_SELECTOR = "link[rel=stylesheet]" + "[" + SHIM_ATTRIBUTE + "]";
          var SHIM_STYLE_SELECTOR = "style[" + SHIM_ATTRIBUTE + "]";
          HTMLImports.importer.documentPreloadSelectors += "," + SHIM_SHEET_SELECTOR;
          HTMLImports.importer.importsPreloadSelectors += "," + SHIM_SHEET_SELECTOR;
          HTMLImports.parser.documentSelectors = [ HTMLImports.parser.documentSelectors, SHIM_SHEET_SELECTOR, SHIM_STYLE_SELECTOR ].join(",");
          var originalParseGeneric = HTMLImports.parser.parseGeneric;
          HTMLImports.parser.parseGeneric = function(elt) {
            if (elt[SHIMMED_ATTRIBUTE]) {
              return;
            }
            var style = elt.__importElement || elt;
            if (!style.hasAttribute(SHIM_ATTRIBUTE)) {
              originalParseGeneric.call(this, elt);
              return;
            }
            if (elt.__resource) {
              style = elt.ownerDocument.createElement("style");
              style.textContent = elt.__resource;
            }
            HTMLImports.path.resolveUrlsInStyle(style);
            style.textContent = ShadowCSS.shimStyle(style);
            style.removeAttribute(SHIM_ATTRIBUTE, "");
            style.setAttribute(SHIMMED_ATTRIBUTE, "");
            style[SHIMMED_ATTRIBUTE] = true;
            if (style.parentNode !== head) {
              if (elt.parentNode === head) {
                head.replaceChild(style, elt);
              } else {
                this.addElementToDocument(style);
              }
            }
            style.__importParsed = true;
            this.markParsingComplete(elt);
            this.parseNext();
          };
          var hasResource = HTMLImports.parser.hasResource;
          HTMLImports.parser.hasResource = function(node) {
            if (node.localName === "link" && node.rel === "stylesheet" && node.hasAttribute(SHIM_ATTRIBUTE)) {
              return node.__resource;
            } else {
              return hasResource.call(this, node);
            }
          };
        }
      });
    }
    scope.ShadowCSS = ShadowCSS;
  })(window.WebComponents);
}

(function(scope) {
  if (window.ShadowDOMPolyfill) {
    window.wrap = ShadowDOMPolyfill.wrapIfNeeded;
    window.unwrap = ShadowDOMPolyfill.unwrapIfNeeded;
  } else {
    window.wrap = window.unwrap = function(n) {
      return n;
    };
  }
})(window.WebComponents);

(function(global) {
  var registrationsTable = new WeakMap();
  var setImmediate;
  if (/Trident/.test(navigator.userAgent)) {
    setImmediate = setTimeout;
  } else if (window.setImmediate) {
    setImmediate = window.setImmediate;
  } else {
    var setImmediateQueue = [];
    var sentinel = String(Math.random());
    window.addEventListener("message", function(e) {
      if (e.data === sentinel) {
        var queue = setImmediateQueue;
        setImmediateQueue = [];
        queue.forEach(function(func) {
          func();
        });
      }
    });
    setImmediate = function(func) {
      setImmediateQueue.push(func);
      window.postMessage(sentinel, "*");
    };
  }
  var isScheduled = false;
  var scheduledObservers = [];
  function scheduleCallback(observer) {
    scheduledObservers.push(observer);
    if (!isScheduled) {
      isScheduled = true;
      setImmediate(dispatchCallbacks);
    }
  }
  function wrapIfNeeded(node) {
    return window.ShadowDOMPolyfill && window.ShadowDOMPolyfill.wrapIfNeeded(node) || node;
  }
  function dispatchCallbacks() {
    isScheduled = false;
    var observers = scheduledObservers;
    scheduledObservers = [];
    observers.sort(function(o1, o2) {
      return o1.uid_ - o2.uid_;
    });
    var anyNonEmpty = false;
    observers.forEach(function(observer) {
      var queue = observer.takeRecords();
      removeTransientObserversFor(observer);
      if (queue.length) {
        observer.callback_(queue, observer);
        anyNonEmpty = true;
      }
    });
    if (anyNonEmpty) dispatchCallbacks();
  }
  function removeTransientObserversFor(observer) {
    observer.nodes_.forEach(function(node) {
      var registrations = registrationsTable.get(node);
      if (!registrations) return;
      registrations.forEach(function(registration) {
        if (registration.observer === observer) registration.removeTransientObservers();
      });
    });
  }
  function forEachAncestorAndObserverEnqueueRecord(target, callback) {
    for (var node = target; node; node = node.parentNode) {
      var registrations = registrationsTable.get(node);
      if (registrations) {
        for (var j = 0; j < registrations.length; j++) {
          var registration = registrations[j];
          var options = registration.options;
          if (node !== target && !options.subtree) continue;
          var record = callback(options);
          if (record) registration.enqueue(record);
        }
      }
    }
  }
  var uidCounter = 0;
  function JsMutationObserver(callback) {
    this.callback_ = callback;
    this.nodes_ = [];
    this.records_ = [];
    this.uid_ = ++uidCounter;
  }
  JsMutationObserver.prototype = {
    observe: function(target, options) {
      target = wrapIfNeeded(target);
      if (!options.childList && !options.attributes && !options.characterData || options.attributeOldValue && !options.attributes || options.attributeFilter && options.attributeFilter.length && !options.attributes || options.characterDataOldValue && !options.characterData) {
        throw new SyntaxError();
      }
      var registrations = registrationsTable.get(target);
      if (!registrations) registrationsTable.set(target, registrations = []);
      var registration;
      for (var i = 0; i < registrations.length; i++) {
        if (registrations[i].observer === this) {
          registration = registrations[i];
          registration.removeListeners();
          registration.options = options;
          break;
        }
      }
      if (!registration) {
        registration = new Registration(this, target, options);
        registrations.push(registration);
        this.nodes_.push(target);
      }
      registration.addListeners();
    },
    disconnect: function() {
      this.nodes_.forEach(function(node) {
        var registrations = registrationsTable.get(node);
        for (var i = 0; i < registrations.length; i++) {
          var registration = registrations[i];
          if (registration.observer === this) {
            registration.removeListeners();
            registrations.splice(i, 1);
            break;
          }
        }
      }, this);
      this.records_ = [];
    },
    takeRecords: function() {
      var copyOfRecords = this.records_;
      this.records_ = [];
      return copyOfRecords;
    }
  };
  function MutationRecord(type, target) {
    this.type = type;
    this.target = target;
    this.addedNodes = [];
    this.removedNodes = [];
    this.previousSibling = null;
    this.nextSibling = null;
    this.attributeName = null;
    this.attributeNamespace = null;
    this.oldValue = null;
  }
  function copyMutationRecord(original) {
    var record = new MutationRecord(original.type, original.target);
    record.addedNodes = original.addedNodes.slice();
    record.removedNodes = original.removedNodes.slice();
    record.previousSibling = original.previousSibling;
    record.nextSibling = original.nextSibling;
    record.attributeName = original.attributeName;
    record.attributeNamespace = original.attributeNamespace;
    record.oldValue = original.oldValue;
    return record;
  }
  var currentRecord, recordWithOldValue;
  function getRecord(type, target) {
    return currentRecord = new MutationRecord(type, target);
  }
  function getRecordWithOldValue(oldValue) {
    if (recordWithOldValue) return recordWithOldValue;
    recordWithOldValue = copyMutationRecord(currentRecord);
    recordWithOldValue.oldValue = oldValue;
    return recordWithOldValue;
  }
  function clearRecords() {
    currentRecord = recordWithOldValue = undefined;
  }
  function recordRepresentsCurrentMutation(record) {
    return record === recordWithOldValue || record === currentRecord;
  }
  function selectRecord(lastRecord, newRecord) {
    if (lastRecord === newRecord) return lastRecord;
    if (recordWithOldValue && recordRepresentsCurrentMutation(lastRecord)) return recordWithOldValue;
    return null;
  }
  function Registration(observer, target, options) {
    this.observer = observer;
    this.target = target;
    this.options = options;
    this.transientObservedNodes = [];
  }
  Registration.prototype = {
    enqueue: function(record) {
      var records = this.observer.records_;
      var length = records.length;
      if (records.length > 0) {
        var lastRecord = records[length - 1];
        var recordToReplaceLast = selectRecord(lastRecord, record);
        if (recordToReplaceLast) {
          records[length - 1] = recordToReplaceLast;
          return;
        }
      } else {
        scheduleCallback(this.observer);
      }
      records[length] = record;
    },
    addListeners: function() {
      this.addListeners_(this.target);
    },
    addListeners_: function(node) {
      var options = this.options;
      if (options.attributes) node.addEventListener("DOMAttrModified", this, true);
      if (options.characterData) node.addEventListener("DOMCharacterDataModified", this, true);
      if (options.childList) node.addEventListener("DOMNodeInserted", this, true);
      if (options.childList || options.subtree) node.addEventListener("DOMNodeRemoved", this, true);
    },
    removeListeners: function() {
      this.removeListeners_(this.target);
    },
    removeListeners_: function(node) {
      var options = this.options;
      if (options.attributes) node.removeEventListener("DOMAttrModified", this, true);
      if (options.characterData) node.removeEventListener("DOMCharacterDataModified", this, true);
      if (options.childList) node.removeEventListener("DOMNodeInserted", this, true);
      if (options.childList || options.subtree) node.removeEventListener("DOMNodeRemoved", this, true);
    },
    addTransientObserver: function(node) {
      if (node === this.target) return;
      this.addListeners_(node);
      this.transientObservedNodes.push(node);
      var registrations = registrationsTable.get(node);
      if (!registrations) registrationsTable.set(node, registrations = []);
      registrations.push(this);
    },
    removeTransientObservers: function() {
      var transientObservedNodes = this.transientObservedNodes;
      this.transientObservedNodes = [];
      transientObservedNodes.forEach(function(node) {
        this.removeListeners_(node);
        var registrations = registrationsTable.get(node);
        for (var i = 0; i < registrations.length; i++) {
          if (registrations[i] === this) {
            registrations.splice(i, 1);
            break;
          }
        }
      }, this);
    },
    handleEvent: function(e) {
      e.stopImmediatePropagation();
      switch (e.type) {
       case "DOMAttrModified":
        var name = e.attrName;
        var namespace = e.relatedNode.namespaceURI;
        var target = e.target;
        var record = new getRecord("attributes", target);
        record.attributeName = name;
        record.attributeNamespace = namespace;
        var oldValue = e.attrChange === MutationEvent.ADDITION ? null : e.prevValue;
        forEachAncestorAndObserverEnqueueRecord(target, function(options) {
          if (!options.attributes) return;
          if (options.attributeFilter && options.attributeFilter.length && options.attributeFilter.indexOf(name) === -1 && options.attributeFilter.indexOf(namespace) === -1) {
            return;
          }
          if (options.attributeOldValue) return getRecordWithOldValue(oldValue);
          return record;
        });
        break;

       case "DOMCharacterDataModified":
        var target = e.target;
        var record = getRecord("characterData", target);
        var oldValue = e.prevValue;
        forEachAncestorAndObserverEnqueueRecord(target, function(options) {
          if (!options.characterData) return;
          if (options.characterDataOldValue) return getRecordWithOldValue(oldValue);
          return record;
        });
        break;

       case "DOMNodeRemoved":
        this.addTransientObserver(e.target);

       case "DOMNodeInserted":
        var target = e.relatedNode;
        var changedNode = e.target;
        var addedNodes, removedNodes;
        if (e.type === "DOMNodeInserted") {
          addedNodes = [ changedNode ];
          removedNodes = [];
        } else {
          addedNodes = [];
          removedNodes = [ changedNode ];
        }
        var previousSibling = changedNode.previousSibling;
        var nextSibling = changedNode.nextSibling;
        var record = getRecord("childList", target);
        record.addedNodes = addedNodes;
        record.removedNodes = removedNodes;
        record.previousSibling = previousSibling;
        record.nextSibling = nextSibling;
        forEachAncestorAndObserverEnqueueRecord(target, function(options) {
          if (!options.childList) return;
          return record;
        });
      }
      clearRecords();
    }
  };
  global.JsMutationObserver = JsMutationObserver;
  if (!global.MutationObserver) global.MutationObserver = JsMutationObserver;
})(this);

window.HTMLImports = window.HTMLImports || {
  flags: {}
};

(function(scope) {
  var IMPORT_LINK_TYPE = "import";
  var useNative = Boolean(IMPORT_LINK_TYPE in document.createElement("link"));
  var hasShadowDOMPolyfill = Boolean(window.ShadowDOMPolyfill);
  var wrap = function(node) {
    return hasShadowDOMPolyfill ? ShadowDOMPolyfill.wrapIfNeeded(node) : node;
  };
  var rootDocument = wrap(document);
  var currentScriptDescriptor = {
    get: function() {
      var script = HTMLImports.currentScript || document.currentScript || (document.readyState !== "complete" ? document.scripts[document.scripts.length - 1] : null);
      return wrap(script);
    },
    configurable: true
  };
  Object.defineProperty(document, "_currentScript", currentScriptDescriptor);
  Object.defineProperty(rootDocument, "_currentScript", currentScriptDescriptor);
  var isIE = /Trident/.test(navigator.userAgent);
  function whenReady(callback, doc) {
    doc = doc || rootDocument;
    whenDocumentReady(function() {
      watchImportsLoad(callback, doc);
    }, doc);
  }
  var requiredReadyState = isIE ? "complete" : "interactive";
  var READY_EVENT = "readystatechange";
  function isDocumentReady(doc) {
    return doc.readyState === "complete" || doc.readyState === requiredReadyState;
  }
  function whenDocumentReady(callback, doc) {
    if (!isDocumentReady(doc)) {
      var checkReady = function() {
        if (doc.readyState === "complete" || doc.readyState === requiredReadyState) {
          doc.removeEventListener(READY_EVENT, checkReady);
          whenDocumentReady(callback, doc);
        }
      };
      doc.addEventListener(READY_EVENT, checkReady);
    } else if (callback) {
      callback();
    }
  }
  function markTargetLoaded(event) {
    event.target.__loaded = true;
  }
  function watchImportsLoad(callback, doc) {
    var imports = doc.querySelectorAll("link[rel=import]");
    var loaded = 0, l = imports.length;
    function checkDone(d) {
      if (loaded == l && callback) {
        callback();
      }
    }
    function loadedImport(e) {
      markTargetLoaded(e);
      loaded++;
      checkDone();
    }
    if (l) {
      for (var i = 0, imp; i < l && (imp = imports[i]); i++) {
        if (isImportLoaded(imp)) {
          loadedImport.call(imp, {
            target: imp
          });
        } else {
          imp.addEventListener("load", loadedImport);
          imp.addEventListener("error", loadedImport);
        }
      }
    } else {
      checkDone();
    }
  }
  function isImportLoaded(link) {
    return useNative ? link.__loaded || link.import && link.import.readyState !== "loading" : link.__importParsed;
  }
  if (useNative) {
    new MutationObserver(function(mxns) {
      for (var i = 0, l = mxns.length, m; i < l && (m = mxns[i]); i++) {
        if (m.addedNodes) {
          handleImports(m.addedNodes);
        }
      }
    }).observe(document.head, {
      childList: true
    });
    function handleImports(nodes) {
      for (var i = 0, l = nodes.length, n; i < l && (n = nodes[i]); i++) {
        if (isImport(n)) {
          handleImport(n);
        }
      }
    }
    function isImport(element) {
      return element.localName === "link" && element.rel === "import";
    }
    function handleImport(element) {
      var loaded = element.import;
      if (loaded) {
        markTargetLoaded({
          target: element
        });
      } else {
        element.addEventListener("load", markTargetLoaded);
        element.addEventListener("error", markTargetLoaded);
      }
    }
    (function() {
      if (document.readyState === "loading") {
        var imports = document.querySelectorAll("link[rel=import]");
        for (var i = 0, l = imports.length, imp; i < l && (imp = imports[i]); i++) {
          handleImport(imp);
        }
      }
    })();
  }
  whenReady(function() {
    HTMLImports.ready = true;
    HTMLImports.readyTime = new Date().getTime();
    rootDocument.dispatchEvent(new CustomEvent("HTMLImportsLoaded", {
      bubbles: true
    }));
  });
  scope.IMPORT_LINK_TYPE = IMPORT_LINK_TYPE;
  scope.useNative = useNative;
  scope.rootDocument = rootDocument;
  scope.whenReady = whenReady;
  scope.isIE = isIE;
})(HTMLImports);

(function(scope) {
  var modules = [];
  var addModule = function(module) {
    modules.push(module);
  };
  var initializeModules = function() {
    modules.forEach(function(module) {
      module(scope);
    });
  };
  scope.addModule = addModule;
  scope.initializeModules = initializeModules;
})(HTMLImports);

HTMLImports.addModule(function(scope) {
  var CSS_URL_REGEXP = /(url\()([^)]*)(\))/g;
  var CSS_IMPORT_REGEXP = /(@import[\s]+(?!url\())([^;]*)(;)/g;
  var path = {
    resolveUrlsInStyle: function(style) {
      var doc = style.ownerDocument;
      var resolver = doc.createElement("a");
      style.textContent = this.resolveUrlsInCssText(style.textContent, resolver);
      return style;
    },
    resolveUrlsInCssText: function(cssText, urlObj) {
      var r = this.replaceUrls(cssText, urlObj, CSS_URL_REGEXP);
      r = this.replaceUrls(r, urlObj, CSS_IMPORT_REGEXP);
      return r;
    },
    replaceUrls: function(text, urlObj, regexp) {
      return text.replace(regexp, function(m, pre, url, post) {
        var urlPath = url.replace(/["']/g, "");
        urlObj.href = urlPath;
        urlPath = urlObj.href;
        return pre + "'" + urlPath + "'" + post;
      });
    }
  };
  scope.path = path;
});

HTMLImports.addModule(function(scope) {
  xhr = {
    async: true,
    ok: function(request) {
      return request.status >= 200 && request.status < 300 || request.status === 304 || request.status === 0;
    },
    load: function(url, next, nextContext) {
      var request = new XMLHttpRequest();
      if (scope.flags.debug || scope.flags.bust) {
        url += "?" + Math.random();
      }
      request.open("GET", url, xhr.async);
      request.addEventListener("readystatechange", function(e) {
        if (request.readyState === 4) {
          var locationHeader = request.getResponseHeader("Location");
          var redirectedUrl = null;
          if (locationHeader) {
            var redirectedUrl = locationHeader.substr(0, 1) === "/" ? location.origin + locationHeader : locationHeader;
          }
          next.call(nextContext, !xhr.ok(request) && request, request.response || request.responseText, redirectedUrl);
        }
      });
      request.send();
      return request;
    },
    loadDocument: function(url, next, nextContext) {
      this.load(url, next, nextContext).responseType = "document";
    }
  };
  scope.xhr = xhr;
});

HTMLImports.addModule(function(scope) {
  var xhr = scope.xhr;
  var flags = scope.flags;
  var Loader = function(onLoad, onComplete) {
    this.cache = {};
    this.onload = onLoad;
    this.oncomplete = onComplete;
    this.inflight = 0;
    this.pending = {};
  };
  Loader.prototype = {
    addNodes: function(nodes) {
      this.inflight += nodes.length;
      for (var i = 0, l = nodes.length, n; i < l && (n = nodes[i]); i++) {
        this.require(n);
      }
      this.checkDone();
    },
    addNode: function(node) {
      this.inflight++;
      this.require(node);
      this.checkDone();
    },
    require: function(elt) {
      var url = elt.src || elt.href;
      elt.__nodeUrl = url;
      if (!this.dedupe(url, elt)) {
        this.fetch(url, elt);
      }
    },
    dedupe: function(url, elt) {
      if (this.pending[url]) {
        this.pending[url].push(elt);
        return true;
      }
      var resource;
      if (this.cache[url]) {
        this.onload(url, elt, this.cache[url]);
        this.tail();
        return true;
      }
      this.pending[url] = [ elt ];
      return false;
    },
    fetch: function(url, elt) {
      flags.load && console.log("fetch", url, elt);
      if (url.match(/^data:/)) {
        var pieces = url.split(",");
        var header = pieces[0];
        var body = pieces[1];
        if (header.indexOf(";base64") > -1) {
          body = atob(body);
        } else {
          body = decodeURIComponent(body);
        }
        setTimeout(function() {
          this.receive(url, elt, null, body);
        }.bind(this), 0);
      } else {
        var receiveXhr = function(err, resource, redirectedUrl) {
          this.receive(url, elt, err, resource, redirectedUrl);
        }.bind(this);
        xhr.load(url, receiveXhr);
      }
    },
    receive: function(url, elt, err, resource, redirectedUrl) {
      this.cache[url] = resource;
      var $p = this.pending[url];
      for (var i = 0, l = $p.length, p; i < l && (p = $p[i]); i++) {
        this.onload(url, p, resource, err, redirectedUrl);
        this.tail();
      }
      this.pending[url] = null;
    },
    tail: function() {
      --this.inflight;
      this.checkDone();
    },
    checkDone: function() {
      if (!this.inflight) {
        this.oncomplete();
      }
    }
  };
  scope.Loader = Loader;
});

HTMLImports.addModule(function(scope) {
  var Observer = function(addCallback) {
    this.addCallback = addCallback;
    this.mo = new MutationObserver(this.handler.bind(this));
  };
  Observer.prototype = {
    handler: function(mutations) {
      for (var i = 0, l = mutations.length, m; i < l && (m = mutations[i]); i++) {
        if (m.type === "childList" && m.addedNodes.length) {
          this.addedNodes(m.addedNodes);
        }
      }
    },
    addedNodes: function(nodes) {
      if (this.addCallback) {
        this.addCallback(nodes);
      }
      for (var i = 0, l = nodes.length, n, loading; i < l && (n = nodes[i]); i++) {
        if (n.children && n.children.length) {
          this.addedNodes(n.children);
        }
      }
    },
    observe: function(root) {
      this.mo.observe(root, {
        childList: true,
        subtree: true
      });
    }
  };
  scope.Observer = Observer;
});

HTMLImports.addModule(function(scope) {
  var path = scope.path;
  var rootDocument = scope.rootDocument;
  var flags = scope.flags;
  var isIE = scope.isIE;
  var IMPORT_LINK_TYPE = scope.IMPORT_LINK_TYPE;
  var IMPORT_SELECTOR = "link[rel=" + IMPORT_LINK_TYPE + "]";
  var importParser = {
    documentSelectors: IMPORT_SELECTOR,
    importsSelectors: [ IMPORT_SELECTOR, "link[rel=stylesheet]", "style", "script:not([type])", 'script[type="text/javascript"]' ].join(","),
    map: {
      link: "parseLink",
      script: "parseScript",
      style: "parseStyle"
    },
    dynamicElements: [],
    parseNext: function() {
      var next = this.nextToParse();
      if (next) {
        this.parse(next);
      }
    },
    parse: function(elt) {
      if (this.isParsed(elt)) {
        flags.parse && console.log("[%s] is already parsed", elt.localName);
        return;
      }
      var fn = this[this.map[elt.localName]];
      if (fn) {
        this.markParsing(elt);
        fn.call(this, elt);
      }
    },
    parseDynamic: function(elt, quiet) {
      this.dynamicElements.push(elt);
      if (!quiet) {
        this.parseNext();
      }
    },
    markParsing: function(elt) {
      flags.parse && console.log("parsing", elt);
      this.parsingElement = elt;
    },
    markParsingComplete: function(elt) {
      elt.__importParsed = true;
      this.markDynamicParsingComplete(elt);
      if (elt.__importElement) {
        elt.__importElement.__importParsed = true;
        this.markDynamicParsingComplete(elt.__importElement);
      }
      this.parsingElement = null;
      flags.parse && console.log("completed", elt);
    },
    markDynamicParsingComplete: function(elt) {
      var i = this.dynamicElements.indexOf(elt);
      if (i >= 0) {
        this.dynamicElements.splice(i, 1);
      }
    },
    parseImport: function(elt) {
      if (HTMLImports.__importsParsingHook) {
        HTMLImports.__importsParsingHook(elt);
      }
      if (elt.import) {
        elt.import.__importParsed = true;
      }
      this.markParsingComplete(elt);
      if (elt.__resource && !elt.__error) {
        elt.dispatchEvent(new CustomEvent("load", {
          bubbles: false
        }));
      } else {
        elt.dispatchEvent(new CustomEvent("error", {
          bubbles: false
        }));
      }
      if (elt.__pending) {
        var fn;
        while (elt.__pending.length) {
          fn = elt.__pending.shift();
          if (fn) {
            fn({
              target: elt
            });
          }
        }
      }
      this.parseNext();
    },
    parseLink: function(linkElt) {
      if (nodeIsImport(linkElt)) {
        this.parseImport(linkElt);
      } else {
        linkElt.href = linkElt.href;
        this.parseGeneric(linkElt);
      }
    },
    parseStyle: function(elt) {
      var src = elt;
      elt = cloneStyle(elt);
      elt.__importElement = src;
      this.parseGeneric(elt);
    },
    parseGeneric: function(elt) {
      this.trackElement(elt);
      this.addElementToDocument(elt);
    },
    rootImportForElement: function(elt) {
      var n = elt;
      while (n.ownerDocument.__importLink) {
        n = n.ownerDocument.__importLink;
      }
      return n;
    },
    addElementToDocument: function(elt) {
      var port = this.rootImportForElement(elt.__importElement || elt);
      var l = port.__insertedElements = port.__insertedElements || 0;
      var refNode = port.nextElementSibling;
      for (var i = 0; i < l; i++) {
        refNode = refNode && refNode.nextElementSibling;
      }
      port.parentNode.insertBefore(elt, refNode);
    },
    trackElement: function(elt, callback) {
      var self = this;
      var done = function(e) {
        if (callback) {
          callback(e);
        }
        self.markParsingComplete(elt);
        self.parseNext();
      };
      elt.addEventListener("load", done);
      elt.addEventListener("error", done);
      if (isIE && elt.localName === "style") {
        var fakeLoad = false;
        if (elt.textContent.indexOf("@import") == -1) {
          fakeLoad = true;
        } else if (elt.sheet) {
          fakeLoad = true;
          var csr = elt.sheet.cssRules;
          var len = csr ? csr.length : 0;
          for (var i = 0, r; i < len && (r = csr[i]); i++) {
            if (r.type === CSSRule.IMPORT_RULE) {
              fakeLoad = fakeLoad && Boolean(r.styleSheet);
            }
          }
        }
        if (fakeLoad) {
          elt.dispatchEvent(new CustomEvent("load", {
            bubbles: false
          }));
        }
      }
    },
    parseScript: function(scriptElt) {
      var script = document.createElement("script");
      script.__importElement = scriptElt;
      script.src = scriptElt.src ? scriptElt.src : generateScriptDataUrl(scriptElt);
      scope.currentScript = scriptElt;
      this.trackElement(script, function(e) {
        script.parentNode.removeChild(script);
        scope.currentScript = null;
      });
      this.addElementToDocument(script);
    },
    nextToParse: function() {
      this._mayParse = [];
      return !this.parsingElement && (this.nextToParseInDoc(rootDocument) || this.nextToParseDynamic());
    },
    nextToParseInDoc: function(doc, link) {
      if (doc && this._mayParse.indexOf(doc) < 0) {
        this._mayParse.push(doc);
        var nodes = doc.querySelectorAll(this.parseSelectorsForNode(doc));
        for (var i = 0, l = nodes.length, p = 0, n; i < l && (n = nodes[i]); i++) {
          if (!this.isParsed(n)) {
            if (this.hasResource(n)) {
              return nodeIsImport(n) ? this.nextToParseInDoc(n.import, n) : n;
            } else {
              return;
            }
          }
        }
      }
      return link;
    },
    nextToParseDynamic: function() {
      return this.dynamicElements[0];
    },
    parseSelectorsForNode: function(node) {
      var doc = node.ownerDocument || node;
      return doc === rootDocument ? this.documentSelectors : this.importsSelectors;
    },
    isParsed: function(node) {
      return node.__importParsed;
    },
    needsDynamicParsing: function(elt) {
      return this.dynamicElements.indexOf(elt) >= 0;
    },
    hasResource: function(node) {
      if (nodeIsImport(node) && node.import === undefined) {
        return false;
      }
      return true;
    }
  };
  function nodeIsImport(elt) {
    return elt.localName === "link" && elt.rel === IMPORT_LINK_TYPE;
  }
  function generateScriptDataUrl(script) {
    var scriptContent = generateScriptContent(script);
    return "data:text/javascript;charset=utf-8," + encodeURIComponent(scriptContent);
  }
  function generateScriptContent(script) {
    return script.textContent + generateSourceMapHint(script);
  }
  function generateSourceMapHint(script) {
    var owner = script.ownerDocument;
    owner.__importedScripts = owner.__importedScripts || 0;
    var moniker = script.ownerDocument.baseURI;
    var num = owner.__importedScripts ? "-" + owner.__importedScripts : "";
    owner.__importedScripts++;
    return "\n//# sourceURL=" + moniker + num + ".js\n";
  }
  function cloneStyle(style) {
    var clone = style.ownerDocument.createElement("style");
    clone.textContent = style.textContent;
    path.resolveUrlsInStyle(clone);
    return clone;
  }
  scope.parser = importParser;
  scope.IMPORT_SELECTOR = IMPORT_SELECTOR;
});

HTMLImports.addModule(function(scope) {
  var flags = scope.flags;
  var IMPORT_LINK_TYPE = scope.IMPORT_LINK_TYPE;
  var IMPORT_SELECTOR = scope.IMPORT_SELECTOR;
  var rootDocument = scope.rootDocument;
  var Loader = scope.Loader;
  var Observer = scope.Observer;
  var parser = scope.parser;
  var importer = {
    documents: {},
    documentPreloadSelectors: IMPORT_SELECTOR,
    importsPreloadSelectors: [ IMPORT_SELECTOR ].join(","),
    loadNode: function(node) {
      importLoader.addNode(node);
    },
    loadSubtree: function(parent) {
      var nodes = this.marshalNodes(parent);
      importLoader.addNodes(nodes);
    },
    marshalNodes: function(parent) {
      return parent.querySelectorAll(this.loadSelectorsForNode(parent));
    },
    loadSelectorsForNode: function(node) {
      var doc = node.ownerDocument || node;
      return doc === rootDocument ? this.documentPreloadSelectors : this.importsPreloadSelectors;
    },
    loaded: function(url, elt, resource, err, redirectedUrl) {
      flags.load && console.log("loaded", url, elt);
      elt.__resource = resource;
      elt.__error = err;
      if (isImportLink(elt)) {
        var doc = this.documents[url];
        if (doc === undefined) {
          doc = err ? null : makeDocument(resource, redirectedUrl || url);
          if (doc) {
            doc.__importLink = elt;
            this.bootDocument(doc);
          }
          this.documents[url] = doc;
        }
        elt.import = doc;
      }
      parser.parseNext();
    },
    bootDocument: function(doc) {
      this.loadSubtree(doc);
      this.observer.observe(doc);
      parser.parseNext();
    },
    loadedAll: function() {
      parser.parseNext();
    }
  };
  var importLoader = new Loader(importer.loaded.bind(importer), importer.loadedAll.bind(importer));
  importer.observer = new Observer();
  function isImportLink(elt) {
    return isLinkRel(elt, IMPORT_LINK_TYPE);
  }
  function isLinkRel(elt, rel) {
    return elt.localName === "link" && elt.getAttribute("rel") === rel;
  }
  function makeDocument(resource, url) {
    var doc = document.implementation.createHTMLDocument(IMPORT_LINK_TYPE);
    doc._URL = url;
    var base = doc.createElement("base");
    base.setAttribute("href", url);
    if (!doc.baseURI) {
      doc.baseURI = url;
    }
    var meta = doc.createElement("meta");
    meta.setAttribute("charset", "utf-8");
    doc.head.appendChild(meta);
    doc.head.appendChild(base);
    doc.body.innerHTML = resource;
    if (window.HTMLTemplateElement && HTMLTemplateElement.bootstrap) {
      HTMLTemplateElement.bootstrap(doc);
    }
    return doc;
  }
  if (!document.baseURI) {
    var baseURIDescriptor = {
      get: function() {
        var base = document.querySelector("base");
        return base ? base.href : window.location.href;
      },
      configurable: true
    };
    Object.defineProperty(document, "baseURI", baseURIDescriptor);
    Object.defineProperty(rootDocument, "baseURI", baseURIDescriptor);
  }
  scope.importer = importer;
  scope.importLoader = importLoader;
});

HTMLImports.addModule(function(scope) {
  var parser = scope.parser;
  var importer = scope.importer;
  var dynamic = {
    added: function(nodes) {
      var owner, parsed;
      for (var i = 0, l = nodes.length, n; i < l && (n = nodes[i]); i++) {
        if (!owner) {
          owner = n.ownerDocument;
          parsed = parser.isParsed(owner);
        }
        loading = this.shouldLoadNode(n);
        if (loading) {
          importer.loadNode(n);
        }
        if (this.shouldParseNode(n) && parsed) {
          parser.parseDynamic(n, loading);
        }
      }
    },
    shouldLoadNode: function(node) {
      return node.nodeType === 1 && matches.call(node, importer.loadSelectorsForNode(node));
    },
    shouldParseNode: function(node) {
      return node.nodeType === 1 && matches.call(node, parser.parseSelectorsForNode(node));
    }
  };
  importer.observer.addCallback = dynamic.added.bind(dynamic);
  var matches = HTMLElement.prototype.matches || HTMLElement.prototype.matchesSelector || HTMLElement.prototype.webkitMatchesSelector || HTMLElement.prototype.mozMatchesSelector || HTMLElement.prototype.msMatchesSelector;
});

(function(scope) {
  initializeModules = scope.initializeModules;
  if (scope.useNative) {
    return;
  }
  if (typeof window.CustomEvent !== "function") {
    window.CustomEvent = function(inType, dictionary) {
      var e = document.createEvent("HTMLEvents");
      e.initEvent(inType, dictionary.bubbles === false ? false : true, dictionary.cancelable === false ? false : true, dictionary.detail);
      return e;
    };
  }
  initializeModules();
  var rootDocument = scope.rootDocument;
  function bootstrap() {
    HTMLImports.importer.bootDocument(rootDocument);
  }
  if (document.readyState === "complete" || document.readyState === "interactive" && !window.attachEvent) {
    bootstrap();
  } else {
    document.addEventListener("DOMContentLoaded", bootstrap);
  }
})(HTMLImports);

window.CustomElements = window.CustomElements || {
  flags: {}
};

(function(scope) {
  var flags = scope.flags;
  var modules = [];
  var addModule = function(module) {
    modules.push(module);
  };
  var initializeModules = function() {
    modules.forEach(function(module) {
      module(scope);
    });
  };
  scope.addModule = addModule;
  scope.initializeModules = initializeModules;
  scope.hasNative = Boolean(document.registerElement);
  scope.useNative = !flags.register && scope.hasNative && !window.ShadowDOMPolyfill && (!window.HTMLImports || HTMLImports.useNative);
})(CustomElements);

CustomElements.addModule(function(scope) {
  var IMPORT_LINK_TYPE = window.HTMLImports ? HTMLImports.IMPORT_LINK_TYPE : "none";
  function forSubtree(node, cb) {
    findAllElements(node, function(e) {
      if (cb(e)) {
        return true;
      }
      forRoots(e, cb);
    });
    forRoots(node, cb);
  }
  function findAllElements(node, find, data) {
    var e = node.firstElementChild;
    if (!e) {
      e = node.firstChild;
      while (e && e.nodeType !== Node.ELEMENT_NODE) {
        e = e.nextSibling;
      }
    }
    while (e) {
      if (find(e, data) !== true) {
        findAllElements(e, find, data);
      }
      e = e.nextElementSibling;
    }
    return null;
  }
  function forRoots(node, cb) {
    var root = node.shadowRoot;
    while (root) {
      forSubtree(root, cb);
      root = root.olderShadowRoot;
    }
  }
  var processingDocuments;
  function forDocumentTree(doc, cb) {
    processingDocuments = [];
    _forDocumentTree(doc, cb);
    processingDocuments = null;
  }
  function _forDocumentTree(doc, cb) {
    doc = wrap(doc);
    if (processingDocuments.indexOf(doc) >= 0) {
      return;
    }
    processingDocuments.push(doc);
    var imports = doc.querySelectorAll("link[rel=" + IMPORT_LINK_TYPE + "]");
    for (var i = 0, l = imports.length, n; i < l && (n = imports[i]); i++) {
      if (n.import) {
        _forDocumentTree(n.import, cb);
      }
    }
    cb(doc);
  }
  scope.forDocumentTree = forDocumentTree;
  scope.forSubtree = forSubtree;
});

CustomElements.addModule(function(scope) {
  var flags = scope.flags;
  var forSubtree = scope.forSubtree;
  var forDocumentTree = scope.forDocumentTree;
  function addedNode(node) {
    return added(node) || addedSubtree(node);
  }
  function added(node) {
    if (scope.upgrade(node)) {
      return true;
    }
    attached(node);
  }
  function addedSubtree(node) {
    forSubtree(node, function(e) {
      if (added(e)) {
        return true;
      }
    });
  }
  function attachedNode(node) {
    attached(node);
    if (inDocument(node)) {
      forSubtree(node, function(e) {
        attached(e);
      });
    }
  }
  var hasPolyfillMutations = !window.MutationObserver || window.MutationObserver === window.JsMutationObserver;
  scope.hasPolyfillMutations = hasPolyfillMutations;
  var isPendingMutations = false;
  var pendingMutations = [];
  function deferMutation(fn) {
    pendingMutations.push(fn);
    if (!isPendingMutations) {
      isPendingMutations = true;
      setTimeout(takeMutations);
    }
  }
  function takeMutations() {
    isPendingMutations = false;
    var $p = pendingMutations;
    for (var i = 0, l = $p.length, p; i < l && (p = $p[i]); i++) {
      p();
    }
    pendingMutations = [];
  }
  function attached(element) {
    if (hasPolyfillMutations) {
      deferMutation(function() {
        _attached(element);
      });
    } else {
      _attached(element);
    }
  }
  function _attached(element) {
    if (element.__upgraded__ && (element.attachedCallback || element.detachedCallback)) {
      if (!element.__attached && inDocument(element)) {
        element.__attached = true;
        if (element.attachedCallback) {
          element.attachedCallback();
        }
      }
    }
  }
  function detachedNode(node) {
    detached(node);
    forSubtree(node, function(e) {
      detached(e);
    });
  }
  function detached(element) {
    if (hasPolyfillMutations) {
      deferMutation(function() {
        _detached(element);
      });
    } else {
      _detached(element);
    }
  }
  function _detached(element) {
    if (element.__upgraded__ && (element.attachedCallback || element.detachedCallback)) {
      if (element.__attached && !inDocument(element)) {
        element.__attached = false;
        if (element.detachedCallback) {
          element.detachedCallback();
        }
      }
    }
  }
  function inDocument(element) {
    var p = element;
    var doc = wrap(document);
    while (p) {
      if (p == doc) {
        return true;
      }
      p = p.parentNode || p.host;
    }
  }
  function watchShadow(node) {
    if (node.shadowRoot && !node.shadowRoot.__watched) {
      flags.dom && console.log("watching shadow-root for: ", node.localName);
      var root = node.shadowRoot;
      while (root) {
        observe(root);
        root = root.olderShadowRoot;
      }
    }
  }
  function handler(mutations) {
    if (flags.dom) {
      var mx = mutations[0];
      if (mx && mx.type === "childList" && mx.addedNodes) {
        if (mx.addedNodes) {
          var d = mx.addedNodes[0];
          while (d && d !== document && !d.host) {
            d = d.parentNode;
          }
          var u = d && (d.URL || d._URL || d.host && d.host.localName) || "";
          u = u.split("/?").shift().split("/").pop();
        }
      }
      console.group("mutations (%d) [%s]", mutations.length, u || "");
    }
    mutations.forEach(function(mx) {
      if (mx.type === "childList") {
        forEach(mx.addedNodes, function(n) {
          if (!n.localName) {
            return;
          }
          addedNode(n);
        });
        forEach(mx.removedNodes, function(n) {
          if (!n.localName) {
            return;
          }
          detachedNode(n);
        });
      }
    });
    flags.dom && console.groupEnd();
  }
  function takeRecords(node) {
    node = wrap(node);
    if (!node) {
      node = wrap(document);
    }
    while (node.parentNode) {
      node = node.parentNode;
    }
    var observer = node.__observer;
    if (observer) {
      handler(observer.takeRecords());
      takeMutations();
    }
  }
  var forEach = Array.prototype.forEach.call.bind(Array.prototype.forEach);
  function observe(inRoot) {
    if (inRoot.__observer) {
      return;
    }
    var observer = new MutationObserver(handler);
    observer.observe(inRoot, {
      childList: true,
      subtree: true
    });
    inRoot.__observer = observer;
  }
  function upgradeDocument(doc) {
    doc = wrap(doc);
    flags.dom && console.group("upgradeDocument: ", doc.baseURI.split("/").pop());
    addedNode(doc);
    observe(doc);
    flags.dom && console.groupEnd();
  }
  function upgradeDocumentTree(doc) {
    forDocumentTree(doc, upgradeDocument);
  }
  var originalCreateShadowRoot = Element.prototype.createShadowRoot;
  Element.prototype.createShadowRoot = function() {
    var root = originalCreateShadowRoot.call(this);
    CustomElements.watchShadow(this);
    return root;
  };
  scope.watchShadow = watchShadow;
  scope.upgradeDocumentTree = upgradeDocumentTree;
  scope.upgradeSubtree = addedSubtree;
  scope.upgradeAll = addedNode;
  scope.attachedNode = attachedNode;
  scope.takeRecords = takeRecords;
});

CustomElements.addModule(function(scope) {
  var flags = scope.flags;
  function upgrade(node) {
    if (!node.__upgraded__ && node.nodeType === Node.ELEMENT_NODE) {
      var is = node.getAttribute("is");
      var definition = scope.getRegisteredDefinition(is || node.localName);
      if (definition) {
        if (is && definition.tag == node.localName) {
          return upgradeWithDefinition(node, definition);
        } else if (!is && !definition.extends) {
          return upgradeWithDefinition(node, definition);
        }
      }
    }
  }
  function upgradeWithDefinition(element, definition) {
    flags.upgrade && console.group("upgrade:", element.localName);
    if (definition.is) {
      element.setAttribute("is", definition.is);
    }
    implementPrototype(element, definition);
    element.__upgraded__ = true;
    created(element);
    scope.attachedNode(element);
    scope.upgradeSubtree(element);
    flags.upgrade && console.groupEnd();
    return element;
  }
  function implementPrototype(element, definition) {
    if (Object.__proto__) {
      element.__proto__ = definition.prototype;
    } else {
      customMixin(element, definition.prototype, definition.native);
      element.__proto__ = definition.prototype;
    }
  }
  function customMixin(inTarget, inSrc, inNative) {
    var used = {};
    var p = inSrc;
    while (p !== inNative && p !== HTMLElement.prototype) {
      var keys = Object.getOwnPropertyNames(p);
      for (var i = 0, k; k = keys[i]; i++) {
        if (!used[k]) {
          Object.defineProperty(inTarget, k, Object.getOwnPropertyDescriptor(p, k));
          used[k] = 1;
        }
      }
      p = Object.getPrototypeOf(p);
    }
  }
  function created(element) {
    if (element.createdCallback) {
      element.createdCallback();
    }
  }
  scope.upgrade = upgrade;
  scope.upgradeWithDefinition = upgradeWithDefinition;
  scope.implementPrototype = implementPrototype;
});

CustomElements.addModule(function(scope) {
  var upgradeDocumentTree = scope.upgradeDocumentTree;
  var upgrade = scope.upgrade;
  var upgradeWithDefinition = scope.upgradeWithDefinition;
  var implementPrototype = scope.implementPrototype;
  var useNative = scope.useNative;
  function register(name, options) {
    var definition = options || {};
    if (!name) {
      throw new Error("document.registerElement: first argument `name` must not be empty");
    }
    if (name.indexOf("-") < 0) {
      throw new Error("document.registerElement: first argument ('name') must contain a dash ('-'). Argument provided was '" + String(name) + "'.");
    }
    if (isReservedTag(name)) {
      throw new Error("Failed to execute 'registerElement' on 'Document': Registration failed for type '" + String(name) + "'. The type name is invalid.");
    }
    if (getRegisteredDefinition(name)) {
      throw new Error("DuplicateDefinitionError: a type with name '" + String(name) + "' is already registered");
    }
    if (!definition.prototype) {
      definition.prototype = Object.create(HTMLElement.prototype);
    }
    definition.__name = name.toLowerCase();
    definition.lifecycle = definition.lifecycle || {};
    definition.ancestry = ancestry(definition.extends);
    resolveTagName(definition);
    resolvePrototypeChain(definition);
    overrideAttributeApi(definition.prototype);
    registerDefinition(definition.__name, definition);
    definition.ctor = generateConstructor(definition);
    definition.ctor.prototype = definition.prototype;
    definition.prototype.constructor = definition.ctor;
    if (scope.ready) {
      upgradeDocumentTree(document);
    }
    return definition.ctor;
  }
  function overrideAttributeApi(prototype) {
    if (prototype.setAttribute._polyfilled) {
      return;
    }
    var setAttribute = prototype.setAttribute;
    prototype.setAttribute = function(name, value) {
      changeAttribute.call(this, name, value, setAttribute);
    };
    var removeAttribute = prototype.removeAttribute;
    prototype.removeAttribute = function(name) {
      changeAttribute.call(this, name, null, removeAttribute);
    };
    prototype.setAttribute._polyfilled = true;
  }
  function changeAttribute(name, value, operation) {
    name = name.toLowerCase();
    var oldValue = this.getAttribute(name);
    operation.apply(this, arguments);
    var newValue = this.getAttribute(name);
    if (this.attributeChangedCallback && newValue !== oldValue) {
      this.attributeChangedCallback(name, oldValue, newValue);
    }
  }
  function isReservedTag(name) {
    for (var i = 0; i < reservedTagList.length; i++) {
      if (name === reservedTagList[i]) {
        return true;
      }
    }
  }
  var reservedTagList = [ "annotation-xml", "color-profile", "font-face", "font-face-src", "font-face-uri", "font-face-format", "font-face-name", "missing-glyph" ];
  function ancestry(extnds) {
    var extendee = getRegisteredDefinition(extnds);
    if (extendee) {
      return ancestry(extendee.extends).concat([ extendee ]);
    }
    return [];
  }
  function resolveTagName(definition) {
    var baseTag = definition.extends;
    for (var i = 0, a; a = definition.ancestry[i]; i++) {
      baseTag = a.is && a.tag;
    }
    definition.tag = baseTag || definition.__name;
    if (baseTag) {
      definition.is = definition.__name;
    }
  }
  function resolvePrototypeChain(definition) {
    if (!Object.__proto__) {
      var nativePrototype = HTMLElement.prototype;
      if (definition.is) {
        var inst = document.createElement(definition.tag);
        var expectedPrototype = Object.getPrototypeOf(inst);
        if (expectedPrototype === definition.prototype) {
          nativePrototype = expectedPrototype;
        }
      }
      var proto = definition.prototype, ancestor;
      while (proto && proto !== nativePrototype) {
        ancestor = Object.getPrototypeOf(proto);
        proto.__proto__ = ancestor;
        proto = ancestor;
      }
      definition.native = nativePrototype;
    }
  }
  function instantiate(definition) {
    return upgradeWithDefinition(domCreateElement(definition.tag), definition);
  }
  var registry = {};
  function getRegisteredDefinition(name) {
    if (name) {
      return registry[name.toLowerCase()];
    }
  }
  function registerDefinition(name, definition) {
    registry[name] = definition;
  }
  function generateConstructor(definition) {
    return function() {
      return instantiate(definition);
    };
  }
  var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
  function createElementNS(namespace, tag, typeExtension) {
    if (namespace === HTML_NAMESPACE) {
      return createElement(tag, typeExtension);
    } else {
      return domCreateElementNS(namespace, tag);
    }
  }
  function createElement(tag, typeExtension) {
    var definition = getRegisteredDefinition(typeExtension || tag);
    if (definition) {
      if (tag == definition.tag && typeExtension == definition.is) {
        return new definition.ctor();
      }
      if (!typeExtension && !definition.is) {
        return new definition.ctor();
      }
    }
    var element;
    if (typeExtension) {
      element = createElement(tag);
      element.setAttribute("is", typeExtension);
      return element;
    }
    element = domCreateElement(tag);
    if (tag.indexOf("-") >= 0) {
      implementPrototype(element, HTMLElement);
    }
    return element;
  }
  function cloneNode(deep) {
    var n = domCloneNode.call(this, deep);
    upgrade(n);
    return n;
  }
  var domCreateElement = document.createElement.bind(document);
  var domCreateElementNS = document.createElementNS.bind(document);
  var domCloneNode = Node.prototype.cloneNode;
  var isInstance;
  if (!Object.__proto__ && !useNative) {
    isInstance = function(obj, ctor) {
      var p = obj;
      while (p) {
        if (p === ctor.prototype) {
          return true;
        }
        p = p.__proto__;
      }
      return false;
    };
  } else {
    isInstance = function(obj, base) {
      return obj instanceof base;
    };
  }
  document.registerElement = register;
  document.createElement = createElement;
  document.createElementNS = createElementNS;
  Node.prototype.cloneNode = cloneNode;
  scope.registry = registry;
  scope.instanceof = isInstance;
  scope.reservedTagList = reservedTagList;
  scope.getRegisteredDefinition = getRegisteredDefinition;
  document.register = document.registerElement;
});

(function(scope) {
  var useNative = scope.useNative;
  var initializeModules = scope.initializeModules;
  if (useNative) {
    var nop = function() {};
    scope.watchShadow = nop;
    scope.upgrade = nop;
    scope.upgradeAll = nop;
    scope.upgradeDocumentTree = nop;
    scope.upgradeSubtree = nop;
    scope.takeRecords = nop;
    scope.instanceof = function(obj, base) {
      return obj instanceof base;
    };
  } else {
    initializeModules();
  }
  var upgradeDocumentTree = scope.upgradeDocumentTree;
  if (!window.wrap) {
    if (window.ShadowDOMPolyfill) {
      window.wrap = ShadowDOMPolyfill.wrapIfNeeded;
      window.unwrap = ShadowDOMPolyfill.unwrapIfNeeded;
    } else {
      window.wrap = window.unwrap = function(node) {
        return node;
      };
    }
  }
  function bootstrap() {
    upgradeDocumentTree(wrap(document));
    if (window.HTMLImports) {
      HTMLImports.__importsParsingHook = function(elt) {
        upgradeDocumentTree(wrap(elt.import));
      };
    }
    CustomElements.ready = true;
    setTimeout(function() {
      CustomElements.readyTime = Date.now();
      if (window.HTMLImports) {
        CustomElements.elapsed = CustomElements.readyTime - HTMLImports.readyTime;
      }
      document.dispatchEvent(new CustomEvent("WebComponentsReady", {
        bubbles: true
      }));
    });
  }
  if (typeof window.CustomEvent !== "function") {
    window.CustomEvent = function(inType, params) {
      params = params || {};
      var e = document.createEvent("CustomEvent");
      e.initCustomEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable), params.detail);
      return e;
    };
    window.CustomEvent.prototype = window.Event.prototype;
  }
  if (document.readyState === "complete" || scope.flags.eager) {
    bootstrap();
  } else if (document.readyState === "interactive" && !window.attachEvent && (!window.HTMLImports || window.HTMLImports.ready)) {
    bootstrap();
  } else {
    var loadEvent = window.HTMLImports && !HTMLImports.ready ? "HTMLImportsLoaded" : "DOMContentLoaded";
    window.addEventListener(loadEvent, bootstrap);
  }
})(window.CustomElements);

(function(scope) {
  if (!Function.prototype.bind) {
    Function.prototype.bind = function(scope) {
      var self = this;
      var args = Array.prototype.slice.call(arguments, 1);
      return function() {
        var args2 = args.slice();
        args2.push.apply(args2, arguments);
        return self.apply(scope, args2);
      };
    };
  }
})(window.WebComponents);

(function(scope) {
  "use strict";
  if (!window.performance) {
    var start = Date.now();
    window.performance = {
      now: function() {
        return Date.now() - start;
      }
    };
  }
  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function() {
      var nativeRaf = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;
      return nativeRaf ? function(callback) {
        return nativeRaf(function() {
          callback(performance.now());
        });
      } : function(callback) {
        return window.setTimeout(callback, 1e3 / 60);
      };
    }();
  }
  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function() {
      return window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || function(id) {
        clearTimeout(id);
      };
    }();
  }
  var elementDeclarations = [];
  var polymerStub = function(name, dictionary) {
    if (typeof name !== "string" && arguments.length === 1) {
      Array.prototype.push.call(arguments, document._currentScript);
    }
    elementDeclarations.push(arguments);
  };
  window.Polymer = polymerStub;
  scope.consumeDeclarations = function(callback) {
    scope.consumeDeclarations = function() {
      throw "Possible attempt to load Polymer twice";
    };
    if (callback) {
      callback(elementDeclarations);
    }
    elementDeclarations = null;
  };
  function installPolymerWarning() {
    if (window.Polymer === polymerStub) {
      window.Polymer = function() {
        throw new Error("You tried to use polymer without loading it first. To " + 'load polymer, <link rel="import" href="' + 'components/polymer/polymer.html">');
      };
    }
  }
  if (HTMLImports.useNative) {
    installPolymerWarning();
  } else {
    addEventListener("DOMContentLoaded", installPolymerWarning);
  }
})(window.WebComponents);

(function(scope) {
  var style = document.createElement("style");
  style.textContent = "" + "body {" + "transition: opacity ease-in 0.2s;" + " } \n" + "body[unresolved] {" + "opacity: 0; display: block; overflow: hidden; position: relative;" + " } \n";
  var head = document.querySelector("head");
  head.insertBefore(style, head.firstChild);
})(window.WebComponents);

(function(scope) {
  window.Platform = scope;
})(window.WebComponents);

if (typeof exports !== 'undefined') {
  module.exports = window.WebComponents;
}

},{}],300:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentTreeTestUtils
 */

'use strict';var _assign = require('object-assign');var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

var ReactComponentTreeDevtool = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js');

function getRootDisplayNames() {
  return ReactComponentTreeDevtool.getRootIDs().
  map(ReactComponentTreeDevtool.getDisplayName);}


function getRegisteredDisplayNames() {
  return ReactComponentTreeDevtool.getRegisteredIDs().
  map(ReactComponentTreeDevtool.getDisplayName);}


function expectTree(rootID, expectedTree, parentPath) {
  var displayName = ReactComponentTreeDevtool.getDisplayName(rootID);
  var ownerID = ReactComponentTreeDevtool.getOwnerID(rootID);
  var parentID = ReactComponentTreeDevtool.getParentID(rootID);
  var childIDs = ReactComponentTreeDevtool.getChildIDs(rootID);
  var text = ReactComponentTreeDevtool.getText(rootID);
  var element = ReactComponentTreeDevtool.getElement(rootID);
  var path = parentPath ? parentPath + ' > ' + displayName : displayName;

  function expectEqual(actual, expected, name) {
    // Get Jasmine to print descriptive error messages.
    // We pass path so that we know where the mismatch occurred.
    expect(_defineProperty({ 
      path: path }, 
    name, actual)).
    toEqual(_defineProperty({ 
      path: path }, 
    name, expected));}



  if (expectedTree.parentDisplayName !== undefined) {
    expectEqual(
    ReactComponentTreeDevtool.getDisplayName(parentID), 
    expectedTree.parentDisplayName, 
    'parentDisplayName');}


  if (expectedTree.ownerDisplayName !== undefined) {
    expectEqual(
    ReactComponentTreeDevtool.getDisplayName(ownerID), 
    expectedTree.ownerDisplayName, 
    'ownerDisplayName');}


  if (expectedTree.parentID !== undefined) {
    expectEqual(parentID, expectedTree.parentID, 'parentID');}

  if (expectedTree.text !== undefined) {
    expectEqual(text, expectedTree.text, 'text');
    expectEqual('' + element, expectedTree.text, 'element.toString()');} else 
  {
    expectEqual(text, null, 'text');}

  if (expectedTree.element !== undefined) {
    // TODO: Comparing elements makes tests run out of memory on errors.
    // For now, compare just types.
    expectEqual(
    element && element.type, 
    expectedTree.element && expectedTree.element.type, 
    'element.type');} else 

  if (text == null) {
    expectEqual(typeof element, 'object', 'typeof element');}

  if (expectedTree.children !== undefined) {
    expectEqual(
    childIDs.length, 
    expectedTree.children.length, 
    'children.length');

    for (var i = 0; i < childIDs.length; i++) {
      expectTree(
      childIDs[i], _extends({ 
        parentID: rootID }, expectedTree.children[i]), 
      path);}} else 


  {
    expectEqual(childIDs, [], 'childIDs');}}



var ReactComponentTreeTestUtils = { 
  expectTree: expectTree, 
  getRootDisplayNames: getRootDisplayNames, 
  getRegisteredDisplayNames: getRegisteredDisplayNames };


module.exports = ReactComponentTreeTestUtils;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\devtools\\ReactComponentTreeDevtool.js":211,"object-assign":425}],301:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTestUtils
 */

'use strict';var _assign = require('object-assign');

var EventConstants = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js');
var EventPluginHub = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js');
var EventPluginRegistry = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js');
var EventPropagators = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js');
var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
var ReactDefaultInjection = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDefaultInjection.js');
var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
var ReactDOMComponentTree = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js');
var ReactElement = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js');
var ReactBrowserEventEmitter = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactBrowserEventEmitter.js');
var ReactCompositeComponent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactCompositeComponent.js');
var ReactInstanceMap = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js');
var ReactInstrumentation = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js');
var ReactReconciler = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js');
var ReactUpdates = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js');
var SyntheticEvent = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js');

var emptyObject = require('fbjs/lib/emptyObject');
var findDOMNode = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\findDOMNode.js');
var invariant = require('fbjs/lib/invariant');

var topLevelTypes = EventConstants.topLevelTypes;

function Event(suffix) {}

/**
 * @class ReactTestUtils
 */

function findAllInRenderedTreeInternal(inst, test) {
  if (!inst || !inst.getPublicInstance) {
    return [];}

  var publicInst = inst.getPublicInstance();
  var ret = test(publicInst) ? [publicInst] : [];
  var currentElement = inst._currentElement;
  if (ReactTestUtils.isDOMComponent(publicInst)) {
    var renderedChildren = inst._renderedChildren;
    var key;
    for (key in renderedChildren) {
      if (!renderedChildren.hasOwnProperty(key)) {
        continue;}

      ret = ret.concat(
      findAllInRenderedTreeInternal(
      renderedChildren[key], 
      test));}} else 



  if (
  ReactElement.isValidElement(currentElement) && 
  typeof currentElement.type === 'function') 
  {
    ret = ret.concat(
    findAllInRenderedTreeInternal(inst._renderedComponent, test));}


  return ret;}


/**
 * Utilities for making it easy to test React components.
 *
 * See https://facebook.github.io/react/docs/test-utils.html
 *
 * Todo: Support the entire DOM.scry query syntax. For now, these simple
 * utilities will suffice for testing purposes.
 * @lends ReactTestUtils
 */
var ReactTestUtils = { 
  renderIntoDocument: function (instance) {
    var div = document.createElement('div');
    // None of our tests actually require attaching the container to the
    // DOM, and doing so creates a mess that we rely on test isolation to
    // clean up, so we're going to stop honoring the name of this method
    // (and probably rename it eventually) if no problems arise.
    // document.documentElement.appendChild(div);
    return ReactDOM.render(instance, div);}, 


  isElement: function (element) {
    return ReactElement.isValidElement(element);}, 


  isElementOfType: function (inst, convenienceConstructor) {
    return (
      ReactElement.isValidElement(inst) && 
      inst.type === convenienceConstructor);}, 



  isDOMComponent: function (inst) {
    return !!(inst && inst.nodeType === 1 && inst.tagName);}, 


  isDOMComponentElement: function (inst) {
    return !!(inst && 
    ReactElement.isValidElement(inst) && 
    !!inst.tagName);}, 


  isCompositeComponent: function (inst) {
    if (ReactTestUtils.isDOMComponent(inst)) {
      // Accessing inst.setState warns; just return false as that'll be what
      // this returns when we have DOM nodes as refs directly
      return false;}

    return inst != null && 
    typeof inst.render === 'function' && 
    typeof inst.setState === 'function';}, 


  isCompositeComponentWithType: function (inst, type) {
    if (!ReactTestUtils.isCompositeComponent(inst)) {
      return false;}

    var internalInstance = ReactInstanceMap.get(inst);
    var constructor = internalInstance.
    _currentElement.
    type;

    return constructor === type;}, 


  isCompositeComponentElement: function (inst) {
    if (!ReactElement.isValidElement(inst)) {
      return false;}

    // We check the prototype of the type that will get mounted, not the
    // instance itself. This is a future proof way of duck typing.
    var prototype = inst.type.prototype;
    return (
      typeof prototype.render === 'function' && 
      typeof prototype.setState === 'function');}, 



  isCompositeComponentElementWithType: function (inst, type) {
    var internalInstance = ReactInstanceMap.get(inst);
    var constructor = internalInstance.
    _currentElement.
    type;

    return !!(ReactTestUtils.isCompositeComponentElement(inst) && 
    constructor === type);}, 


  getRenderedChildOfCompositeComponent: function (inst) {
    if (!ReactTestUtils.isCompositeComponent(inst)) {
      return null;}

    var internalInstance = ReactInstanceMap.get(inst);
    return internalInstance._renderedComponent.getPublicInstance();}, 


  findAllInRenderedTree: function (inst, test) {
    if (!inst) {
      return [];}

    invariant(
    ReactTestUtils.isCompositeComponent(inst), 
    'findAllInRenderedTree(...): instance must be a composite component');

    return findAllInRenderedTreeInternal(ReactInstanceMap.get(inst), test);}, 


  /**
   * Finds all instance of components in the rendered tree that are DOM
   * components with the class name matching `className`.
   * @return {array} an array of all the matches.
   */
  scryRenderedDOMComponentsWithClass: function (root, classNames) {
    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
      if (ReactTestUtils.isDOMComponent(inst)) {
        var className = inst.className;
        if (typeof className !== 'string') {
          // SVG, probably.
          className = inst.getAttribute('class') || '';}

        var classList = className.split(/\s+/);

        if (!Array.isArray(classNames)) {
          invariant(
          classNames !== undefined, 
          'TestUtils.scryRenderedDOMComponentsWithClass expects a ' + 
          'className as a second argument.');

          classNames = classNames.split(/\s+/);}

        return classNames.every(function (name) {
          return classList.indexOf(name) !== -1;});}


      return false;});}, 



  /**
   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
   * and returns that one result, or throws exception if there is any other
   * number of matches besides one.
   * @return {!ReactDOMComponent} The one match.
   */
  findRenderedDOMComponentWithClass: function (root, className) {
    var all = 
    ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
    if (all.length !== 1) {
      throw new Error(
      'Did not find exactly one match (found: ' + all.length + ') ' + 
      'for class:' + className);}


    return all[0];}, 



  /**
   * Finds all instance of components in the rendered tree that are DOM
   * components with the tag name matching `tagName`.
   * @return {array} an array of all the matches.
   */
  scryRenderedDOMComponentsWithTag: function (root, tagName) {
    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
      return ReactTestUtils.isDOMComponent(inst) && 
      inst.tagName.toUpperCase() === tagName.toUpperCase();});}, 



  /**
   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
   * and returns that one result, or throws exception if there is any other
   * number of matches besides one.
   * @return {!ReactDOMComponent} The one match.
   */
  findRenderedDOMComponentWithTag: function (root, tagName) {
    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
    if (all.length !== 1) {
      throw new Error(
      'Did not find exactly one match (found: ' + all.length + ') ' + 
      'for tag:' + tagName);}


    return all[0];}, 



  /**
   * Finds all instances of components with type equal to `componentType`.
   * @return {array} an array of all the matches.
   */
  scryRenderedComponentsWithType: function (root, componentType) {
    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
      return ReactTestUtils.isCompositeComponentWithType(
      inst, 
      componentType);});}, 




  /**
   * Same as `scryRenderedComponentsWithType` but expects there to be one result
   * and returns that one result, or throws exception if there is any other
   * number of matches besides one.
   * @return {!ReactComponent} The one match.
   */
  findRenderedComponentWithType: function (root, componentType) {
    var all = ReactTestUtils.scryRenderedComponentsWithType(
    root, 
    componentType);

    if (all.length !== 1) {
      throw new Error(
      'Did not find exactly one match (found: ' + all.length + ') ' + 
      'for componentType:' + componentType);}


    return all[0];}, 


  /**
   * Pass a mocked component module to this method to augment it with
   * useful methods that allow it to be used as a dummy React component.
   * Instead of rendering as usual, the component will become a simple
   * <div> containing any provided children.
   *
   * @param {object} module the mock function object exported from a
   *                        module that defines the component to be mocked
   * @param {?string} mockTagName optional dummy root tag name to return
   *                              from render method (overrides
   *                              module.mockTagName if provided)
   * @return {object} the ReactTestUtils object (for chaining)
   */
  mockComponent: function (module, mockTagName) {
    mockTagName = mockTagName || module.mockTagName || 'div';

    module.prototype.render.mockImplementation(function () {
      return React.createElement(
      mockTagName, 
      null, 
      this.props.children);});



    return this;}, 


  /**
   * Simulates a top level event being dispatched from a raw event that occurred
   * on an `Element` node.
   * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`
   * @param {!Element} node The dom to simulate an event occurring on.
   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
   */
  simulateNativeEventOnNode: function (topLevelType, node, fakeNativeEvent) {
    fakeNativeEvent.target = node;
    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
    topLevelType, 
    fakeNativeEvent);}, 



  /**
   * Simulates a top level event being dispatched from a raw event that occurred
   * on the `ReactDOMComponent` `comp`.
   * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`.
   * @param {!ReactDOMComponent} comp
   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
   */
  simulateNativeEventOnDOMComponent: function (
  topLevelType, 
  comp, 
  fakeNativeEvent) {
    ReactTestUtils.simulateNativeEventOnNode(
    topLevelType, 
    findDOMNode(comp), 
    fakeNativeEvent);}, 



  nativeTouchData: function (x, y) {
    return { 
      touches: [
      { pageX: x, pageY: y }] };}, 




  createRenderer: function () {
    return new ReactShallowRenderer();}, 


  Simulate: null, 
  SimulateNative: {} };


/**
 * @class ReactShallowRenderer
 */
var ReactShallowRenderer = function () {
  this._instance = null;};


ReactShallowRenderer.prototype.getMountedInstance = function () {
  return this._instance ? this._instance._instance : null;};


var nextDebugID = 1;

var NoopInternalComponent = function (element) {
  this._renderedOutput = element;
  this._currentElement = element;
  this._debugID = nextDebugID++;};


NoopInternalComponent.prototype = { 

  mountComponent: function () {}, 


  receiveComponent: function (element) {
    this._renderedOutput = element;
    this._currentElement = element;}, 


  getHostNode: function () {
    return undefined;}, 


  unmountComponent: function () {}, 


  getPublicInstance: function () {
    return null;} };



var ShallowComponentWrapper = function (element) {
  // TODO: Consolidate with instantiateReactComponent
  this._debugID = nextDebugID++;
  var displayName = element.type.displayName || element.type.name || 'Unknown';
  ReactInstrumentation.debugTool.onSetDisplayName(this._debugID, displayName);

  this.construct(element);};

_assign(
ShallowComponentWrapper.prototype, 
ReactCompositeComponent.Mixin, { 
  _constructComponent: 
  ReactCompositeComponent.Mixin._constructComponentWithoutOwner, 
  _instantiateReactComponent: function (element) {
    return new NoopInternalComponent(element);}, 

  _replaceNodeWithMarkup: function () {}, 
  _renderValidatedComponent: 
  ReactCompositeComponent.Mixin.
  _renderValidatedComponentWithoutOwnerOrContext });



ReactShallowRenderer.prototype.render = function (element, context) {
  // Ensure we've done the default injections. This might not be true in the
  // case of a simple test that only requires React and the TestUtils in
  // conjunction with an inline-requires transform.
  ReactDefaultInjection.inject();

  invariant(
  ReactElement.isValidElement(element), 
  'ReactShallowRenderer render(): Invalid component element.%s', 
  typeof element === 'function' ? 
  ' Instead of passing a component class, make sure to instantiate ' + 
  'it by passing it to React.createElement.' : 
  '');

  invariant(
  typeof element.type !== 'string', 
  'ReactShallowRenderer render(): Shallow rendering works only with custom ' + 
  'components, not primitives (%s). Instead of calling `.render(el)` and ' + 
  'inspecting the rendered output, look at `el.props` directly instead.', 
  element.type);


  if (!context) {
    context = emptyObject;}

  ReactUpdates.batchedUpdates(_batchedRender, this, element, context);

  return this.getRenderOutput();};


function _batchedRender(renderer, element, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(true);
  renderer._render(element, transaction, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);}


ReactShallowRenderer.prototype.getRenderOutput = function () {
  return (
    this._instance && this._instance._renderedComponent && 
    this._instance._renderedComponent._renderedOutput || 
    null);};



ReactShallowRenderer.prototype.unmount = function () {
  if (this._instance) {
    ReactReconciler.unmountComponent(this._instance, false);}};



ReactShallowRenderer.prototype._render = function (element, transaction, context) {
  if (this._instance) {
    ReactReconciler.receiveComponent(
    this._instance, 
    element, 
    transaction, 
    context);} else 

  {
    var instance = new ShallowComponentWrapper(element);
    ReactReconciler.mountComponent(instance, transaction, null, null, context);
    this._instance = instance;}};



/**
 * Exports:
 *
 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
 * - ... (All keys from event plugin `eventTypes` objects)
 */
function makeSimulator(eventType) {
  return function (domComponentOrNode, eventData) {
    var node;
    invariant(
    !React.isValidElement(domComponentOrNode), 
    'TestUtils.Simulate expects a component instance and not a ReactElement.' + 
    'TestUtils.Simulate will not work if you are using shallow rendering.');

    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
      node = findDOMNode(domComponentOrNode);} else 
    if (domComponentOrNode.tagName) {
      node = domComponentOrNode;}


    var dispatchConfig = 
    EventPluginRegistry.eventNameDispatchConfigs[eventType];

    var fakeNativeEvent = new Event();
    fakeNativeEvent.target = node;
    // We don't use SyntheticEvent.getPooled in order to not have to worry about
    // properly destroying any properties assigned from `eventData` upon release
    var event = new SyntheticEvent(
    dispatchConfig, 
    ReactDOMComponentTree.getInstanceFromNode(node), 
    fakeNativeEvent, 
    node);

    // Since we aren't using pooling, always persist the event. This will make
    // sure it's marked and won't warn when setting additional properties.
    event.persist();
    _assign(event, eventData);

    if (dispatchConfig.phasedRegistrationNames) {
      EventPropagators.accumulateTwoPhaseDispatches(event);} else 
    {
      EventPropagators.accumulateDirectDispatches(event);}


    ReactUpdates.batchedUpdates(function () {
      EventPluginHub.enqueueEvents(event);
      EventPluginHub.processEventQueue(true);});};}




function buildSimulators() {
  ReactTestUtils.Simulate = {};

  var eventType;
  for (eventType in EventPluginRegistry.eventNameDispatchConfigs) {
    /**
     * @param {!Element|ReactDOMComponent} domComponentOrNode
     * @param {?object} eventData Fake event data to use in SyntheticEvent.
     */
    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);}}



// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
EventPluginHub.injection.injectEventPluginOrder = function () {
  oldInjectEventPluginOrder.apply(this, arguments);
  buildSimulators();};

var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
EventPluginHub.injection.injectEventPluginsByName = function () {
  oldInjectEventPlugins.apply(this, arguments);
  buildSimulators();};


buildSimulators();

/**
 * Exports:
 *
 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
 * - ... (All keys from `EventConstants.topLevelTypes`)
 *
 * Note: Top level event types are a subset of the entire set of handler types
 * (which include a broader set of "synthetic" events). For example, onDragDone
 * is a synthetic event. Except when testing an event plugin or React's event
 * handling code specifically, you probably want to use ReactTestUtils.Simulate
 * to dispatch synthetic events.
 */

function makeNativeSimulator(eventType) {
  return function (domComponentOrNode, nativeEventData) {
    var fakeNativeEvent = new Event(eventType);
    _assign(fakeNativeEvent, nativeEventData);
    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
      ReactTestUtils.simulateNativeEventOnDOMComponent(
      eventType, 
      domComponentOrNode, 
      fakeNativeEvent);} else 

    if (domComponentOrNode.tagName) {
      // Will allow on actual dom nodes.
      ReactTestUtils.simulateNativeEventOnNode(
      eventType, 
      domComponentOrNode, 
      fakeNativeEvent);}};}





Object.keys(topLevelTypes).forEach(function (eventType) {
  // Event type is stored as 'topClick' - we transform that to 'click'
  var convenienceName = eventType.indexOf('top') === 0 ? 
  eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
  /**
   * @param {!Element|ReactDOMComponent} domComponentOrNode
   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
   */
  ReactTestUtils.SimulateNative[convenienceName] = 
  makeNativeSimulator(eventType);});


module.exports = ReactTestUtils;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\classic\\element\\ReactElement.js":40,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactBrowserEventEmitter.js":65,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\ReactDOMComponentTree.js":66,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\findDOMNode.js":100,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\client\\syntheticEvents\\SyntheticEvent.js":106,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\shared\\ReactDefaultInjection.js":172,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\ReactInstrumentation.js":207,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventConstants.js":226,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginHub.js":227,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPluginRegistry.js":228,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\event\\EventPropagators.js":230,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactCompositeComponent.js":240,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js":246,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactReconciler.js":250,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactUpdates.js":255,"fbjs/lib/emptyObject":407,"fbjs/lib/invariant":414,"object-assign":425}],302:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\test\\__tests__\\ReactTestUtils-test.js';

var React;
var ReactDOM;
var ReactDOMServer;
var ReactTestUtils;

describe('ReactTestUtils', function () {

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
    ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');});


  it('should have shallow rendering', function () {
    var SomeComponent = React.createClass({ displayName: 'SomeComponent', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 32 } }, 
          React.createElement('span', { className: 'child1', __source: { fileName: _jsxFileName, lineNumber: 33 } }), 
          React.createElement('span', { className: 'child2', __source: { fileName: _jsxFileName, lineNumber: 34 } })));} });





    var shallowRenderer = ReactTestUtils.createRenderer();
    var result = shallowRenderer.render(React.createElement(SomeComponent, { __source: { fileName: _jsxFileName, lineNumber: 41 } }));

    expect(result.type).toBe('div');
    expect(result.props.children).toEqual([
    React.createElement('span', { className: 'child1', __source: { fileName: _jsxFileName, lineNumber: 45 } }), 
    React.createElement('span', { className: 'child2', __source: { fileName: _jsxFileName, lineNumber: 46 } })]);});



  it('should shallow render a functional component', function () {
    function SomeComponent() {
      return (
        React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 53 } }, 
        React.createElement('span', { className: 'child1', __source: { fileName: _jsxFileName, lineNumber: 54 } }), 
        React.createElement('span', { className: 'child2', __source: { fileName: _jsxFileName, lineNumber: 55 } })));}




    var shallowRenderer = ReactTestUtils.createRenderer();
    var result = shallowRenderer.render(React.createElement(SomeComponent, { __source: { fileName: _jsxFileName, lineNumber: 61 } }));

    expect(result.type).toBe('div');
    expect(result.props.children).toEqual([
    React.createElement('span', { className: 'child1', __source: { fileName: _jsxFileName, lineNumber: 65 } }), 
    React.createElement('span', { className: 'child2', __source: { fileName: _jsxFileName, lineNumber: 66 } })]);});



  it('should throw for invalid elements', function () {
    var SomeComponent = React.createClass({ displayName: 'SomeComponent', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 73 } });} });



    var shallowRenderer = ReactTestUtils.createRenderer();
    expect(function () {return shallowRenderer.render(SomeComponent);}).toThrowError(
    'ReactShallowRenderer render(): Invalid component element. Instead of ' + 
    'passing a component class, make sure to instantiate it by passing it ' + 
    'to React.createElement.');

    expect(function () {return shallowRenderer.render(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 83 } }));}).toThrowError(
    'ReactShallowRenderer render(): Shallow rendering works only with ' + 
    'custom components, not primitives (div). Instead of calling ' + 
    '`.render(el)` and inspecting the rendered output, look at `el.props` ' + 
    'directly instead.');});



  it('should have shallow unmounting', function () {
    var componentWillUnmount = jest.fn();

    var SomeComponent = React.createClass({ displayName: 'SomeComponent', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 96 } });}, 

      componentWillUnmount: componentWillUnmount });


    var shallowRenderer = ReactTestUtils.createRenderer();
    shallowRenderer.render(React.createElement(SomeComponent, { __source: { fileName: _jsxFileName, lineNumber: 102 } }));
    shallowRenderer.unmount();

    expect(componentWillUnmount).toBeCalled();});


  it('can shallow render to null', function () {
    var SomeComponent = React.createClass({ displayName: 'SomeComponent', 
      render: function () {
        return null;} });



    var shallowRenderer = ReactTestUtils.createRenderer();
    var result = shallowRenderer.render(React.createElement(SomeComponent, { __source: { fileName: _jsxFileName, lineNumber: 116 } }));

    expect(result).toBe(null);});


  it('can shallow render with a ref', function () {
    var SomeComponent = React.createClass({ displayName: 'SomeComponent', 
      render: function () {
        return React.createElement('div', { ref: 'hello', __source: { fileName: _jsxFileName, lineNumber: 124 } });} });



    var shallowRenderer = ReactTestUtils.createRenderer();
    // Shouldn't crash.
    shallowRenderer.render(React.createElement(SomeComponent, { __source: { fileName: _jsxFileName, lineNumber: 130 } }));});


  it('lets you update shallowly rendered components', function () {
    var SomeComponent = React.createClass({ displayName: 'SomeComponent', 
      getInitialState: function () {
        return { clicked: false };}, 


      onClick: function () {
        this.setState({ clicked: true });}, 


      render: function () {
        var className = this.state.clicked ? 'was-clicked' : '';

        if (this.props.aNew === 'prop') {
          return (
            React.createElement('a', { 
              href: '#', 
              onClick: this.onClick, 
              className: className, __source: { fileName: _jsxFileName, lineNumber: 148 } }, 'Test link'));} else 



        {
          return (
            React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 157 } }, 
            React.createElement('span', { className: 'child1', __source: { fileName: _jsxFileName, lineNumber: 158 } }), 
            React.createElement('span', { className: 'child2', __source: { fileName: _jsxFileName, lineNumber: 159 } })));}} });






    var shallowRenderer = ReactTestUtils.createRenderer();
    var result = shallowRenderer.render(React.createElement(SomeComponent, { __source: { fileName: _jsxFileName, lineNumber: 167 } }));
    expect(result.type).toBe('div');
    expect(result.props.children).toEqual([
    React.createElement('span', { className: 'child1', __source: { fileName: _jsxFileName, lineNumber: 170 } }), 
    React.createElement('span', { className: 'child2', __source: { fileName: _jsxFileName, lineNumber: 171 } })]);


    var updatedResult = shallowRenderer.render(React.createElement(SomeComponent, { aNew: 'prop', __source: { fileName: _jsxFileName, lineNumber: 174 } }));
    expect(updatedResult.type).toBe('a');

    var mockEvent = {};
    updatedResult.props.onClick(mockEvent);

    var updatedResultCausedByClick = shallowRenderer.getRenderOutput();
    expect(updatedResultCausedByClick.type).toBe('a');
    expect(updatedResultCausedByClick.props.className).toBe('was-clicked');});


  it('can access the mounted component instance', function () {
    var SimpleComponent = React.createClass({ displayName: 'SimpleComponent', 
      someMethod: function () {
        return this.props.n;}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 191 } }, this.props.n);} });



    var shallowRenderer = ReactTestUtils.createRenderer();
    shallowRenderer.render(React.createElement(SimpleComponent, { n: 5, __source: { fileName: _jsxFileName, lineNumber: 196 } }));
    expect(shallowRenderer.getMountedInstance().someMethod()).toEqual(5);});


  it('can shallowly render components with contextTypes', function () {
    var SimpleComponent = React.createClass({ displayName: 'SimpleComponent', 
      contextTypes: { 
        name: React.PropTypes.string }, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 206 } });} });



    var shallowRenderer = ReactTestUtils.createRenderer();
    var result = shallowRenderer.render(React.createElement(SimpleComponent, { __source: { fileName: _jsxFileName, lineNumber: 211 } }));
    expect(result).toEqual(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 212 } }));});


  it('can shallowly render components with ref as function', function () {
    var SimpleComponent = React.createClass({ displayName: 'SimpleComponent', 
      getInitialState: function () {
        return { clicked: false };}, 

      handleUserClick: function () {
        this.setState({ clicked: true });}, 

      render: function () {
        return (
          React.createElement('div', { 
            ref: function () {}, 
            onClick: this.handleUserClick, 
            className: this.state.clicked ? 'clicked' : '', __source: { fileName: _jsxFileName, lineNumber: 225 } }));} });





    var shallowRenderer = ReactTestUtils.createRenderer();
    shallowRenderer.render(React.createElement(SimpleComponent, { __source: { fileName: _jsxFileName, lineNumber: 235 } }));
    var result = shallowRenderer.getRenderOutput();
    expect(result.type).toEqual('div');
    expect(result.props.className).toEqual('');
    result.props.onClick();

    result = shallowRenderer.getRenderOutput();
    expect(result.type).toEqual('div');
    expect(result.props.className).toEqual('clicked');});


  it('can setState in componentWillMount when shallow rendering', function () {
    var SimpleComponent = React.createClass({ displayName: 'SimpleComponent', 
      componentWillMount: function () {
        this.setState({ groovy: 'doovy' });}, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 252 } }, this.state.groovy);} });



    var shallowRenderer = ReactTestUtils.createRenderer();
    var result = shallowRenderer.render(React.createElement(SimpleComponent, { __source: { fileName: _jsxFileName, lineNumber: 257 } }));
    expect(result).toEqual(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 258 } }, 'doovy'));});


  it('can pass context when shallowly rendering', function () {
    var SimpleComponent = React.createClass({ displayName: 'SimpleComponent', 
      contextTypes: { 
        name: React.PropTypes.string }, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 267 } }, this.context.name);} });



    var shallowRenderer = ReactTestUtils.createRenderer();
    var result = shallowRenderer.render(React.createElement(SimpleComponent, { __source: { fileName: _jsxFileName, lineNumber: 272 } }), { 
      name: 'foo' });

    expect(result).toEqual(React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 275 } }, 'foo'));});


  it('can fail context when shallowly rendering', function () {
    spyOn(console, 'error');
    var SimpleComponent = React.createClass({ displayName: 'SimpleComponent', 
      contextTypes: { 
        name: React.PropTypes.string.isRequired }, 

      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 285 } }, this.context.name);} });



    var shallowRenderer = ReactTestUtils.createRenderer();
    shallowRenderer.render(React.createElement(SimpleComponent, { __source: { fileName: _jsxFileName, lineNumber: 290 } }));
    expect(console.error.calls.count()).toBe(1);
    expect(
    console.error.calls.argsFor(0)[0].replace(/\(at .+?:\d+\)/g, '(at **)')).
    toBe(
    'Warning: Failed context type: Required context `name` was not ' + 
    'specified in `SimpleComponent`.\n' + 
    '    in SimpleComponent (at **)');});



  it('can scryRenderedDOMComponentsWithClass with TextComponent', function () {
    var Wrapper = React.createClass({ displayName: 'Wrapper', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 304 } }, 'Hello ', React.createElement('span', { __source: { fileName: _jsxFileName, lineNumber: 304 } }, 'Jim'));} });


    var renderedComponent = ReactTestUtils.renderIntoDocument(React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 307 } }));
    var scryResults = ReactTestUtils.scryRenderedDOMComponentsWithClass(
    renderedComponent, 
    'NonExistentClass');

    expect(scryResults.length).toBe(0);});


  it('can scryRenderedDOMComponentsWithClass with className contains \\n', function () {
    var Wrapper = React.createClass({ displayName: 'Wrapper', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 318 } }, 'Hello ', React.createElement('span', { className: 'x\ny', __source: { fileName: _jsxFileName, lineNumber: 318 } }, 'Jim'));} });


    var renderedComponent = ReactTestUtils.renderIntoDocument(React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 321 } }));
    var scryResults = ReactTestUtils.scryRenderedDOMComponentsWithClass(
    renderedComponent, 
    'x');

    expect(scryResults.length).toBe(1);});


  it('can scryRenderedDOMComponentsWithClass with multiple classes', function () {
    var Wrapper = React.createClass({ displayName: 'Wrapper', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 332 } }, 'Hello ', React.createElement('span', { className: 'x y z', __source: { fileName: _jsxFileName, lineNumber: 332 } }, 'Jim'));} });


    var renderedComponent = ReactTestUtils.renderIntoDocument(React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 335 } }));
    var scryResults1 = ReactTestUtils.scryRenderedDOMComponentsWithClass(
    renderedComponent, 
    'x y');

    expect(scryResults1.length).toBe(1);

    var scryResults2 = ReactTestUtils.scryRenderedDOMComponentsWithClass(
    renderedComponent, 
    'x z');

    expect(scryResults2.length).toBe(1);

    var scryResults3 = ReactTestUtils.scryRenderedDOMComponentsWithClass(
    renderedComponent, 
    ['x', 'y']);

    expect(scryResults3.length).toBe(1);

    expect(scryResults1[0]).toBe(scryResults2[0]);
    expect(scryResults1[0]).toBe(scryResults3[0]);

    var scryResults4 = ReactTestUtils.scryRenderedDOMComponentsWithClass(
    renderedComponent, 
    ['x', 'a']);

    expect(scryResults4.length).toBe(0);

    var scryResults5 = ReactTestUtils.scryRenderedDOMComponentsWithClass(
    renderedComponent, 
    ['x a']);

    expect(scryResults5.length).toBe(0);});


  it('traverses children in the correct order', function () {
    var Wrapper = React.createClass({ displayName: 'Wrapper', 
      render: function () {
        return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 373 } }, this.props.children);} });



    var container = document.createElement('div');
    ReactDOM.render(
    React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 379 } }, 
    null, 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 381 } }, 'purple')), 

    container);

    var tree = ReactDOM.render(
    React.createElement(Wrapper, { __source: { fileName: _jsxFileName, lineNumber: 386 } }, 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 387 } }, 'orange'), 
    React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 388 } }, 'purple')), 

    container);


    var log = [];
    ReactTestUtils.findAllInRenderedTree(tree, function (child) {
      if (ReactTestUtils.isDOMComponent(child)) {
        log.push(ReactDOM.findDOMNode(child).textContent);}});



    // Should be document order, not mount order (which would be purple, orange)
    expect(log).toEqual(['orangepurple', 'orange', 'purple']);});


  it('should support injected wrapper components as DOM components', function () {
    var getTestDocument = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\getTestDocument.js');

    var injectedDOMComponents = [
    'button', 
    'form', 
    'iframe', 
    'img', 
    'input', 
    'option', 
    'select', 
    'textarea'];


    injectedDOMComponents.forEach(function (type) {
      var testComponent = ReactTestUtils.renderIntoDocument(
      React.createElement(type));

      expect(testComponent.tagName).toBe(type.toUpperCase());
      expect(ReactTestUtils.isDOMComponent(testComponent)).toBe(true);});


    // Full-page components (html, head, body) can't be rendered into a div
    // directly...
    var Root = React.createClass({ displayName: 'Root', 
      render: function () {
        return (
          React.createElement('html', { ref: 'html', __source: { fileName: _jsxFileName, lineNumber: 431 } }, 
          React.createElement('head', { ref: 'head', __source: { fileName: _jsxFileName, lineNumber: 432 } }, 
          React.createElement('title', { __source: { fileName: _jsxFileName, lineNumber: 433 } }, 'hello')), 

          React.createElement('body', { ref: 'body', __source: { fileName: _jsxFileName, lineNumber: 435 } }, 'hello, world')));} });







    var markup = ReactDOMServer.renderToString(React.createElement(Root, { __source: { fileName: _jsxFileName, lineNumber: 443 } }));
    var testDocument = getTestDocument(markup);
    var component = ReactDOM.render(React.createElement(Root, { __source: { fileName: _jsxFileName, lineNumber: 445 } }), testDocument);

    expect(component.refs.html.tagName).toBe('HTML');
    expect(component.refs.head.tagName).toBe('HEAD');
    expect(component.refs.body.tagName).toBe('BODY');
    expect(ReactTestUtils.isDOMComponent(component.refs.html)).toBe(true);
    expect(ReactTestUtils.isDOMComponent(component.refs.head)).toBe(true);
    expect(ReactTestUtils.isDOMComponent(component.refs.body)).toBe(true);});


  it('should change the value of an input field', function () {
    var obj = { 
      handler: function (e) {
        e.persist();} };


    spyOn(obj, 'handler').and.callThrough();
    var container = document.createElement('div');
    var instance = ReactDOM.render(React.createElement('input', { type: 'text', onChange: obj.handler, __source: { fileName: _jsxFileName, lineNumber: 463 } }), container);

    var node = ReactDOM.findDOMNode(instance);
    node.value = 'giraffe';
    ReactTestUtils.Simulate.change(node);

    expect(obj.handler).toHaveBeenCalledWith(jasmine.objectContaining({ target: node }));});


  it('should change the value of an input field in a component', function () {
    var SomeComponent = React.createClass({ displayName: 'SomeComponent', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 476 } }, 
          React.createElement('input', { type: 'text', ref: 'input', onChange: this.props.handleChange, __source: { fileName: _jsxFileName, lineNumber: 477 } })));} });





    var obj = { 
      handler: function (e) {
        e.persist();} };


    spyOn(obj, 'handler').and.callThrough();
    var container = document.createElement('div');
    var instance = ReactDOM.render(React.createElement(SomeComponent, { handleChange: obj.handler, __source: { fileName: _jsxFileName, lineNumber: 490 } }), container);

    var node = ReactDOM.findDOMNode(instance.refs.input);
    node.value = 'zebra';
    ReactTestUtils.Simulate.change(node);

    expect(obj.handler).toHaveBeenCalledWith(jasmine.objectContaining({ target: node }));});


  it('should throw when attempting to use ReactTestUtils.Simulate with shallow rendering', function () {
    var SomeComponent = React.createClass({ displayName: 'SomeComponent', 
      render: function () {
        return (
          React.createElement('div', { onClick: this.props.handleClick, __source: { fileName: _jsxFileName, lineNumber: 503 } }, 'hello, world.'));} });





    var handler = jasmine.createSpy('spy');
    var shallowRenderer = ReactTestUtils.createRenderer();
    var result = shallowRenderer.render(React.createElement(SomeComponent, { handleClick: handler, __source: { fileName: _jsxFileName, lineNumber: 511 } }));

    expect(function () {return ReactTestUtils.Simulate.click(result);}).toThrowError(
    'TestUtils.Simulate expects a component instance and not a ReactElement.' + 
    'TestUtils.Simulate will not work if you are using shallow rendering.');

    expect(handler).not.toHaveBeenCalled();});


  it('should not warn when simulating events with extra properties', function () {
    spyOn(console, 'error');

    var CLIENT_X = 100;

    var Component = React.createClass({ displayName: 'Component', 
      handleClick: function (e) {
        expect(e.clientX).toBe(CLIENT_X);}, 

      render: function () {
        return React.createElement('div', { onClick: this.handleClick, __source: { fileName: _jsxFileName, lineNumber: 530 } });} });



    var element = document.createElement('div');
    var instance = ReactDOM.render(React.createElement(Component, { __source: { fileName: _jsxFileName, lineNumber: 535 } }), element);
    ReactTestUtils.Simulate.click(
    ReactDOM.findDOMNode(instance), 
    { clientX: CLIENT_X });

    expect(console.error.calls.count()).toBe(0);});


  it('can scry with stateless components involved', function () {
    var Stateless = function () {return React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 544 } }, React.createElement('hr', { __source: { fileName: _jsxFileName, lineNumber: 544 } }));};
    var SomeComponent = React.createClass({ displayName: 'SomeComponent', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 548 } }, 
          React.createElement(Stateless, { __source: { fileName: _jsxFileName, lineNumber: 549 } }), 
          React.createElement('hr', { __source: { fileName: _jsxFileName, lineNumber: 550 } })));} });





    var inst = ReactTestUtils.renderIntoDocument(React.createElement(SomeComponent, { __source: { fileName: _jsxFileName, lineNumber: 556 } }));
    var hrs = ReactTestUtils.scryRenderedDOMComponentsWithTag(inst, 'hr');
    expect(hrs.length).toBe(2);});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\getTestDocument.js":305}],303:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails react-core
 */

'use strict';var _jsxFileName = 'f:\\GitHubRepos\\react\\src\\test\\__tests__\\reactComponentExpect-test.js';

var React;
var ReactTestUtils;
var reactComponentExpect;

describe('reactComponentExpect', function () {

  beforeEach(function () {
    React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');
    ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');
    reactComponentExpect = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js');});


  it('should detect text components', function () {
    var SomeComponent = React.createClass({ displayName: 'SomeComponent', 
      render: function () {
        return (
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 30 } }, 
          React.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 31 } }, 'This is a div'), 
          'This is text'));} });





    var component = ReactTestUtils.renderIntoDocument(React.createElement(SomeComponent, { __source: { fileName: _jsxFileName, lineNumber: 38 } }));

    reactComponentExpect(component).
    expectRenderedChild().
    expectRenderedChildAt(1).
    toBeTextComponentWithValue('This is text');});});
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\reactComponentExpect.js":306}],304:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createHierarchyRenderer
 */

'use strict';

var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');

/**
 * Creates a render method that makes it easier to create, render, and inspect a
 * hierarchy of mock React component classes.
 *
 * A component class is created for each of the supplied render methods. Each
 * render method is invoked with the classes created using the render methods
 * that come after it in the supplied list of render methods.
 *
 *   var renderHierarchy = createHierarchyRenderer(
 *     function ComponentA(ComponentB, ComponentC) {...},
 *     function ComponentB(ComponentC) {...},
 *     function ComponentC() {...}
 *   );
 *
 * When the hierarchy is invoked, a two-dimensional array is returned. Each
 * array corresponds to a supplied render method and contains the instances
 * returned by that render method in the order it was invoked.
 *
 *   var instances = renderHierarchy(
 *     function(ComponentA[, ComponentB, ComponentC]) {
 *       ReactDOM.render(<ComponentA />, ...);
 *     })
 *   );
 *   instances[0][0]; // First return value of first render method.
 *   instances[1][0]; // First return value of second render method.
 *   instances[1][1]; // Second return value of second render method.
 *
 * Refs should be used to reference components that are not the return value of
 * render methods.
 *
 *   expect(instances[0][0].refs.X).toBe(...);
 *
 * NOTE: The component classes created for each render method are re-used for
 * each invocation of the hierarchy renderer. If new classes are needed, you
 * should re-execute `createHierarchyRenderer` with the same arguments.
 *
 * @param {array<function>} ...renderMethods
 * @return {function}
 */
function createHierarchyRenderer() {for (var _len = arguments.length, renderMethods = Array(_len), _key = 0; _key < _len; _key++) {renderMethods[_key] = arguments[_key];}
  var instances;
  var Components = renderMethods.reduceRight(
  function (ComponentsAccumulator, renderMethod, depth) {
    var Component = React.createClass({ 
      displayName: renderMethod.name, 
      render: function () {
        instances[depth].push(this);
        return renderMethod.apply(this, ComponentsAccumulator);} });


    return [Component].concat(ComponentsAccumulator);}, 

  []);

  /**
   * @param {function} renderComponent
   * @return {array<array<*>>}
   */
  function renderHierarchy(renderComponent) {
    instances = renderMethods.map(function () {return [];});
    renderComponent.apply(null, Components);
    return instances;}

  return renderHierarchy;}


module.exports = createHierarchyRenderer;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25}],305:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTestDocument
 */

'use strict';

function getTestDocument(markup) {
  document.open();
  document.write(
  markup || '<!doctype html><html><meta charset=utf-8><title>test doc</title>');

  document.close();
  return document;}


module.exports = getTestDocument;
},{}],306:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule reactComponentExpect
 */

'use strict';var _assign = require('object-assign');

var ReactInstanceMap = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js');
var ReactTestUtils = require('f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js');

var invariant = require('fbjs/lib/invariant');

function reactComponentExpect(instance) {
  if (instance instanceof reactComponentExpectInternal) {
    return instance;}


  if (!(this instanceof reactComponentExpect)) {
    return new reactComponentExpect(instance);}


  expect(instance).not.toBeNull();
  expect(instance).not.toBeUndefined();

  invariant(
  ReactTestUtils.isCompositeComponent(instance), 
  'reactComponentExpect(...): instance must be a composite component');

  var internalInstance = ReactInstanceMap.get(instance);

  expect(typeof internalInstance).toBe('object');
  expect(typeof internalInstance.constructor).toBe('function');
  expect(ReactTestUtils.isElement(internalInstance)).toBe(false);

  return new reactComponentExpectInternal(internalInstance);}


function reactComponentExpectInternal(internalInstance) {
  this._instance = internalInstance;}


_assign(reactComponentExpectInternal.prototype, { 
  // Getters -------------------------------------------------------------------

  /**
   * @instance: Retrieves the backing instance.
   */
  instance: function () {
    return this._instance.getPublicInstance();}, 


  /**
   * There are two types of components in the world.
   * - A component created via React.createClass() - Has a single child
   *   subComponent - the return value from the .render() function. This
   *   function @subComponent expects that this._instance is component created
   *   with React.createClass().
   * - A primitive DOM component - which has many renderedChildren, each of
   *   which may have a name that is unique with respect to its siblings. This
   *   method will fail if this._instance is a primitive component.
   *
   * TL;DR: An instance may have a subComponent (this._renderedComponent) or
   * renderedChildren, but never both. Neither will actually show up until you
   * render the component (simply instantiating is not enough).
   */
  expectRenderedChild: function () {
    this.toBeCompositeComponent();
    var child = this._instance._renderedComponent;
    // TODO: Hide ReactEmptyComponent instances here?
    return new reactComponentExpectInternal(child);}, 


  /**
   * The nth child of a DOMish component instance that is not falsy.
   */
  expectRenderedChildAt: function (childIndex) {
    // Currently only dom components have arrays of children, but that will
    // change soon.
    this.toBeDOMComponent();
    var renderedChildren = 
    this._instance._renderedChildren || {};
    for (var name in renderedChildren) {
      if (!renderedChildren.hasOwnProperty(name)) {
        continue;}

      if (renderedChildren[name]) {
        if (renderedChildren[name]._mountIndex === childIndex) {
          return new reactComponentExpectInternal(renderedChildren[name]);}}}



    throw new Error('Child:' + childIndex + ' is not found');}, 


  toBeDOMComponentWithChildCount: function (count) {
    this.toBeDOMComponent();
    var renderedChildren = this._instance._renderedChildren;
    expect(renderedChildren).toBeTruthy();
    expect(Object.keys(renderedChildren).length).toBe(count);
    return this;}, 


  toBeDOMComponentWithNoChildren: function () {
    this.toBeDOMComponent();
    expect(this._instance._renderedChildren).toBeFalsy();
    return this;}, 


  // Matchers ------------------------------------------------------------------

  toBeComponentOfType: function (constructor) {
    expect(
    this._instance._currentElement.type === constructor).
    toBe(true);
    return this;}, 


  /**
   * A component that is created with React.createClass. Just duck typing
   * here.
   */
  toBeCompositeComponent: function () {
    expect(
    typeof this.instance() === 'object' && 
    typeof this.instance().render === 'function').
    toBe(true);
    return this;}, 


  toBeCompositeComponentWithType: function (constructor) {
    this.toBeCompositeComponent();
    expect(
    this._instance._currentElement.type === constructor).
    toBe(true);
    return this;}, 


  toBeTextComponentWithValue: function (val) {
    var elementType = typeof this._instance._currentElement;
    expect(elementType === 'string' || elementType === 'number').toBe(true);
    expect(this._instance._stringText).toBe(val);
    return this;}, 


  toBeEmptyComponent: function () {
    var element = this._instance._currentElement;
    return element === null || element === false;}, 


  toBePresent: function () {
    expect(this.instance()).toBeTruthy();
    return this;}, 


  /**
   * A terminal type of component representing some virtual dom node. Just duck
   * typing here.
   */
  toBeDOMComponent: function () {
    expect(ReactTestUtils.isDOMComponent(this.instance())).toBe(true);
    return this;}, 


  /**
   * @deprecated
   * @see toBeComponentOfType
   */
  toBeDOMComponentWithTag: function (tag) {
    this.toBeDOMComponent();
    expect(this.instance().tagName).toBe(tag.toUpperCase());
    return this;}, 


  /**
   * Check that internal state values are equal to a state of expected values.
   */
  scalarStateEqual: function (stateNameToExpectedValue) {
    expect(this.instance()).toBeTruthy();
    for (var stateName in stateNameToExpectedValue) {
      if (!stateNameToExpectedValue.hasOwnProperty(stateName)) {
        continue;}

      expect(this.instance().state[stateName]).
      toEqual(stateNameToExpectedValue[stateName]);}

    return this;}, 


  /**
   * Check a set of props are equal to a set of expected values - only works
   * with scalars.
   */
  scalarPropsEqual: function (propNameToExpectedValue) {
    expect(this.instance()).toBeTruthy();
    for (var propName in propNameToExpectedValue) {
      if (!propNameToExpectedValue.hasOwnProperty(propName)) {
        continue;}

      expect(this.instance().props[propName]).
      toEqual(propNameToExpectedValue[propName]);}

    return this;}, 


  /**
   * Check a set of props are equal to a set of expected values - only works
   * with scalars.
   */
  scalarContextEqual: function (contextNameToExpectedValue) {
    expect(this.instance()).toBeTruthy();
    for (var contextName in contextNameToExpectedValue) {
      if (!contextNameToExpectedValue.hasOwnProperty(contextName)) {
        continue;}

      expect(this.instance().context[contextName]).
      toEqual(contextNameToExpectedValue[contextName]);}

    return this;} });



module.exports = reactComponentExpect;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\shared\\stack\\reconciler\\ReactInstanceMap.js":246,"f:\\GitHubRepos\\react\\browsertests\\src\\test\\ReactTestUtils.js":301,"fbjs/lib/invariant":414,"object-assign":425}],307:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUMDEntry
 */

'use strict';var _assign = require('object-assign');

var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
var ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');
var React = require('f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js');


// `version` will be added here by ReactIsomorphic.
var ReactUMDEntry = _assign({ 
  __SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactDOM, 
  __SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactDOMServer }, 
React);

module.exports = ReactUMDEntry;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\isomorphic\\React.js":25,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"object-assign":425}],308:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactWithAddonsUMDEntry
 */

'use strict';var _assign = require('object-assign');

var ReactDOM = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js');
var ReactDOMServer = require('f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js');
var ReactWithAddons = require('f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactWithAddons.js');


// `version` will be added here by ReactIsomorphic.
var ReactWithAddonsUMDEntry = _assign({ 
  __SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactDOM, 
  __SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactDOMServer }, 
ReactWithAddons);

module.exports = ReactWithAddonsUMDEntry;
},{"f:\\GitHubRepos\\react\\browsertests\\src\\addons\\ReactWithAddons.js":4,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOM.js":62,"f:\\GitHubRepos\\react\\browsertests\\src\\renderers\\dom\\ReactDOMServer.js":63,"object-assign":425}],309:[function(require,module,exports){
module.exports = function(mixins){
	var proto = {};
	for (var i = 0, l = arguments.length; i < l; i++){
		var mixin = arguments[i];
		if (typeof mixin == 'function') mixin = mixin.prototype;
		for (var key in mixin) proto[key] = mixin[key];
	}
	if (!proto.initialize) proto.initialize = function(){};
	proto.constructor = function(a,b,c,d,e,f,g,h){
		return new proto.initialize(a,b,c,d,e,f,g,h);
	};
	proto.constructor.prototype = proto.initialize.prototype = proto;
	return proto.constructor;
};

},{}],310:[function(require,module,exports){
var colors = {
	maroon: '#800000', red: '#ff0000', orange: '#ffA500', yellow: '#ffff00', olive: '#808000',
	purple: '#800080', fuchsia: "#ff00ff", white: '#ffffff', lime: '#00ff00', green: '#008000',
	navy: '#000080', blue: '#0000ff', aqua: '#00ffff', teal: '#008080',
	black: '#000000', silver: '#c0c0c0', gray: '#808080'
};

var map = function(array, fn){
	var results = [];
	for (var i = 0, l = array.length; i < l; i++)
		results[i] = fn(array[i], i);
	return results;
};

var Color = function(color, type){
	
	if (color.isColor){
		
		this.red = color.red;
		this.green = color.green;
		this.blue = color.blue;
		this.alpha = color.alpha;

	} else {
		
		var namedColor = colors[color];
		if (namedColor){
			color = namedColor;
			type = 'hex';
		}

		switch (typeof color){
			case 'string': if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex'; break;
			case 'object': type = type || 'rgb'; color = color.toString(); break;
			case 'number': type = 'hex'; color = color.toString(16); break;
		}

		color = Color['parse' + type.toUpperCase()](color);
		this.red = color[0];
		this.green = color[1];
		this.blue = color[2];
		this.alpha = color[3];
	}
	
	this.isColor = true;

};

var limit = function(number, min, max){
	return Math.min(max, Math.max(min, number));
};

var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

Color.parseRGB = function(color){
	return map(color.match(listMatch).slice(1), function(bit, i){
		if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
		return (i < 3) ? Math.round(((bit %= 256) < 0) ? bit + 256 : bit) : limit(((bit === '') ? 1 : Number(bit)), 0, 1);
	});
};
	
Color.parseHEX = function(color){
	if (color.length == 1) color = color + color + color;
	return map(color.match(hexMatch).slice(1), function(bit, i){
		if (i == 3) return (bit) ? parseInt(bit, 16) / 255 : 1;
		return parseInt((bit.length == 1) ? bit + bit : bit, 16);
	});
};
	
Color.parseHSB = function(color){
	var hsb = map(color.match(listMatch).slice(1), function(bit, i){
		if (bit) bit = parseFloat(bit);
		if (i === 0) return Math.round(((bit %= 360) < 0) ? (bit + 360) : bit);
		else if (i < 3) return limit(Math.round(bit), 0, 100);
		else return limit(((bit === '') ? 1 : Number(bit)), 0, 1);
	});
	
	var a = hsb[3];
	var br = Math.round(hsb[2] / 100 * 255);
	if (hsb[1] == 0) return [br, br, br, a];
		
	var hue = hsb[0];
	var f = hue % 60;
	var p = Math.round((hsb[2] * (100 - hsb[1])) / 10000 * 255);
	var q = Math.round((hsb[2] * (6000 - hsb[1] * f)) / 600000 * 255);
	var t = Math.round((hsb[2] * (6000 - hsb[1] * (60 - f))) / 600000 * 255);

	switch (Math.floor(hue / 60)){
		case 0: return [br, t, p, a];
		case 1: return [q, br, p, a];
		case 2: return [p, br, t, a];
		case 3: return [p, q, br, a];
		case 4: return [t, p, br, a];
		default: return [br, p, q, a];
	}
};

Color.parseHSL = function(color){
	var hsb = map(color.match(listMatch).slice(1), function(bit, i){
		if (bit) bit = parseFloat(bit);
		if (i === 0) return Math.round(((bit %= 360) < 0) ? (bit + 360) : bit);
		else if (i < 3) return limit(Math.round(bit), 0, 100);
		else return limit(((bit === '') ? 1 : Number(bit)), 0, 1);
	});

	var h = hsb[0] / 60;
	var s = hsb[1] / 100;
	var l = hsb[2] / 100;
	var a = hsb[3];
	
	var c = (1 - Math.abs(2 * l - 1)) * s;
	var x = c * (1 - Math.abs(h % 2 - 1));
	var m = l - c / 2;
	
	var p = Math.round((c + m) * 255);
	var q = Math.round((x + m) * 255);
	var t = Math.round((m) * 255);

	switch (Math.floor(h)){
		case 0: return [p, q, t, a];
		case 1: return [q, p, t, a];
		case 2: return [t, p, q, a];
		case 3: return [t, q, p, a];
		case 4: return [q, t, p, a];
		default: return [p, t, q, a];
	}
};

var toString = function(type, array){
	if (array[3] != 1) type += 'a';
	else array.pop();
	return type + '(' + array.join(', ') + ')';
};

Color.prototype = {

	toHSB: function(array){
		var red = this.red, green = this.green, blue = this.blue, alpha = this.alpha;

		var max = Math.max(red, green, blue), min = Math.min(red, green, blue), delta = max - min;
		var hue = 0, saturation = (delta != 0) ? delta / max : 0, brightness = max / 255;
		if (saturation){
			var rr = (max - red) / delta, gr = (max - green) / delta, br = (max - blue) / delta;
			hue = (red == max) ? br - gr : (green == max) ? 2 + rr - br : 4 + gr - rr;
			if ((hue /= 6) < 0) hue++;
		}

		var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];

		return (array) ? hsb : toString('hsb', hsb);
	},

	toHSL: function(array){
		var red = this.red, green = this.green, blue = this.blue, alpha = this.alpha;

		var max = Math.max(red, green, blue), min = Math.min(red, green, blue), delta = max - min;
		var hue = 0, saturation = (delta != 0) ? delta / (255 - Math.abs((max + min) - 255)) : 0, lightness = (max + min) / 512;
		if (saturation){
			var rr = (max - red) / delta, gr = (max - green) / delta, br = (max - blue) / delta;
			hue = (red == max) ? br - gr : (green == max) ? 2 + rr - br : 4 + gr - rr;
			if ((hue /= 6) < 0) hue++;
		}

		var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];

		return (array) ? hsl : toString('hsl', hsl);
	},

	toHEX: function(array){

		var a = this.alpha;
		var alpha = ((a = Math.round((a * 255)).toString(16)).length == 1) ? a + a : a;
		
		var hex = map([this.red, this.green, this.blue], function(bit){
			bit = bit.toString(16);
			return (bit.length == 1) ? '0' + bit : bit;
		});
		
		return (array) ? hex.concat(alpha) : '#' + hex.join('') + ((alpha == 'ff') ? '' : alpha);
	},
	
	toRGB: function(array){
		var rgb = [this.red, this.green, this.blue, this.alpha];
		return (array) ? rgb : toString('rgb', rgb);
	}

};

Color.prototype.toString = Color.prototype.toRGB;

Color.hex = function(hex){
	return new Color(hex, 'hex');
};

if (this.hex == null) this.hex = Color.hex;

Color.hsb = function(h, s, b, a){
	return new Color([h || 0, s || 0, b || 0, (a == null) ? 1 : a], 'hsb');
};

if (this.hsb == null) this.hsb = Color.hsb;

Color.hsl = function(h, s, l, a){
	return new Color([h || 0, s || 0, l || 0, (a == null) ? 1 : a], 'hsl');
};

if (this.hsl == null) this.hsl = Color.hsl;

Color.rgb = function(r, g, b, a){
	return new Color([r || 0, g || 0, b || 0, (a == null) ? 1 : a], 'rgb');
};

if (this.rgb == null) this.rgb = Color.rgb;

Color.detach = function(color){
	color = new Color(color);
	return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
};

module.exports = Color;
},{}],311:[function(require,module,exports){
var Class = require('./class');

module.exports = Class({
	
	initialize: function(path){
		this.reset().push(path);
	},

	/* parser */
	
	push: function(){
		var p = Array.prototype.join.call(arguments, ' ')
			.match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
		if (!p) return this;

		var last, cmd = p[0], i = 1;
		while (cmd){
			switch (cmd){
				case 'm': this.move(p[i++], p[i++]); break;
				case 'l': this.line(p[i++], p[i++]); break;
				case 'c': this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]); break;
				case 's': this.curve(p[i++], p[i++], null, null, p[i++], p[i++]); break;
				case 'q': this.curve(p[i++], p[i++], p[i++], p[i++]); break;
				case 't': this.curve(p[i++], p[i++]); break;
				case 'a': this.arc(p[i+5], p[i+6], p[i], p[i+1], p[i+3], !+p[i+4], p[i+2]); i += 7; break;
				case 'h': this.line(p[i++], 0); break;
				case 'v': this.line(0, p[i++]); break;

				case 'M': this.moveTo(p[i++], p[i++]); break;
				case 'L': this.lineTo(p[i++], p[i++]); break;
				case 'C': this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]); break;
				case 'S': this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]); break;
				case 'Q': this.curveTo(p[i++], p[i++], p[i++], p[i++]); break;
				case 'T': this.curveTo(p[i++], p[i++]); break;
				case 'A': this.arcTo(p[i+5], p[i+6], p[i], p[i+1], p[i+3], !+p[i+4], p[i+2]); i += 7; break;
				case 'H': this.lineTo(p[i++], this.penY); break;
				case 'V': this.lineTo(this.penX, p[i++]); break;
				
				case 'Z': case 'z': this.close(); break;
				default: cmd = last; i--; continue;
			}

			last = cmd;
			if (last == 'm') last = 'l';
			else if (last == 'M') last = 'L';
			cmd = p[i++];
		}
		return this;
	},

	/* utility methods */

	reset: function(){
		this.penX = this.penY = 0;
		this.penDownX = this.penDownY = null;
		this._pivotX = this._pivotY = 0;
		this.onReset();
		return this;
	},
	
	move: function(x,y){
		this.onMove(this.penX, this.penY, this._pivotX = this.penX += (+x), this._pivotY = this.penY += (+y));
		return this;
	},
	moveTo: function(x,y){
		this.onMove(this.penX, this.penY, this._pivotX = this.penX = (+x), this._pivotY = this.penY = (+y));
		return this;
	},

	line: function(x,y){
		return this.lineTo(this.penX + (+x), this.penY + (+y));
	},
	lineTo: function(x,y){
		if (this.penDownX == null){ this.penDownX = this.penX; this.penDownY = this.penY; }
		this.onLine(this.penX, this.penY, this._pivotX = this.penX = (+x), this._pivotY = this.penY = (+y));
		return this;
	},
	
	curve: function(c1x, c1y, c2x, c2y, ex, ey){
		var x = this.penX, y = this.penY;
		return this.curveTo(
			x + (+c1x), y + (+c1y),
			c2x == null ? null : x + (+c2x),
			c2y == null ? null : y + (+c2y),
			ex == null ? null : x + (+ex),
			ey == null ? null : y + (+ey)
		);
	},
	curveTo: function(c1x, c1y, c2x, c2y, ex, ey){
		var x = this.penX, y = this.penY;
		if (c2x == null){
			c2x = +c1x; c2y = +c1y;
			c1x = (x * 2) - (this._pivotX || 0); c1y = (y * 2) - (this._pivotY || 0);
		}
		if (ex == null){
			this._pivotX = +c1x; this._pivotY = +c1y;
			ex = +c2x; ey = +c2y;
			c2x = (ex + (+c1x) * 2) / 3; c2y = (ey + (+c1y) * 2) / 3;
			c1x = (x + (+c1x) * 2) / 3; c1y = (y + (+c1y) * 2) / 3;
		} else {
			this._pivotX = +c2x; this._pivotY = +c2y;
		}
		if (this.penDownX == null){ this.penDownX = x; this.penDownY = y; }
		this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
		return this;
	},
	
	arc: function(x, y, rx, ry, outer, counterClockwise, rotation){
		return this.arcTo(this.penX + (+x), this.penY + (+y), rx, ry, outer, counterClockwise, rotation);
	},
	arcTo: function(x, y, rx, ry, outer, counterClockwise, rotation){
		ry = Math.abs(+ry || +rx || (+y - this.penY));
		rx = Math.abs(+rx || (+x - this.penX));

		if (!rx || !ry || (x == this.penX && y == this.penY)) return this.lineTo(x, y);

		var tX = this.penX, tY = this.penY, clockwise = !+counterClockwise, large = !!+outer;

		var rad = rotation ? rotation * Math.PI / 180 : 0, cos = Math.cos(rad), sin = Math.sin(rad);
		x -= tX; y -= tY;
		
		// Ellipse Center
		var cx = cos * x / 2 + sin * y / 2,
			cy = -sin * x / 2 + cos * y / 2,
			rxry = rx * rx * ry * ry,
			rycx = ry * ry * cx * cx,
			rxcy = rx * rx * cy * cy,
			a = rxry - rxcy - rycx;

		if (a < 0){
			a = Math.sqrt(1 - a / rxry);
			rx *= a; ry *= a;
			cx = x / 2; cy = y / 2;
		} else {
			a = Math.sqrt(a / (rxcy + rycx));
			if (large == clockwise) a = -a;
			var cxd = -a * cy * rx / ry,
			    cyd =  a * cx * ry / rx;
			cx = cos * cxd - sin * cyd + x / 2;
			cy = sin * cxd + cos * cyd + y / 2;
		}

		// Rotation + Scale Transform
		var xx =  cos / rx, yx = sin / rx,
		    xy = -sin / ry, yy = cos / ry;

		// Start and End Angle
		var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
		    ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));

		cx += tX; cy += tY;
		x += tX; y += tY;

		// Circular Arc
		if (this.penDownX == null){ this.penDownX = this.penX; this.penDownY = this.penY; }
		this.onArc(
			tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y,
			cx, cy, rx, ry, sa, ea, !clockwise, rotation
		);
		return this;
	},

	counterArc: function(x, y, rx, ry, outer){
		return this.arc(x, y, rx, ry, outer, true);
	},
	counterArcTo: function(x, y, rx, ry, outer){
		return this.arcTo(x, y, rx, ry, outer, true);
	},

	close: function(){
		if (this.penDownX != null){
			this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
			this.penDownX = null;
		}
		return this;
	},

	/* overridable handlers */
	
	onReset: function(){
	},

	onMove: function(sx, sy, ex, ey){
	},

	onLine: function(sx, sy, ex, ey){
		this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
	},

	onBezierCurve: function(sx, sy, c1x, c1y, c2x, c2y, ex, ey){
		var gx = ex - sx, gy = ey - sy,
			g = gx * gx + gy * gy,
			v1, v2, cx, cy, u;

		cx = c1x - sx; cy = c1y - sy;
		u = cx * gx + cy * gy;

		if (u > g){
			cx -= gx;
			cy -= gy;
		} else if (u > 0 && g != 0){
			cx -= u/g * gx;
			cy -= u/g * gy;
		}

		v1 = cx * cx + cy * cy;

		cx = c2x - sx; cy = c2y - sy;
		u = cx * gx + cy * gy;

		if (u > g){
			cx -= gx;
			cy -= gy;
		} else if (u > 0 && g != 0){
			cx -= u/g * gx;
			cy -= u/g * gy;
		}

		v2 = cx * cx + cy * cy;

		if (v1 < 0.01 && v2 < 0.01){
			this.onLine(sx, sy, ex, ey);
			return;
		}

		// Avoid infinite recursion
		if (isNaN(v1) || isNaN(v2)){
			throw new Error('Bad input');
		}

		// Split curve
		var s1x =   (c1x + c2x) * 0.5,   s1y =   (c1y + c2y) * 0.5,
		    l1x =   (c1x + sx)  * 0.5,   l1y =   (c1y + sy)  * 0.5,
		    l2x =   (l1x + s1x) * 0.5,   l2y =   (l1y + s1y) * 0.5,
		    r2x =   (ex + c2x)  * 0.5,   r2y =   (ey + c2y)  * 0.5,
		    r1x =   (r2x + s1x) * 0.5,   r1y =   (r2y + s1y) * 0.5,
		    l2r1x = (l2x + r1x) * 0.5,   l2r1y = (l2y + r1y) * 0.5;

		// TODO: Manual stack if necessary. Currently recursive without tail optimization.
		this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
		this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
	},

	onArc: function(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation){
		// Inverse Rotation + Scale Transform
		var rad = rotation ? rotation * Math.PI / 180 : 0, cos = Math.cos(rad), sin = Math.sin(rad),
			xx = cos * rx, yx = -sin * ry,
		    xy = sin * rx, yy =  cos * ry;

		// Bezier Curve Approximation
		var arc = ea - sa;
		if (arc < 0 && !ccw) arc += Math.PI * 2;
		else if (arc > 0 && ccw) arc -= Math.PI * 2;

		var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
		    step = arc / n,
		    k = (4 / 3) * Math.tan(step / 4);

		var x = Math.cos(sa), y = Math.sin(sa);

		for (var i = 0; i < n; i++){
			var cp1x = x - k * y, cp1y = y + k * x;

			sa += step;
			x = Math.cos(sa); y = Math.sin(sa);

			var cp2x = x + k * y, cp2y = y - k * x;

			this.onBezierCurve(
				sx, sy,
				cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y,
				cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y,
				(sx = (cx + xx * x + yx * y)), (sy = (cy + xy * x + yy * y))
			);
		}
	},

	onClose: function(sx, sy, ex, ey){
		this.onLine(sx, sy, ex, ey);
	}

});
},{"./class":309}],312:[function(require,module,exports){
var Class = require('./class');

function Transform(xx, yx, xy, yy, x, y){
	if (xx && typeof xx == 'object'){
		yx = xx.yx; yy = xx.yy; y = xx.y;
		xy = xx.xy; x = xx.x; xx = xx.xx;
	}
	this.xx = xx == null ? 1 : xx;
	this.yx = yx || 0;
	this.xy = xy || 0;
	this.yy = yy == null ? 1 : yy;
	this.x = (x == null ? this.x : x) || 0;
	this.y = (y == null ? this.y : y) || 0;
	this._transform();
	return this;
};

module.exports = Class({

	initialize: Transform,

	_transform: function(){},

	xx: 1, yx: 0, x: 0,
	xy: 0, yy: 1, y: 0,

	transform: function(xx, yx, xy, yy, x, y){
		var m = this;
		if (xx && typeof xx == 'object'){
			yx = xx.yx; yy = xx.yy; y = xx.y;
			xy = xx.xy; x = xx.x; xx = xx.xx;
		}
		if (!x) x = 0;
		if (!y) y = 0;
		return this.transformTo(
			m.xx * xx + m.xy * yx,
			m.yx * xx + m.yy * yx,
			m.xx * xy + m.xy * yy,
			m.yx * xy + m.yy * yy,
			m.xx * x + m.xy * y + m.x,
			m.yx * x + m.yy * y + m.y
		);
	},

	transformTo: Transform,

	translate: function(x, y){
		return this.transform(1, 0, 0, 1, x, y);
	},

	move: function(x, y){
		this.x += x || 0;
		this.y += y || 0;
		this._transform();
		return this;
	},

	scale: function(x, y){
		if (y == null) y = x;
		return this.transform(x, 0, 0, y, 0, 0);
	},

	rotate: function(deg, x, y){
		if (x == null || y == null){
			x = (this.left || 0) + (this.width || 0) / 2;
			y = (this.top || 0) + (this.height || 0) / 2;
		}

		var rad = deg * Math.PI / 180, sin = Math.sin(rad), cos = Math.cos(rad);

		this.transform(1, 0, 0, 1, x, y);
		var m = this;

		return this.transformTo(
			cos * m.xx - sin * m.yx,
			sin * m.xx + cos * m.yx,
			cos * m.xy - sin * m.yy,
			sin * m.xy + cos * m.yy,
			m.x,
			m.y
		).transform(1, 0, 0, 1, -x, -y);
	},

	moveTo: function(x, y){
		var m = this;
		return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
	},

	rotateTo: function(deg, x, y){
		var m = this;
		var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
		if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
		return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
	},

	scaleTo: function(x, y){
		// Normalize
		var m = this;

		var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
		m.xx /= h; m.yx /= h;

		h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
		m.yy /= h; m.xy /= h;

		return this.scale(x, y);
	},

	resizeTo: function(width, height){
		var w = this.width, h = this.height;
		if (!w || !h) return this;
		return this.scaleTo(width / w, height / h);
	},

	/*
	inverse: function(){
		var a = this.xx, b = this.yx,
			c = this.xy, d = this.yy,
			e = this.x, f = this.y;
		if (a * d - b * c == 0) return null;
		return new Transform(
			d/(a * d-b * c), b/(b * c-a * d),
			c/(b * c-a * d), a/(a * d-b * c),
			(d * e-c * f)/(b * c-a * d), (b * e-a * f)/(a * d-b * c)
		);
	},
	*/

	inversePoint: function(x, y){
		var a = this.xx, b = this.yx,
			c = this.xy, d = this.yy,
			e = this.x, f = this.y;
		var det = b * c - a * d;
		if (det == 0) return null;
		return {
			x: (d * (e - x) + c * (y - f)) / det,
			y: (a * (f - y) + b * (x - e)) / det
		};
	},

	point: function(x, y){
		var m = this;
		return {
			x: m.xx * x + m.xy * y + m.x,
			y: m.yx * x + m.yy * y + m.y
		};
	}	

});

},{"./class":309}],313:[function(require,module,exports){
var Class = require('../core/class');

module.exports = Class({

	grab: function(){
		for (var i = 0; i < arguments.length; i++) arguments[i].inject(this);
		return this;
	},

	empty: function(){
		var node;
		while (node = this.firstChild) node.eject();
		return this;
	}

});
},{"../core/class":309}],314:[function(require,module,exports){
var Class = require('../core/class');

module.exports = Class({

	// placement

	_resetPlacement: function(){
		var container = this.parentNode;
		if (container){
			var previous = this.previousSibling, next = this.nextSibling;
			if (previous){
				previous.nextSibling = next;
			} else {
				container.firstChild = next;
			}
			if (next){
				next.previousSibling = previous;
			} else {
				container.lastChild = this.previousSibling;
			}
		}
		this.previousSibling = null;
		this.nextSibling = null;
		this.parentNode = null;
		return this;
	},

	inject: function(container){
		this._resetPlacement();
		var last = container.lastChild;
		if (last){
			last.nextSibling = this;
			this.previousSibling = last;
		} else {
			container.firstChild = this;
		}
		container.lastChild = this;
		this.parentNode = container;
		this._place();
		return this;
	},

	injectBefore: function(sibling){
		this._resetPlacement();
		var container = sibling.parentNode;
		if (!container) return this;
		var previous = sibling.previousSibling;
		if (previous){
			previous.nextSibling = this;
			this.previousSibling = previous;
		} else {
			container.firstChild = this;
		}
		sibling.previousSibling = this;
		this.nextSibling = sibling;
		this.parentNode = container;
		this._place();
		return this;
	},

	eject: function(){
		this._resetPlacement();
		this._place();
		return this;
	},

	_place: function(){},

	// events

	dispatch: function(event){
		var events = this._events,
			listeners = events && events[event.type];
		if (listeners){
			listeners = listeners.slice(0);
			for (var i = 0, l = listeners.length; i < l; i++){
				var fn = listeners[i], result;
				if (typeof fn == 'function')
					result = fn.call(this, event);
				else
					result = fn.handleEvent(event);
				if (result === false) event.preventDefault();
			}
		}
		if (this.parentNode && this.parentNode.dispatch){
			this.parentNode.dispatch(event);
		}
	},

	subscribe: function(type, fn, bind){
		if (typeof type != 'string'){ // listen type / fn with object
			var subscriptions = [];
			for (var t in type) subscriptions.push(this.subscribe(t, type[t]));
			return function(){ // unsubscribe
				for (var i = 0, l = subscriptions.length; i < l; i++)
					subscriptions[i]();
				return this;
			};
		} else { // listen to one
			var bound = typeof fn === 'function' ? fn.bind(bind || this) : fn,
				events = this._events || (this._events = {}),
				listeners = events[type] || (events[type] = []);
			listeners.push(bound);
			return function(){
				// unsubscribe
				for (var i = 0, l = listeners.length; i < l; i++){
					if (listeners[i] === bound){
						listeners.splice(i, 1);
						break;
					}
				}
			}
		}
	}

});

},{"../core/class":309}],315:[function(require,module,exports){
var Class = require('../core/class');

function elementFrom(node){
	if (node.toElement) return node.toElement();
	if (node.getDOMNode) return node.getDOMNode();
	if (node.getNode) return node.getNode();
	return node;
}

module.exports = Class({

	// conventions

	toElement: function(){
		return this.element;
	},

	getDOMNode: function(){
		return this.toElement();
	},

	getNode: function(){
		return this.toElement();
	},

	// placement

	inject: function(container){
		(container.containerElement || elementFrom(container))
			.appendChild(this.element);
		return this;
	},

	injectBefore: function(sibling){
		var element = elementFrom(sibling);
		element.parentNode.insertBefore(this.element, element);
		return this;
	},

	eject: function(){
		var element = this.element, parent = element.parentNode;
		if (parent) parent.removeChild(element); // TODO: VML Nodes are dead after being ejected
		return this;
	},

	// events

	subscribe: function(type, fn, bind){
		if (typeof type != 'string'){ // listen type / fn with object
			var subscriptions = [];
			for (var t in type) subscriptions.push(this.subscribe(t, type[t]));
			return function(){ // unsubscribe
				for (var i = 0, l = subscriptions.length; i < l; i++)
					subscriptions[i]();
				return this;
			};
		} else { // listen to one
			if (!bind) bind = this;
			var bound;
			if (typeof fn === 'function'){
				bound = fn.bind ? fn.bind(bind)
					: function(){ return fn.apply(bind, arguments); };
			} else {
				bound = fn;
			}
			var element = this.element;
			if (element.addEventListener){
				element.addEventListener(type, bound, false);
				return function(){ // unsubscribe
					element.removeEventListener(type, bound, false);
					return this;
				};
			} else {
				element.attachEvent('on' + type, bound);
				return function(){ // unsubscribe
					element.detachEvent('on' + type, bound);
					return this;
				};
			}
		}
	}

});

},{"../core/class":309}],316:[function(require,module,exports){
var Class = require('../core/class');
var Dummy = require('./dummy');
var Native = require('./native');

module.exports = Class(Dummy, Native, {

	dummy_inject: Dummy.prototype.inject,
	dummy_injectBefore: Dummy.prototype.injectBefore,
	dummy_eject: Dummy.prototype.eject,
	native_inject: Native.prototype.inject,
	native_injectBefore: Native.prototype.injectBefore,
	native_eject: Native.prototype.eject,

	inject: function(container){
		this.dummy_inject(container);
		this.native_inject(container);
		return this;
	},

	injectBefore: function(sibling){
		this.dummy_injectBefore(sibling);
		this.native_injectBefore(sibling);
		return this;
	},

	eject: function(){
		this.dummy_eject();
		this.native_eject();
		return this;
	}

});

},{"../core/class":309,"./dummy":314,"./native":315}],317:[function(require,module,exports){
var Class = require('../../core/class');
var Color = require('../../core/color');
var Transform = require('../../core/transform');
var Node = require('./node');

var genericCanvas = typeof document !== 'undefined' && document.createElement('canvas'),
    genericContext = genericCanvas && genericCanvas.getContext && genericCanvas.getContext('2d');

function recolorImage(img, color1, color2){
	// TODO: Fix this experimental implementation
	color1 = Color.detach(color1);
	color2 = Color.detach(color2);
	var canvas = document.createElement('canvas'),
		context = canvas.getContext('2d');
	canvas.width = img.width;
	canvas.height = img.height;
	context.fillStyle = color2[0];
	context.fillRect(0, 0, img.width, img.height);
	context.globalCompositeOperation = 'lighter';
	context.drawImage(img, 0, 0);
	return canvas;
}

var Base = Class(Node, {

	initialize: function(){
		this._fill = null;
		this._pendingFill = null;
		this._fillTransform = null;
		this._stroke = null;
		this._strokeCap = null;
		this._strokeDash = null;
		this._strokeJoin = null;
		this._strokeWidth = null;
	},

	/* styles */

	_addColors: function(gradient, stops){
		// Enumerate stops, assumes offsets are enumerated in order
		// TODO: Sort. Chrome doesn't always enumerate in expected order but requires stops to be specified in order.
		if ('length' in stops) for (var i = 0, l = stops.length - 1; i <= l; i++)
			gradient.addColorStop(i / l, new Color(stops[i]).toString());
		else for (var offset in stops)
			gradient.addColorStop(offset, new Color(stops[offset]).toString());
		return gradient;
	},


	fill: function(color){
		if (arguments.length > 1) return this.fillLinear(arguments);
		if (this._pendingFill) this._pendingFill();
		this._fill = color ? new Color(color).toString() : null;
		return this.invalidate();
	},

	fillRadial: function(stops, focusX, focusY, radiusX, radiusY, centerX, centerY){
		if (focusX == null) focusX = (this.left || 0) + (this.width || 0) * 0.5;
		if (focusY == null) focusY = (this.top || 0) + (this.height || 0) * 0.5;
		if (radiusY == null) radiusY = radiusX || (this.height * 0.5) || 0;
		if (radiusX == null) radiusX = (this.width || 0) * 0.5;
		if (centerX == null) centerX = focusX;
		if (centerY == null) centerY = focusY;

		centerX += centerX - focusX;
		centerY += centerY - focusY;

		if (radiusX === 0 || radiusX === '0') return this.fillLinear(stops);
		var ys = radiusY / radiusX;

		if (this._pendingFill) this._pendingFill();

		var gradient = genericContext.createRadialGradient(focusX, focusY / ys, 0, centerX, centerY / ys, radiusX * 2);

		// Double fill radius to simulate repeating gradient
		if ('length' in stops) for (var i = 0, l = stops.length - 1; i <= l; i++){
			gradient.addColorStop(i / l / 2, new Color(stops[i]).toString());
			gradient.addColorStop(1 - i / l / 2, new Color(stops[i]).toString());
		} else for (var offset in stops){
			gradient.addColorStop(offset / 2, new Color(stops[offset]).toString());
			gradient.addColorStop(1- offset / 2, new Color(stops[offset]).toString());
		}

		this._fill = gradient;
		this._fillTransform = new Transform(1, 0, 0, ys);
		return this.invalidate();
	},

	fillLinear: function(stops, x1, y1, x2, y2){
		if (arguments.length < 5){
			var angle = ((x1 == null) ? 270 : x1) * Math.PI / 180;

			var x = Math.cos(angle), y = -Math.sin(angle),
				l = (Math.abs(x) + Math.abs(y)) / 2,
				w = this.width || 1, h = this.height || 1;

			x *= l; y *= l;

			x1 = 0.5 - x;
			x2 = 0.5 + x;
			y1 = 0.5 - y;
			y2 = 0.5 + y;
			this._fillTransform = new Transform(w, 0, 0, h);
		} else {
			this._fillTransform = null;
		}
		if (this._pendingFill) this._pendingFill();
		var gradient = genericContext.createLinearGradient(x1, y1, x2, y2);
		this._addColors(gradient, stops);
		this._fill = gradient;
		return this.invalidate();
	},

	fillImage: function(url, width, height, left, top, color1, color2){
		if (this._pendingFill) this._pendingFill();
		var img = url;
		if (!(img instanceof Image)){
			img = new Image();
			img.src = url;
		}
		if (img.width && img.height){
			return this._fillImage(img, width, height, left || 0, top || 0, color1, color2);
		}

		// Not yet loaded
		this._fill = null;
		var self = this,
			callback = function(){
				cancel();
				self._fillImage(img, width, height, left || 0, top || 0, color1, color2);
			},
			cancel = function(){
				img.removeEventListener('load', callback, false);
				self._pendingFill = null;
			};
		this._pendingFill = cancel;
		img.addEventListener('load', callback, false);
		return this;
	},

	_fillImage: function(img, width, height, left, top, color1, color2){
		var w = width ? width / img.width : 1,
			h = height ? height / img.height : 1;
		if (color1 != null) img = recolorImage(img, color1, color2);
		this._fill = genericContext.createPattern(img, 'repeat');
		this._fillTransform = new Transform(w, 0, 0, h, left || 0, top || 0);
		return this.invalidate();
	},

	stroke: function(color, width, cap, join, dash){
		this._stroke = color ? new Color(color).toString() : null;
		this._strokeWidth = (width != null) ? width : 1;
		this._strokeCap = (cap != null) ? cap : 'round';
		this._strokeJoin = (join != null) ? join : 'round';
		this._strokeDash = dash;
		return this.invalidate();
	},

	// Rendering

	element_renderTo: Node.prototype.renderTo,

	renderTo: function(context, xx, yx, xy, yy, x, y){
		var opacity = this._opacity;
		if (opacity == null || opacity >= 1){
			return this.renderLayerTo(context, xx, yx, xy, yy, x, y);
		}
		if (this._fill && this._stroke){
			return this.element_renderTo(context, xx, yx, xy, yy, x, y);
		}
		context.globalAlpha = opacity;
		var r = this.renderLayerTo(context, xx, yx, xy, yy, x, y);
		context.globalAlpha = 1;
		return r;
	},

	renderLayerTo: function(context, xx, yx, xy, yy, x, y){
		context.setTransform(xx, yx, xy, yy, x, y);
		this.renderShapeTo(context);
	}

});

Base._genericContext = genericContext;

module.exports = Base;

},{"../../core/class":309,"../../core/color":310,"../../core/transform":312,"./node":320}],318:[function(require,module,exports){
var Class = require('../../core/class');
var Container = require('../../dom/container');
var Node = require('./node');

module.exports = Class(Node, Container, {

	initialize: function(width, height){
		this.width = width;
		this.height = height;
	},

	localHitTest: function(x, y) {
		var node = this.lastChild;
		while (node){
			var hit = node.hitTest(x, y);
			if (hit) return hit;
			node = node.previousSibling;
		}
		return null;
	},

	renderLayerTo: function(context, xx, yx, xy, yy, x, y) {
		context.setTransform(xx, yx, xy, yy, x, y);
		context.save();
		// Need beginPath to fix Firefox bug. See 3354054.
		context.beginPath();
		context.rect(this.x, this.y, this.width, this.height);
		context.clip();

		var node = this.firstChild;
		while(node) {
			node.renderTo(context, xx, yx, xy, yy, x, y);
			node = node.nextSibling;
		}
		context.restore();
	}
});

},{"../../core/class":309,"../../dom/container":313,"./node":320}],319:[function(require,module,exports){
var Class = require('../../core/class');
var Container = require('../../dom/container');
var Node = require('./node');

module.exports = Class(Node, Container, {
	
	initialize: function(width, height){
		this.width = width;
		this.height = height;
	},

	localHitTest: function(x, y){
		var node = this.lastChild;
		while (node){
			var hit = node.hitTest(x, y);
			if (hit) return hit;
			node = node.previousSibling;
		}
		return null;
	},

	renderLayerTo: function(context, xx, yx, xy, yy, x, y){
		if (this._invisible) return;

		x = xx * this.x + xy * this.y + x;
		y = yx * this.x + yy * this.y + y;

		var t = xx;
		xx = t * this.xx + xy * this.yx;
		xy = t * this.xy + xy * this.yy;
		t = yx;
		yx = t * this.xx + yy * this.yx;
		yy = t * this.xy + yy * this.yy;

		var node = this.firstChild;
		while (node){
			node.renderTo(context, xx, yx, xy, yy, x, y);
			node = node.nextSibling;
		}
	}

});

},{"../../core/class":309,"../../dom/container":313,"./node":320}],320:[function(require,module,exports){
var Class = require('../../core/class');
var Transform = require('../../core/transform');
var Element = require('../../dom/dummy');

var CanvasNode = Class(Transform, Element, {
	
	invalidate: function(){
		if (this.parentNode) this.parentNode.invalidate();
		if (this._layer) this._layerCache = null;
		return this;
	},

	_place: function(){
		this.invalidate();
	},
	
	_transform: function(){
		this.invalidate();
	},
	
	blend: function(opacity){
		if (opacity >= 1 && this._layer) this._layer = null;
		this._opacity = opacity;
		if (this.parentNode) this.parentNode.invalidate();
		return this;
	},
	
	// visibility
	
	hide: function(){
		this._invisible = true;
		if (this.parentNode) this.parentNode.invalidate();
		return this;
	},
	
	show: function(){
		this._invisible = false;
		if (this.parentNode) this.parentNode.invalidate();
		return this;
	},
	
	// interaction
	
	indicate: function(cursor, tooltip){
		this._cursor = cursor;
		this._tooltip = tooltip;
		return this.invalidate();
	},

	hitTest: function(x, y){
		if (this._invisible) return null;
		var point = this.inversePoint(x, y);
		if (!point) return null;
		return this.localHitTest(point.x, point.y);
	},

	// rendering

	renderTo: function(context, xx, yx, xy, yy, x, y){
		var opacity = this._opacity;
		if (opacity == null || opacity >= 1){
			return this.renderLayerTo(context, xx, yx, xy, yy, x, y);
		}

		// Render to a compositing layer and cache it

		var layer = this._layer, canvas, isDirty = true,
			w = context.canvas.width, h = context.canvas.height;
		if (layer){
			layer.setTransform(1, 0, 0, 1, 0, 0);
			canvas = layer.canvas;
			if (canvas.width < w || canvas.height < h){
				canvas.width = w;
				canvas.height = h;
			} else {
				var c = this._layerCache;
				if (c && c.xx === xx && c.yx === yx && c.xy === xy
					&& c.yy === yy && c.x === x && c.y === y){
					isDirty = false;
				} else {
					layer.clearRect(0, 0, w, h);
				}
			}
		} else {
			canvas = document.createElement('canvas');
			canvas.width = w;
			canvas.height = h;
			this._layer = layer = canvas.getContext('2d');
		}

		if (isDirty){
			this.renderLayerTo(layer, xx, yx, xy, yy, x, y);
			this._layerCache = {
				xx: xx,
				yx: yx,
				xy: xy,
				yy: yy,
				x: x,
				y: y
			};
		}

		context.globalAlpha = opacity;
		context.setTransform(1, 0, 0, 1, 0, 0);
		context.drawImage(
			canvas,
			0, 0, w, h,
			0, 0, w, h
		);
		context.globalAlpha = 1;
	}

});

module.exports = CanvasNode;
},{"../../core/class":309,"../../core/transform":312,"../../dom/dummy":314}],321:[function(require,module,exports){
var Class = require('../../core/class');
var Path = require('../../core/path');

var CanvasPath = Class(Path, {

	initialize: function(path){
		this.reset();
		if (path instanceof CanvasPath){
			this.path = path.path.slice(0);
		} else if (path){
			if (path.applyToPath)
				path.applyToPath(this);
			else
				this.push(path);
		}
	},

	onReset: function(){
		this.path = [];
	},

	onMove: function(sx, sy, x, y){
		this.path.push(function(context){
			context.moveTo(x, y);
		});
	},

	onLine: function(sx, sy, x, y){
		this.path.push(function(context){
			context.lineTo(x, y);
		});
	},

	onBezierCurve: function(sx, sy, p1x, p1y, p2x, p2y, x, y){
		this.path.push(function(context){
			context.bezierCurveTo(p1x, p1y, p2x, p2y, x, y);
		});
	},

	_arcToBezier: Path.prototype.onArc,

	onArc: function(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation){
		if (rx != ry || rotation) return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
		this.path.push(function(context){
			context.arc(cx, cy, rx, sa, ea, ccw);
		});
	},

	onClose: function(){
		this.path.push(function(context){
			context.closePath();
		});
	},

	toCommands: function(){
		return this.path.slice(0);
	}

});

module.exports = CanvasPath;
},{"../../core/class":309,"../../core/path":311}],322:[function(require,module,exports){
var Class = require('../../core/class');
var Base = require('./base');
var Path = require('./path');

module.exports = Class(Base, {

	base_initialize: Base.prototype.initialize,

	initialize: function(path, width, height){
		this.base_initialize();
		this.width = width;
		this.height = height;
		if (path != null) this.draw(path);
	},

	draw: function(path, width, height){
		if (!(path instanceof Path)) path = new Path(path);
		this.path = path;
		this._commands = path.toCommands();
		if (width != null) this.width = width;
		if (height != null) this.height = height;
		return this.invalidate();
	},

	localHitTest: function(x, y){
		if (!this._fill) return null;
		if (this.width == null || this.height == null){
			var context = Base._genericContext, commands = this._commands;
			if (!commands) return null;
			context.beginPath();
			for (var i = 0, l = commands.length; i < l; i++)
				commands[i](context);
			return context.isPointInPath(x, y) ? this : null;
		}
		if (x > 0 && y > 0 && x < this.width && y < this.height){
			return this;
		}
		return null;
	},

	renderShapeTo: function(context){
		if (this._invisible || !this._commands || (!this._fill && !this._stroke)) {
			return null;
		}
		context.transform(this.xx, this.yx, this.xy, this.yy, this.x, this.y);
		var commands = this._commands,
		    fill = this._fill,
		    stroke = this._stroke,
		    dash = this._strokeDash;

		context.beginPath();

		if (dash) {
			if (context.setLineDash) {
				context.setLineDash(dash);
			} else {
				// TODO: Remove when FF supports setLineDash.
				context.mozDash = dash;
			}
			// TODO: Create fallback to other browsers.
		} else {
			if (context.setLineDash) {
				context.setLineDash([]);
			} else {
				context.mozDash = null;
			}
		}

		for (var i = 0, l = commands.length; i < l; i++)
			commands[i](context);

		if (fill){
			var m = this._fillTransform;
			if (m){
				context.save(); // TODO: Optimize away this by restoring the transform before stroking
				context.transform(m.xx, m.yx, m.xy, m.yy, m.x, m.y);
				context.fillStyle = fill;
				context.fill();
				context.restore();
			} else {
				context.fillStyle = fill;
				context.fill();
			}
		}
		if (stroke){
			context.strokeStyle = stroke;
			context.lineWidth = this._strokeWidth;
			context.lineCap = this._strokeCap;
			context.lineJoin = this._strokeJoin;
			context.stroke();
		}
	}

});

},{"../../core/class":309,"./base":317,"./path":321}],323:[function(require,module,exports){
var Class = require('../../core/class');
var Container = require('../../dom/container');
var Element = require('../../dom/native');

var fps = 1000 / 60, invalids = [], renderTimer, renderInvalids = function(){
	clearTimeout(renderTimer);
	renderTimer = null;
	var canvases = invalids;
	invalids = [];
	for (var i = 0, l = canvases.length; i < l; i++){
		var c = canvases[i];
		c._valid = true;
		c.render();
	}
};

var resolution = typeof window !== 'undefined' && window.devicePixelRatio || 1;

var previousHit = null, previousHitSurface = null;

var CanvasSurface = Class(Element, Container, {

	initialize: function(width, height, existingElement){
		var element = this.element = existingElement || document.createElement('canvas');
		var context = this.context = element.getContext('2d');
		this._valid = true;
		if (width != null && height != null) this.resize(width, height);

		element.addEventListener('mousemove', this, false);
		element.addEventListener('mouseout', this, false);
		element.addEventListener('mouseover', this, false);
		element.addEventListener('mouseup', this, false);
		element.addEventListener('mousedown', this, false);
		element.addEventListener('click', this, false);
	},

	handleEvent: function(event){
		if (event.clientX == null) return;
		var element = this.element,
			rect = element.getBoundingClientRect(),
			x = event.clientX - rect.left - element.clientLeft,
			y = event.clientY - rect.top - element.clientTop,
			hit = this.hitTest(x, y);

		if (hit !== previousHit){
			if (previousHit){
				previousHit.dispatch({
					type: 'mouseout',
					target: previousHit,
					relatedTarget: hit,
					sourceEvent: event
				});
			}
			if (hit){
				hit.dispatch({
					type: 'mouseover',
					target: hit,
					relatedTarget: previousHit,
					sourceEvent: event
				});
			}
			previousHit = hit;
			previousHitSurface = this;
			this.refreshCursor();
		}

		if (hit) hit.dispatch(event);
	},

	refreshCursor: function(){
		if (previousHitSurface !== this) return;
		var hit = previousHit, hitCursor = '', hitTooltip = '';
		while (hit){
			if (!hitCursor && hit._cursor){
				hitCursor = hit._cursor;
				if (hitTooltip) break;
			}
			if (!hitTooltip && hit._tooltip){
				hitTooltip = hit._tooltip;
				if (hitCursor) break;
			}
			hit = hit.parentNode;
		}
		// TODO: No way to set cursor/title on the surface
		this.element.style.cursor = hitCursor;
		this.element.title = hitTooltip;
	},

	resize: function(width, height){
		var element = this.element;
		element.setAttribute('width', width * resolution);
		element.setAttribute('height', height * resolution);
		element.style.width = width + 'px';
		element.style.height = height + 'px';
		this.width = width;
		this.height = height;
		return this;
	},

	invalidate: function(left, top, width, height){
		if (this._valid){
			this._valid = false;
			invalids.push(this);
			if (!renderTimer){
				if (window.mozRequestAnimationFrame){
					renderTimer = true;
					window.mozRequestAnimationFrame(renderInvalids);
				} else {
					renderTimer = setTimeout(renderInvalids, fps);
				}
			}
		}
		return this;
	},

	hitTest: function(x, y){
		if (x < 0 || y < 0 || x > this.width || y > this.height) return null;
		var node = this.lastChild;
		while (node){
			var hit = node.hitTest(x, y);
			if (hit) return hit;
			node = node.previousSibling;
		}
		return null;
	},

	render: function(){
		var node = this.firstChild, context = this.context;
		context.setTransform(resolution, 0, 0, resolution, 0, 0);
		context.clearRect(0, 0, this.width, this.height);
		while (node){
			node.renderTo(context, resolution, 0, 0, resolution, 0, 0);
			node = node.nextSibling;
		}
		this.refreshCursor();
	}

});

CanvasSurface.tagName = 'canvas';

module.exports = CanvasSurface;
},{"../../core/class":309,"../../dom/container":313,"../../dom/native":315}],324:[function(require,module,exports){
var Class = require('../../core/class');
var Base = require('./base');

var fontAnchors = { middle: 'center' };

module.exports = Class(Base, {

	base_initialize: Base.prototype.initialize,

	initialize: function(text, font, alignment, path){
		this.base_initialize();
		this.draw.apply(this, arguments);
	},

	draw: function(text, font, alignment, path){
		var em;
		if (typeof font == 'string'){
			em = Number(/(\d+)/.exec(font)[0]);
		} else if (font){
			em = parseFloat(font.fontSize || font['font-size'] || '12');
			font = (font.fontStyle || font['font-style'] || '') + ' ' +
				(font.fontVariant || font['font-variant'] || '') + ' ' +
				(font.fontWeight || font['font-weight'] || '') + ' ' +
				em + 'px ' +
				(font.fontFamily || font['font-family'] || 'Arial');
		} else {
			font = this._font;
		}

		var lines = text && text.split(/\r?\n/);
		this._font = font;
		this._fontSize = em;
		this._text = lines;
		this._alignment = fontAnchors[alignment] || alignment || 'left';

		var context = Base._genericContext;

		context.font = this._font;
		context.textAlign = this._alignment;
		context.textBaseline = 'middle';

		lines = this._text;
		var l = lines.length, width = 0;
		for (var i = 0; i < l; i++){
			var w = context.measureText(lines[i]).width;
			if (w > width) width = w;
		}
		this.width = width;
		this.height = l ? l * 1.1 * em : 0;
		return this.invalidate();
	},

	// Interaction

	localHitTest: function(x, y){
		if (!this._fill) return null;
		if (x > 0 && y > 0 && x < this.width && y < this.height){
			return this;
		}
		return null;
	},

	// Rendering

	renderShapeTo: function(context){
		if (this._invisible || !this._text || (!this._fill && !this._stroke)) {
			return null;
		}
		context.transform(this.xx, this.yx, this.xy, this.yy, this.x, this.y);
		var fill = this._fill,
		    stroke = this._stroke,
		    text = this._text,
		    dash = this._strokeDash;

		context.font = this._font;
		context.textAlign = this._alignment;
		context.textBaseline = 'middle';

		var em = this._fontSize,
		    y = em / 2,
		    lineHeight = 1.1 * em,
		    lines = text,
		    l = lines.length;

		if (fill){
			context.fillStyle = fill;
			for (var i = 0; i < l; i++)
				context.fillText(lines[i], 0, y + i * lineHeight);
		}
		if (stroke){
			if (dash) {
				if (context.setLineDash) {
					context.setLineDash(dash);
				} else {
					// TODO: Remove when FF supports setLineDash.
					context.mozDash = dash;
				}
				// TODO: Create fallback to other browsers.
			} else {
				if (context.setLineDash) {
					context.setLineDash([]);
				} else {
					context.mozDash = null;
				}
			}

			context.strokeStyle = stroke;
			context.lineWidth = this._strokeWidth;
			context.lineCap = this._strokeCap;
			context.lineJoin = this._strokeJoin;
			for (i = 0; i < l; i++)
				context.strokeText(lines[i], 0, y + i * lineHeight);
		}
	}

});

},{"../../core/class":309,"./base":317}],325:[function(require,module,exports){
function warning(){
	throw new Error('You must require a mode before requiring anything else.');
}

exports.Surface = warning;
exports.Path = warning;
exports.Shape = warning;
exports.Group = warning;
exports.ClippingRectangle = warning;
exports.Text = warning;

exports.setCurrent = function(mode){
	for (var key in mode){
		exports[key] = mode[key];
	}
};

},{}],326:[function(require,module,exports){
var hasCanvas = function(){

  var canvas = document.createElement('canvas');
  return canvas && !!canvas.getContext;

};

if (hasCanvas()) {
  exports.Surface = require('./canvas/surface');
  exports.Path = require('./canvas/path');
  exports.Shape = require('./canvas/shape');
  exports.Group = require('./canvas/group');
  exports.ClippingRectangle = require('./canvas/clippingrectangle');
  exports.Text = require('./canvas/text');
} else {
  exports.Surface = require('./vml/surface');
  exports.Path = require('./vml/path');
  exports.Shape = require('./vml/shape');
  exports.Group = require('./vml/group');
  exports.ClippingRectangle = require('./vml/clippingrectangle');
  exports.Text = require('./vml/text');

  var DOM = require('./vml/dom');
  if (typeof document !== 'undefined') DOM.init(document);
}

},{"./canvas/clippingrectangle":318,"./canvas/group":319,"./canvas/path":321,"./canvas/shape":322,"./canvas/surface":323,"./canvas/text":324,"./vml/clippingrectangle":337,"./vml/dom":338,"./vml/group":339,"./vml/path":341,"./vml/shape":342,"./vml/surface":343,"./vml/text":344}],327:[function(require,module,exports){
exports.Surface = require('./svg/surface');
exports.Path = require('./svg/path');
exports.Shape = require('./svg/shape');
exports.Group = require('./svg/group');
exports.ClippingRectangle = require('./svg/group');
exports.Text = require('./svg/text');

require('./current').setCurrent(exports);

},{"./current":325,"./svg/group":330,"./svg/path":332,"./svg/shape":333,"./svg/surface":334,"./svg/text":335}],328:[function(require,module,exports){
var Class = require('../../core/class');
var Color = require('../../core/color');
var Node = require('./node');
var DOM = require('./dom');
var createElement = DOM.createElement;

module.exports = Class(Node, {

	element_initialize: Node.prototype.initialize,

	initialize: function(tag){
		this.element_initialize(tag);
		this.brushes = {};
		this.fill();
		this.stroke();
	},

	_place: function(){
		if (this.parentNode){
			this._injectBrush('fill');
			this._injectBrush('stroke');
		} else {
			this._ejectBrush('fill');
			this._ejectBrush('stroke');
		}
		return this;
	},

	_injectBrush: function(type){
		if (!this.parentNode) return;
		var brush = type == 'fill' ? this.fillBrush : this.strokeBrush;
		if (brush) this.parentNode.defs.appendChild(brush);
	},

	_ejectBrush: function(type){
		var brush = this[type + 'Brush'];
		if (brush && brush.parentNode) brush.parentNode.removeChild(brush);
	},

	/* styles */

	_createBrush: function(type, tag){
		this._ejectBrush(type);

		var brush = createElement(tag);
		if (type == 'fill')
			this.fillBrush = brush;
		else
			this.strokeBrush = brush;

		var id = type + '-brush-e' + DOM.uniqueID();
		brush.setAttribute('id', id);

		this._injectBrush(type);

		this.element.setAttribute(type, 'url(#' + id + ')');

		return brush;
	},

	_createGradient: function(type, style, stops){
		var gradient = this._createBrush(type, style);

		var addColor = function(offset, color){
			color = Color.detach(color);
			var stop = createElement('stop');
			stop.setAttribute('offset', offset);
			stop.setAttribute('stop-color', color[0]);
			stop.setAttribute('stop-opacity', color[1]);
			gradient.appendChild(stop);
		};

		// Enumerate stops, assumes offsets are enumerated in order
		// TODO: Sort. Chrome doesn't always enumerate in expected order but requires stops to be specified in order.
		if ('length' in stops) for (var i = 0, l = stops.length - 1; i <= l; i++) addColor(i / l, stops[i]);
		else for (var offset in stops) addColor(offset, stops[offset]);

		gradient.setAttribute('spreadMethod', 'reflect'); // Closer to the VML gradient

		this.element.removeAttribute('fill-opacity');
		return gradient;
	},

	_setColor: function(type, color){
		this._ejectBrush(type);
		this[type + 'Brush'] = null;
		var element = this.element;
		if (color == null){
			element.setAttribute(type, 'none');
			element.removeAttribute(type + '-opacity');
		} else {
			color = Color.detach(color);
			element.setAttribute(type, color[0]);
			element.setAttribute(type + '-opacity', color[1]);
		}
	},

	fill: function(color){
		if (arguments.length > 1) this.fillLinear(arguments);
		else this._setColor('fill', color);
		return this;
	},

	fillRadial: function(stops, focusX, focusY, radiusX, radiusY, centerX, centerY){
		var gradient = this._createGradient('fill', 'radialGradient', stops);

		gradient.setAttribute('gradientUnits', 'userSpaceOnUse');


		if (focusX == null) focusX = (this.left || 0) + (this.width || 0) * 0.5;
		if (focusY == null) focusY = (this.top || 0) + (this.height || 0) * 0.5;
		if (radiusY == null) radiusY = radiusX || (this.height * 0.5) || 0;
		if (radiusX == null) radiusX = (this.width || 0) * 0.5;
		if (centerX == null) centerX = focusX;
		if (centerY == null) centerY = focusY;

		var ys = radiusY / radiusX;

		gradient.setAttribute('fx', focusX);
		gradient.setAttribute('fy', focusY / ys);

		gradient.setAttribute('r', radiusX);
		if (ys != 1) gradient.setAttribute('gradientTransform', 'scale(1,' + ys + ')');

		gradient.setAttribute('cx', centerX);
		gradient.setAttribute('cy', centerY / ys);

		return this;
	},

	fillLinear: function(stops, x1, y1, x2, y2){
		var gradient = this._createGradient('fill', 'linearGradient', stops);

		if (arguments.length == 5){
			gradient.setAttribute('gradientUnits', 'userSpaceOnUse');
		} else {
			var angle = ((x1 == null) ? 270 : x1) * Math.PI / 180;

			var x = Math.cos(angle), y = -Math.sin(angle),
				l = (Math.abs(x) + Math.abs(y)) / 2;

			x *= l; y *= l;

			x1 = 0.5 - x;
			x2 = 0.5 + x;
			y1 = 0.5 - y;
			y2 = 0.5 + y;
		}

		gradient.setAttribute('x1', x1);
		gradient.setAttribute('y1', y1);
		gradient.setAttribute('x2', x2);
		gradient.setAttribute('y2', y2);

		return this;
	},

	fillImage: function(url, width, height, left, top, color1, color2){
		var pattern = this._createBrush('fill', 'pattern');

		var image = createElement('image');
		DOM.link(image, url);
		image.setAttribute('width', width);
		image.setAttribute('height', height);
		image.setAttribute('preserveAspectRatio', 'none'); // none, xMidYMid slice, xMidYMid meet

		if (color1 != null){
			color1 = new Color(color1);
			if (color2 == null){
				color2 = new Color(color1);
				color2.alpha = 0;
			} else {
				color2 = new Color(color2);
			}

			var r = (color1.red - color2.red) / (255 * 3),
				g = (color1.green - color2.green) / (255 * 3),
				b = (color1.blue - color2.blue) / (255 * 3),
				a = (color1.alpha - color2.alpha) / 3;

			var matrix = [
				r, r, r, 0, color2.red / 255,
				g, g, g, 0, color2.green / 255,
				b, b, b, 0, color2.blue / 255,
				a, a, a, 0, color2.alpha
			];

			var filter = createElement('filter');
			filter.setAttribute('id', 'testfilter' + this.uid);

			var cm = createElement('feColorMatrix');
			cm.setAttribute('type', 'matrix');
			cm.setAttribute('values', matrix.join(' '));

			image.setAttribute('fill', '#000');
			image.setAttribute('filter', 'url(#testfilter' + this.uid + ')');

			filter.appendChild(cm);
			pattern.appendChild(filter);
		}

		pattern.appendChild(image);

		pattern.setAttribute('patternUnits', 'userSpaceOnUse');
		pattern.setAttribute('patternContentsUnits', 'userSpaceOnUse');

		pattern.setAttribute('x', left || 0);
		pattern.setAttribute('y', top || 0);

		pattern.setAttribute('width', width);
		pattern.setAttribute('height', height);

		//pattern.setAttribute('viewBox', '0 0 75 50');
		//pattern.setAttribute('preserveAspectRatio', 'xMidYMid slice');

		return this;
	},

	stroke: function(color, width, cap, join, dash){
		var element = this.element;
		element.setAttribute('stroke-width', (width != null) ? width : 1);
		element.setAttribute('stroke-linecap', (cap != null) ? cap : 'round');
		element.setAttribute('stroke-linejoin', (join != null) ? join : 'round');
		if (dash) {
			element.setAttribute('stroke-dasharray', dash.join(','));
		}
		this._setColor('stroke', color);
		return this;
	}

});

},{"../../core/class":309,"../../core/color":310,"./dom":329,"./node":331}],329:[function(require,module,exports){
var UID = +new Date();

exports.uniqueID = function(){
	return (UID++).toString(36);
};
	
var NS = 'http://www.w3.org/2000/svg',
	XLINK = 'http://www.w3.org/1999/xlink',
	XML = 'http://www.w3.org/XML/1998/namespace';

exports.NS = NS;

exports.createElement = function(tag){
    return document.createElementNS(NS, tag);
};

exports.link = function(element, url){
	element.setAttributeNS(XLINK, 'href', url);
};

exports.preserveSpace = function(element){
	element.setAttributeNS(XML, 'space', 'preserve');
};

exports.createTextNode = function(text){
	return document.createTextNode(text);
}
},{}],330:[function(require,module,exports){
var Class = require('../../core/class');
var Container = require('../../dom/container');
var Node = require('./node');
var DOM = require('./dom');

module.exports = Class(Node, Container, {

	element_initialize: Node.prototype.initialize,

	initialize: function(width, height){
		this.element_initialize('g');
		this.width = width;
		this.height = height;
		this.defs = DOM.createElement('defs');
		this.element.appendChild(this.defs);
	}

});

},{"../../core/class":309,"../../dom/container":313,"./dom":329,"./node":331}],331:[function(require,module,exports){
var Class = require('../../core/class');
var Transform = require('../../core/transform');
var Element = require('../../dom/shadow');
var DOM = require('./dom');

module.exports = Class(Element, Transform, {

	initialize: function(tag){
		this.uid = DOM.uniqueID();
		var element = this.element = DOM.createElement(tag);
		element.setAttribute('id', 'e' + this.uid);
	},
	
	// transforms

	_transform: function(){
		var m = this;
		this.element.setAttribute('transform', 'matrix(' + [m.xx, m.yx, m.xy, m.yy, m.x, m.y] + ')');
	},
	
	blend: function(opacity){
		this.element.setAttribute('opacity', opacity);
		return this;
	},
	
	// visibility
	
	hide: function(){
		this.element.setAttribute('display', 'none');
		return this;
	},
	
	show: function(){
		this.element.setAttribute('display', '');
		return this;
	},
	
	// interaction
	
	indicate: function(cursor, tooltip){
		var element = this.element;
		if (cursor) this.element.style.cursor = cursor;
		if (tooltip){
			var title = this.titleElement; 
			if (title){
				title.firstChild.nodeValue = tooltip;
			} else {
				this.titleElement = title = DOM.createElement('title');
				title.appendChild(DOM.createTextNode(tooltip));
				element.insertBefore(title, element.firstChild);
			}
		}
		return this;
	}

});
},{"../../core/class":309,"../../core/transform":312,"../../dom/shadow":316,"./dom":329}],332:[function(require,module,exports){
var Class = require('../../core/class');

// Utility command factories

var point = function(c){
	return function(x, y){
		return this.push(c, x, y);
	};
};

var arc = function(c, cc){
	return function(x, y, rx, ry, outer){
		return this.push(c, Math.abs(rx || x), Math.abs(ry || rx || y), 0, outer ? 1 : 0, cc, x, y);
	};
};

var curve = function(t, s, q, c){
	return function(c1x, c1y, c2x, c2y, ex, ey){
		var l = arguments.length, k = l < 4 ? t : l < 6 ? q : c;
		return this.push(k, c1x, c1y, c2x, c2y, ex, ey);
	};
};

// SVG Path Class

var SVGPath = Class({
	
	initialize: function(path){
		if (path instanceof SVGPath){
			this.path = [Array.prototype.join.call(path.path, ' ')];
		} else {
			if (path && path.applyToPath)
				path.applyToPath(this);
			else
				this.path = [path || 'm0 0'];
		}
	},
	
	push: function(){
		this.path.push(Array.prototype.join.call(arguments, ' '));
		return this;
	},
	
	reset: function(){
		this.path = [];
		return this;
	},
	
	move: point('m'),
	moveTo: point('M'),
	
	line: point('l'),
	lineTo: point('L'),
	
	curve: curve('t', 's', 'q', 'c'),
	curveTo: curve('T', 'S', 'Q', 'C'),
	
	arc: arc('a', 1),
	arcTo: arc('A', 1),
	
	counterArc: arc('a', 0),
	counterArcTo: arc('A', 0),
	
	close: function(){
		return this.push('z');
	},
	
	toSVG: function(){
		return this.path.join(' ');
	}

});

SVGPath.prototype.toString = SVGPath.prototype.toSVG;

module.exports = SVGPath;
},{"../../core/class":309}],333:[function(require,module,exports){
var Class = require('../../core/class');
var Path = require('./path');
var Base = require('./base');

module.exports = Class(Base, {

	base_initialize: Base.prototype.initialize,

	initialize: function(path, width, height){
		this.base_initialize('path');
		this.element.setAttribute('fill-rule', 'evenodd');
		this.width = width;
		this.height = height;
		if (path != null) this.draw(path);
	},

	draw: function(path, width, height){
		if (!(path instanceof Path)) path = new Path(path);
		this.element.setAttribute('d', path.toSVG());
		if (width != null) this.width = width;
		if (height != null) this.height = height;
		return this;
	}

});

},{"../../core/class":309,"./base":328,"./path":332}],334:[function(require,module,exports){
var Class = require('../../core/class');
var Container = require('../../dom/container');
var Element = require('../../dom/native');
var DOM = require('./dom');

var SVGSurface = Class(Element, Container, {

	initialize: function SVGSurface(width, height, existingElement){
		var element = this.element = existingElement || DOM.createElement('svg');
		element.setAttribute('xmlns', DOM.NS);
		element.setAttribute('version', 1.1);
		var defs = this.defs = DOM.createElement('defs');
		element.appendChild(defs);
		if (width != null && height != null) this.resize(width, height);
	},

	resize: function(width, height){
		var element = this.element;
		element.setAttribute('width', width);
		element.setAttribute('height', height);
		this.width = width;
		this.height = height;
		return this;
	}

});

SVGSurface.tagName = 'svg';

module.exports = SVGSurface;
},{"../../core/class":309,"../../dom/container":313,"../../dom/native":315,"./dom":329}],335:[function(require,module,exports){
var Class = require('../../core/class');
var Path = require('./path');
var Base = require('./base');
var Surface = require('./surface');
var DOM = require('./dom');
var createElement = DOM.createElement;

var ua = typeof navigator !== 'undefined' && navigator && navigator.userAgent,
    hasBaseline = !(/opera|safari|ie/i).test(ua) || (/chrome/i).test(ua);

var fontAnchors = { left: 'start', center: 'middle', right: 'end' },
    fontAnchorOffsets = { middle: '50%', end: '100%' };

module.exports = Class(Base, {

	base_initialize: Base.prototype.initialize,

	initialize: function(text, font, alignment, path){
		this.base_initialize('text');
		this.draw.apply(this, arguments);
	},
	
	draw: function(text, font, alignment, path){
		var element = this.element;
	
		if (font){
			if (typeof font == 'string'){
				element.style.font = font;
			} else {
				for (var key in font){
					var ckey = key.camelCase ? key.camelCase() : key;
					// NOT UNIVERSALLY SUPPORTED OPTIONS
					// if (ckey == 'kerning') element.setAttribute('kerning', font[key] ? 'auto' : '0');
					// else if (ckey == 'letterSpacing') element.setAttribute('letter-spacing', Number(font[key]) + 'ex');
					// else if (ckey == 'rotateGlyphs') element.setAttribute('glyph-orientation-horizontal', font[key] ? '270deg' : '');
					// else
					element.style[ckey] = font[key];
				}
				element.style.lineHeight = '0.5em';
			}
		}
		
		if (alignment) element.setAttribute('text-anchor', this.textAnchor = (fontAnchors[alignment] || alignment));

		if (path && typeof path != 'number'){
			this._createPaths(new Path(path));
		} else if (path === false){
			this._ejectPaths();
			this.pathElements = null;
		}
		
		var paths = this.pathElements, child;
		
		while ((child = element.firstChild)){
			element.removeChild(child);
		}
		
		// Note: Gecko will (incorrectly) align gradients for each row, while others applies one for the entire element
		
		var lines = String(text).split(/\r?\n/), l = lines.length,
		    baseline = 'central';
		
		if (paths && l > paths.length) l = paths.length;
		
		if (hasBaseline) element.setAttribute('dominant-baseline', baseline);

		DOM.preserveSpace(element);
		
		for (var i = 0; i < l; i++){
			var line = lines[i], row, content;
			if (paths){
				row = createElement('textPath');
				DOM.link(row, '#' + paths[i].getAttribute('id'));
				row.setAttribute('startOffset', fontAnchorOffsets[this.textAnchor] || 0);
			} else {
				row = createElement('tspan');
				row.setAttribute('x', 0);
				row.setAttribute('y', (i * 1.1 + 0.5) + 'em');
			}
			if (hasBaseline){
				row.setAttribute('dominant-baseline', baseline);
				content = row;
			} else if (paths){
				content = createElement('tspan');
				content.setAttribute('dy', '0.35em');
				row.appendChild(content);
			} else {
				content = row;
				row.setAttribute('y', (i * 1.1 + 0.85) + 'em');
			}
			DOM.preserveSpace(content);
			content.appendChild(DOM.createTextNode(line));
			element.appendChild(row);
		}
		
		// Measure
		// TODO: Move to lazy ES5 left/top/width/height/bottom/right property getters
		var bb;
		try { bb = element.getBBox(); } catch (x){ }
		if (!bb || !bb.width) bb = this._whileInDocument(element.getBBox, element);
		
		this.left = bb.x;
		this.top = bb.y;
		this.width = bb.width;
		this.height = bb.height;
		this.right = bb.x + bb.width;
		this.bottom = bb.y + bb.height;
		return this;
	},
	
	// TODO: Unify path injection with gradients and imagefills

	base_place: Base.prototype._place,

	_place: function(){
		if (this.parentNode){
			this._injectPaths();
		} else {
			this._ejectPaths();
		}
		return this.base_place();
	},
	
	_injectPaths: function(){
		var paths = this.pathElements;
		if (!this.parentNode || !paths) return;
		var defs = this.parentNode.defs;
		for (var i = 0, l = paths.length; i < l; i++)
			defs.appendChild(paths[i]);
	},
	
	_ejectPaths: function(){
		var paths = this.pathElements;
		if (!paths) return;
		for (var i = 0, l = paths; i < l; i++){
			var path = paths[i];
			if (path.parentNode)
				path.parentNode.removeChild(paths[i]);
		}
	},
	
	_createPaths: function(path){
		this._ejectPaths();
		var id = 'p' + DOM.uniqueID() + '-';

		//splitPaths = []; splitPath = ['M', 0, 0];
		//path.visit(splitLine, splitCurve, null, splitMove);
		//splitPaths.push(splitPath);
		var splitPaths = [path.path];
		
		var result = [];
		for (var i = 0, l = splitPaths.length; i < l; i++){
			var p = createElement('path');
			p.setAttribute('d', splitPaths[i].join(' '));
			p.setAttribute('id', id + i);
			result.push(p);
		}
		this.pathElements = result;
		this._injectPaths();
	},
	
	_whileInDocument: function(fn, bind){
		// Temporarily inject into the document
		var element = this.element,
		    container = this.parentNode,
			parent = element.parentNode,
			sibling = element.nextSibling,
			body = element.ownerDocument.body,
			canvas = new Surface(1, 1).inject(body);
		this.inject(canvas);
		var result = fn.call(bind);
		canvas.eject();
		if (container) this.inject(container);
		if (parent) parent.insertBefore(element, sibling);
		return result;
	}

});

/* split each continuous line into individual paths */

/*
var pathSplitter = new CorePath();
pathSplitter.splitPaths = [];

var PathPerRow = Class(CorePath, {

function splitMove(sx, sy, x, y){
	if (splitPath.length > 3) splitPaths.push(splitPath);
	splitPath = ['M', x, y];
};

function splitLine(sx, sy, x, y){
	splitPath.push('L', x, y);
};

function splitCurve(sx, sy, p1x, p1y, p2x, p2y, x, y){
	splitPath.push('C', p1x, p1y, p2x, p2y, x, y);
};

});*/

},{"../../core/class":309,"./base":328,"./dom":329,"./path":332,"./surface":334}],336:[function(require,module,exports){
var Class = require('../../core/class');
var Transform = require('../../core/transform');
var Color = require('../../core/color');
var Node = require('./node');
var DOM = require('./dom');

var precision = 100;

var defaultBox = { left: 0, top: 0, width: 500, height: 500 };

module.exports = Class(Node, {

	element_initialize: Node.prototype.initialize,

	initialize: function(tag){
		this.element_initialize(tag);
		var element = this.element;
		
		var skew = this.skewElement = DOM.createElement('skew');
		skew.on = true;
		element.appendChild(skew);

		var fill = this.fillElement = DOM.createElement('fill');
		fill.on = false;
		element.appendChild(fill);
		
		var stroke = this.strokeElement = DOM.createElement('stroke');
		stroke.on = false;
		element.appendChild(stroke);
	},
	
	/* transform */
	
	_transform: function(){
		var container = this.parentNode;
		
		// Active Transformation Matrix
		var m = container ? new Transform(container._activeTransform).transform(this) : this;
		
		// Box in shape user space
		
		var box = this._boxCoords || this._size || defaultBox;
		
		var originX = box.left || 0,
			originY = box.top || 0,
			width = box.width || 1,
			height = box.height || 1;
				
		// Flipped
	    var flip = m.yx / m.xx > m.yy / m.xy;
		if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = !flip;
		flip = flip ? -1 : 1;
		
		m = new Transform().scale(flip, 1).transform(m);
		
		// Rotation is approximated based on the transform
		var rotation = Math.atan2(-m.xy, m.yy) * 180 / Math.PI;
		
		// Reverse the rotation, leaving the final transform in box space
		var rad = rotation * Math.PI / 180, sin = Math.sin(rad), cos = Math.cos(rad);
		
		var transform = new Transform(
			(m.xx * cos - m.xy * sin),
			(m.yx * cos - m.yy * sin) * flip,
			(m.xy * cos + m.xx * sin) * flip,
			(m.yy * cos + m.yx * sin)
		);

		var rotationTransform = new Transform().rotate(rotation, 0, 0);

		var shapeToBox = new Transform().rotate(-rotation, 0, 0).transform(m).moveTo(0,0);

		// Scale box after reversing rotation
		width *= Math.abs(shapeToBox.xx);
		height *= Math.abs(shapeToBox.yy);
		
		// Place box
		var left = m.x, top = m.y;
		
		// Compensate for offset by center origin rotation
		var vx = -width / 2, vy = -height / 2;
		var point = rotationTransform.point(vx, vy);
		left -= point.x - vx;
		top -= point.y - vy;
		
		// Adjust box position based on offset
		var rsm = new Transform(m).moveTo(0,0);
		point = rsm.point(originX, originY);
		left += point.x;
		top += point.y;
		
		if (flip < 0) left = -left - width;
		
		// Place transformation origin
		var point0 = rsm.point(-originX, -originY);
		var point1 = rotationTransform.point(width, height);
		var point2 = rotationTransform.point(width, 0);
		var point3 = rotationTransform.point(0, height);
		
		var minX = Math.min(0, point1.x, point2.x, point3.x),
		    maxX = Math.max(0, point1.x, point2.x, point3.x),
		    minY = Math.min(0, point1.y, point2.y, point3.y),
		    maxY = Math.max(0, point1.y, point2.y, point3.y);
		
		var transformOriginX = (point0.x - point1.x / 2) / (maxX - minX) * flip,
		    transformOriginY = (point0.y - point1.y / 2) / (maxY - minY);
		
		// Adjust the origin
		point = shapeToBox.point(originX, originY);
		originX = point.x;
		originY = point.y;
		
		// Scale stroke
		var strokeWidth = this._strokeWidth;
		if (strokeWidth){
			// Scale is the hypothenus between the two vectors
			// TODO: Use area calculation instead
			var vx = m.xx + m.xy, vy = m.yy + m.yx;
			strokeWidth *= Math.sqrt(vx * vx + vy * vy) / Math.sqrt(2);
		}
		
		// convert to multiplied precision space
		originX *= precision;
		originY *= precision;
		left *= precision;
		top *= precision;
		width *= precision;
		height *= precision;
		
		// Set box
		var element = this.element;
		element.coordorigin = originX + ',' + originY;
		element.coordsize = width + ',' + height;
		element.style.left = left + 'px';
		element.style.top = top + 'px';
		element.style.width = width;
		element.style.height = height;
		element.style.rotation = rotation.toFixed(8);
		element.style.flip = flip < 0 ? 'x' : '';
		
		// Set transform
		var skew = this.skewElement;
		skew.matrix = [transform.xx.toFixed(4), transform.xy.toFixed(4), transform.yx.toFixed(4), transform.yy.toFixed(4), 0, 0];
		skew.origin = transformOriginX + ',' + transformOriginY;

		// Set stroke
		this.strokeElement.weight = strokeWidth + 'px';
	},
	
	/* styles */

	_createGradient: function(style, stops){
		var fill = this.fillElement;

		// Temporarily eject the fill from the DOM
		this.element.removeChild(fill);

		fill.type = style;
		fill.method = 'none';
		fill.rotate = true;

		var colors = [], color1, color2;

		var addColor = function(offset, color){
			color = Color.detach(color);
			if (color1 == null) color1 = color2 = color;
			else color2 = color;
			colors.push(offset + ' ' + color[0]);
		};

		// Enumerate stops, assumes offsets are enumerated in order
		if ('length' in stops) for (var i = 0, l = stops.length - 1; i <= l; i++) addColor(i / l, stops[i]);
		else for (var offset in stops) addColor(offset, stops[offset]);
		
		fill.color = color1[0];
		fill.color2 = color2[0];
		
		//if (fill.colors) fill.colors.value = colors; else
		fill.colors = colors;

		// Opacity order gets flipped when color stops are specified
		fill.opacity = color2[1];
		fill['ao:opacity2'] = color1[1];

		fill.on = true;
		this.element.appendChild(fill);
		return fill;
	},
	
	_setColor: function(type, color){
		var element = type == 'fill' ? this.fillElement : this.strokeElement;
		if (color == null){
			element.on = false;
		} else {
			color = Color.detach(color);
			element.color = color[0];
			element.opacity = color[1];
			element.on = true;
		}
	},
	
	fill: function(color){
		if (arguments.length > 1){
			this.fillLinear(arguments);
		} else {
			this._boxCoords = defaultBox;
			var fill = this.fillElement;
			fill.type = 'solid';
			fill.color2 = '';
			fill['ao:opacity2'] = '';
			if (fill.colors) fill.colors.value = '';
			this._setColor('fill', color);
		}
		return this;
	},

	fillRadial: function(stops, focusX, focusY, radiusX, radiusY, centerX, centerY){
		var fill = this._createGradient('gradientradial', stops);
		if (focusX == null) focusX = this.left + this.width * 0.5;
		if (focusY == null) focusY = this.top + this.height * 0.5;
		if (radiusY == null) radiusY = radiusX || (this.height * 0.5);
		if (radiusX == null) radiusX = this.width * 0.5;
		if (centerX == null) centerX = focusX;
		if (centerY == null) centerY = focusY;
		
		centerX += centerX - focusX;
		centerY += centerY - focusY;
		
		var box = this._boxCoords = {
			left: centerX - radiusX * 2,
			top: centerY - radiusY * 2,
			width: radiusX * 4,
			height: radiusY * 4
		};
		focusX -= box.left;
		focusY -= box.top;
		focusX /= box.width;
		focusY /= box.height;

		fill.focussize = '0 0';
		fill.focusposition = focusX + ',' + focusY;
		fill.focus = '50%';
		
		this._transform();
		
		return this;
	},

	fillLinear: function(stops, x1, y1, x2, y2){
		var fill = this._createGradient('gradient', stops);
		fill.focus = '100%';
		if (arguments.length == 5){
			var w = Math.abs(x2 - x1), h = Math.abs(y2 - y1);
			this._boxCoords = {
				left: Math.min(x1, x2),
				top: Math.min(y1, y2),
				width: w < 1 ? h : w,
				height: h < 1 ? w : h
			};
			fill.angle = (360 + Math.atan2((x2 - x1) / h, (y2 - y1) / w) * 180 / Math.PI) % 360;
		} else {
			this._boxCoords = null;
			fill.angle = (x1 == null) ? 0 : (90 + x1) % 360;
		}
		this._transform();
		return this;
	},

	fillImage: function(url, width, height, left, top, color1, color2){
		var fill = this.fillElement;
		if (color1 != null){
			color1 = Color.detach(color1);
			if (color2 != null) color2 = Color.detach(color2);
			fill.type = 'pattern';
			fill.color = color1[0];
			fill.color2 = color2 == null ? color1[0] : color2[0];
			fill.opacity = color2 == null ? 0 : color2[1];
			fill['ao:opacity2'] = color1[1];
		} else {
			fill.type = 'tile';
			fill.color = '';
			fill.color2 = '';
			fill.opacity = 1;
			fill['ao:opacity2'] = 1;
		}
		if (fill.colors) fill.colors.value = '';
		fill.rotate = true;
		fill.src = url;
		
		fill.size = '1,1';
		fill.position = '0,0';
		fill.origin = '0,0';
		fill.aspect = 'ignore'; // ignore, atleast, atmost
		fill.on = true;

		if (!left) left = 0;
		if (!top) top = 0;
		this._boxCoords = width ? { left: left + 0.5, top: top + 0.5, width: width, height: height } : null;
		this._transform();
		return this;
	},

	/* stroke */
	
	stroke: function(color, width, cap, join){
		var stroke = this.strokeElement;
		this._strokeWidth = (width != null) ? width : 1;
		stroke.weight = (width != null) ? width + 'px' : 1;
		stroke.endcap = (cap != null) ? ((cap == 'butt') ? 'flat' : cap) : 'round';
		stroke.joinstyle = (join != null) ? join : 'round';

		this._setColor('stroke', color);
		return this;
	}

});
},{"../../core/class":309,"../../core/color":310,"../../core/transform":312,"./dom":338,"./node":340}],337:[function(require,module,exports){
var Class = require('../../core/class');
var Transform = require('../../core/transform');
var Container = require('../../dom/container');
var Node = require('./node');

module.exports = Class(Node, Container, {

  element_initialize: Node.prototype.initialize,

  initialize: function(width, height){
    this.element_initialize('clippingrectangle');
    this.width = width;
    this.height = height;
  },

  _transform: function(){
    var element = this.element;
    element.clip = true;
    element.coordorigin = -this.x + ',' + (-1 * this.y);
    element.coordsize = this.width + ',' + this.height;
    // IE8 doesn't like clipBottom.  Don't ask me why.
    // element.style.clipBottom = this.height + this.y;
    element.style.clipLeft = this.x;
    element.style.clipRight = this.width + this.x;
    element.style.clipTop = this.y;
    element.style.left = -this.x;
    element.style.top = -this.y;
    element.style.width = this.width + this.x;
    element.style.height = this.height + this.y;
    element.style.rotation = 0;

    var container = this.parentNode;
    this._activeTransform = container ? new Transform(container._activeTransform).transform(this) : this;
    var node = this.firstChild;
    while (node){
      node._transform();
      node = node.nextSibling;
    }
  }

});

},{"../../core/class":309,"../../core/transform":312,"../../dom/container":313,"./node":340}],338:[function(require,module,exports){
var VMLCSS = 'behavior:url(#default#VML);display:inline-block;position:absolute;left:0px;top:0px;';

var styleSheet, styledTags = {}, styleTag = function(tag){
	if (styleSheet) styledTags[tag] = styleSheet.addRule('av\\:' + tag, VMLCSS);
};

exports.init = function(document){

	var namespaces;
	try { // IE9 workaround: sometimes it throws here
		namespaces = document.namespaces;
	} catch (e) {
	}
	if (!namespaces) return false;

	namespaces.add('av', 'urn:schemas-microsoft-com:vml');
	namespaces.add('ao', 'urn:schemas-microsoft-com:office:office');

	styleSheet = document.createStyleSheet();
	styleSheet.addRule('vml', 'display:inline-block;position:relative;overflow:hidden;');
/*	styleTag('skew');
	styleTag('fill');
	styleTag('stroke');
	styleTag('path');
	styleTag('textpath');
	styleTag('group');*/

	styleTag('vml');

	return true;

};

exports.createElement = function(tag){
	if (!(tag in styledTags)) styleTag(tag);
	return document.createElement('av:' + tag);
};

},{}],339:[function(require,module,exports){
var Class = require('../../core/class');
var Transform = require('../../core/transform');
var Container = require('../../dom/container');
var Node = require('./node');

module.exports = Class(Node, Container, {
	
	element_initialize: Node.prototype.initialize,
	
	initialize: function(width, height){
		this.element_initialize('group');
		this.width = width;
		this.height = height;
	},

	_transform: function(){
		var element = this.element;
		element.coordorigin = '0,0';
		element.coordsize = '1000,1000';
		element.style.left = 0;
		element.style.top = 0;
		element.style.width = 1000;
		element.style.height = 1000;
		element.style.rotation = 0;
		
		var container = this.parentNode;
		this._activeTransform = container ? new Transform(container._activeTransform).transform(this) : this;
		var node = this.firstChild;
		while (node){
			node._transform();
			node = node.nextSibling;
		}
	}

});
},{"../../core/class":309,"../../core/transform":312,"../../dom/container":313,"./node":340}],340:[function(require,module,exports){
var Class = require('../../core/class');
var Transform = require('../../core/transform');
var Element = require('../../dom/shadow');
var DOM = require('./dom');

module.exports = Class(Element, Transform, {

	initialize: function(tag){
		//this.uid = uniqueID();
		var element = this.element = DOM.createElement(tag);
		//element.setAttribute('id', 'e' + this.uid);
	},

	_place: function(){
		if (this.parentNode){
			this._transform();
		}
	},

	// visibility

	hide: function(){
		this.element.style.display = 'none';
		return this;
	},

	show: function(){
		this.element.style.display = '';
		return this;
	},

	// interaction

	indicate: function(cursor, tooltip){
		if (cursor) this.element.style.cursor = cursor;
		if (tooltip) this.element.title = tooltip;
		return this;
	}

});

},{"../../core/class":309,"../../core/transform":312,"../../dom/shadow":316,"./dom":338}],341:[function(require,module,exports){
var Class = require('../../core/class');
var Path = require('../../core/path');

var precision = 100;

var round = Math.round;

var VMLPath = Class(Path, {

	initialize: function(path){
		this.reset();
		if (path instanceof VMLPath){
			this.path = [Array.prototype.join.call(path.path, ' ')];
		} else if (path){
			if (path.applyToPath)
				path.applyToPath(this);
			else
				this.push(path);
		}
	},

	onReset: function(){
		this.path = [];
	},

	onMove: function(sx, sy, x, y){
		this.path.push('m', round(x * precision), round(y * precision));
	},

	onLine: function(sx, sy, x, y){
		this.path.push('l', round(x * precision), round(y * precision));
	},

	onBezierCurve: function(sx, sy, p1x, p1y, p2x, p2y, x, y){
		this.path.push('c',
			round(p1x * precision), round(p1y * precision),
			round(p2x * precision), round(p2y * precision),
			round(x * precision), round(y * precision)
		);
	},

	_arcToBezier: Path.prototype.onArc,

	onArc: function(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation){
		if (rx != ry || rotation) return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
		cx *= precision;
		cy *= precision;
		rx *= precision;
		this.path.push(ccw ? 'at' : 'wa',
			round(cx - rx), round(cy - rx),
			round(cx + rx), round(cy + rx),
			round(sx * precision), round(sy * precision),
			round(ex * precision), round(ey * precision)
		);
	},

	onClose: function(){
		this.path.push('x');
	},

	toVML: function(){
		return this.path.join(' ');
	}

});

VMLPath.prototype.toString = VMLPath.prototype.toVML;

module.exports = VMLPath;
},{"../../core/class":309,"../../core/path":311}],342:[function(require,module,exports){
var Class = require('../../core/class');
var Base = require('./base');
var Path = require('./path');
var DOM = require('./dom');

var precision = 100;

module.exports = Class(Base, {

	base_initialize: Base.prototype.initialize,
	
	initialize: function(path, width, height){
		this.base_initialize('shape');

		var p = this.pathElement = DOM.createElement('path');
		p.gradientshapeok = true;
		this.element.appendChild(p);
		
		this.width = width;
		this.height = height;
		
		if (path != null) this.draw(path);
	},
	
	// SVG to VML
	
	draw: function(path, width, height){
		
		if (!(path instanceof Path)) path = new Path(path);
		this._vml = path.toVML();
		//this._size = path.measure();
		
		if (width != null) this.width = width;
		if (height != null) this.height = height;
		
		if (!this._boxCoords) this._transform();
		this._redraw(this._prefix, this._suffix);
		
		return this;
	},
	
	// radial gradient workaround

	_redraw: function(prefix, suffix){
		var vml = this._vml || '';

		this._prefix = prefix;
		this._suffix = suffix
		if (prefix){
			vml = [
				prefix, vml, suffix,
				// Don't stroke the path with the extra ellipse, redraw the stroked path separately
				'ns e', vml, 'nf'
			].join(' ');
		}

		this.element.path = vml + 'e';
	},

	fillRadial: function(stops, focusX, focusY, radiusX, radiusY, centerX, centerY){
		var fill = this._createGradient('gradientradial', stops);
		if (focusX == null) focusX = (this.left || 0) + (this.width || 0) * 0.5;
		if (focusY == null) focusY = (this.top || 0) + (this.height || 0) * 0.5;
		if (radiusY == null) radiusY = radiusX || (this.height * 0.5) || 0;
		if (radiusX == null) radiusX = (this.width || 0) * 0.5;
		if (centerX == null) centerX = focusX;
		if (centerY == null) centerY = focusY;

		centerX += centerX - focusX;
		centerY += centerY - focusY;
		
		var cx = Math.round(centerX * precision),
			cy = Math.round(centerY * precision),

			rx = Math.round(radiusX * 2 * precision),
			ry = Math.round(radiusY * 2 * precision),

			arc = ['wa', cx - rx, cy - ry, cx + rx, cy + ry].join(' ');

		this._redraw(
			// Resolve rendering bug
			['m', cx, cy - ry, 'l', cx, cy - ry].join(' '),
			// Draw an ellipse around the path to force an elliptical gradient on any shape
			[
				'm', cx, cy - ry,
				arc, cx, cy - ry, cx, cy + ry, arc, cx, cy + ry, cx, cy - ry,
				arc, cx, cy - ry, cx, cy + ry, arc, cx, cy + ry, cx, cy - ry
			].join(' ')
		);

		this._boxCoords = { left: focusX - 2, top: focusY - 2, width: 4, height: 4 };
		
		fill.focusposition = '0.5,0.5';
		fill.focussize = '0 0';
		fill.focus = '50%';
		
		this._transform();
		
		return this;
	}

});
},{"../../core/class":309,"./base":336,"./dom":338,"./path":341}],343:[function(require,module,exports){
var Class = require('../../core/class');
var Container = require('../../dom/container');
var Element = require('../../dom/native');
var DOM = require('./dom');

var precision = 100;

var VMLSurface = Class(Element, Container, {
	
	initialize: function VMLSurface(width, height, existingElement){
		this.element = existingElement || document.createElement('vml');
		this.containerElement = DOM.createElement('group');
		this.element.appendChild(this.containerElement);
		if (width != null && height != null) this.resize(width, height);
	},

	resize: function(width, height){
		this.width = width;
		this.height = height;
		
		var style = this.element.style;
		style.pixelWidth = width;
		style.pixelHeight = height;
		
		style = this.containerElement.style;
		style.width = width;
		style.height = height;
		
		var halfPixel = (0.5 * precision);
		
		this.containerElement.coordorigin = halfPixel + ',' + halfPixel;
		this.containerElement.coordsize = (width * precision) + ',' + (height * precision);

		return this;
	}
	
});

VMLSurface.tagName = 'av:vml';

module.exports = VMLSurface;
},{"../../core/class":309,"../../dom/container":313,"../../dom/native":315,"./dom":338}],344:[function(require,module,exports){
var Class = require('../../core/class');
var Base = require('./base');
var Path = require('./path');
var Surface = require('./surface');
var Group = require('./group');
var DOM = require('./dom');

var fontAnchors = { start: 'left', middle: 'center', end: 'right' };

module.exports = Class(Base, {

	base_initialize: Base.prototype.initialize,

	initialize: function(text, font, alignment, path){
		this.base_initialize('shape');
		
		var p = this.pathElement = DOM.createElement('path');
		p.textpathok = true;
		this.element.appendChild(p);
		
		p = this.textPathElement = DOM.createElement("textpath");
		p.on = true;
		p.style['v-text-align'] = 'left';
		this.element.appendChild(p);
		
		this.draw.apply(this, arguments);
	},
	
	draw: function(text, font, alignment, path){
		var element = this.element,
		    textPath = this.textPathElement,
		    style = textPath.style;
		
		textPath.string = text;
		
		if (font){
			if (typeof font == 'string'){
				style.font = font;
			} else {
				for (var key in font){
					var ckey = key.camelCase ? key.camelCase() : key;
					if (ckey == 'fontFamily') style[ckey] = "'" + font[key] + "'";
					// NOT UNIVERSALLY SUPPORTED OPTIONS
					// else if (ckey == 'kerning') style['v-text-kern'] = !!font[key];
					// else if (ckey == 'rotateGlyphs') style['v-rotate-letters'] = !!font[key];
					// else if (ckey == 'letterSpacing') style['v-text-spacing'] = Number(font[key]) + '';
					else style[ckey] = font[key];
				}
			}
		}
		
		if (alignment) style['v-text-align'] = fontAnchors[alignment] || alignment;
		
		if (path){
			this.currentPath = path = new Path(path);
			this.element.path = path.toVML();
		} else if (!this.currentPath){
			var i = -1, offsetRows = '\n';
			while ((i = text.indexOf('\n', i + 1)) > -1) offsetRows += '\n';
			textPath.string = offsetRows + textPath.string;
			this.element.path = 'm0,0l1,0';
		}
		
		// Measuring the bounding box is currently necessary for gradients etc.
		
		// Clone element because the element is dead once it has been in the DOM
		element = element.cloneNode(true);
		style = element.style;
		
		// Reset coordinates while measuring
		element.coordorigin = '0,0';
		element.coordsize = '10000,10000';
		style.left = '0px';
		style.top = '0px';
		style.width = '10000px';
		style.height = '10000px';
		style.rotation = 0;
		element.removeChild(element.firstChild); // Remove skew
		
		// Inject the clone into the document
		
		var canvas = new Surface(1, 1),
		    group = new Group(), // Wrapping it in a group seems to alleviate some client rect weirdness
		    body = element.ownerDocument.body;
		
		canvas.inject(body);
		group.element.appendChild(element);
		group.inject(canvas);
		
		var ebb = element.getBoundingClientRect(),
		    cbb = canvas.toElement().getBoundingClientRect();
		
		canvas.eject();
		
		this.left = ebb.left - cbb.left;
		this.top = ebb.top - cbb.top;
		this.width = ebb.right - ebb.left;
		this.height = ebb.bottom - ebb.top;
		this.right = ebb.right - cbb.left;
		this.bottom = ebb.bottom - cbb.top;
		
		this._transform();

		//this._size = { left: this.left, top: this.top, width: this.width, height: this.height};
		return this;
	}

});

},{"../../core/class":309,"./base":336,"./dom":338,"./group":339,"./path":341,"./surface":343}],345:[function(require,module,exports){

},{}],346:[function(require,module,exports){
require('../modules/es6.symbol');
require('../modules/es6.object.to-string');
module.exports = require('../modules/_core').Symbol;
},{"../modules/_core":351,"../modules/es6.object.to-string":395,"../modules/es6.symbol":396}],347:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],348:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":367}],349:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length')
  , toIndex   = require('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":386,"./_to-iobject":388,"./_to-length":389}],350:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],351:[function(require,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],352:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":347}],353:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],354:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":359}],355:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":360,"./_is-object":367}],356:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],357:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys')
  , gOPS    = require('./_object-gops')
  , pIE     = require('./_object-pie');
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};
},{"./_object-gops":377,"./_object-keys":379,"./_object-pie":380}],358:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , ctx       = require('./_ctx')
  , hide      = require('./_hide')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":351,"./_ctx":352,"./_global":360,"./_hide":362}],359:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],360:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],361:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],362:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":354,"./_object-dp":372,"./_property-desc":381}],363:[function(require,module,exports){
module.exports = require('./_global').document && document.documentElement;
},{"./_global":360}],364:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":354,"./_dom-create":355,"./_fails":359}],365:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":350}],366:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};
},{"./_cof":350}],367:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],368:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./_object-keys":379,"./_to-iobject":388}],369:[function(require,module,exports){
module.exports = true;
},{}],370:[function(require,module,exports){
var META     = require('./_uid')('meta')
  , isObject = require('./_is-object')
  , has      = require('./_has')
  , setDesc  = require('./_object-dp').f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !require('./_fails')(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};
},{"./_fails":359,"./_has":361,"./_is-object":367,"./_object-dp":372,"./_uid":391}],371:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = require('./_an-object')
  , dPs         = require('./_object-dps')
  , enumBugKeys = require('./_enum-bug-keys')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe')
    , i      = enumBugKeys.length
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write('<script>document.F=Object</script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};
},{"./_an-object":348,"./_dom-create":355,"./_enum-bug-keys":356,"./_html":363,"./_object-dps":373,"./_shared-key":384}],372:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":348,"./_descriptors":354,"./_ie8-dom-define":364,"./_to-primitive":390}],373:[function(require,module,exports){
var dP       = require('./_object-dp')
  , anObject = require('./_an-object')
  , getKeys  = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};
},{"./_an-object":348,"./_descriptors":354,"./_object-dp":372,"./_object-keys":379}],374:[function(require,module,exports){
var pIE            = require('./_object-pie')
  , createDesc     = require('./_property-desc')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , has            = require('./_has')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};
},{"./_descriptors":354,"./_has":361,"./_ie8-dom-define":364,"./_object-pie":380,"./_property-desc":381,"./_to-iobject":388,"./_to-primitive":390}],375:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject')
  , gOPN      = require('./_object-gopn').f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":376,"./_to-iobject":388}],376:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = require('./_object-keys-internal')
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};
},{"./_enum-bug-keys":356,"./_object-keys-internal":378}],377:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],378:[function(require,module,exports){
var has          = require('./_has')
  , toIObject    = require('./_to-iobject')
  , arrayIndexOf = require('./_array-includes')(false)
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":349,"./_has":361,"./_shared-key":384,"./_to-iobject":388}],379:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = require('./_object-keys-internal')
  , enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":356,"./_object-keys-internal":378}],380:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],381:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],382:[function(require,module,exports){
module.exports = require('./_hide');
},{"./_hide":362}],383:[function(require,module,exports){
var def = require('./_object-dp').f
  , has = require('./_has')
  , TAG = require('./_wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./_has":361,"./_object-dp":372,"./_wks":394}],384:[function(require,module,exports){
var shared = require('./_shared')('keys')
  , uid    = require('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":385,"./_uid":391}],385:[function(require,module,exports){
var global = require('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":360}],386:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":387}],387:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],388:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject')
  , defined = require('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":353,"./_iobject":365}],389:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":387}],390:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":367}],391:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],392:[function(require,module,exports){
var global         = require('./_global')
  , core           = require('./_core')
  , LIBRARY        = require('./_library')
  , wksExt         = require('./_wks-ext')
  , defineProperty = require('./_object-dp').f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};
},{"./_core":351,"./_global":360,"./_library":369,"./_object-dp":372,"./_wks-ext":393}],393:[function(require,module,exports){
exports.f = require('./_wks');
},{"./_wks":394}],394:[function(require,module,exports){
var store      = require('./_shared')('wks')
  , uid        = require('./_uid')
  , Symbol     = require('./_global').Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
},{"./_global":360,"./_shared":385,"./_uid":391}],395:[function(require,module,exports){
arguments[4][345][0].apply(exports,arguments)
},{"dup":345}],396:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global         = require('./_global')
  , has            = require('./_has')
  , DESCRIPTORS    = require('./_descriptors')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , META           = require('./_meta').KEY
  , $fails         = require('./_fails')
  , shared         = require('./_shared')
  , setToStringTag = require('./_set-to-string-tag')
  , uid            = require('./_uid')
  , wks            = require('./_wks')
  , wksExt         = require('./_wks-ext')
  , wksDefine      = require('./_wks-define')
  , keyOf          = require('./_keyof')
  , enumKeys       = require('./_enum-keys')
  , isArray        = require('./_is-array')
  , anObject       = require('./_an-object')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , createDesc     = require('./_property-desc')
  , _create        = require('./_object-create')
  , gOPNExt        = require('./_object-gopn-ext')
  , $GOPD          = require('./_object-gopd')
  , $DP            = require('./_object-dp')
  , $keys          = require('./_object-keys')
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f  = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !require('./_library')){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);
},{"./_an-object":348,"./_descriptors":354,"./_enum-keys":357,"./_export":358,"./_fails":359,"./_global":360,"./_has":361,"./_hide":362,"./_is-array":366,"./_keyof":368,"./_library":369,"./_meta":370,"./_object-create":371,"./_object-dp":372,"./_object-gopd":374,"./_object-gopn":376,"./_object-gopn-ext":375,"./_object-gops":377,"./_object-keys":379,"./_object-pie":380,"./_property-desc":381,"./_redefine":382,"./_set-to-string-tag":383,"./_shared":385,"./_to-iobject":388,"./_to-primitive":390,"./_uid":391,"./_wks":394,"./_wks-define":392,"./_wks-ext":393}],397:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = require('./invariant');

/**
 * The CSSCore module specifies the API (and implements most of the methods)
 * that should be used when dealing with the display of elements (via their
 * CSS classes and visibility on screen. It is an API focused on mutating the
 * display and not reading it as no logical state should be encoded in the
 * display of elements.
 */

/* Slow implementation for browsers that don't natively support .matches() */
function matchesSelector_SLOW(element, selector) {
  var root = element;
  while (root.parentNode) {
    root = root.parentNode;
  }

  var all = root.querySelectorAll(selector);
  return Array.prototype.indexOf.call(all, element) !== -1;
}

var CSSCore = {

  /**
   * Adds the class passed in to the element if it doesn't already have it.
   *
   * @param {DOMElement} element the element to set the class on
   * @param {string} className the CSS className
   * @return {DOMElement} the element passed in
   */
  addClass: function (element, className) {
    !!/\s/.test(className) ? "test" !== 'production' ? invariant(false, 'CSSCore.addClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : void 0;

    if (className) {
      if (element.classList) {
        element.classList.add(className);
      } else if (!CSSCore.hasClass(element, className)) {
        element.className = element.className + ' ' + className;
      }
    }
    return element;
  },

  /**
   * Removes the class passed in from the element
   *
   * @param {DOMElement} element the element to set the class on
   * @param {string} className the CSS className
   * @return {DOMElement} the element passed in
   */
  removeClass: function (element, className) {
    !!/\s/.test(className) ? "test" !== 'production' ? invariant(false, 'CSSCore.removeClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : void 0;

    if (className) {
      if (element.classList) {
        element.classList.remove(className);
      } else if (CSSCore.hasClass(element, className)) {
        element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ') // multiple spaces to one
        .replace(/^\s*|\s*$/g, ''); // trim the ends
      }
    }
    return element;
  },

  /**
   * Helper to add or remove a class from an element based on a condition.
   *
   * @param {DOMElement} element the element to set the class on
   * @param {string} className the CSS className
   * @param {*} bool condition to whether to add or remove the class
   * @return {DOMElement} the element passed in
   */
  conditionClass: function (element, className, bool) {
    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
  },

  /**
   * Tests whether the element has the class specified.
   *
   * @param {DOMNode|DOMWindow} element the element to check the class on
   * @param {string} className the CSS className
   * @return {boolean} true if the element has the class, false if not
   */
  hasClass: function (element, className) {
    !!/\s/.test(className) ? "test" !== 'production' ? invariant(false, 'CSS.hasClass takes only a single class name.') : invariant(false) : void 0;
    if (element.classList) {
      return !!className && element.classList.contains(className);
    }
    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
  },

  /**
   * Tests whether the element matches the selector specified
   *
   * @param {DOMNode|DOMWindow} element the element that we are querying
   * @param {string} selector the CSS selector
   * @return {boolean} true if the element matches the selector, false if not
   */
  matchesSelector: function (element, selector) {
    var matchesImpl = element.matches || element.webkitMatchesSelector || element.mozMatchesSelector || element.msMatchesSelector || function (s) {
      return matchesSelector_SLOW(element, s);
    };
    return matchesImpl.call(element, selector);
  }

};

module.exports = CSSCore;
},{"./invariant":414}],398:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks
 */

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function () {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if ("test" !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function () {}
};

module.exports = EventListener;
},{"./emptyFunction":406}],399:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],400:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

var TouchEventUtils = {
  /**
   * Utility function for common case of extracting out the primary touch from a
   * touch event.
   * - `touchEnd` events usually do not have the `touches` property.
   *   http://stackoverflow.com/questions/3666929/
   *   mobile-sarai-touchend-event-not-firing-when-last-touch-is-removed
   *
   * @param {Event} nativeEvent Native event that may or may not be a touch.
   * @return {TouchesObject?} an object with pageX and pageY or null.
   */
  extractSingleTouch: function (nativeEvent) {
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;

    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
  }
};

module.exports = TouchEventUtils;
},{}],401:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],402:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":401}],403:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;
},{"./isTextNode":416}],404:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? "test" !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? "test" !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? "test" !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? "test" !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return(
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
},{"./invariant":414}],405:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? "test" !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? "test" !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
},{"./ExecutionEnvironment":399,"./createArrayFromMixed":404,"./getMarkupWrap":410,"./invariant":414}],406:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],407:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyObject = {};

if ("test" !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
},{}],408:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],409:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 */
function getActiveElement() /*?DOMElement*/{
  if (typeof document === 'undefined') {
    return null;
  }
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;
},{}],410:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? "test" !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
},{"./ExecutionEnvironment":399,"./invariant":414}],411:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],412:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],413:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":412}],414:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

function invariant(condition, format, a, b, c, d, e, f) {
  if ("test" !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
},{}],415:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],416:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":415}],417:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 */

'use strict';

var invariant = require('./invariant');

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function (obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? "test" !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
},{"./invariant":414}],418:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without losing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function (oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
},{}],419:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;
},{}],420:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],421:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":399}],422:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = require('./performance');

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function () {
    return performance.now();
  };
} else {
  performanceNow = function () {
    return Date.now();
  };
}

module.exports = performanceNow;
},{"./performance":421}],423:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return x !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],424:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("test" !== 'production') {
  warning = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    }
  };
}

module.exports = warning;
},{"./emptyFunction":406}],425:[function(require,module,exports){
'use strict';
/* eslint-disable no-unused-vars */
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (e) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],426:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":427}],427:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[59,1,2,3,4,13,14,23,25,304,305,300,306,301,307,308,9,10,15,16,17,18,19,5,6,7,8,30,26,31,24,60,62,63,203,188,189,190,191,192,193,194,195,207,206,208,204,303,302,288,289,290,275,291,292,293,294,295,296,297,276,277,278,279,280,281,298,11,20,12,21,22,28,27,29,33,38,39,40,41,32,50,51,49,45,46,47,61,100,101,65,66,67,68,69,70,71,72,73,136,156,157,161,184,158,159,160,162,186,187,163,172,165,164,166,167,168,169,171,170,174,173,64,151,152,153,154,200,201,202,196,197,199,198,212,211,213,216,217,218,219,220,221,222,225,210,209,205,285,286,282,284,283,287,299,34,35,36,42,37,43,44,52,53,54,48,55,56,57,58,88,89,91,90,92,93,94,95,102,103,104,105,106,107,108,109,110,111,112,114,113,125,119,120,127,126,128,129,130,131,132,134,133,135,121,85,86,74,76,75,77,78,79,80,81,82,83,87,84,137,138,139,141,140,142,143,144,185,175,176,178,177,182,183,179,180,181,155,214,215,223,224,226,227,228,229,230,274,238,239,241,240,242,243,244,245,246,247,248,249,250,251,252,253,255,254,96,97,98,99,116,115,117,118,122,123,124,145,146,147,148,150,149,233,235,236,234,231,232,256,257,258,259,260,262,261,263,264,265,266,267,270,268,269,271,272,273,237]);
